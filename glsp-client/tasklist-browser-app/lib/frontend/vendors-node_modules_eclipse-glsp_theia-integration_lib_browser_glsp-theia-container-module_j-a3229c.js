"use strict";
(self["webpackChunktasklist_browser_app"] = self["webpackChunktasklist_browser_app"] || []).push([["vendors-node_modules_eclipse-glsp_theia-integration_lib_browser_glsp-theia-container-module_j-a3229c"],{

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/copy-paste-context-menu-contribution.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/copy-paste-context-menu-contribution.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CopyPasteMenuContribution_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CopyPasteMenuContribution = void 0;
exports.registerCopyPasteContextMenu = registerCopyPasteContextMenu;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const theia_glsp_context_menu_service_1 = __webpack_require__(/*! ./theia-glsp-context-menu-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-glsp-context-menu-service.js");
function registerCopyPasteContextMenu(context) {
    if (!context.isBound(CopyPasteMenuContribution)) {
        (0, client_1.bindAsService)(context, core_1.MenuContribution, CopyPasteMenuContribution);
    }
}
let CopyPasteMenuContribution = CopyPasteMenuContribution_1 = class CopyPasteMenuContribution {
    registerMenus(menus) {
        menus.registerMenuAction(CopyPasteMenuContribution_1.COPY_PASTE, {
            commandId: browser_1.CommonCommands.CUT.id,
            order: '0'
        });
        menus.registerMenuAction(CopyPasteMenuContribution_1.COPY_PASTE, {
            commandId: browser_1.CommonCommands.COPY.id,
            order: '1'
        });
        menus.registerMenuAction(CopyPasteMenuContribution_1.COPY_PASTE, {
            commandId: browser_1.CommonCommands.PASTE.id,
            order: '2'
        });
    }
};
exports.CopyPasteMenuContribution = CopyPasteMenuContribution;
CopyPasteMenuContribution.COPY_PASTE = theia_glsp_context_menu_service_1.TheiaGLSPContextMenu.CONTEXT_MENU.concat('copy-paste');
exports.CopyPasteMenuContribution = CopyPasteMenuContribution = CopyPasteMenuContribution_1 = __decorate([
    (0, inversify_1.injectable)()
], CopyPasteMenuContribution);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-manager.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-manager.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


/********************************************************************************
 * Copyright (c) 2018-2025 TypeFox and others.
 * Modifications: (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
// based on: https://github.com/eclipse-sprotty/sprotty-theia/blob/v0.12.0/src/theia/diagram-manager.ts
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPDiagramManager = void 0;
exports.registerDiagramManager = registerDiagramManager;
exports.deriveDiagramManagerId = deriveDiagramManagerId;
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const browser_2 = __webpack_require__(/*! @theia/editor/lib/browser */ "../node_modules/@theia/editor/lib/browser/index.js");
const diagram_service_provider_1 = __webpack_require__(/*! ../diagram-service-provider */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram-service-provider.js");
const theia_opener_options_navigation_service_1 = __webpack_require__(/*! ../theia-opener-options-navigation-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-opener-options-navigation-service.js");
const glsp_diagram_context_key_service_1 = __webpack_require__(/*! ./glsp-diagram-context-key-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-context-key-service.js");
const glsp_diagram_widget_1 = __webpack_require__(/*! ./glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js");
function registerDiagramManager(bind, diagramManagerServiceId, bindToSelf = true) {
    if (bindToSelf) {
        bind(diagramManagerServiceId).toSelf().inSingletonScope();
    }
    bind(browser_1.FrontendApplicationContribution).toService(diagramManagerServiceId);
    bind(browser_1.OpenHandler).toService(diagramManagerServiceId);
    bind(browser_1.WidgetFactory).toService(diagramManagerServiceId);
}
let GLSPDiagramManager = class GLSPDiagramManager extends browser_1.WidgetOpenHandler {
    constructor() {
        super(...arguments);
        this.widgetCount = 0;
        this.registerOpenWithHandler = true;
    }
    init() {
        super.init();
        if (this.registerOpenWithHandler) {
            this.openWithService.registerHandler(this);
        }
    }
    async doOpen(widget, uri, maybeOptions) {
        const options = {
            mode: 'activate',
            ...maybeOptions
        };
        if (!widget.isAttached) {
            this.attachWidget(widget, options);
        }
        if (options.mode === 'activate') {
            await widget.getSvgElement();
            await this.shell.activateWidget(widget.id);
        }
        else if (options.mode === 'reveal') {
            await this.shell.revealWidget(widget.id);
        }
        if (this.handleNavigations(widget, options)) {
            return;
        }
    }
    attachWidget(widget, options) {
        const currentEditor = this.editorManager.currentEditor;
        const widgetOptions = {
            area: 'main',
            ...(options && options.widgetOptions ? options.widgetOptions : {})
        };
        if (!!currentEditor && currentEditor.editor.uri.toString(true) === widget.uri.toString(true)) {
            widgetOptions.ref = currentEditor;
            widgetOptions.mode =
                options && options.widgetOptions && options.widgetOptions.mode ? options.widgetOptions.mode : 'open-to-right';
        }
        this.shell.addWidget(widget, widgetOptions);
    }
    handleNavigations(widget, options) {
        const navigations = this.diagramNavigationService.determineNavigations(widget.uri.toString(true), options);
        if (navigations.length > 0) {
            widget.actionDispatcher.dispatchOnceModelInitialized(...navigations);
            return true;
        }
        return false;
    }
    async createWidget(options) {
        if (glsp_diagram_widget_1.GLSPDiagramWidgetOptions.is(options)) {
            const config = this.getDiagramConfiguration(options);
            const diagramOptions = this.createDiagramOptions(options);
            const diContainer = config.createContainer(diagramOptions);
            const diagramWidgetFactory = this.diagramServiceProvider.getDiagramWidgetFactory(this.diagramType);
            const widget = diagramWidgetFactory === null || diagramWidgetFactory === void 0 ? void 0 : diagramWidgetFactory.create(options, diContainer);
            widget.listenToFocusState(this.shell);
            return widget;
        }
        throw Error('DiagramWidgetFactory needs DiagramWidgetOptions but got ' + JSON.stringify(options));
    }
    createDiagramOptions(options) {
        return {
            clientId: this.createClientId(),
            diagramType: options.diagramType,
            sourceUri: options.uri,
            editMode: options.editMode,
            glspClientProvider: () => this.diagramServiceProvider.getGLSPClientContribution(this.contributionId).glspClient
        };
    }
    createClientId() {
        return this.diagramType + '_' + this.widgetCount++;
    }
    createWidgetOptions(uri, options) {
        return {
            diagramType: this.diagramType,
            kind: 'navigatable',
            uri: uri.toString(true),
            iconClass: this.iconClass,
            label: uri.path.base,
            editMode: options && options.editMode ? options.editMode : client_1.EditMode.EDITABLE
        };
    }
    getDiagramConfiguration(options) {
        return this.diagramServiceProvider.getDiagramConfiguration(options.diagramType);
    }
    canHandle(uri, _options) {
        for (const extension of this.fileExtensions) {
            if (uri.path.toString().endsWith(extension)) {
                return 1001;
            }
        }
        return 0;
    }
    get id() {
        return deriveDiagramManagerId(this.diagramType);
    }
    get iconClass() {
        return (0, client_1.codiconCSSString)('type-hierarchy-sub');
    }
    get providerName() {
        return undefined;
    }
};
exports.GLSPDiagramManager = GLSPDiagramManager;
__decorate([
    (0, inversify_1.inject)(theia_opener_options_navigation_service_1.TheiaOpenerOptionsNavigationService),
    __metadata("design:type", theia_opener_options_navigation_service_1.TheiaOpenerOptionsNavigationService)
], GLSPDiagramManager.prototype, "diagramNavigationService", void 0);
__decorate([
    (0, inversify_1.inject)(glsp_diagram_context_key_service_1.GLSPDiagramContextKeyService),
    __metadata("design:type", glsp_diagram_context_key_service_1.GLSPDiagramContextKeyService)
], GLSPDiagramManager.prototype, "contextKeyService", void 0);
__decorate([
    (0, inversify_1.inject)(diagram_service_provider_1.DiagramServiceProvider),
    __metadata("design:type", diagram_service_provider_1.DiagramServiceProvider)
], GLSPDiagramManager.prototype, "diagramServiceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(browser_2.EditorManager),
    __metadata("design:type", browser_2.EditorManager)
], GLSPDiagramManager.prototype, "editorManager", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.OpenWithService),
    __metadata("design:type", browser_1.OpenWithService)
], GLSPDiagramManager.prototype, "openWithService", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GLSPDiagramManager.prototype, "init", null);
exports.GLSPDiagramManager = GLSPDiagramManager = __decorate([
    (0, inversify_1.injectable)()
], GLSPDiagramManager);
function deriveDiagramManagerId(diagramType) {
    return diagramType + '-diagram-manager';
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-layout-commands.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-layout-commands.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPLayoutKeybindingContribution = exports.GLSPLayoutCommandContribution = exports.GLSPLayoutMenuContribution = exports.GLSPLayoutMenus = exports.GLSPLayoutCommands = void 0;
exports.registerDiagramLayoutCommands = registerDiagramLayoutCommands;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const glsp_command_handler_1 = __webpack_require__(/*! ./glsp-command-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-command-handler.js");
const glsp_diagram_commands_1 = __webpack_require__(/*! ./glsp-diagram-commands */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-commands.js");
const glsp_diagram_keybinding_1 = __webpack_require__(/*! ./glsp-diagram-keybinding */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-keybinding.js");
function registerDiagramLayoutCommands(context) {
    if (!context.isBound(GLSPLayoutCommandContribution)) {
        (0, client_1.bindAsService)(context, core_1.CommandContribution, GLSPLayoutCommandContribution);
    }
    if (!context.isBound(GLSPLayoutMenuContribution)) {
        (0, client_1.bindAsService)(context, core_1.MenuContribution, GLSPLayoutMenuContribution);
    }
    if (!context.isBound(GLSPLayoutKeybindingContribution)) {
        (0, client_1.bindAsService)(context, browser_1.KeybindingContribution, GLSPLayoutKeybindingContribution);
    }
}
var GLSPLayoutCommands;
(function (GLSPLayoutCommands) {
    GLSPLayoutCommands.RESIZE_WIDTH_MIN = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width:min';
    GLSPLayoutCommands.RESIZE_WIDTH_MIN_LABEL = 'Minimal Width';
    GLSPLayoutCommands.RESIZE_WIDTH_MAX = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width:max';
    GLSPLayoutCommands.RESIZE_WIDTH_MAX_LABEL = 'Maximal Width';
    GLSPLayoutCommands.RESIZE_WIDTH_AVG = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width:avg';
    GLSPLayoutCommands.RESIZE_WIDTH_AVG_LABEL = 'Average Width';
    GLSPLayoutCommands.RESIZE_WIDTH_FIRST = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width:first';
    GLSPLayoutCommands.RESIZE_WIDTH_FIRST_LABEL = 'Width of First Selected Element';
    GLSPLayoutCommands.RESIZE_WIDTH_LAST = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width:last';
    GLSPLayoutCommands.RESIZE_WIDTH_LAST_LABEL = 'Width of Last Selected Element';
    GLSPLayoutCommands.RESIZE_HEIGHT_MIN = 'glsp:' + client_1.ResizeElementsAction.KIND + ':height:min';
    GLSPLayoutCommands.RESIZE_HEIGHT_MIN_LABEL = 'Minimal Height';
    GLSPLayoutCommands.RESIZE_HEIGHT_MAX = 'glsp:' + client_1.ResizeElementsAction.KIND + ':height:max';
    GLSPLayoutCommands.RESIZE_HEIGHT_MAX_LABEL = 'Maximal Height';
    GLSPLayoutCommands.RESIZE_HEIGHT_AVG = 'glsp:' + client_1.ResizeElementsAction.KIND + ':height:avg';
    GLSPLayoutCommands.RESIZE_HEIGHT_AVG_LABEL = 'Average Height';
    GLSPLayoutCommands.RESIZE_HEIGHT_FIRST = 'glsp:' + client_1.ResizeElementsAction.KIND + ':height:first';
    GLSPLayoutCommands.RESIZE_HEIGHT_FIRST_LABEL = 'Height of First Selected Element';
    GLSPLayoutCommands.RESIZE_HEIGHT_LAST = 'glsp:' + client_1.ResizeElementsAction.KIND + ':height:last';
    GLSPLayoutCommands.RESIZE_HEIGHT_LAST_LABEL = 'Height of Last Selected Element';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MIN = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width_and_height:min';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MIN_LBL = 'Minimal Width and Height';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MAX = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width_and_height:max';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MAX_LBL = 'Maximal Width and Height';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_AVG = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width_and_height:avg';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_AVG_LBL = 'Average Width and Height';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_FIRST = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width_and_height:first';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_FIRST_LBL = 'Width and Height of First Selected Element';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_LAST = 'glsp:' + client_1.ResizeElementsAction.KIND + ':width_and_height:last';
    GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_LAST_LBL = 'Width and Height of Last Selected Element';
    GLSPLayoutCommands.ALIGN_LEFT = 'glsp:' + client_1.AlignElementsAction.KIND + ':left';
    GLSPLayoutCommands.ALIGN_LEFT_LABEL = 'Left';
    GLSPLayoutCommands.ALIGN_CENTER = 'glsp:' + client_1.AlignElementsAction.KIND + ':center';
    GLSPLayoutCommands.ALIGN_CENTER_LABEL = 'Center';
    GLSPLayoutCommands.ALIGN_RIGHT = 'glsp:' + client_1.AlignElementsAction.KIND + ':right';
    GLSPLayoutCommands.ALIGN_RIGHT_LABEL = 'Right';
    GLSPLayoutCommands.ALIGN_TOP = 'glsp:' + client_1.AlignElementsAction.KIND + ':top';
    GLSPLayoutCommands.ALIGN_TOP_LABEL = 'Top';
    GLSPLayoutCommands.ALIGN_MIDDLE = 'glsp:' + client_1.AlignElementsAction.KIND + ':middle';
    GLSPLayoutCommands.ALIGN_MIDDLE_LABEL = 'Middle';
    GLSPLayoutCommands.ALIGN_BOTTOM = 'glsp:' + client_1.AlignElementsAction.KIND + ':bottom';
    GLSPLayoutCommands.ALIGN_BOTTOM_LABEL = 'Bottom';
    GLSPLayoutCommands.ALIGN_LEFT_FIRST = 'glsp:' + client_1.AlignElementsAction.KIND + ':left:first';
    GLSPLayoutCommands.ALIGN_LEFT_FIRST_LABEL = 'Left of First Selected Element';
    GLSPLayoutCommands.ALIGN_CENTER_FIRST = 'glsp:' + client_1.AlignElementsAction.KIND + ':center:first';
    GLSPLayoutCommands.ALIGN_CENTER_FIRST_LABEL = 'Center of First Selected Element';
    GLSPLayoutCommands.ALIGN_RIGHT_FIRST = 'glsp:' + client_1.AlignElementsAction.KIND + ':right:first';
    GLSPLayoutCommands.ALIGN_RIGHT_FIRST_LABEL = 'Right of First Selected Element';
    GLSPLayoutCommands.ALIGN_TOP_FIRST = 'glsp:' + client_1.AlignElementsAction.KIND + ':top:first';
    GLSPLayoutCommands.ALIGN_TOP_FIRST_LABEL = 'Top of First Selected Element';
    GLSPLayoutCommands.ALIGN_MIDDLE_FIRST = 'glsp:' + client_1.AlignElementsAction.KIND + ':middle:first';
    GLSPLayoutCommands.ALIGN_MIDDLE_FIRST_LABEL = 'Middle of First Selected Element';
    GLSPLayoutCommands.ALIGN_BOTTOM_FIRST = 'glsp:' + client_1.AlignElementsAction.KIND + ':bottom:first';
    GLSPLayoutCommands.ALIGN_BOTTOM_FIRST_LABEL = 'Bottom of First Selected Element';
    GLSPLayoutCommands.ALIGN_LEFT_LAST = 'glsp:' + client_1.AlignElementsAction.KIND + ':left:last';
    GLSPLayoutCommands.ALIGN_LEFT_LAST_LABEL = 'Left of Last Selected Element';
    GLSPLayoutCommands.ALIGN_CENTER_LAST = 'glsp:' + client_1.AlignElementsAction.KIND + ':center:last';
    GLSPLayoutCommands.ALIGN_CENTER_LAST_LABEL = 'Center of Last Selected Element';
    GLSPLayoutCommands.ALIGN_RIGHT_LAST = 'glsp:' + client_1.AlignElementsAction.KIND + ':right:last';
    GLSPLayoutCommands.ALIGN_RIGHT_LAST_LABEL = 'Right of Last Selected Element';
    GLSPLayoutCommands.ALIGN_TOP_LAST = 'glsp:' + client_1.AlignElementsAction.KIND + ':top:last';
    GLSPLayoutCommands.ALIGN_TOP_LAST_LABEL = 'Top of Last Selected Element';
    GLSPLayoutCommands.ALIGN_MIDDLE_LAST = 'glsp:' + client_1.AlignElementsAction.KIND + ':middle:last';
    GLSPLayoutCommands.ALIGN_MIDDLE_LAST_LABEL = 'Middle of Last Selected Element';
    GLSPLayoutCommands.ALIGN_BOTTOM_LAST = 'glsp:' + client_1.AlignElementsAction.KIND + ':bottom:last';
    GLSPLayoutCommands.ALIGN_BOTTOM_LAST_LABEL = 'Bottom of Last Selected Element';
})(GLSPLayoutCommands || (exports.GLSPLayoutCommands = GLSPLayoutCommands = {}));
var GLSPLayoutMenus;
(function (GLSPLayoutMenus) {
    GLSPLayoutMenus.ALIGN_MENU = glsp_diagram_commands_1.GLSPDiagramMenus.DIAGRAM.concat('align');
    GLSPLayoutMenus.ALIGN_HORIZONTAL_GROUP = GLSPLayoutMenus.ALIGN_MENU.concat('1_horizontal');
    GLSPLayoutMenus.ALIGN_VERTICAL_GROUP = GLSPLayoutMenus.ALIGN_MENU.concat('2_vertical');
    GLSPLayoutMenus.ALIGN_HORIZONTAL_FIRST_GROUP = GLSPLayoutMenus.ALIGN_MENU.concat('3_horizontal_first');
    GLSPLayoutMenus.ALIGN_VERTICAL_FIRST_GROUP = GLSPLayoutMenus.ALIGN_MENU.concat('4_vertical_first');
    GLSPLayoutMenus.ALIGN_HORIZONTAL_LAST_GROUP = GLSPLayoutMenus.ALIGN_MENU.concat('5_horizontal_last');
    GLSPLayoutMenus.ALIGN_VERTICAL_LAST_GROUP = GLSPLayoutMenus.ALIGN_MENU.concat('6_vertical_last');
    GLSPLayoutMenus.RESIZE_MENU = glsp_diagram_commands_1.GLSPDiagramMenus.DIAGRAM.concat('resize');
    GLSPLayoutMenus.RESIZE_WIDTH_GROUP = GLSPLayoutMenus.RESIZE_MENU.concat('1_width');
    GLSPLayoutMenus.RESIZE_HEIGHT_GROUP = GLSPLayoutMenus.RESIZE_MENU.concat('2_height');
    GLSPLayoutMenus.RESIZE_WIDTH_AND_HEIGHT_GROUP = GLSPLayoutMenus.RESIZE_MENU.concat('3_width_and_height');
})(GLSPLayoutMenus || (exports.GLSPLayoutMenus = GLSPLayoutMenus = {}));
let GLSPLayoutMenuContribution = class GLSPLayoutMenuContribution {
    registerMenus(registry) {
        registry.registerSubmenu(GLSPLayoutMenus.RESIZE_MENU, 'Resize');
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_MIN,
            order: '1'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_MAX,
            order: '2'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_AVG,
            order: '3'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_FIRST,
            order: '4'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_LAST,
            order: '5'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_HEIGHT_MIN,
            order: '1'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_HEIGHT_MAX,
            order: '2'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_HEIGHT_AVG,
            order: '3'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_HEIGHT_FIRST,
            order: '5'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_HEIGHT_LAST,
            order: '4'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_AND_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MIN,
            order: '1'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_AND_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MAX,
            order: '2'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_AND_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_AVG,
            order: '3'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_AND_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_FIRST,
            order: '4'
        });
        registry.registerMenuAction(GLSPLayoutMenus.RESIZE_WIDTH_AND_HEIGHT_GROUP, {
            commandId: GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_LAST,
            order: '5'
        });
        registry.registerSubmenu(GLSPLayoutMenus.ALIGN_MENU, 'Align');
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_LEFT,
            order: '1'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_CENTER,
            order: '2'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_RIGHT,
            order: '3'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_TOP,
            order: '4'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_MIDDLE,
            order: '5'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_BOTTOM,
            order: '6'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_FIRST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_LEFT_FIRST,
            order: '1'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_FIRST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_CENTER_FIRST,
            order: '2'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_FIRST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_RIGHT_FIRST,
            order: '3'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_FIRST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_TOP_FIRST,
            order: '4'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_FIRST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_MIDDLE_FIRST,
            order: '5'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_FIRST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_BOTTOM_FIRST,
            order: '6'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_LAST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_LEFT_LAST,
            order: '1'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_LAST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_CENTER_LAST,
            order: '2'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_HORIZONTAL_LAST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_RIGHT_LAST,
            order: '3'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_LAST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_TOP_LAST,
            order: '4'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_LAST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_MIDDLE_LAST,
            order: '5'
        });
        registry.registerMenuAction(GLSPLayoutMenus.ALIGN_VERTICAL_LAST_GROUP, {
            commandId: GLSPLayoutCommands.ALIGN_BOTTOM_LAST,
            order: '6'
        });
    }
};
exports.GLSPLayoutMenuContribution = GLSPLayoutMenuContribution;
exports.GLSPLayoutMenuContribution = GLSPLayoutMenuContribution = __decorate([
    (0, inversify_1.injectable)()
], GLSPLayoutMenuContribution);
let GLSPLayoutCommandContribution = class GLSPLayoutCommandContribution {
    constructor(shell) {
        this.shell = shell;
    }
    registerResize(registry, id, label, dimension, reduceFunction) {
        registry.registerCommand({
            id: id,
            category: 'Diagram',
            label: 'Resize to ' + label
        }, new glsp_command_handler_1.GLSPCommandHandler(this.shell, {
            actions: () => [client_1.ResizeElementsAction.create({ dimension, reduceFunction })],
            isEnabled: context => !context.isReadonly && context.get().selectedElementIds.length > 1
        }));
    }
    registerAlign(registry, id, label, alignment, selectionFunction) {
        registry.registerCommand({
            id: id,
            category: 'Diagram',
            label: 'Align ' + label
        }, new glsp_command_handler_1.GLSPCommandHandler(this.shell, {
            actions: () => [client_1.AlignElementsAction.create({ alignment, selectionFunction })],
            isEnabled: context => !context.isReadonly && context.get().selectedElementIds.length > 1
        }));
    }
    registerCommands(reg) {
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_MIN, GLSPLayoutCommands.RESIZE_WIDTH_MIN_LABEL, client_1.ResizeDimension.Width, 'min');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_MAX, GLSPLayoutCommands.RESIZE_WIDTH_MAX_LABEL, client_1.ResizeDimension.Width, 'max');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_AVG, GLSPLayoutCommands.RESIZE_WIDTH_AVG_LABEL, client_1.ResizeDimension.Width, 'avg');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_FIRST, GLSPLayoutCommands.RESIZE_WIDTH_FIRST_LABEL, client_1.ResizeDimension.Width, 'first');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_LAST, GLSPLayoutCommands.RESIZE_WIDTH_LAST_LABEL, client_1.ResizeDimension.Width, 'last');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_HEIGHT_MIN, GLSPLayoutCommands.RESIZE_HEIGHT_MIN_LABEL, client_1.ResizeDimension.Height, 'min');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_HEIGHT_MAX, GLSPLayoutCommands.RESIZE_HEIGHT_MAX_LABEL, client_1.ResizeDimension.Height, 'max');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_HEIGHT_AVG, GLSPLayoutCommands.RESIZE_HEIGHT_AVG_LABEL, client_1.ResizeDimension.Height, 'avg');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_HEIGHT_FIRST, GLSPLayoutCommands.RESIZE_HEIGHT_FIRST_LABEL, client_1.ResizeDimension.Height, 'first');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_HEIGHT_LAST, GLSPLayoutCommands.RESIZE_HEIGHT_LAST_LABEL, client_1.ResizeDimension.Height, 'last');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MIN, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MIN_LBL, client_1.ResizeDimension.Width_And_Height, 'min');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MAX, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_MAX_LBL, client_1.ResizeDimension.Width_And_Height, 'max');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_AVG, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_AVG_LBL, client_1.ResizeDimension.Width_And_Height, 'avg');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_FIRST, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_FIRST_LBL, client_1.ResizeDimension.Width_And_Height, 'first');
        this.registerResize(reg, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_LAST, GLSPLayoutCommands.RESIZE_WIDTH_AND_HEIGHT_LAST_LBL, client_1.ResizeDimension.Width_And_Height, 'last');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_LEFT, GLSPLayoutCommands.ALIGN_LEFT_LABEL, client_1.Alignment.Left, 'all');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_CENTER, GLSPLayoutCommands.ALIGN_CENTER_LABEL, client_1.Alignment.Center, 'all');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_RIGHT, GLSPLayoutCommands.ALIGN_RIGHT_LABEL, client_1.Alignment.Right, 'all');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_TOP, GLSPLayoutCommands.ALIGN_TOP_LABEL, client_1.Alignment.Top, 'all');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_MIDDLE, GLSPLayoutCommands.ALIGN_MIDDLE_LABEL, client_1.Alignment.Middle, 'all');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_BOTTOM, GLSPLayoutCommands.ALIGN_BOTTOM_LABEL, client_1.Alignment.Bottom, 'all');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_LEFT_FIRST, GLSPLayoutCommands.ALIGN_LEFT_FIRST_LABEL, client_1.Alignment.Left, 'first');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_CENTER_FIRST, GLSPLayoutCommands.ALIGN_CENTER_FIRST_LABEL, client_1.Alignment.Center, 'first');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_RIGHT_FIRST, GLSPLayoutCommands.ALIGN_RIGHT_FIRST_LABEL, client_1.Alignment.Right, 'first');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_TOP_FIRST, GLSPLayoutCommands.ALIGN_TOP_FIRST_LABEL, client_1.Alignment.Top, 'first');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_MIDDLE_FIRST, GLSPLayoutCommands.ALIGN_MIDDLE_FIRST_LABEL, client_1.Alignment.Middle, 'first');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_BOTTOM_FIRST, GLSPLayoutCommands.ALIGN_BOTTOM_FIRST_LABEL, client_1.Alignment.Bottom, 'first');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_LEFT_LAST, GLSPLayoutCommands.ALIGN_LEFT_LAST_LABEL, client_1.Alignment.Left, 'last');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_CENTER_LAST, GLSPLayoutCommands.ALIGN_CENTER_LAST_LABEL, client_1.Alignment.Center, 'last');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_RIGHT_LAST, GLSPLayoutCommands.ALIGN_RIGHT_LAST_LABEL, client_1.Alignment.Right, 'last');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_TOP_LAST, GLSPLayoutCommands.ALIGN_TOP_LAST_LABEL, client_1.Alignment.Top, 'last');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_MIDDLE_LAST, GLSPLayoutCommands.ALIGN_MIDDLE_LAST_LABEL, client_1.Alignment.Middle, 'last');
        this.registerAlign(reg, GLSPLayoutCommands.ALIGN_BOTTOM_LAST, GLSPLayoutCommands.ALIGN_BOTTOM_LAST_LABEL, client_1.Alignment.Bottom, 'last');
    }
};
exports.GLSPLayoutCommandContribution = GLSPLayoutCommandContribution;
exports.GLSPLayoutCommandContribution = GLSPLayoutCommandContribution = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(browser_1.ApplicationShell)),
    __metadata("design:paramtypes", [browser_1.ApplicationShell])
], GLSPLayoutCommandContribution);
let GLSPLayoutKeybindingContribution = class GLSPLayoutKeybindingContribution {
    constructor(diagramKeybindingContext) {
        this.diagramKeybindingContext = diagramKeybindingContext;
    }
    registerKeybindings(registry) {
        registry.registerKeybinding({
            command: GLSPLayoutCommands.ALIGN_LEFT,
            context: this.diagramKeybindingContext.id,
            keybinding: 'alt+shift+left',
            when: '!glspEditorIsReadonly && glspEditorHasMultipleSelection'
        });
        registry.registerKeybinding({
            command: GLSPLayoutCommands.ALIGN_RIGHT,
            context: this.diagramKeybindingContext.id,
            keybinding: 'alt+shift+right',
            when: '!glspEditorIsReadonly && glspEditorHasMultipleSelection'
        });
        registry.registerKeybinding({
            command: GLSPLayoutCommands.ALIGN_TOP,
            context: this.diagramKeybindingContext.id,
            keybinding: 'alt+shift+up',
            when: '!glspEditorIsReadonly && glspEditorHasMultipleSelection'
        });
        registry.registerKeybinding({
            command: GLSPLayoutCommands.ALIGN_BOTTOM,
            context: this.diagramKeybindingContext.id,
            keybinding: 'alt+shift+down',
            when: '!glspEditorIsReadonly && glspEditorHasMultipleSelection'
        });
    }
};
exports.GLSPLayoutKeybindingContribution = GLSPLayoutKeybindingContribution;
exports.GLSPLayoutKeybindingContribution = GLSPLayoutKeybindingContribution = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(glsp_diagram_keybinding_1.GLSPDiagramKeybindingContext)),
    __metadata("design:paramtypes", [glsp_diagram_keybinding_1.GLSPDiagramKeybindingContext])
], GLSPLayoutKeybindingContribution);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-theia-container-module.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-theia-container-module.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPTheiaFrontendModule = void 0;
/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const _1 = __webpack_require__(/*! . */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/index.js");
const glsp_diagram_language_1 = __webpack_require__(/*! ../common/glsp-diagram-language */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/glsp-diagram-language.js");
const copy_paste_context_menu_contribution_1 = __webpack_require__(/*! ./copy-paste-context-menu-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/copy-paste-context-menu-contribution.js");
const diagram_widget_factory_1 = __webpack_require__(/*! ./diagram/diagram-widget-factory */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/diagram-widget-factory.js");
const glsp_diagram_manager_1 = __webpack_require__(/*! ./diagram/glsp-diagram-manager */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-manager.js");
const glsp_layout_commands_1 = __webpack_require__(/*! ./diagram/glsp-layout-commands */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-layout-commands.js");
const glsp_client_contribution_1 = __webpack_require__(/*! ./glsp-client-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-client-contribution.js");
const theia_navigate_to_marker_contribution_1 = __webpack_require__(/*! ./theia-navigate-to-marker-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-navigate-to-marker-contribution.js");
/**
 *  The `GLSPTheiaFrontendModule` provides the necessary required module configuration
 *  to implement a theia GLSP diagram language integration.
 */
class GLSPTheiaFrontendModule extends inversify_1.ContainerModule {
    constructor() {
        super((bind, unbind, isBound, rebind) => this.initialize({ bind, unbind, isBound, rebind }));
        this.enableLayoutCommands = true;
        this.enableMarkerNavigationCommands = true;
        this.enableCopyPaste = false;
    }
    initialize(context) {
        this.bindGLSPClientContribution(context);
        this.bindDiagramConfiguration(context);
        this.bindDiagramWidgetFactory(context);
        this.configureDiagramManager(context);
        // Optional default configuration
        this.configureDiagramLayoutCommands(context);
        this.configureCopyPasteContextMenu(context);
        this.configureMarkerNavigationCommands(context);
        this.configure(context);
    }
    /**
     * Defines the binding for the glsp client contribution of the diagram integration. A {@link ConfigurableGLSPClientContribution}
     * with the same id as the diagramLanguage is bound. Can be overwritten in subclasses to provide a custom binding using
     * the {@link GLSPClientContribution} service identifier.
     *
     * For example:
     * ```typescript
     * context.bind(GLSPClientContribution).toSelf(MyCustomGLSPClientContribution);
     * ```
     * Note that glsp client contribution bindings are consumed via multi-injection. This means binding the {@link GLSPClientContribution}
     * service identifier in singleton scope has no effect.
     *
     * @param context the container context
     */
    bindGLSPClientContribution(context) {
        context.bind(glsp_client_contribution_1.GLSPClientContribution).toDynamicValue(ctx => {
            const childContainer = ctx.container.createChild();
            childContainer.bind(GLSPDiagramLanguage).toConstantValue(this.diagramLanguage);
            return childContainer.resolve(ConfigurableGLSPClientContribution);
        });
    }
    /**
     * Defines the binding for the {@link DiagramWidgetFactory} of the diagram integration. Per default a
     * factory that constructs a {@link GLSPDiagramWidget} instance is bound.
     * Can be overwritten in subclasses to provide a custom binding using
     * the {@link DiagramWidgetFactory} service identifier.
     *
     * For example:
     * ```typescript
     * context.bind(DiagramWidgetFactory)
     *  .toDynamicValue(ctx => createDiagramWidgetFactory(ctx, this.diagramLanguage.diagramType, MyDiagramWidget));
     *
     * ```
     * Note that glsp diagram factory bindings are consumed via multi-injection. This means binding the {@link DiagramWidgetFactory}
     * service identifier in singleton scope has no effect.
     *
     * @param context the container context
     */
    bindDiagramWidgetFactory(context) {
        var _a;
        (_a = (0, client_1.lazyBind)(context, _1.GLSPDiagramWidget)) === null || _a === void 0 ? void 0 : _a.toSelf();
        context.bind(diagram_widget_factory_1.DiagramWidgetFactory).toDynamicValue(ctx => (0, diagram_widget_factory_1.createDiagramWidgetFactory)(ctx, this.diagramLanguage.diagramType));
    }
    /**
     * Configures the bindings for the diagram manager of the diagram integration. A {@link ConfigurableGLSPDiagramManager}
     * is bound to a generated service identifier in singleton scope and then additional bindings for this service
     * identifier are registered. Can be overwritten in subclasses to provide a custom binding.
     *
     *  For example:
     * ```typescript
     * context.bind(MyDiagramManager).to(MyDiagramManager).inSingletonScope();
     * registerDiagramManager(context.bind, MyDiagramManager);
     * ```
     * @param context the container context
     */
    configureDiagramManager(context) {
        const diagramManagerServiceId = Symbol(`DiagramManager_${this.diagramLanguage.diagramType}`);
        context
            .bind(diagramManagerServiceId)
            .toDynamicValue(ctx => {
            const childContainer = ctx.container.createChild();
            childContainer.bind(GLSPDiagramLanguage).toConstantValue(this.diagramLanguage);
            return childContainer.resolve(InternalGLSPDiagramManager);
        })
            .inSingletonScope();
        (0, glsp_diagram_manager_1.registerDiagramManager)(context.bind, diagramManagerServiceId, false);
    }
    /**
     * Can be overwritten by subclasses to provide additional configuration (e.g. extra bindings)
     * for this module.
     *
     * For example:
     * ```typescript
     * context.bind(MyCustomClass).toSelf().inSingletonScope()
     * ```
     * @param context the container context
     */
    configure(context) {
        // Empty per default
    }
    /**
     * Optional configuration to enable the default diagram layout commands for the diagram integration.
     * Can be enabled/disabled using the {@link GLSPTheiaFrontendModule.enableLayoutCommands}  property flag.
     *
     * @param context the diagram context
     */
    configureDiagramLayoutCommands(context) {
        if (this.enableLayoutCommands) {
            (0, glsp_layout_commands_1.registerDiagramLayoutCommands)(context);
        }
    }
    /**
     * Optional configuration for copy & paste functionality of the diagram integration.
     * Can be enabled/disabled using the {@link GLSPTheiaFrontendModule.enableCopyPaste} property flag.
     * Note that the glsp server also needs to support copy & paste for this diagram configuration.
     *
     * @param context the diagram context
     */
    configureCopyPasteContextMenu(context) {
        if (this.enableCopyPaste) {
            (0, copy_paste_context_menu_contribution_1.registerCopyPasteContextMenu)(context);
        }
    }
    /**
     * Optional configuration to enable marker navigation for the diagram integration.
     * Can be enabled/disabled using the {@link GLSPTheiaFrontendModule.enableMarkerNavigationCommands}  property flag.
     * Note that the glsp server also needs to support copy & paste for this diagram configuration.
     *
     * @param context the diagram context
     */
    configureMarkerNavigationCommands(context) {
        if (this.enableMarkerNavigationCommands) {
            (0, theia_navigate_to_marker_contribution_1.registerMarkerNavigationCommands)(context);
        }
    }
}
exports.GLSPTheiaFrontendModule = GLSPTheiaFrontendModule;
const GLSPDiagramLanguage = Symbol('GLSPDiagramLanguage');
/**
 * Internal class that is used in {@link GLSPTheiaFrontendModule.configureDiagramManager} to
 * bind a default implementation for `DiagramManager`. A custom `DiagramManager` should
 * never extend this class. Use {@link GLSPDiagramManager} instead.
 */
let InternalGLSPDiagramManager = class InternalGLSPDiagramManager extends glsp_diagram_manager_1.GLSPDiagramManager {
    constructor(diagramLanguage) {
        super();
        this._fileExtensions = [];
        this._iconClass = (0, client_1.codiconCSSString)('type-hierarchy-sub');
        this._fileExtensions = diagramLanguage.fileExtensions;
        this._diagramType = diagramLanguage.diagramType;
        this._label = diagramLanguage.label;
        this._iconClass = diagramLanguage.iconClass || this._iconClass;
        this._contributionId = diagramLanguage.contributionId;
        this._providerName = diagramLanguage.providerName;
    }
    get fileExtensions() {
        return this._fileExtensions;
    }
    get diagramType() {
        return this._diagramType;
    }
    get label() {
        return this._label;
    }
    get contributionId() {
        return this._contributionId;
    }
    get providerName() {
        return this._providerName;
    }
    get iconClass() {
        return this._iconClass;
    }
};
InternalGLSPDiagramManager = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(GLSPDiagramLanguage)),
    __metadata("design:paramtypes", [Object])
], InternalGLSPDiagramManager);
/**
 * Internal class that is used in {@link GLSPTheiaFrontendModule.bindGLSPClientContribution} to
 * bind a default implementation for {@link GLSPClientContribution}. A custom {@link GLSPClientContribution}  should
 * never extend this class. Use {@link BaseGLSPClientContribution} instead.
 */
let ConfigurableGLSPClientContribution = class ConfigurableGLSPClientContribution extends glsp_client_contribution_1.BaseGLSPClientContribution {
    constructor(diagramLanguage) {
        super();
        this.id = diagramLanguage.contributionId;
    }
};
ConfigurableGLSPClientContribution = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(GLSPDiagramLanguage)),
    __metadata("design:paramtypes", [Object])
], ConfigurableGLSPClientContribution);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/index.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./copy-paste-context-menu-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/copy-paste-context-menu-contribution.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram-service-provider */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram-service-provider.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/diagram-widget-factory */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/diagram-widget-factory.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/default-modules */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/default-modules.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/export/theia-export-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/export/theia-export-module.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/export/theia-export-svg-action-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/export/theia-export-svg-action-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/navigation/theia-navigate-to-external-target-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/navigation/theia-navigate-to-external-target-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/navigation/theia-navigation-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/navigation/theia-navigation-module.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/notification/notification-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/notification/notification-module.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/notification/theia-glsp-message-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/notification/theia-glsp-message-service.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/select/theia-glsp-selection-forwarder */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/select/theia-glsp-selection-forwarder.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/select/theia-select-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/select/theia-select-module.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/source-model-watcher/theia-source-model-changed-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/source-model-watcher/theia-source-model-changed-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/features/source-model-watcher/theia-source-model-watcher-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/source-model-watcher/theia-source-model-watcher-module.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-command-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-command-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-diagram-commands */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-commands.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-diagram-configuration */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-configuration.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-diagram-context-key-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-context-key-service.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-diagram-keybinding */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-keybinding.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-diagram-manager */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-layout-commands */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-layout-commands.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/glsp-saveable */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-saveable.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/theia-context-menu-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-context-menu-service.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram/theia-marker-manager */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-marker-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./glsp-client-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-client-contribution.js"), exports);
__exportStar(__webpack_require__(/*! ./glsp-frontend-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-frontend-contribution.js"), exports);
__exportStar(__webpack_require__(/*! ./glsp-theia-container-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-theia-container-module.js"), exports);
__exportStar(__webpack_require__(/*! ./theia-glsp-context-menu-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-glsp-context-menu-service.js"), exports);
__exportStar(__webpack_require__(/*! ./theia-integration-frontend-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-integration-frontend-module.js"), exports);
__exportStar(__webpack_require__(/*! ./theia-jsonrpc-glsp-client */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-jsonrpc-glsp-client.js"), exports);
__exportStar(__webpack_require__(/*! ./theia-navigate-to-marker-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-navigate-to-marker-contribution.js"), exports);
__exportStar(__webpack_require__(/*! ./theia-opener-options-navigation-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-opener-options-navigation-service.js"), exports);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-navigate-to-marker-contribution.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-navigate-to-marker-contribution.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var NavigateToMarkerMenuContribution_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigateToMarkerKeybindingContribution = exports.NavigateToMarkerMenuContribution = exports.NavigateToMarkerCommandContribution = exports.NavigateToMarkerCommand = void 0;
exports.registerMarkerNavigationCommands = registerMarkerNavigationCommands;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const lib_1 = __webpack_require__(/*! @eclipse-glsp/client/lib */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const glsp_command_handler_1 = __webpack_require__(/*! ./diagram/glsp-command-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-command-handler.js");
const glsp_diagram_keybinding_1 = __webpack_require__(/*! ./diagram/glsp-diagram-keybinding */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-keybinding.js");
const theia_context_menu_service_1 = __webpack_require__(/*! ./diagram/theia-context-menu-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-context-menu-service.js");
function registerMarkerNavigationCommands(context) {
    if (!context.isBound(NavigateToMarkerCommandContribution)) {
        (0, lib_1.bindAsService)(context, core_1.CommandContribution, NavigateToMarkerCommandContribution);
    }
    if (!context.isBound(NavigateToMarkerMenuContribution)) {
        (0, lib_1.bindAsService)(context, core_1.MenuContribution, NavigateToMarkerMenuContribution);
    }
    if (!context.isBound(NavigateToMarkerKeybindingContribution)) {
        (0, lib_1.bindAsService)(context, browser_1.KeybindingContribution, NavigateToMarkerKeybindingContribution);
    }
}
var NavigateToMarkerCommand;
(function (NavigateToMarkerCommand) {
    NavigateToMarkerCommand.NEXT_MARKER = 'next-marker';
    NavigateToMarkerCommand.PREVIOUS_MARKER = 'previous-marker';
})(NavigateToMarkerCommand || (exports.NavigateToMarkerCommand = NavigateToMarkerCommand = {}));
let NavigateToMarkerCommandContribution = class NavigateToMarkerCommandContribution {
    registerCommands(commands) {
        commands.registerCommand({ id: NavigateToMarkerCommand.NEXT_MARKER, label: 'Go to Next Marker', category: 'Diagram' }, new glsp_command_handler_1.GLSPCommandHandler(this.shell, {
            actions: () => [lib_1.NavigateToMarkerAction.create({ direction: 'next' })],
            isEnabled: context => (0, lib_1.collectIssueMarkers)(context.modelRoot).length > 0
        }));
        commands.registerCommand({ id: NavigateToMarkerCommand.PREVIOUS_MARKER, label: 'Go to Previous Marker', category: 'Diagram' }, new glsp_command_handler_1.GLSPCommandHandler(this.shell, {
            actions: () => [lib_1.NavigateToMarkerAction.create({ direction: 'previous' })],
            isEnabled: context => (0, lib_1.collectIssueMarkers)(context.modelRoot).length > 0
        }));
    }
};
exports.NavigateToMarkerCommandContribution = NavigateToMarkerCommandContribution;
__decorate([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    __metadata("design:type", browser_1.ApplicationShell)
], NavigateToMarkerCommandContribution.prototype, "shell", void 0);
exports.NavigateToMarkerCommandContribution = NavigateToMarkerCommandContribution = __decorate([
    (0, inversify_1.injectable)()
], NavigateToMarkerCommandContribution);
let NavigateToMarkerMenuContribution = NavigateToMarkerMenuContribution_1 = class NavigateToMarkerMenuContribution {
    registerMenus(menus) {
        menus.registerSubmenu(NavigateToMarkerMenuContribution_1.NAVIGATION, 'Go to');
        menus.registerMenuAction(NavigateToMarkerMenuContribution_1.NAVIGATION.concat('m'), {
            commandId: NavigateToMarkerCommand.NEXT_MARKER,
            label: 'Next Marker'
        });
        menus.registerMenuAction(NavigateToMarkerMenuContribution_1.NAVIGATION.concat('m'), {
            commandId: NavigateToMarkerCommand.PREVIOUS_MARKER,
            label: 'Previous Marker'
        });
    }
};
exports.NavigateToMarkerMenuContribution = NavigateToMarkerMenuContribution;
NavigateToMarkerMenuContribution.NAVIGATION = theia_context_menu_service_1.GLSPContextMenu.MENU_PATH.concat('navigate');
exports.NavigateToMarkerMenuContribution = NavigateToMarkerMenuContribution = NavigateToMarkerMenuContribution_1 = __decorate([
    (0, inversify_1.injectable)()
], NavigateToMarkerMenuContribution);
let NavigateToMarkerKeybindingContribution = class NavigateToMarkerKeybindingContribution {
    registerKeybindings(keybindings) {
        keybindings.registerKeybinding({
            command: NavigateToMarkerCommand.NEXT_MARKER,
            context: this.diagramKeybindingContext.id,
            keybinding: 'f8'
        });
        keybindings.registerKeybinding({
            command: NavigateToMarkerCommand.PREVIOUS_MARKER,
            context: this.diagramKeybindingContext.id,
            keybinding: 'shift+f8'
        });
    }
};
exports.NavigateToMarkerKeybindingContribution = NavigateToMarkerKeybindingContribution;
__decorate([
    (0, inversify_1.inject)(glsp_diagram_keybinding_1.GLSPDiagramKeybindingContext),
    __metadata("design:type", glsp_diagram_keybinding_1.GLSPDiagramKeybindingContext)
], NavigateToMarkerKeybindingContribution.prototype, "diagramKeybindingContext", void 0);
exports.NavigateToMarkerKeybindingContribution = NavigateToMarkerKeybindingContribution = __decorate([
    (0, inversify_1.injectable)()
], NavigateToMarkerKeybindingContribution);


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_eclipse-glsp_theia-integration_lib_browser_glsp-theia-container-module_j-a3229c.js.map