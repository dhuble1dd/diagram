(self["webpackChunktasklist_browser_app"] = self["webpackChunktasklist_browser_app"] || []).push([["vendors-node_modules_eclipse-glsp_theia-integration_lib_browser_theia-integration-frontend-mo-4c1c6b"],{

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/autocomplete-palette.css":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/autocomplete-palette.css ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.autocomplete-palette {
    position: absolute;
    left: 20px;
    top: 20px;
    width: 400px;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/autocomplete-palette.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,kBAAkB;IAClB,UAAU;IACV,SAAS;IACT,YAAY;AAChB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.autocomplete-palette {\n    position: absolute;\n    left: 20px;\n    top: 20px;\n    width: 400px;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/change-bounds.css":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/change-bounds.css ***!
  \*********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.sprotty-resize-handle[data-kind='top-left'] {
    cursor: nw-resize;
}

.sprotty-resize-handle[data-kind='top'] {
    cursor: n-resize;
}

.sprotty-resize-handle[data-kind='top-right'] {
    cursor: ne-resize;
}

.sprotty-resize-handle[data-kind='right'] {
    cursor: e-resize;
}

.sprotty-resize-handle[data-kind='bottom-right'] {
    cursor: se-resize;
}

.sprotty-resize-handle[data-kind='bottom'] {
    cursor: s-resize;
}

.sprotty-resize-handle[data-kind='bottom-left'] {
    cursor: sw-resize;
}

.sprotty-resize-handle[data-kind='left'] {
    cursor: w-resize;
}

.sprotty-resize-handle.resize-not-allowed {
    fill: var(--glsp-error-foreground);
}

.sprotty g .resize-not-allowed > .sprotty-node {
    stroke: var(--glsp-error-foreground);
    stroke-width: 1.5px;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/change-bounds.css"],"names":[],"mappings":"AAAA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,oCAAoC;IACpC,mBAAmB;AACvB","sourcesContent":[".sprotty-resize-handle[data-kind='top-left'] {\n    cursor: nw-resize;\n}\n\n.sprotty-resize-handle[data-kind='top'] {\n    cursor: n-resize;\n}\n\n.sprotty-resize-handle[data-kind='top-right'] {\n    cursor: ne-resize;\n}\n\n.sprotty-resize-handle[data-kind='right'] {\n    cursor: e-resize;\n}\n\n.sprotty-resize-handle[data-kind='bottom-right'] {\n    cursor: se-resize;\n}\n\n.sprotty-resize-handle[data-kind='bottom'] {\n    cursor: s-resize;\n}\n\n.sprotty-resize-handle[data-kind='bottom-left'] {\n    cursor: sw-resize;\n}\n\n.sprotty-resize-handle[data-kind='left'] {\n    cursor: w-resize;\n}\n\n.sprotty-resize-handle.resize-not-allowed {\n    fill: var(--glsp-error-foreground);\n}\n\n.sprotty g .resize-not-allowed > .sprotty-node {\n    stroke: var(--glsp-error-foreground);\n    stroke-width: 1.5px;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/command-palette.css":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/command-palette.css ***!
  \***********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2019-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.command-palette {
    transition: opacity 0.3s linear;
    box-shadow:
        0 4px 8px 0 rgba(0, 0, 0, 0.2),
        0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.command-palette-suggestions {
    background: white;
    z-index: 1000;
    overflow: auto;
    box-sizing: border-box;
    border: 1px solid rgba(60, 60, 60, 0.6);
    box-shadow:
        0 4px 8px 0 rgba(0, 0, 0, 0.2),
        0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.command-palette-suggestions .icon {
    padding-right: 0.3em;
    display: flex;
    align-self: center;
}

.command-palette-suggestions em {
    font-weight: bold;
    font-style: normal;
}

.command-palette-suggestions > div {
    padding: 0 4px;
    display: flex;
}

.command-palette-suggestions .group {
    background: #eee;
}

.command-palette-suggestions > div:hover:not(.group),
.command-palette-suggestions > div.selected {
    cursor: pointer;
}

.command-palette-suggestions > div:hover:not(.group) {
    background: #e0e0e0;
}

.command-palette-suggestions > div.selected {
    background: #bbdefb;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/command-palette.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,+BAA+B;IAC/B;;wCAEoC;AACxC;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,cAAc;IACd,sBAAsB;IACtB,uCAAuC;IACvC;;wCAEoC;AACxC;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,aAAa;AACjB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;;IAEI,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2019-2021 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.command-palette {\n    transition: opacity 0.3s linear;\n    box-shadow:\n        0 4px 8px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\n.command-palette-suggestions {\n    background: white;\n    z-index: 1000;\n    overflow: auto;\n    box-sizing: border-box;\n    border: 1px solid rgba(60, 60, 60, 0.6);\n    box-shadow:\n        0 4px 8px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\n.command-palette-suggestions .icon {\n    padding-right: 0.3em;\n    display: flex;\n    align-self: center;\n}\n\n.command-palette-suggestions em {\n    font-weight: bold;\n    font-style: normal;\n}\n\n.command-palette-suggestions > div {\n    padding: 0 4px;\n    display: flex;\n}\n\n.command-palette-suggestions .group {\n    background: #eee;\n}\n\n.command-palette-suggestions > div:hover:not(.group),\n.command-palette-suggestions > div.selected {\n    cursor: pointer;\n}\n\n.command-palette-suggestions > div:hover:not(.group) {\n    background: #e0e0e0;\n}\n\n.command-palette-suggestions > div.selected {\n    background: #bbdefb;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/debug.css":
/*!*************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/debug.css ***!
  \*************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.debug-bounds:has(> .debug-bounds-decoration) {
    fill-opacity: 0.5;
}

.debug-bounds-decoration {
    fill: none;
    stroke: black;
    stroke-width: 1px;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/debug.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,iBAAiB;AACrB;;AAEA;IACI,UAAU;IACV,aAAa;IACb,iBAAiB;AACrB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2024 Axon Ivy AG and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.debug-bounds:has(> .debug-bounds-decoration) {\n    fill-opacity: 0.5;\n}\n\n.debug-bounds-decoration {\n    fill: none;\n    stroke: black;\n    stroke-width: 1px;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/decoration.css":
/*!******************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/decoration.css ***!
  \******************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2020-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.sprotty-issue-background {
    fill: var(--glsp-issue-background);
    background-color: var(--glsp-issue-background);
}

.sprotty-issue.sprotty-error {
    fill: var(--glsp-error-foreground);
    background-color: var(--glsp-error-foreground);
}

.sprotty-issue.sprotty-warning {
    fill: var(--glsp-warning-foreground);
    background-color: var(--glsp-warning-foreground);
}

.sprotty-issue.sprotty-info {
    fill: var(--glsp-info-foreground);
    background-color: var(--glsp-info-foreground);
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/decoration.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,kCAAkC;IAClC,8CAA8C;AAClD;;AAEA;IACI,kCAAkC;IAClC,8CAA8C;AAClD;;AAEA;IACI,oCAAoC;IACpC,gDAAgD;AACpD;;AAEA;IACI,iCAAiC;IACjC,6CAA6C;AACjD","sourcesContent":["/********************************************************************************\n * Copyright (c) 2020-2021 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.sprotty-issue-background {\n    fill: var(--glsp-issue-background);\n    background-color: var(--glsp-issue-background);\n}\n\n.sprotty-issue.sprotty-error {\n    fill: var(--glsp-error-foreground);\n    background-color: var(--glsp-error-foreground);\n}\n\n.sprotty-issue.sprotty-warning {\n    fill: var(--glsp-warning-foreground);\n    background-color: var(--glsp-warning-foreground);\n}\n\n.sprotty-issue.sprotty-info {\n    fill: var(--glsp-info-foreground);\n    background-color: var(--glsp-info-foreground);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/ghost-element.css":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/ghost-element.css ***!
  \*********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.ghost-element {
    /* we are a true ghost so we do not want to be used as a target for any mouse event */
    pointer-events: none;
    opacity: 0.8;
}

.ghost-element.hidden {
    width: 0;
    height: 0;
    visibility: hidden;
}

.sprotty-node.insert-indicator:not(.selected) {
    pointer-events: none;
    fill: none;
    stroke: black; /* same color as default color for edges */
    stroke-width: 1.5px;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/ghost-element.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,qFAAqF;IACrF,oBAAoB;IACpB,YAAY;AAChB;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,kBAAkB;AACtB;;AAEA;IACI,oBAAoB;IACpB,UAAU;IACV,aAAa,EAAE,0CAA0C;IACzD,mBAAmB;AACvB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.ghost-element {\n    /* we are a true ghost so we do not want to be used as a target for any mouse event */\n    pointer-events: none;\n    opacity: 0.8;\n}\n\n.ghost-element.hidden {\n    width: 0;\n    height: 0;\n    visibility: hidden;\n}\n\n.sprotty-node.insert-indicator:not(.selected) {\n    pointer-events: none;\n    fill: none;\n    stroke: black; /* same color as default color for edges */\n    stroke-width: 1.5px;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/glsp-sprotty.css":
/*!********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/glsp-sprotty.css ***!
  \********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

:root {
    --glsp-error-foreground: red;
    --glsp-warning-foreground: yellow;
    --glsp-info-foreground: lightblue;
    --glsp-issue-background: rgb(255 255 255 / 85%);
}

.sprotty {
    padding: 0px;
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

.sprotty svg text::selection {
    background: none;
}

.sprotty-hidden {
    display: block;
    position: absolute;
    width: 0px;
    height: 0px;
}

.sprotty-popup {
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    position: absolute;
    background: white;
    border-radius: 5px;
    border: 1px solid;
    max-width: 400px;
    min-width: 100px;
    z-index: 1;
    pointer-events: none;
}

.sprotty-popup > div {
    margin: 10px;
}

.sprotty-popup-closed {
    display: none;
}

.sprotty-resize-handle {
    /* radius does not work in Firefox */
    r: 5px;
    fill: #1d80d1;
    stroke: none;
    z-index: 1000;
}

.sprotty-resize-handle.selected {
    fill: #1d80d1;
}

.sprotty-resize-handle.active {
    fill: #1d80d1;
}

.sprotty-edge {
    fill: none;
    stroke-width: 1.5px;
}

.sprotty-edge.selected {
    stroke-width: 1.5px;
}

.sprotty-edge.mouseover:not(.selected) path {
    stroke-width: 1.5px;
}

.sprotty-node:not(.selected) {
    stroke-width: 0px;
}

.sprotty-node.mouseover:not(.selected),
.sprotty-edge.mouseover:not(.selected) {
    opacity: 60%;
}

.sprotty-node.selected,
.sprotty-edge.selected {
    stroke: #1d80d1;
    stroke-width: 1.5px;
}

.sprotty-edge.mouseover:not(.selected) .arrow,
.sprotty-edge.selected .arrow {
    stroke-dashoffset: none;
    stroke-dasharray: none;
}

.sprotty .node-creation-mode {
    cursor: copy;
}

.sprotty .overlap-forbidden-mode {
    cursor: not-allowed;
}

.sprotty .default-mode {
    cursor: default;
}

.sprotty .edge-modification-not-allowed-mode {
    cursor: no-drop;
}

.sprotty .edge-creation-select-source-mode {
    cursor: pointer;
}

.sprotty .edge-creation-select-target-mode,
.sprotty .edge-reconnect-select-target-mode {
    cursor: crosshair;
}

.sprotty .edge-check-pending-mode {
    cursor: wait;
}

.sprotty .move-mode {
    cursor: move;
}

.sprotty .resize-nesw-mode {
    cursor: nesw-resize;
}

.sprotty .resize-nwse-mode {
    cursor: nwse-resize;
}

.sprotty .resize-nw-mode {
    cursor: nw-resize;
}

.sprotty .resize-w-mode {
    cursor: n-resize;
}

.sprotty .resize-ne-mode {
    cursor: ne-resize;
}

.sprotty .resize-e-mode {
    cursor: e-resize;
}

.sprotty .resize-se-mode {
    cursor: se-resize;
}

.sprotty .resize-s-mode {
    cursor: s-resize;
}

.sprotty .resize-sw-mode {
    cursor: sw-resize;
}

.sprotty .resize-w-mode {
    cursor: w-resize;
}

.sprotty .element-deletion-mode {
    cursor: pointer;
}

.sprotty .marquee-mode {
    cursor: crosshair;
}

.sprotty-node.marquee {
    fill: lightgray;
    opacity: 0.2;
}

.sprotty-edge > .sprotty-routing-handle {
    r: 5px;
    fill: #1d80d1;
    stroke: none;
    z-index: 1000;
}

.sprotty-edge > .sprotty-routing-handle[data-kind='line'] {
    opacity: 0.35;
}

.sprotty-edge > .sprotty-routing-handle.selected {
    fill: #1d80d1;
}

.sprotty-edge > .sprotty-routing-handle.mouseover {
    stroke: #1d80d1a1;
    stroke-width: 1;
}

.sprotty-missing {
    stroke-width: 1;
    stroke: #f00;
    fill: #f00;
    font-size: 14pt;
    text-anchor: middle;
}

.sprotty g .movement-not-allowed > .sprotty-node {
    stroke: var(--glsp-error-foreground);
    stroke-width: 1.5px;
}

.sprotty .sprotty-resize-handle.movement-not-allowed {
    stroke: var(--glsp-error-foreground);
    fill: var(--glsp-error-foreground);
}

.sprotty .error > .sprotty-node {
    filter: drop-shadow(0px 0px 2px var(--glsp-error-foreground));
}

.sprotty .warning > .sprotty-node {
    filter: drop-shadow(0px 0px 2px var(--glsp-warning-foreground));
}

.sprotty .info > .sprotty-node {
    filter: drop-shadow(0px 0px 2px var(--glsp-info-foreground));
}

.sprotty svg {
    border-style: solid;
    border-width: 1px;
    border-color: #bbb;
    user-select: none;
}

.sprotty text {
    stroke-width: 0;
    stroke: #000;
    fill: #000;
    font-family: sans-serif;
    font-size: 8pt;
    text-anchor: middle;
}

.glsp-projection {
    width: 40%;
    opacity: 1;
}

.sprotty.sprotty-hidden .sprotty-projection-bar {
    visibility: hidden;
}

.sprotty-projection-bar.vertical.bordered-projection-bar {
    position: absolute;
    top: 0;
    right: 0;
    width: 20px;
    height: 100%;
}

.sprotty-projection-bar.horizontal.bordered-projection-bar {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 20px;
    width: 100%;
}

.sprotty-projection-bar.horizontal .sprotty-projection,
.sprotty-projection-bar.horizontal .sprotty-viewport {
    position: absolute;
    height: 100%;
    top: 0;
}

.sprotty-projection-bar.vertical .sprotty-projection,
.sprotty-projection-bar.vertical .sprotty-viewport {
    position: absolute;
    width: 100%;
    left: 0;
}

.projection-scroll-bar {
    position: absolute;
    background: transparent;
    background-color: #aaa;
    z-index: 1;
    opacity: 0.3;
    transition: opacity 0.8s linear;
}

.sprotty-viewport {
    z-index: 1;
    border-style: solid;
    border-width: 2px;
}

.bordered-projection-bar {
    border-left: 1px solid rgba(212, 212, 212, 0.2);
    border-top: 1px solid rgba(212, 212, 212, 0.2);
    fill: transparent;
}

.ui-extension.hidden {
    display: none;
    opacity: 0;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/glsp-sprotty.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,4BAA4B;IAC5B,iCAAiC;IACjC,iCAAiC;IACjC,+CAA+C;AACnD;;AAEA;IACI,YAAY;IACZ,2DAA2D;AAC/D;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,UAAU;IACV,WAAW;AACf;;AAEA;IACI,2DAA2D;IAC3D,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,gBAAgB;IAChB,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oCAAoC;IACpC,MAAM;IACN,aAAa;IACb,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;;IAEI,YAAY;AAChB;;AAEA;;IAEI,eAAe;IACf,mBAAmB;AACvB;;AAEA;;IAEI,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;;IAEI,iBAAiB;AACrB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,MAAM;IACN,aAAa;IACb,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,UAAU;IACV,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,oCAAoC;IACpC,mBAAmB;AACvB;;AAEA;IACI,oCAAoC;IACpC,kCAAkC;AACtC;;AAEA;IACI,6DAA6D;AACjE;;AAEA;IACI,+DAA+D;AACnE;;AAEA;IACI,4DAA4D;AAChE;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;IACjB,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,UAAU;IACV,uBAAuB;IACvB,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,UAAU;AACd;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,OAAO;IACP,YAAY;IACZ,WAAW;AACf;;AAEA;;IAEI,kBAAkB;IAClB,YAAY;IACZ,MAAM;AACV;;AAEA;;IAEI,kBAAkB;IAClB,WAAW;IACX,OAAO;AACX;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,sBAAsB;IACtB,UAAU;IACV,YAAY;IACZ,+BAA+B;AACnC;;AAEA;IACI,UAAU;IACV,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,+CAA+C;IAC/C,8CAA8C;IAC9C,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,UAAU;AACd","sourcesContent":["/********************************************************************************\n * Copyright (c) 2019-2023 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n:root {\n    --glsp-error-foreground: red;\n    --glsp-warning-foreground: yellow;\n    --glsp-info-foreground: lightblue;\n    --glsp-issue-background: rgb(255 255 255 / 85%);\n}\n\n.sprotty {\n    padding: 0px;\n    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.sprotty svg text::selection {\n    background: none;\n}\n\n.sprotty-hidden {\n    display: block;\n    position: absolute;\n    width: 0px;\n    height: 0px;\n}\n\n.sprotty-popup {\n    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    position: absolute;\n    background: white;\n    border-radius: 5px;\n    border: 1px solid;\n    max-width: 400px;\n    min-width: 100px;\n    z-index: 1;\n    pointer-events: none;\n}\n\n.sprotty-popup > div {\n    margin: 10px;\n}\n\n.sprotty-popup-closed {\n    display: none;\n}\n\n.sprotty-resize-handle {\n    /* radius does not work in Firefox */\n    r: 5px;\n    fill: #1d80d1;\n    stroke: none;\n    z-index: 1000;\n}\n\n.sprotty-resize-handle.selected {\n    fill: #1d80d1;\n}\n\n.sprotty-resize-handle.active {\n    fill: #1d80d1;\n}\n\n.sprotty-edge {\n    fill: none;\n    stroke-width: 1.5px;\n}\n\n.sprotty-edge.selected {\n    stroke-width: 1.5px;\n}\n\n.sprotty-edge.mouseover:not(.selected) path {\n    stroke-width: 1.5px;\n}\n\n.sprotty-node:not(.selected) {\n    stroke-width: 0px;\n}\n\n.sprotty-node.mouseover:not(.selected),\n.sprotty-edge.mouseover:not(.selected) {\n    opacity: 60%;\n}\n\n.sprotty-node.selected,\n.sprotty-edge.selected {\n    stroke: #1d80d1;\n    stroke-width: 1.5px;\n}\n\n.sprotty-edge.mouseover:not(.selected) .arrow,\n.sprotty-edge.selected .arrow {\n    stroke-dashoffset: none;\n    stroke-dasharray: none;\n}\n\n.sprotty .node-creation-mode {\n    cursor: copy;\n}\n\n.sprotty .overlap-forbidden-mode {\n    cursor: not-allowed;\n}\n\n.sprotty .default-mode {\n    cursor: default;\n}\n\n.sprotty .edge-modification-not-allowed-mode {\n    cursor: no-drop;\n}\n\n.sprotty .edge-creation-select-source-mode {\n    cursor: pointer;\n}\n\n.sprotty .edge-creation-select-target-mode,\n.sprotty .edge-reconnect-select-target-mode {\n    cursor: crosshair;\n}\n\n.sprotty .edge-check-pending-mode {\n    cursor: wait;\n}\n\n.sprotty .move-mode {\n    cursor: move;\n}\n\n.sprotty .resize-nesw-mode {\n    cursor: nesw-resize;\n}\n\n.sprotty .resize-nwse-mode {\n    cursor: nwse-resize;\n}\n\n.sprotty .resize-nw-mode {\n    cursor: nw-resize;\n}\n\n.sprotty .resize-w-mode {\n    cursor: n-resize;\n}\n\n.sprotty .resize-ne-mode {\n    cursor: ne-resize;\n}\n\n.sprotty .resize-e-mode {\n    cursor: e-resize;\n}\n\n.sprotty .resize-se-mode {\n    cursor: se-resize;\n}\n\n.sprotty .resize-s-mode {\n    cursor: s-resize;\n}\n\n.sprotty .resize-sw-mode {\n    cursor: sw-resize;\n}\n\n.sprotty .resize-w-mode {\n    cursor: w-resize;\n}\n\n.sprotty .element-deletion-mode {\n    cursor: pointer;\n}\n\n.sprotty .marquee-mode {\n    cursor: crosshair;\n}\n\n.sprotty-node.marquee {\n    fill: lightgray;\n    opacity: 0.2;\n}\n\n.sprotty-edge > .sprotty-routing-handle {\n    r: 5px;\n    fill: #1d80d1;\n    stroke: none;\n    z-index: 1000;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='line'] {\n    opacity: 0.35;\n}\n\n.sprotty-edge > .sprotty-routing-handle.selected {\n    fill: #1d80d1;\n}\n\n.sprotty-edge > .sprotty-routing-handle.mouseover {\n    stroke: #1d80d1a1;\n    stroke-width: 1;\n}\n\n.sprotty-missing {\n    stroke-width: 1;\n    stroke: #f00;\n    fill: #f00;\n    font-size: 14pt;\n    text-anchor: middle;\n}\n\n.sprotty g .movement-not-allowed > .sprotty-node {\n    stroke: var(--glsp-error-foreground);\n    stroke-width: 1.5px;\n}\n\n.sprotty .sprotty-resize-handle.movement-not-allowed {\n    stroke: var(--glsp-error-foreground);\n    fill: var(--glsp-error-foreground);\n}\n\n.sprotty .error > .sprotty-node {\n    filter: drop-shadow(0px 0px 2px var(--glsp-error-foreground));\n}\n\n.sprotty .warning > .sprotty-node {\n    filter: drop-shadow(0px 0px 2px var(--glsp-warning-foreground));\n}\n\n.sprotty .info > .sprotty-node {\n    filter: drop-shadow(0px 0px 2px var(--glsp-info-foreground));\n}\n\n.sprotty svg {\n    border-style: solid;\n    border-width: 1px;\n    border-color: #bbb;\n    user-select: none;\n}\n\n.sprotty text {\n    stroke-width: 0;\n    stroke: #000;\n    fill: #000;\n    font-family: sans-serif;\n    font-size: 8pt;\n    text-anchor: middle;\n}\n\n.glsp-projection {\n    width: 40%;\n    opacity: 1;\n}\n\n.sprotty.sprotty-hidden .sprotty-projection-bar {\n    visibility: hidden;\n}\n\n.sprotty-projection-bar.vertical.bordered-projection-bar {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 20px;\n    height: 100%;\n}\n\n.sprotty-projection-bar.horizontal.bordered-projection-bar {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    height: 20px;\n    width: 100%;\n}\n\n.sprotty-projection-bar.horizontal .sprotty-projection,\n.sprotty-projection-bar.horizontal .sprotty-viewport {\n    position: absolute;\n    height: 100%;\n    top: 0;\n}\n\n.sprotty-projection-bar.vertical .sprotty-projection,\n.sprotty-projection-bar.vertical .sprotty-viewport {\n    position: absolute;\n    width: 100%;\n    left: 0;\n}\n\n.projection-scroll-bar {\n    position: absolute;\n    background: transparent;\n    background-color: #aaa;\n    z-index: 1;\n    opacity: 0.3;\n    transition: opacity 0.8s linear;\n}\n\n.sprotty-viewport {\n    z-index: 1;\n    border-style: solid;\n    border-width: 2px;\n}\n\n.bordered-projection-bar {\n    border-left: 1px solid rgba(212, 212, 212, 0.2);\n    border-top: 1px solid rgba(212, 212, 212, 0.2);\n    fill: transparent;\n}\n\n.ui-extension.hidden {\n    display: none;\n    opacity: 0;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/grid.css":
/*!************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/grid.css ***!
  \************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.grid-background .sprotty-graph,
.grid-background.sprotty-graph {
    --grid-stroke-width: calc(1px * var(--grid-background-zoom));
    --grid-stroke-width-half: calc(var(--grid-stroke-width) / 2);
    --grid-color: rgba(0, 0, 0, 0.1);
    background-image: linear-gradient(to right, var(--grid-color) var(--grid-stroke-width), transparent var(--grid-stroke-width)),
        linear-gradient(to bottom, var(--grid-color) var(--grid-stroke-width), transparent var(--grid-stroke-width));
    background-size: var(--grid-background-width) var(--grid-background-height);
    background-position: calc(var(--grid-background-x) - var(--grid-stroke-width-half))
        calc(var(--grid-background-y) - var(--grid-stroke-width-half));
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/grid.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;;IAEI,4DAA4D;IAC5D,4DAA4D;IAC5D,gCAAgC;IAChC;oHACgH;IAChH,2EAA2E;IAC3E;sEACkE;AACtE","sourcesContent":["/********************************************************************************\n * Copyright (c) 2024 Axon Ivy AG and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.grid-background .sprotty-graph,\n.grid-background.sprotty-graph {\n    --grid-stroke-width: calc(1px * var(--grid-background-zoom));\n    --grid-stroke-width-half: calc(var(--grid-stroke-width) / 2);\n    --grid-color: rgba(0, 0, 0, 0.1);\n    background-image: linear-gradient(to right, var(--grid-color) var(--grid-stroke-width), transparent var(--grid-stroke-width)),\n        linear-gradient(to bottom, var(--grid-color) var(--grid-stroke-width), transparent var(--grid-stroke-width));\n    background-size: var(--grid-background-width) var(--grid-background-height);\n    background-position: calc(var(--grid-background-x) - var(--grid-stroke-width-half))\n        calc(var(--grid-background-y) - var(--grid-stroke-width-half));\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/helper-lines.css":
/*!********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/helper-lines.css ***!
  \********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.helper-line {
    pointer-events: none;
    stroke: #1d80d1;
    stroke-width: 1;
    opacity: 1;
}

.selection-bounds {
    pointer-events: none;
    fill: blue;
    fill-opacity: 0.05;
    stroke-linejoin: miter;
    stroke-linecap: round;
    stroke: darkblue;
    stroke-width: 0.5;
    stroke-dasharray: 2;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/helper-lines.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,oBAAoB;IACpB,eAAe;IACf,eAAe;IACf,UAAU;AACd;;AAEA;IACI,oBAAoB;IACpB,UAAU;IACV,kBAAkB;IAClB,sBAAsB;IACtB,qBAAqB;IACrB,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;AACvB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.helper-line {\n    pointer-events: none;\n    stroke: #1d80d1;\n    stroke-width: 1;\n    opacity: 1;\n}\n\n.selection-bounds {\n    pointer-events: none;\n    fill: blue;\n    fill-opacity: 0.05;\n    stroke-linejoin: miter;\n    stroke-linecap: round;\n    stroke: darkblue;\n    stroke-width: 0.5;\n    stroke-dasharray: 2;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/key-shortcut.css":
/*!********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/key-shortcut.css ***!
  \********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.keyboard-shortcuts-menu {
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #ededee;
    margin-bottom: 20px;
    position: absolute;
    display: flex;
    flex-direction: column;
    bottom: 0;
    right: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    line-height: 1.5;
    font-size: 16px;
    z-index: 9999;
    width: 400px;
    max-height: 512px;
    box-shadow:
        0 4px 8px 0 rgba(0, 0, 0, 0.2),
        0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.keyboard-shortcuts-menu h3 {
    font-size: 18px;
    font-weight: bold;
    margin: 0;
    margin-bottom: 10px;
    padding: 10px;
}

.keyboard-shortcuts-menu kbd {
    background-color: #e4e1e1;
    border: 1px solid #ccc;
    border-radius: 3px;
    box-shadow:
        0 1px 0 rgba(0, 0, 0, 0.2),
        inset 0 0 0 1px rgba(255, 255, 255, 0.5);
    color: #333;
    display: inline-block;
    font-size: 0.85em;
    font-weight: 600;
    line-height: 1;
    padding: 2px 4px;
    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
    white-space: nowrap;
}

.keyboard-shortcuts-menu kbd:active {
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2) inset;
}

.keyboard-shortcuts-container {
    display: flex;
    flex-direction: column;
    max-height: 100%;
    padding: 10px;
    padding-top: 3px;
    overflow: auto;
    right: 40px;
    top: 25px;
    text-align: left;
    display: block;
    z-index: 1000;
    color: black;
}

.shortcut-entry-container {
    display: flex;
    justify-content: space-between;
    margin-right: 10px;
}

#key-shortcut-close-btn {
    position: absolute;
    top: 14px;
    right: 5px;
    font-size: 16px;
    font-weight: bold;
    background: #cccccc;
    border: none;
    cursor: pointer;
}

.column-title {
    text-align: left;
}

.menu-header {
    padding: 0.4em;
    text-align: left;
    background: #cccccc;
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
}

.shortcut-table thead th {
    border-bottom: 2px solid #000;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/key-shortcut.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,sBAAsB;IACtB,kBAAkB;IAClB,yBAAyB;IACzB,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,WAAW;IACX,wCAAwC;IACxC,gBAAgB;IAChB,eAAe;IACf,aAAa;IACb,YAAY;IACZ,iBAAiB;IACjB;;wCAEoC;AACxC;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,SAAS;IACT,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,sBAAsB;IACtB,kBAAkB;IAClB;;gDAE4C;IAC5C,WAAW;IACX,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;IACd,gBAAgB;IAChB,6CAA6C;IAC7C,mBAAmB;AACvB;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;IAChB,aAAa;IACb,gBAAgB;IAChB,cAAc;IACd,WAAW;IACX,SAAS;IACT,gBAAgB;IAChB,cAAc;IACd,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,eAAe;IACf,iBAAiB;IACjB,mBAAmB;IACnB,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,gBAAgB;IAChB,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,eAAe;AACnB;;AAEA;IACI,6BAA6B;AACjC","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.keyboard-shortcuts-menu {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: #ededee;\n    margin-bottom: 20px;\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    bottom: 0;\n    right: 10px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n    line-height: 1.5;\n    font-size: 16px;\n    z-index: 9999;\n    width: 400px;\n    max-height: 512px;\n    box-shadow:\n        0 4px 8px 0 rgba(0, 0, 0, 0.2),\n        0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\n.keyboard-shortcuts-menu h3 {\n    font-size: 18px;\n    font-weight: bold;\n    margin: 0;\n    margin-bottom: 10px;\n    padding: 10px;\n}\n\n.keyboard-shortcuts-menu kbd {\n    background-color: #e4e1e1;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    box-shadow:\n        0 1px 0 rgba(0, 0, 0, 0.2),\n        inset 0 0 0 1px rgba(255, 255, 255, 0.5);\n    color: #333;\n    display: inline-block;\n    font-size: 0.85em;\n    font-weight: 600;\n    line-height: 1;\n    padding: 2px 4px;\n    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);\n    white-space: nowrap;\n}\n\n.keyboard-shortcuts-menu kbd:active {\n    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2) inset;\n}\n\n.keyboard-shortcuts-container {\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    padding: 10px;\n    padding-top: 3px;\n    overflow: auto;\n    right: 40px;\n    top: 25px;\n    text-align: left;\n    display: block;\n    z-index: 1000;\n    color: black;\n}\n\n.shortcut-entry-container {\n    display: flex;\n    justify-content: space-between;\n    margin-right: 10px;\n}\n\n#key-shortcut-close-btn {\n    position: absolute;\n    top: 14px;\n    right: 5px;\n    font-size: 16px;\n    font-weight: bold;\n    background: #cccccc;\n    border: none;\n    cursor: pointer;\n}\n\n.column-title {\n    text-align: left;\n}\n\n.menu-header {\n    padding: 0.4em;\n    text-align: left;\n    background: #cccccc;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-wrap: wrap;\n}\n\n.shortcut-table thead th {\n    border-bottom: 2px solid #000;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/keyboard-tool-palette.css":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/keyboard-tool-palette.css ***!
  \*****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.accessibility-tool-palette .header-tools i {
    position: relative;
}

.accessibility-tool-palette .tool-button .key-shortcut,
.accessibility-tool-palette .header-tools .key-shortcut {
    display: none;
    position: absolute;

    border-radius: 50%;
    width: 0.5rem;
    height: 0.5rem;
    padding: 0.5rem;

    background: #fff;
    border: 2px solid #666;
    color: black;
    text-align: center;

    font:
        bold 0.8rem Arial,
        sans-serif;
    line-height: 0.5rem;
}

.accessibility-tool-palette .tool-button .key-shortcut {
    left: -2rem;
}

.accessibility-tool-palette .header-tools .key-shortcut {
    top: -2.5rem;
    right: -0.3rem;
}

.accessibility-show-shortcuts:focus-within .header-tools .key-shortcut,
.accessibility-show-shortcuts:focus-within .tool-button .key-shortcut {
    display: block;
}

.accessibility-tool-palette.collapsible-palette {
    overflow: visible;
}

.accessibility-tool-palette.collapsible-palette + .minimize-palette-button {
    top: 50px;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/keyboard-tool-palette.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,kBAAkB;AACtB;;AAEA;;IAEI,aAAa;IACb,kBAAkB;;IAElB,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,eAAe;;IAEf,gBAAgB;IAChB,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;;IAElB;;kBAEc;IACd,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,cAAc;AAClB;;AAEA;;IAEI,cAAc;AAClB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,SAAS;AACb","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.accessibility-tool-palette .header-tools i {\n    position: relative;\n}\n\n.accessibility-tool-palette .tool-button .key-shortcut,\n.accessibility-tool-palette .header-tools .key-shortcut {\n    display: none;\n    position: absolute;\n\n    border-radius: 50%;\n    width: 0.5rem;\n    height: 0.5rem;\n    padding: 0.5rem;\n\n    background: #fff;\n    border: 2px solid #666;\n    color: black;\n    text-align: center;\n\n    font:\n        bold 0.8rem Arial,\n        sans-serif;\n    line-height: 0.5rem;\n}\n\n.accessibility-tool-palette .tool-button .key-shortcut {\n    left: -2rem;\n}\n\n.accessibility-tool-palette .header-tools .key-shortcut {\n    top: -2.5rem;\n    right: -0.3rem;\n}\n\n.accessibility-show-shortcuts:focus-within .header-tools .key-shortcut,\n.accessibility-show-shortcuts:focus-within .tool-button .key-shortcut {\n    display: block;\n}\n\n.accessibility-tool-palette.collapsible-palette {\n    overflow: visible;\n}\n\n.accessibility-tool-palette.collapsible-palette + .minimize-palette-button {\n    top: 50px;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/keyboard.css":
/*!****************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/keyboard.css ***!
  \****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.grid-container {
    display: grid;
    position: absolute;
    top: 0.5rem;
    bottom: 0.5rem;
    left: 0.5rem;
    right: 0.5rem;
    grid-template-columns: auto auto auto;
}

.grid-container.grid-visible {
    opacity: 0.7;
    visibility: visible;
}

.grid-container.grid-hidden {
    opacity: 0;
    visibility: hidden;
}

.grid-container:focus {
    opacity: 1;
}

.grid-item {
    border: 1px solid rgba(0, 0, 0, 0.6);
    padding: 1rem;
    /* Fix overlapping borders */
    margin: 0 -1px -1px 0;
}

.grid-item-number {
    border-radius: 50%;
    width: 1.5rem;
    height: 1.5rem;
    padding: 0.5rem;

    background: #fff;
    border: 2px solid #666;
    color: black;
    text-align: center;

    font:
        bold 1.3rem Arial,
        sans-serif;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/keyboard.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,aAAa;IACb,kBAAkB;IAClB,WAAW;IACX,cAAc;IACd,YAAY;IACZ,aAAa;IACb,qCAAqC;AACzC;;AAEA;IACI,YAAY;IACZ,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,kBAAkB;AACtB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,oCAAoC;IACpC,aAAa;IACb,4BAA4B;IAC5B,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,eAAe;;IAEf,gBAAgB;IAChB,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;;IAElB;;kBAEc;AAClB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.grid-container {\n    display: grid;\n    position: absolute;\n    top: 0.5rem;\n    bottom: 0.5rem;\n    left: 0.5rem;\n    right: 0.5rem;\n    grid-template-columns: auto auto auto;\n}\n\n.grid-container.grid-visible {\n    opacity: 0.7;\n    visibility: visible;\n}\n\n.grid-container.grid-hidden {\n    opacity: 0;\n    visibility: hidden;\n}\n\n.grid-container:focus {\n    opacity: 1;\n}\n\n.grid-item {\n    border: 1px solid rgba(0, 0, 0, 0.6);\n    padding: 1rem;\n    /* Fix overlapping borders */\n    margin: 0 -1px -1px 0;\n}\n\n.grid-item-number {\n    border-radius: 50%;\n    width: 1.5rem;\n    height: 1.5rem;\n    padding: 0.5rem;\n\n    background: #fff;\n    border: 2px solid #666;\n    color: black;\n    text-align: center;\n\n    font:\n        bold 1.3rem Arial,\n        sans-serif;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/navigation.css":
/*!******************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/navigation.css ***!
  \******************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

:root {
    --glsp-navigation-highlight: rgba(136, 68, 68, 0.2);
}

.navigable-element {
    stroke: var(--glsp-navigation-highlight);
}

.navigable-element .sprotty-edge.arrow {
    fill: var(--glsp-navigation-highlight);
    stroke: var(--glsp-navigation-highlight);
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/navigation.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,mDAAmD;AACvD;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,sCAAsC;IACtC,wCAAwC;AAC5C","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n:root {\n    --glsp-navigation-highlight: rgba(136, 68, 68, 0.2);\n}\n\n.navigable-element {\n    stroke: var(--glsp-navigation-highlight);\n}\n\n.navigable-element .sprotty-edge.arrow {\n    fill: var(--glsp-navigation-highlight);\n    stroke: var(--glsp-navigation-highlight);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/search.css":
/*!**************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/search.css ***!
  \**************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.search-hidden {
    opacity: 0.4;
}

.search-highlighted .sprotty-node,
.search-highlighted .sprotty-edge {
    stroke-width: 1.5px;
    stroke-width: 2px;
    stroke-dashoffset: 5;
    stroke-dasharray: 5, 5;
    stroke-linecap: round;
    stroke: #130bf7;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/search.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,YAAY;AAChB;;AAEA;;IAEI,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,sBAAsB;IACtB,qBAAqB;IACrB,eAAe;AACnB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.search-hidden {\n    opacity: 0.4;\n}\n\n.search-highlighted .sprotty-node,\n.search-highlighted .sprotty-edge {\n    stroke-width: 1.5px;\n    stroke-width: 2px;\n    stroke-dashoffset: 5;\n    stroke-dasharray: 5, 5;\n    stroke-linecap: round;\n    stroke: #130bf7;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/status-overlay.css":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/status-overlay.css ***!
  \**********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.sprotty-status {
    position: absolute;
    top: 5px;
    left: 10px;
    display: flex;
    align-items: center;
}

.sprotty-status .fatal {
    color: var(--glsp-error-foreground);
}

.sprotty-status .error {
    color: var(--glsp-error-foreground);
}

.sprotty-status .warning {
    color: var(--glsp-warning-foreground);
}

.sprotty-status .info {
    color: var(--glsp-info-foreground);
}

.sprotty-error {
    fill: var(--glsp-issue-background);
    color: var(--glsp-error-foreground);
}

.sprotty-warning {
    fill: var(--glsp-issue-background);
    color: var(--glsp-warning-foreground);
}

.sprotty-info {
    fill: var(--glsp-issue-background);
    color: var();
}

.sprotty-infoRow .codicon {
    margin-right: 8px;
}
.sprotty-status .ok {
    visibility: hidden;
}

.sprotty-status-message {
    visibility: hidden;
    padding-left: 10px;
}

.sprotty-status-message.fatal {
    visibility: visible;
    padding-left: 10px;
}

.sprotty-status:hover .sprotty-status-message {
    visibility: visible;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/status-overlay.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,kBAAkB;IAClB,QAAQ;IACR,UAAU;IACV,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,qCAAqC;AACzC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;IAClC,mCAAmC;AACvC;;AAEA;IACI,kCAAkC;IAClC,qCAAqC;AACzC;;AAEA;IACI,kCAAkC;IAClC,YAAY;AAChB;;AAEA;IACI,iBAAiB;AACrB;AACA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.sprotty-status {\n    position: absolute;\n    top: 5px;\n    left: 10px;\n    display: flex;\n    align-items: center;\n}\n\n.sprotty-status .fatal {\n    color: var(--glsp-error-foreground);\n}\n\n.sprotty-status .error {\n    color: var(--glsp-error-foreground);\n}\n\n.sprotty-status .warning {\n    color: var(--glsp-warning-foreground);\n}\n\n.sprotty-status .info {\n    color: var(--glsp-info-foreground);\n}\n\n.sprotty-error {\n    fill: var(--glsp-issue-background);\n    color: var(--glsp-error-foreground);\n}\n\n.sprotty-warning {\n    fill: var(--glsp-issue-background);\n    color: var(--glsp-warning-foreground);\n}\n\n.sprotty-info {\n    fill: var(--glsp-issue-background);\n    color: var();\n}\n\n.sprotty-infoRow .codicon {\n    margin-right: 8px;\n}\n.sprotty-status .ok {\n    visibility: hidden;\n}\n\n.sprotty-status-message {\n    visibility: hidden;\n    padding-left: 10px;\n}\n\n.sprotty-status-message.fatal {\n    visibility: visible;\n    padding-left: 10px;\n}\n\n.sprotty-status:hover .sprotty-status-message {\n    visibility: visible;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/toast.css":
/*!*************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/toast.css ***!
  \*************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
.toast {
    position: absolute;
    bottom: 48px; /* same as top of toolbar by default */
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-column-gap: 1rem;
    left: 40px; /* same as right of toolbar by default */
}

.toast-column-left {
    grid-column: 1 / span 1;
}

.toast-column-center {
    grid-column: 2 / span 1;
}

.toast-column-right {
    grid-column: 3 / span 1;
}

.toast-container {
    display: inline-block;
    min-width: 256px;
    max-width: 516px;
    background-color: #ccc;
    color: #000;
    padding: 0.5rem;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/toast.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;AACjF;IACI,kBAAkB;IAClB,YAAY,EAAE,sCAAsC;IACpD,aAAa;IACb,kCAAkC;IAClC,qBAAqB;IACrB,UAAU,EAAE,wCAAwC;AACxD;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;IACrB,gBAAgB;IAChB,gBAAgB;IAChB,sBAAsB;IACtB,WAAW;IACX,eAAe;AACnB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n.toast {\n    position: absolute;\n    bottom: 48px; /* same as top of toolbar by default */\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-column-gap: 1rem;\n    left: 40px; /* same as right of toolbar by default */\n}\n\n.toast-column-left {\n    grid-column: 1 / span 1;\n}\n\n.toast-column-center {\n    grid-column: 2 / span 1;\n}\n\n.toast-column-right {\n    grid-column: 3 / span 1;\n}\n\n.toast-container {\n    display: inline-block;\n    min-width: 256px;\n    max-width: 516px;\n    background-color: #ccc;\n    color: #000;\n    padding: 0.5rem;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/tool-palette.css":
/*!********************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/tool-palette.css ***!
  \********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2019-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

/* Css for main container */
.tool-palette {
    position: absolute;
    right: 45px;
    top: 35px;
    text-align: center;
    width: fit-content;
    display: block;
    z-index: 1000;
    border-style: solid;
    border-width: 0px;
    border-color: #bbb;
    border-radius: 5px;
    color: black;
    user-select: none;
    /* supported by Chrome and Opera */
    -webkit-user-select: none;
    /* Safari */
    -khtml-user-select: none;
    /* Konqueror HTML */
    -moz-user-select: none;
    /* Firefox */
    -ms-user-select: none;
    /* Internet Explorer/Edge */

    box-shadow:
        4px 0 4px 0 rgba(0, 0, 0, 0.2),
        0 4px 4px 0 rgba(0, 0, 0, 0.19);
    font-size: 14px;
}

/* Css for header compartment */

.palette-header {
    padding: 0.4em;
    text-align: left;
    background: rgb(151, 160, 165);
    border: 1px solid rgba(60, 60, 60, 0.6);
    border-bottom: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    gap: 6px;
}

.header-icon {
    display: none;
    align-items: center;
}

.header-tools {
    display: flex;
    align-items: center;
    gap: 3px;
}

.header-tools i {
    border: 1px solid transparent;
    padding: 0.15em;
    margin-right: 0.15em;
}

.header-tools i:hover {
    background: #dfdfdf;
}

.header-tools .clicked {
    background: #bddaef;
    border: 1px solid rgba(60, 60, 60, 0.6);
}

/*Css for palette body compartment */

.palette-body {
    background: rgba(100, 100, 100, 0.2);
    border: 1px solid rgba(60, 60, 60, 0.6);
}

.tool-group {
    text-align: left;
    background: #ededee;
}

.group-header {
    background: rgb(187, 193, 196);
    display: flex;
    align-items: center;
}

.group-header:hover {
    background: rgb(187, 193, 196);
}

.group-header i {
    padding: 0.4em;
}

.tool-button {
    background: rgb(252, 253, 253);
    padding: 0.4em;
    display: flex;
    align-items: center;
}

.tool-button i {
    margin-right: 0.4em;
}

.tool-button:hover {
    background: rgb(220, 223, 224);
}

.tool-button.clicked {
    background: rgb(163, 201, 219);
}

.tool-button.collapsed {
    display: none;
}

.collapsible-palette {
    overflow: auto;
    transition: max-height 0.2s ease-out;
}

.minimize-palette-button {
    position: absolute;
    right: 20px;
    top: 35px;
    z-index: 1000;
    color: rgb(58, 63, 65);
}

.minimize-palette-button .codicon::before {
    font-size: 20px;
}

.search-input {
    box-sizing: border-box;
    background: rgb(252, 253, 253);
    color: black;
    border: 1px solid rgb(187, 193, 196);
    padding: 4px;
    width: 100%;
    margin: 3px 0;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/client/css/tool-palette.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF,2BAA2B;AAC3B;IACI,kBAAkB;IAClB,WAAW;IACX,SAAS;IACT,kBAAkB;IAClB,kBAAkB;IAClB,cAAc;IACd,aAAa;IACb,mBAAmB;IACnB,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;IACZ,iBAAiB;IACjB,kCAAkC;IAClC,yBAAyB;IACzB,WAAW;IACX,wBAAwB;IACxB,mBAAmB;IACnB,sBAAsB;IACtB,YAAY;IACZ,qBAAqB;IACrB,2BAA2B;;IAE3B;;uCAEmC;IACnC,eAAe;AACnB;;AAEA,+BAA+B;;AAE/B;IACI,cAAc;IACd,gBAAgB;IAChB,8BAA8B;IAC9B,uCAAuC;IACvC,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,8BAA8B;IAC9B,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,6BAA6B;IAC7B,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,uCAAuC;AAC3C;;AAEA,oCAAoC;;AAEpC;IACI,oCAAoC;IACpC,uCAAuC;AAC3C;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,8BAA8B;IAC9B,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,8BAA8B;IAC9B,cAAc;IACd,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,oCAAoC;AACxC;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,SAAS;IACT,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,8BAA8B;IAC9B,YAAY;IACZ,oCAAoC;IACpC,YAAY;IACZ,WAAW;IACX,aAAa;AACjB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2019-2021 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* Css for main container */\n.tool-palette {\n    position: absolute;\n    right: 45px;\n    top: 35px;\n    text-align: center;\n    width: fit-content;\n    display: block;\n    z-index: 1000;\n    border-style: solid;\n    border-width: 0px;\n    border-color: #bbb;\n    border-radius: 5px;\n    color: black;\n    user-select: none;\n    /* supported by Chrome and Opera */\n    -webkit-user-select: none;\n    /* Safari */\n    -khtml-user-select: none;\n    /* Konqueror HTML */\n    -moz-user-select: none;\n    /* Firefox */\n    -ms-user-select: none;\n    /* Internet Explorer/Edge */\n\n    box-shadow:\n        4px 0 4px 0 rgba(0, 0, 0, 0.2),\n        0 4px 4px 0 rgba(0, 0, 0, 0.19);\n    font-size: 14px;\n}\n\n/* Css for header compartment */\n\n.palette-header {\n    padding: 0.4em;\n    text-align: left;\n    background: rgb(151, 160, 165);\n    border: 1px solid rgba(60, 60, 60, 0.6);\n    border-bottom: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    gap: 6px;\n}\n\n.header-icon {\n    display: none;\n    align-items: center;\n}\n\n.header-tools {\n    display: flex;\n    align-items: center;\n    gap: 3px;\n}\n\n.header-tools i {\n    border: 1px solid transparent;\n    padding: 0.15em;\n    margin-right: 0.15em;\n}\n\n.header-tools i:hover {\n    background: #dfdfdf;\n}\n\n.header-tools .clicked {\n    background: #bddaef;\n    border: 1px solid rgba(60, 60, 60, 0.6);\n}\n\n/*Css for palette body compartment */\n\n.palette-body {\n    background: rgba(100, 100, 100, 0.2);\n    border: 1px solid rgba(60, 60, 60, 0.6);\n}\n\n.tool-group {\n    text-align: left;\n    background: #ededee;\n}\n\n.group-header {\n    background: rgb(187, 193, 196);\n    display: flex;\n    align-items: center;\n}\n\n.group-header:hover {\n    background: rgb(187, 193, 196);\n}\n\n.group-header i {\n    padding: 0.4em;\n}\n\n.tool-button {\n    background: rgb(252, 253, 253);\n    padding: 0.4em;\n    display: flex;\n    align-items: center;\n}\n\n.tool-button i {\n    margin-right: 0.4em;\n}\n\n.tool-button:hover {\n    background: rgb(220, 223, 224);\n}\n\n.tool-button.clicked {\n    background: rgb(163, 201, 219);\n}\n\n.tool-button.collapsed {\n    display: none;\n}\n\n.collapsible-palette {\n    overflow: auto;\n    transition: max-height 0.2s ease-out;\n}\n\n.minimize-palette-button {\n    position: absolute;\n    right: 20px;\n    top: 35px;\n    z-index: 1000;\n    color: rgb(58, 63, 65);\n}\n\n.minimize-palette-button .codicon::before {\n    font-size: 20px;\n}\n\n.search-input {\n    box-sizing: border-box;\n    background: rgb(252, 253, 253);\n    color: black;\n    border: 1px solid rgb(187, 193, 196);\n    padding: 4px;\n    width: 100%;\n    margin: 3px 0;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/command-palette.css":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/command-palette.css ***!
  \**********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2019-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.command-palette {
    z-index: var(--theia-menu-z-index);
    -webkit-animation: fadein 0.3s;
    -moz-animation: fadein 0.3s;
    -ms-animation: fadein 0.3s;
    -o-animation: fadein 0.3s;
    animation: fadein 0.3s;
}

.command-palette.validation .validation-decorator {
    position: absolute;
    padding: 5px;
    border-radius: 5px 5px 0px 0px;
    color: white;
    display: flex;
    align-items: flex-start;
    /* let error decoration fade in */
    -webkit-animation: fadein 0.3s;
    -moz-animation: fadein 0.3s;
    -ms-animation: fadein 0.3s;
    -o-animation: fadein 0.3s;
    animation: fadein 0.3s;
}

.command-palette.validation .validation-decorator span {
    margin-right: 5px;
}

.command-palette.validation.error input,
.command-palette.validation.error input:focus {
    color: var(--theia-inputValidation-errorForeground);
    outline-color: var(--theia-inputValidation-errorBorder);
}

.command-palette.validation.error .validation-decorator.error {
    border: 1px solid var(--theia-inputValidation-errorBorder);
    background-color: var(--theia-inputValidation-errorBorder);
}

.command-palette.validation.warning input,
.command-palette.validation.warning input:focus {
    color: var(--theia-inputValidation-warningForeground);
    outline-color: var(--theia-inputValidation-warningBorder);
}

.command-palette.validation.warning .validation-decorator.warning {
    border: 1px solid var(--theia-inputValidation-warningBorder);
    background-color: var(--theia-inputValidation-warningBorder);
}

.command-palette {
    box-shadow: var(--theia-border-width) var(--theia-border-width) var(--theia-widget-shadow);
    background-color: var(--theia-menu-background);
}

.command-palette input {
    background: var(--theia-input-background);
    color: var(--theia-input-foreground);
    border: var(--theia-border-width) solid var(--theia-input-border);
    font-family: var(--theia-ui-font-family);
    font-size: var(--theia-ui-font-size1);
    line-height: var(--theia-content-line-height);
    padding-left: 5px;
}

.command-palette .command-palette-suggestions {
    background: inherit;
    line-height: var(--theia-content-line-height);
}

.command-palette .command-palette-suggestions > div:hover:not(.group) {
    background: var(--theia-menubar-selectionBackground);
}

.command-palette .command-palette-suggestions > div.selected {
    background: var(--theia-menu-selectionBackground);
    color: var(--theia-menu-selectionForeground);
}

.command-palette .loading {
    position: absolute;
    font-size: inherit;
    top: 5px;
    right: 0;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/theia-integration/css/command-palette.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,kCAAkC;IAClC,8BAA8B;IAC9B,2BAA2B;IAC3B,0BAA0B;IAC1B,yBAAyB;IACzB,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,8BAA8B;IAC9B,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,iCAAiC;IACjC,8BAA8B;IAC9B,2BAA2B;IAC3B,0BAA0B;IAC1B,yBAAyB;IACzB,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;;IAEI,mDAAmD;IACnD,uDAAuD;AAC3D;;AAEA;IACI,0DAA0D;IAC1D,0DAA0D;AAC9D;;AAEA;;IAEI,qDAAqD;IACrD,yDAAyD;AAC7D;;AAEA;IACI,4DAA4D;IAC5D,4DAA4D;AAChE;;AAEA;IACI,0FAA0F;IAC1F,8CAA8C;AAClD;;AAEA;IACI,yCAAyC;IACzC,oCAAoC;IACpC,iEAAiE;IACjE,wCAAwC;IACxC,qCAAqC;IACrC,6CAA6C;IAC7C,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,6CAA6C;AACjD;;AAEA;IACI,oDAAoD;AACxD;;AAEA;IACI,iDAAiD;IACjD,4CAA4C;AAChD;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,QAAQ;IACR,QAAQ;AACZ","sourcesContent":["/********************************************************************************\n * Copyright (c) 2019-2021 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.command-palette {\n    z-index: var(--theia-menu-z-index);\n    -webkit-animation: fadein 0.3s;\n    -moz-animation: fadein 0.3s;\n    -ms-animation: fadein 0.3s;\n    -o-animation: fadein 0.3s;\n    animation: fadein 0.3s;\n}\n\n.command-palette.validation .validation-decorator {\n    position: absolute;\n    padding: 5px;\n    border-radius: 5px 5px 0px 0px;\n    color: white;\n    display: flex;\n    align-items: flex-start;\n    /* let error decoration fade in */\n    -webkit-animation: fadein 0.3s;\n    -moz-animation: fadein 0.3s;\n    -ms-animation: fadein 0.3s;\n    -o-animation: fadein 0.3s;\n    animation: fadein 0.3s;\n}\n\n.command-palette.validation .validation-decorator span {\n    margin-right: 5px;\n}\n\n.command-palette.validation.error input,\n.command-palette.validation.error input:focus {\n    color: var(--theia-inputValidation-errorForeground);\n    outline-color: var(--theia-inputValidation-errorBorder);\n}\n\n.command-palette.validation.error .validation-decorator.error {\n    border: 1px solid var(--theia-inputValidation-errorBorder);\n    background-color: var(--theia-inputValidation-errorBorder);\n}\n\n.command-palette.validation.warning input,\n.command-palette.validation.warning input:focus {\n    color: var(--theia-inputValidation-warningForeground);\n    outline-color: var(--theia-inputValidation-warningBorder);\n}\n\n.command-palette.validation.warning .validation-decorator.warning {\n    border: 1px solid var(--theia-inputValidation-warningBorder);\n    background-color: var(--theia-inputValidation-warningBorder);\n}\n\n.command-palette {\n    box-shadow: var(--theia-border-width) var(--theia-border-width) var(--theia-widget-shadow);\n    background-color: var(--theia-menu-background);\n}\n\n.command-palette input {\n    background: var(--theia-input-background);\n    color: var(--theia-input-foreground);\n    border: var(--theia-border-width) solid var(--theia-input-border);\n    font-family: var(--theia-ui-font-family);\n    font-size: var(--theia-ui-font-size1);\n    line-height: var(--theia-content-line-height);\n    padding-left: 5px;\n}\n\n.command-palette .command-palette-suggestions {\n    background: inherit;\n    line-height: var(--theia-content-line-height);\n}\n\n.command-palette .command-palette-suggestions > div:hover:not(.group) {\n    background: var(--theia-menubar-selectionBackground);\n}\n\n.command-palette .command-palette-suggestions > div.selected {\n    background: var(--theia-menu-selectionBackground);\n    color: var(--theia-menu-selectionForeground);\n}\n\n.command-palette .loading {\n    position: absolute;\n    font-size: inherit;\n    top: 5px;\n    right: 0;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/decoration.css":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/decoration.css ***!
  \*****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2020 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

:root {
    --glsp-error-foreground: var(--theia-editorError-foreground);
    --glsp-warning-foreground: var(--theia-editorWarning-foreground);
    --glsp-info-foreground: var(--theia-editorInfo-foreground);
}

.sprotty-issue-background {
    fill: var(--theia-editor-background);
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/theia-integration/css/decoration.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,4DAA4D;IAC5D,gEAAgE;IAChE,0DAA0D;AAC9D;;AAEA;IACI,oCAAoC;AACxC","sourcesContent":["/********************************************************************************\n * Copyright (c) 2020 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n:root {\n    --glsp-error-foreground: var(--theia-editorError-foreground);\n    --glsp-warning-foreground: var(--theia-editorWarning-foreground);\n    --glsp-info-foreground: var(--theia-editorInfo-foreground);\n}\n\n.sprotty-issue-background {\n    fill: var(--theia-editor-background);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/diagram.css":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/diagram.css ***!
  \**************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2020-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.sprotty {
    display: flex;
    height: 100%;
}

.sprotty svg {
    width: 100%;
    flex: 1;
    border-style: solid;
    border-width: 0px;
}

.sprotty svg:focus {
    border-width: 0;
    outline: none;
}
.sprotty > div:focus {
    outline: none;
}

.sprotty-graph {
    background: var(--theia-editor-background);
}

.sprotty-node {
    stroke: var(--theia-editor-foreground);
    fill: var(--theia-editor-foreground);
}

.sprotty-edge {
    fill: none;
    stroke: var(--theia-editor-foreground);
}

.sprotty-edge > .sprotty-routing-handle {
    r: 5px;
    fill: var(--theia-foreground);
    stroke: none;
    z-index: 1000;
}

.sprotty-edge > .sprotty-routing-handle[data-kind='line'] {
    opacity: 0.35;
}

.sprotty-edge > .sprotty-routing-handle.mouseover {
    stroke-width: 1;
}

.sprotty-edge .arrow {
    fill: var(--theia-editor-foreground);
}

.sprotty-node.selected,
.sprotty-edge.selected {
    stroke: var(--theia-focusBorder);
}

.sprotty-edge.selected .arrow {
    fill: var(--theia-focusBorder);
    stroke: var(--theia-focusBorder);
}

.inactive .sprotty-node.selected {
    stroke: var(--theia-editor-inactiveSelectionBackground);
}

.sprotty-resize-handle.selected,
.sprotty-resize-handle.active,
.sprotty-edge > .sprotty-routing-handle.selected,
.sprotty-edge > .sprotty-routing-handle.mouseover {
    fill: var(--theia-focusBorder);
}

.inactive .sprotty-resize-handle,
.inactive .sprotty-routing-handle {
    fill: var(--theia-tab-unfocusedInactiveForeground);
}

.sprotty-node.mouseover:not(.selected),
.sprotty-edge.mouseover:not(.selected) {
    stroke: var(--theia-editor-foreground);
}

.sprotty-edge.mouseover:not(.selected) .arrow {
    fill: var(--theia-editor-foreground);
    stroke: var(--theia-editor-foreground);
}

/* Hover popup c*/

.sprotty-popup {
    padding: 0px;
    border-radius: 2px;
    box-shadow: 0px 1px 6px var(--theia-widget-shadow);
    background-color: var(--theia-editorHoverWidget-background);
    color: var(--theia-editorHoverWidget-foreground);
    border: 1px solid var(--theia-editorHoverWidget-border);
}

.sprotty-infoRow {
    font-size: small;
    margin-bottom: 8px;
}

.sprotty-infoTitle {
    display: block;
    font-weight: bold;
}

.sprotty-status .fatal {
    color: var(--theia-inputValidation-errorBorder);
}

.sprotty-status .error {
    color: var(--theia-errorForeground);
}

.sprotty-status .warning {
    color: var(--theia-editorWarning-foreground);
}

.sprotty-status .info {
    color: var(--theia-editorInfo-foreground);
}

.sprotty-error {
    fill: var(--theia-inputValidation-errorBackground);
    color: var(--theia-errorForeground);
}

.sprotty-warning {
    fill: var(--theia-inputValidation-warningBackground);
    color: var(--theia-editorWarning-foreground);
}

.sprotty-info {
    fill: var(--theia-info-color0);
    color: var(--theia-inputValidation-infoBackground);
}

.sprotty-projection-bar.vertical.bordered-projection-bar {
    width: var(--theia-scrollbar-rail-width);
}

.sprotty-projection-bar.horizontal.bordered-projection-bar {
    height: var(--theia-scrollbar-rail-width);
}

.mouse-enter .sprotty-projection-bar {
    opacity: 1;
}

.mouse-leave .sprotty-projection-bar {
    opacity: 0;
    pointer-events: none;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/theia-integration/css/diagram.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,OAAO;IACP,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,aAAa;AACjB;AACA;IACI,aAAa;AACjB;;AAEA;IACI,0CAA0C;AAC9C;;AAEA;IACI,sCAAsC;IACtC,oCAAoC;AACxC;;AAEA;IACI,UAAU;IACV,sCAAsC;AAC1C;;AAEA;IACI,MAAM;IACN,6BAA6B;IAC7B,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,oCAAoC;AACxC;;AAEA;;IAEI,gCAAgC;AACpC;;AAEA;IACI,8BAA8B;IAC9B,gCAAgC;AACpC;;AAEA;IACI,uDAAuD;AAC3D;;AAEA;;;;IAII,8BAA8B;AAClC;;AAEA;;IAEI,kDAAkD;AACtD;;AAEA;;IAEI,sCAAsC;AAC1C;;AAEA;IACI,oCAAoC;IACpC,sCAAsC;AAC1C;;AAEA,iBAAiB;;AAEjB;IACI,YAAY;IACZ,kBAAkB;IAClB,kDAAkD;IAClD,2DAA2D;IAC3D,gDAAgD;IAChD,uDAAuD;AAC3D;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,iBAAiB;AACrB;;AAEA;IACI,+CAA+C;AACnD;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,kDAAkD;IAClD,mCAAmC;AACvC;;AAEA;IACI,oDAAoD;IACpD,4CAA4C;AAChD;;AAEA;IACI,8BAA8B;IAC9B,kDAAkD;AACtD;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;IACV,oBAAoB;AACxB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2020-2022 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.sprotty {\n    display: flex;\n    height: 100%;\n}\n\n.sprotty svg {\n    width: 100%;\n    flex: 1;\n    border-style: solid;\n    border-width: 0px;\n}\n\n.sprotty svg:focus {\n    border-width: 0;\n    outline: none;\n}\n.sprotty > div:focus {\n    outline: none;\n}\n\n.sprotty-graph {\n    background: var(--theia-editor-background);\n}\n\n.sprotty-node {\n    stroke: var(--theia-editor-foreground);\n    fill: var(--theia-editor-foreground);\n}\n\n.sprotty-edge {\n    fill: none;\n    stroke: var(--theia-editor-foreground);\n}\n\n.sprotty-edge > .sprotty-routing-handle {\n    r: 5px;\n    fill: var(--theia-foreground);\n    stroke: none;\n    z-index: 1000;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='line'] {\n    opacity: 0.35;\n}\n\n.sprotty-edge > .sprotty-routing-handle.mouseover {\n    stroke-width: 1;\n}\n\n.sprotty-edge .arrow {\n    fill: var(--theia-editor-foreground);\n}\n\n.sprotty-node.selected,\n.sprotty-edge.selected {\n    stroke: var(--theia-focusBorder);\n}\n\n.sprotty-edge.selected .arrow {\n    fill: var(--theia-focusBorder);\n    stroke: var(--theia-focusBorder);\n}\n\n.inactive .sprotty-node.selected {\n    stroke: var(--theia-editor-inactiveSelectionBackground);\n}\n\n.sprotty-resize-handle.selected,\n.sprotty-resize-handle.active,\n.sprotty-edge > .sprotty-routing-handle.selected,\n.sprotty-edge > .sprotty-routing-handle.mouseover {\n    fill: var(--theia-focusBorder);\n}\n\n.inactive .sprotty-resize-handle,\n.inactive .sprotty-routing-handle {\n    fill: var(--theia-tab-unfocusedInactiveForeground);\n}\n\n.sprotty-node.mouseover:not(.selected),\n.sprotty-edge.mouseover:not(.selected) {\n    stroke: var(--theia-editor-foreground);\n}\n\n.sprotty-edge.mouseover:not(.selected) .arrow {\n    fill: var(--theia-editor-foreground);\n    stroke: var(--theia-editor-foreground);\n}\n\n/* Hover popup c*/\n\n.sprotty-popup {\n    padding: 0px;\n    border-radius: 2px;\n    box-shadow: 0px 1px 6px var(--theia-widget-shadow);\n    background-color: var(--theia-editorHoverWidget-background);\n    color: var(--theia-editorHoverWidget-foreground);\n    border: 1px solid var(--theia-editorHoverWidget-border);\n}\n\n.sprotty-infoRow {\n    font-size: small;\n    margin-bottom: 8px;\n}\n\n.sprotty-infoTitle {\n    display: block;\n    font-weight: bold;\n}\n\n.sprotty-status .fatal {\n    color: var(--theia-inputValidation-errorBorder);\n}\n\n.sprotty-status .error {\n    color: var(--theia-errorForeground);\n}\n\n.sprotty-status .warning {\n    color: var(--theia-editorWarning-foreground);\n}\n\n.sprotty-status .info {\n    color: var(--theia-editorInfo-foreground);\n}\n\n.sprotty-error {\n    fill: var(--theia-inputValidation-errorBackground);\n    color: var(--theia-errorForeground);\n}\n\n.sprotty-warning {\n    fill: var(--theia-inputValidation-warningBackground);\n    color: var(--theia-editorWarning-foreground);\n}\n\n.sprotty-info {\n    fill: var(--theia-info-color0);\n    color: var(--theia-inputValidation-infoBackground);\n}\n\n.sprotty-projection-bar.vertical.bordered-projection-bar {\n    width: var(--theia-scrollbar-rail-width);\n}\n\n.sprotty-projection-bar.horizontal.bordered-projection-bar {\n    height: var(--theia-scrollbar-rail-width);\n}\n\n.mouse-enter .sprotty-projection-bar {\n    opacity: 1;\n}\n\n.mouse-leave .sprotty-projection-bar {\n    opacity: 0;\n    pointer-events: none;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/features.css":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/features.css ***!
  \***************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

/* Debug */

.debug-bounds-decoration {
    stroke: var(--theia-editor-foreground);
}

/* Ghost element */

.sprotty-node.insert-indicator:not(.selected) {
    stroke: var(--theia-editor-foreground);
}

/* Helper lines */

.helper-line {
    stroke: var(--theia-focusBorder);
}

/* Grid */

:root {
    --grid-color: color-mix(in srgb, var(--theia-editor-foreground) 10%, transparent);
}

.theia-dark .grid-background .sprotty-graph,
.theia-dark .grid-background.sprotty-graph {
    --grid-color: rgba(255, 255, 255, 0.1);
}

.theia-light .grid-background .sprotty-graph,
.theia-light .grid-background.sprotty-graph {
    --grid-color: rgba(0, 0, 0, 0.1);
}

.theia-hc .grid-background .sprotty-graph,
.theia-hc .grid-background.sprotty-graph {
    --grid-color: rgba(255, 255, 255);
}

.theia-hcLight .grid-background .sprotty-graph,
.theia-hcLight .grid-background.sprotty-graph {
    --grid-color: rgba(0, 0, 0);
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/theia-integration/css/features.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF,UAAU;;AAEV;IACI,sCAAsC;AAC1C;;AAEA,kBAAkB;;AAElB;IACI,sCAAsC;AAC1C;;AAEA,iBAAiB;;AAEjB;IACI,gCAAgC;AACpC;;AAEA,SAAS;;AAET;IACI,iFAAiF;AACrF;;AAEA;;IAEI,sCAAsC;AAC1C;;AAEA;;IAEI,gCAAgC;AACpC;;AAEA;;IAEI,iCAAiC;AACrC;;AAEA;;IAEI,2BAA2B;AAC/B","sourcesContent":["/********************************************************************************\n * Copyright (c) 2024 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* Debug */\n\n.debug-bounds-decoration {\n    stroke: var(--theia-editor-foreground);\n}\n\n/* Ghost element */\n\n.sprotty-node.insert-indicator:not(.selected) {\n    stroke: var(--theia-editor-foreground);\n}\n\n/* Helper lines */\n\n.helper-line {\n    stroke: var(--theia-focusBorder);\n}\n\n/* Grid */\n\n:root {\n    --grid-color: color-mix(in srgb, var(--theia-editor-foreground) 10%, transparent);\n}\n\n.theia-dark .grid-background .sprotty-graph,\n.theia-dark .grid-background.sprotty-graph {\n    --grid-color: rgba(255, 255, 255, 0.1);\n}\n\n.theia-light .grid-background .sprotty-graph,\n.theia-light .grid-background.sprotty-graph {\n    --grid-color: rgba(0, 0, 0, 0.1);\n}\n\n.theia-hc .grid-background .sprotty-graph,\n.theia-hc .grid-background.sprotty-graph {\n    --grid-color: rgba(255, 255, 255);\n}\n\n.theia-hcLight .grid-background .sprotty-graph,\n.theia-hcLight .grid-background.sprotty-graph {\n    --grid-color: rgba(0, 0, 0);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/theia-dialogs.css":
/*!********************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/theia-dialogs.css ***!
  \********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2020 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.scroll-div {
    /** scrollable div, used e.g. in a Theia ConfirmDialog */
    max-height: 260px;
    overflow: auto;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/theia-integration/css/theia-dialogs.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,wDAAwD;IACxD,iBAAiB;IACjB,cAAc;AAClB","sourcesContent":["/********************************************************************************\n * Copyright (c) 2020 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.scroll-div {\n    /** scrollable div, used e.g. in a Theia ConfirmDialog */\n    max-height: 260px;\n    overflow: auto;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/tool-palette.css":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/tool-palette.css ***!
  \*******************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `/********************************************************************************
 * Copyright (c) 2020-2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

.tool-palette {
    box-shadow: 0px 1px 6px var(--theia-widget-shadow);
    top: 20px;
    width: fit-content;
    font-size: var(--theia-ui-font-size1);
}

.tool-group {
    background-color: unset;
}

.tool-palette .palette-header {
    background: var(--theia-titleBar-activeBackground);
    color: var(--theia-titleBar-activeForeground);
    border: 0;
    font-weight: normal;
    border-top: 1px solid var(--theia-focusBorder);
}

.inactive .tool-palette .palette-header {
    border-top: 1px solid var(--theia-tab-unfocusedInactiveForeground);
}

.tool-palette .palette-header .header-tools i {
    border: none;
}

.tool-palette .palette-header .header-tools i:hover:not(.clicked) {
    background: var(--theia-menubar-selectionBackground);
}

.tool-palette .palette-header .header-tools .clicked {
    background: var(--theia-inputOption-activeBackground);
}

.inactive .tool-palette .palette-header .header-tools .clicked {
    background: var(--theia-menubar-selectionBackground);
}

.tool-palette .palette-body {
    border: 0;
    box-shadow: none;
}

.tool-palette .palette-body .group-header {
    background: var(--theia-editorHoverWidget-statusBarBackground);
    color: var(--theia-titleBar-activeForeground);
    border: 0;
}

.tool-palette .palette-body .tool-button {
    background: var(--theia-menu-background);
    color: var(--theia-titleBar-activeForeground);
}

.tool-palette .palette-body .tool-button:hover:not(.clicked) {
    background: var(--theia-list-hoverBackground);
}

.tool-palette .tool-button.clicked {
    background: var(--theia-menu-selectionBackground);
    color: var(--theia-menu-selectionForeground);
}

.inactive .tool-palette .tool-button.clicked {
    background: var(--theia-list-hoverBackground);
    color: var(--theia-titleBar-activeForeground);
}

.search-input {
    background: var(--theia-input-background);
    color: var(--theia-input-foreground);
    border: var(--theia-border-width) solid var(--theia-input-border);
    font-family: var(--theia-ui-font-family);
    font-size: var(--theia-ui-font-size1);
    line-height: var(--theia-content-line-height);
}

.minimize-palette-button {
    top: 10px;
}
`, "",{"version":3,"sources":["webpack://./../node_modules/@eclipse-glsp/theia-integration/css/tool-palette.css"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;iFAciF;;AAEjF;IACI,kDAAkD;IAClD,SAAS;IACT,kBAAkB;IAClB,qCAAqC;AACzC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,kDAAkD;IAClD,6CAA6C;IAC7C,SAAS;IACT,mBAAmB;IACnB,8CAA8C;AAClD;;AAEA;IACI,kEAAkE;AACtE;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,oDAAoD;AACxD;;AAEA;IACI,qDAAqD;AACzD;;AAEA;IACI,oDAAoD;AACxD;;AAEA;IACI,SAAS;IACT,gBAAgB;AACpB;;AAEA;IACI,8DAA8D;IAC9D,6CAA6C;IAC7C,SAAS;AACb;;AAEA;IACI,wCAAwC;IACxC,6CAA6C;AACjD;;AAEA;IACI,6CAA6C;AACjD;;AAEA;IACI,iDAAiD;IACjD,4CAA4C;AAChD;;AAEA;IACI,6CAA6C;IAC7C,6CAA6C;AACjD;;AAEA;IACI,yCAAyC;IACzC,oCAAoC;IACpC,iEAAiE;IACjE,wCAAwC;IACxC,qCAAqC;IACrC,6CAA6C;AACjD;;AAEA;IACI,SAAS;AACb","sourcesContent":["/********************************************************************************\n * Copyright (c) 2020-2021 EclipseSource and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n.tool-palette {\n    box-shadow: 0px 1px 6px var(--theia-widget-shadow);\n    top: 20px;\n    width: fit-content;\n    font-size: var(--theia-ui-font-size1);\n}\n\n.tool-group {\n    background-color: unset;\n}\n\n.tool-palette .palette-header {\n    background: var(--theia-titleBar-activeBackground);\n    color: var(--theia-titleBar-activeForeground);\n    border: 0;\n    font-weight: normal;\n    border-top: 1px solid var(--theia-focusBorder);\n}\n\n.inactive .tool-palette .palette-header {\n    border-top: 1px solid var(--theia-tab-unfocusedInactiveForeground);\n}\n\n.tool-palette .palette-header .header-tools i {\n    border: none;\n}\n\n.tool-palette .palette-header .header-tools i:hover:not(.clicked) {\n    background: var(--theia-menubar-selectionBackground);\n}\n\n.tool-palette .palette-header .header-tools .clicked {\n    background: var(--theia-inputOption-activeBackground);\n}\n\n.inactive .tool-palette .palette-header .header-tools .clicked {\n    background: var(--theia-menubar-selectionBackground);\n}\n\n.tool-palette .palette-body {\n    border: 0;\n    box-shadow: none;\n}\n\n.tool-palette .palette-body .group-header {\n    background: var(--theia-editorHoverWidget-statusBarBackground);\n    color: var(--theia-titleBar-activeForeground);\n    border: 0;\n}\n\n.tool-palette .palette-body .tool-button {\n    background: var(--theia-menu-background);\n    color: var(--theia-titleBar-activeForeground);\n}\n\n.tool-palette .palette-body .tool-button:hover:not(.clicked) {\n    background: var(--theia-list-hoverBackground);\n}\n\n.tool-palette .tool-button.clicked {\n    background: var(--theia-menu-selectionBackground);\n    color: var(--theia-menu-selectionForeground);\n}\n\n.inactive .tool-palette .tool-button.clicked {\n    background: var(--theia-list-hoverBackground);\n    color: var(--theia-titleBar-activeForeground);\n}\n\n.search-input {\n    background: var(--theia-input-background);\n    color: var(--theia-input-foreground);\n    border: var(--theia-border-width) solid var(--theia-input-border);\n    font-family: var(--theia-ui-font-family);\n    font-size: var(--theia-ui-font-size1);\n    line-height: var(--theia-content-line-height);\n}\n\n.minimize-palette-button {\n    top: 10px;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/action-dispatcher.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/action-dispatcher.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPActionDispatcher = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const action_handler_registry_1 = __webpack_require__(/*! ./action-handler-registry */ "../node_modules/@eclipse-glsp/client/lib/base/action-handler-registry.js");
const glsp_model_source_1 = __webpack_require__(/*! ./model/glsp-model-source */ "../node_modules/@eclipse-glsp/client/lib/base/model/glsp-model-source.js");
const model_initialization_constraint_1 = __webpack_require__(/*! ./model/model-initialization-constraint */ "../node_modules/@eclipse-glsp/client/lib/base/model/model-initialization-constraint.js");
let GLSPActionDispatcher = class GLSPActionDispatcher extends sprotty_1.ActionDispatcher {
    constructor() {
        super(...arguments);
        this.timeouts = new Map();
        this.initializedConstraint = false;
        this.postUpdateQueue = [];
        this.initializeDeferred = new sprotty_1.Deferred();
    }
    initialize() {
        if (!this.initialized) {
            this.initialized = this.initializeDeferred.promise;
            this.doInitialize();
        }
        return this.initialized;
    }
    async doInitialize() {
        try {
            if (this.actionHandlerRegistry instanceof action_handler_registry_1.GLSPActionHandlerRegistry) {
                this.actionHandlerRegistry.initialize();
            }
            this.handleAction(sprotty_1.SetModelAction.create(sprotty_1.EMPTY_ROOT)).catch(() => {
                /* Logged in handleAction method */
            });
            this.startModelInitialization();
            this.initializeDeferred.resolve();
        }
        catch (error) {
            this.initializeDeferred.reject(error);
        }
    }
    startModelInitialization() {
        if (!this.initializedConstraint) {
            this.logger.log(this, 'Starting model initialization mode');
            this.initializationConstraint.onInitialized(() => this.logger.log(this, 'Model initialization completed'));
            this.initializedConstraint = true;
        }
    }
    onceModelInitialized() {
        return this.initializationConstraint.onInitialized();
    }
    hasHandler(action) {
        return this.actionHandlerRegistry.get(action.kind).length > 0;
    }
    /**
     * Processes all given actions, by dispatching them to the corresponding handlers, after the model initialization is completed.
     *
     * @param actions The actions that should be dispatched after the model initialization
     */
    dispatchOnceModelInitialized(...actions) {
        this.initializationConstraint.onInitialized(() => this.dispatchAll(actions));
    }
    /**
     * Processes all given actions, by dispatching them to the corresponding handlers, after the next model update.
     * The given actions are queued until the next model update cycle has been completed i.e.
     * the `EditorContextService.onModelRootChanged` event is triggered.
     *
     * @param actions The actions that should be dispatched after the next model update
     */
    dispatchAfterNextUpdate(...actions) {
        this.postUpdateQueue.push(...actions);
    }
    modelRootChanged(_root) {
        if (this.postUpdateQueue.length === 0) {
            return;
        }
        const toDispatch = [...this.postUpdateQueue];
        this.postUpdateQueue = [];
        this.dispatchAll(toDispatch);
    }
    async dispatch(action) {
        const result = await super.dispatch(action);
        this.initializationConstraint.notifyDispatched(action);
        return result;
    }
    handleAction(action) {
        if (sprotty_1.ResponseAction.hasValidResponseId(action)) {
            // clear timeout
            const timeout = this.timeouts.get(action.responseId);
            if (timeout !== undefined) {
                clearTimeout(timeout);
                this.timeouts.delete(action.responseId);
            }
            // Check if we have a pending request for the response.
            // If not the  we clear the responseId => action will be dispatched normally
            const deferred = this.requests.get(action.responseId);
            if (deferred === undefined) {
                action.responseId = '';
            }
        }
        if (!this.hasHandler(action) && glsp_model_source_1.OptionalAction.is(action)) {
            return Promise.resolve();
        }
        return super.handleAction(action);
    }
    request(action) {
        if (!action.requestId && action.requestId === '') {
            // No request id has been specified. So we use a generated one.
            action.requestId = sprotty_1.RequestAction.generateRequestId();
        }
        return super.request(action);
    }
    /**
     * Dispatch a request and waits for a response until the timeout given in `timeoutMs` has
     * been reached. The returned promise is resolved when a response with matching identifier
     * is dispatched or when the timeout has been reached. That response is _not_ passed to the
     * registered action handlers. Instead, it is the responsibility of the caller of this method
     * to handle the response properly. For example, it can be sent to the registered handlers by
     * passing it again to the `dispatch` method.
     * If `rejectOnTimeout` is set to false (default) the returned promise will be resolved with
     * no value, otherwise it will be rejected.
     */
    requestUntil(action, timeoutMs = 2000, rejectOnTimeout = false) {
        if (!action.requestId && action.requestId === '') {
            // No request id has been specified. So we use a generated one.
            action.requestId = sprotty_1.RequestAction.generateRequestId();
        }
        const requestId = action.requestId;
        const timeout = setTimeout(() => {
            const deferred = this.requests.get(requestId);
            if (deferred !== undefined) {
                // cleanup
                clearTimeout(timeout);
                this.requests.delete(requestId);
                const notification = 'Request ' + requestId + ' (' + action + ') time out after ' + timeoutMs + 'ms.';
                if (rejectOnTimeout) {
                    deferred.reject(notification);
                }
                else {
                    this.logger.info(this, notification);
                    deferred.resolve();
                }
            }
        }, timeoutMs);
        this.timeouts.set(requestId, timeout);
        return super.request(action);
    }
};
exports.GLSPActionDispatcher = GLSPActionDispatcher;
__decorate([
    (0, inversify_1.inject)(model_initialization_constraint_1.ModelInitializationConstraint),
    __metadata("design:type", model_initialization_constraint_1.ModelInitializationConstraint)
], GLSPActionDispatcher.prototype, "initializationConstraint", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.ActionHandlerRegistry),
    __metadata("design:type", sprotty_1.ActionHandlerRegistry)
], GLSPActionDispatcher.prototype, "actionHandlerRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ActionHandlerRegistryProvider),
    __metadata("design:type", Function)
], GLSPActionDispatcher.prototype, "actionHandlerRegistryProvider", void 0);
exports.GLSPActionDispatcher = GLSPActionDispatcher = __decorate([
    (0, inversify_1.injectable)()
], GLSPActionDispatcher);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/action-handler-registry.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/action-handler-registry.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPActionHandlerRegistry = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let GLSPActionHandlerRegistry = class GLSPActionHandlerRegistry extends sprotty_1.ActionHandlerRegistry {
    constructor(registrations, initializers) {
        super(registrations, initializers);
        this.initialized = false;
    }
    /**
     * Retrieve a set of all action kinds for which (at least) one
     * handler is registered
     * @returns the set of handled action kinds
     */
    getHandledActionKinds() {
        return Array.from(this.elements.keys());
    }
    initialize() {
        if (this.initialized) {
            return;
        }
        this.lazyInjector
            .getAll(sprotty_1.TYPES.ActionHandlerRegistration)
            .forEach(registration => this.register(registration.actionKind, registration.factory()));
        this.lazyInjector
            .getAll(sprotty_1.TYPES.IActionHandlerInitializer)
            .forEach(initializer => this.initializeActionHandler(initializer));
    }
};
exports.GLSPActionHandlerRegistry = GLSPActionHandlerRegistry;
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], GLSPActionHandlerRegistry.prototype, "lazyInjector", void 0);
exports.GLSPActionHandlerRegistry = GLSPActionHandlerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.EmptyArray)),
    __param(1, (0, inversify_1.inject)(sprotty_1.TYPES.EmptyArray)),
    __metadata("design:paramtypes", [Array, Array])
], GLSPActionHandlerRegistry);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/args-feature.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/args-feature.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.argsFeature = void 0;
exports.isArgsAware = isArgsAware;
exports.hasArgs = hasArgs;
exports.ensureArgs = ensureArgs;
exports.argsFeature = Symbol('argsFeature');
function isArgsAware(element) {
    return element !== undefined && element.hasFeature(exports.argsFeature);
}
function hasArgs(element) {
    return element !== undefined && isArgsAware(element) && element.args !== undefined;
}
function ensureArgs(element) {
    if (!isArgsAware(element)) {
        return false;
    }
    if (element.args === undefined) {
        element.args = {};
    }
    return true;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-actions.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-actions.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoCompleteValue = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var AutoCompleteValue;
(function (AutoCompleteValue) {
    function is(object) {
        return sprotty_1.LabeledAction.is(object) && (0, sprotty_1.hasStringProp)(object, 'text');
    }
    AutoCompleteValue.is = is;
})(AutoCompleteValue || (exports.AutoCompleteValue = AutoCompleteValue = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-widget.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-widget.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoCompleteWidget = void 0;
exports.toActionArray = toActionArray;
/********************************************************************************
 * Copyright (c) 2020-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const auto_complete_actions_1 = __webpack_require__(/*! ./auto-complete-actions */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-actions.js");
const validation_decorator_1 = __webpack_require__(/*! ./validation-decorator */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/validation-decorator.js");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const configureAutocomplete = __webpack_require__(/*! autocompleter */ "../node_modules/autocompleter/autocomplete.js");
/**
 * The `AutoCompleteWidget` is a reusable UI element that provides a text input supporting auto-completion,
 * validation, validation messages, etc.
 *
 * An example for using it is available in the workflow diagram:
 * https://github.com/eclipse-glsp/glsp-client/blob/master/examples/workflow-glsp/src/direct-task-editing/direct-task-editor.ts
 */
class AutoCompleteWidget {
    constructor(autoSuggestionSettings, suggestionProvider, suggestionSubmitHandler, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    notifyClose = () => { }, logger, options) {
        this.autoSuggestionSettings = autoSuggestionSettings;
        this.suggestionProvider = suggestionProvider;
        this.suggestionSubmitHandler = suggestionSubmitHandler;
        this.notifyClose = notifyClose;
        this.logger = logger;
        this.options = options;
        this.loadingIndicatorClasses = (0, sprotty_1.codiconCSSClasses)('loading', false, true, ['loading']);
        this.validationDecorator = validation_decorator_1.IValidationDecorator.NO_DECORATION;
    }
    configureValidation(inputValidator, validationDecorator = validation_decorator_1.IValidationDecorator.NO_DECORATION) {
        this.inputValidator = inputValidator;
        this.validationDecorator = validationDecorator;
    }
    configureTextSubmitHandler(textSubmitHandler) {
        this.textSubmitHandler = textSubmitHandler;
    }
    initialize(containerElement) {
        this.containerElement = containerElement;
        this.inputElement = this.createInputElement();
        this.containerElement.appendChild(this.inputElement);
        this.containerElement.style.position = 'absolute';
    }
    createInputElement() {
        const inputElement = document.createElement('input');
        inputElement.style.position = 'absolute';
        inputElement.spellcheck = false;
        inputElement.autocapitalize = 'false';
        inputElement.autocomplete = 'off';
        inputElement.style.width = '100%';
        inputElement.addEventListener('keydown', event => this.handleKeyDown(event));
        inputElement.addEventListener('blur', () => {
            if (this.containerElement.style.visibility !== 'hidden') {
                window.setTimeout(() => this.notifyClose('blur'), 200);
            }
        });
        return inputElement;
    }
    handleKeyDown(event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Escape')) {
            this.notifyClose('escape');
            return;
        }
        if ((0, sprotty_1.matchesKeystroke)(event, 'Enter') && !this.isInputElementChanged() && this.isSuggestionAvailable()) {
            return;
        }
        if (this.isInputElementChanged()) {
            this.invalidateValidationResultAndContextActions();
        }
        if (!(0, sprotty_1.matchesKeystroke)(event, 'Enter') || this.isSuggestionAvailable()) {
            return;
        }
        if (!this.validationDecorator.isValidatedOk()) {
            event.stopImmediatePropagation();
            return;
        }
        if (this.textSubmitHandler) {
            this.executeFromTextOnlyInput();
            this.notifyClose('submission');
        }
    }
    isInputElementChanged() {
        return this.inputElement.value !== this.previousContent;
    }
    invalidateValidationResultAndContextActions() {
        this.contextActions = undefined;
        this.validationDecorator.invalidate();
    }
    open(root, ...contextElementIds) {
        this.contextActions = undefined;
        this.autoCompleteResult = configureAutocomplete(this.autocompleteSettings(root));
        this.previousContent = this.inputElement.value;
        this.inputElement.setSelectionRange(0, this.inputElement.value.length);
        this.inputElement.focus();
    }
    autocompleteSettings(root) {
        return {
            input: this.inputElement,
            emptyMsg: this.autoSuggestionSettings.noSuggestionsMessage,
            className: this.autoSuggestionSettings.suggestionsClass,
            showOnFocus: this.autoSuggestionSettings.showOnFocus,
            debounceWaitMs: this.autoSuggestionSettings.debounceWaitMs,
            minLength: -1,
            fetch: (text, update) => this.updateSuggestions(update, text, root),
            onSelect: (item) => this.onSelect(item),
            render: (item, currentValue) => this.renderSuggestions(item, currentValue),
            customize: (input, inputRect, container, maxHeight) => {
                var _a;
                this.customizeInputElement(input, inputRect, container, maxHeight);
                const selectedSuggestionChanged = (_a = this.options) === null || _a === void 0 ? void 0 : _a.selectedSuggestionChanged;
                if (selectedSuggestionChanged) {
                    this.observer = new MutationObserver(mutations => this.handleContainerMutations(mutations, selectedSuggestionChanged));
                    this.observer.observe(container, { childList: true, attributes: true, subtree: true });
                }
            }
        };
    }
    customizeInputElement(input, inputRect, container, maxHeight) {
        // move container into our UIExtension container as this is already positioned correctly
        container.style.position = 'fixed';
        if (this.containerElement) {
            this.containerElement.appendChild(container);
        }
        this.container = container;
    }
    handleContainerMutations(mutations, selectionChanged) {
        var _a;
        const selectedElement = this.container.querySelector('.selected');
        // Trigger selection changed event
        // eslint-disable-next-line no-null/no-null
        if (selectedElement !== null && selectedElement !== undefined) {
            const index = Array.from(this.container.children).indexOf(selectedElement);
            selectionChanged((_a = this.contextActions) === null || _a === void 0 ? void 0 : _a[index]);
        }
        else {
            selectionChanged(undefined);
        }
    }
    updateSuggestions(update, text, root, ...contextElementIds) {
        this.onLoading();
        this.doUpdateSuggestions(text, root)
            .then(actions => {
            var _a, _b;
            this.contextActions = this.filterActions(text, actions);
            update(this.contextActions);
            (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.visibleSuggestionsChanged) === null || _b === void 0 ? void 0 : _b.call(_a, this.contextActions);
            this.onLoaded('success');
        })
            .catch(reason => {
            if (this.logger) {
                this.logger.error(this, 'Failed to obtain suggestions', reason);
            }
            this.onLoaded('error');
        });
    }
    onLoading() {
        if (this.loadingIndicator && this.containerElement.contains(this.loadingIndicator)) {
            return;
        }
        this.loadingIndicator = document.createElement('span');
        this.loadingIndicator.classList.add(...this.loadingIndicatorClasses);
        this.containerElement.appendChild(this.loadingIndicator);
    }
    doUpdateSuggestions(text, root, ...contextElementIds) {
        return this.suggestionProvider.provideSuggestions(text);
    }
    onLoaded(_success) {
        if (this.containerElement.contains(this.loadingIndicator)) {
            this.containerElement.removeChild(this.loadingIndicator);
        }
        this.validationDecorator.invalidate();
        this.validateInputIfNoContextActions();
        this.previousContent = this.inputElement.value;
    }
    renderSuggestions(item, value) {
        const itemElement = document.createElement('div');
        const wordMatcher = this.escapeForRegExp(value).split(' ').join('|');
        const regex = new RegExp(wordMatcher, 'gi');
        if (item.icon) {
            this.renderIcon(itemElement, item.icon);
        }
        itemElement.innerHTML += item.label.replace(regex, match => '<em>' + match + '</em>').replace(/ /g, '&nbsp;');
        return itemElement;
    }
    escapeForRegExp(value) {
        return value.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    renderIcon(itemElement, icon) {
        itemElement.innerHTML += `<span class="icon ${icon}"></span>`;
    }
    filterActions(filterText, actions) {
        return (0, sprotty_1.toArray)(actions.filter(action => {
            const label = action.label.toLowerCase();
            const searchWords = filterText.split(' ');
            return searchWords.every(word => label.indexOf(word.toLowerCase()) !== -1);
        }));
    }
    onSelect(item) {
        if (auto_complete_actions_1.AutoCompleteValue.is(item)) {
            this.inputElement.value = item.text;
            // trigger update of suggestions with an keyup event
            window.setTimeout(() => this.inputElement.dispatchEvent(new Event('input')));
        }
        else {
            this.executeFromSuggestion(item);
            this.notifyClose('submission');
        }
    }
    validateInputIfNoContextActions() {
        if (this.isNoOrExactlyOneMatchingContextAction()) {
            this.validateInput();
        }
        else {
            this.validationDecorator.dispose();
        }
    }
    isNoOrExactlyOneMatchingContextAction() {
        return (!this.isSuggestionAvailable() ||
            (this.contextActions && this.contextActions.length === 1 && this.inputElement.value.endsWith(this.contextActions[0].label)));
    }
    isSuggestionAvailable() {
        return this.contextActions && this.contextActions.length > 0;
    }
    validateInput() {
        if (this.inputValidator) {
            this.inputValidator
                .validate(this.inputElement.value)
                .then(result => this.validationDecorator.decorateValidationResult(result))
                .catch(error => this.handleErrorDuringValidation(error));
        }
    }
    handleErrorDuringValidation(error) {
        if (this.logger) {
            this.logger.error(this, 'Failed to validate input', error);
        }
        this.validationDecorator.dispose();
    }
    executeFromSuggestion(input) {
        this.suggestionSubmitHandler.executeFromSuggestion(input);
    }
    executeFromTextOnlyInput() {
        if (this.textSubmitHandler) {
            this.textSubmitHandler.executeFromTextOnlyInput(this.inputElement.value);
        }
    }
    get inputField() {
        return this.inputElement;
    }
    dispose() {
        this.validationDecorator.dispose();
        if (this.autoCompleteResult) {
            this.autoCompleteResult.destroy();
        }
    }
}
exports.AutoCompleteWidget = AutoCompleteWidget;
function toActionArray(input) {
    if (sprotty_1.LabeledAction.is(input)) {
        return input.actions;
    }
    else if (sprotty_1.Action.is(input)) {
        return [input];
    }
    return [];
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/autocomplete-suggestion-providers.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/auto-complete/autocomplete-suggestion-providers.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/base-autocomplete-palette.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/auto-complete/base-autocomplete-palette.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseAutocompletePalette = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
__webpack_require__(/*! ../../../css/autocomplete-palette.css */ "../node_modules/@eclipse-glsp/client/css/autocomplete-palette.css");
const ui_extension_1 = __webpack_require__(/*! ../ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
const auto_complete_widget_1 = __webpack_require__(/*! ./auto-complete-widget */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-widget.js");
const messages_1 = __webpack_require__(/*! ../messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
/**
 * A reusable base implementation for `UIExtensions` that want to provide autocomplete functionality
 * using the {@link AutoCompleteWidget}.
 *
 */
class BaseAutocompletePalette extends ui_extension_1.GLSPAbstractUIExtension {
    constructor() {
        super(...arguments);
        this.autoSuggestionSettings = {
            noSuggestionsMessage: messages_1.messages.autocomplete.no_suggestions,
            suggestionsClass: 'command-palette-suggestions',
            debounceWaitMs: 50,
            showOnFocus: true
        };
    }
    containerClass() {
        return 'autocomplete-palette';
    }
    show(root, ...contextElementIds) {
        super.show(root, ...contextElementIds);
        this.root = root;
        this.autocompleteWidget.open(root);
    }
    hide() {
        var _a;
        (_a = this.autocompleteWidget) === null || _a === void 0 ? void 0 : _a.dispose();
        this.root = undefined;
        super.hide();
    }
    initializeContents(containerElement) {
        containerElement.classList.add('command-palette');
        this.autocompleteWidget = new auto_complete_widget_1.AutoCompleteWidget(this.autoSuggestionSettings, { provideSuggestions: input => this.retrieveSuggestions(this.root, input) }, { executeFromSuggestion: input => this.executeSuggestion(input) }, reason => this.autocompleteHide(reason), this.logger, {
            visibleSuggestionsChanged: suggestions => this.visibleSuggestionsChanged(this.root, suggestions),
            selectedSuggestionChanged: suggestion => this.selectedSuggestionChanged(this.root, suggestion)
        });
        this.autocompleteWidget.initialize(containerElement);
    }
    async visibleSuggestionsChanged(root, labeledActions) {
        return;
    }
    async selectedSuggestionChanged(root, labeledAction) {
        return;
    }
    autocompleteHide(reason) {
        this.hide();
    }
    executeSuggestion(input) {
        this.actionDispatcher.dispatchAll((0, auto_complete_widget_1.toActionArray)(input));
    }
}
exports.BaseAutocompletePalette = BaseAutocompletePalette;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], BaseAutocompletePalette.prototype, "actionDispatcher", void 0);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/validation-decorator.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/auto-complete/validation-decorator.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidationDecorator = exports.IValidationDecorator = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var IValidationDecorator;
(function (IValidationDecorator) {
    IValidationDecorator.NO_DECORATION = {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        decorateValidationResult(_status) { },
        isValidatedOk() {
            return false;
        },
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        invalidate() { },
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        dispose() { }
    };
})(IValidationDecorator || (exports.IValidationDecorator = IValidationDecorator = {}));
class ValidationDecorator {
    constructor(containerElement) {
        this.containerElement = containerElement;
        this.warningClasses = ['warning'];
        this.warningIconClasses = (0, sprotty_1.codiconCSSString)('warning');
        this.errorClasses = ['error'];
        this.errorIconClasses = (0, sprotty_1.codiconCSSString)('error');
        this.isValidated = false;
        this.hasValidationError = false;
    }
    decorateValidationResult(status) {
        if (sprotty_1.ValidationStatus.isError(status)) {
            this.hasValidationError = true;
            this.decorateError(status.message ? status.message : 'Error');
        }
        else if (sprotty_1.ValidationStatus.isWarning(status)) {
            this.hasValidationError = false;
            this.decorateWarning(status.message ? status.message : 'Warning');
        }
        else {
            this.hasValidationError = false;
            this.dispose();
        }
        this.isValidated = true;
    }
    decorateError(message) {
        this.switchCssClasses(this.containerElement, this.errorClasses);
        const div = this.createDecorationDiv();
        this.switchCssClasses(div, this.errorClasses);
        div.innerHTML = `<span class="${this.errorIconClasses}"></span> ${message}`;
        this.adjustPosition();
    }
    decorateWarning(message) {
        this.switchCssClasses(this.containerElement, this.warningClasses);
        const div = this.createDecorationDiv();
        this.switchCssClasses(div, this.warningClasses);
        div.innerHTML = `<span class="${this.warningIconClasses}"></span> ${message}`;
        this.adjustPosition();
    }
    switchCssClasses(element, cssClasses) {
        element.classList.remove(...this.errorClasses, ...this.warningClasses);
        element.classList.add(...cssClasses);
    }
    createDecorationDiv() {
        if (!this.decorationDiv) {
            this.containerElement.classList.add('validation');
            this.decorationDiv = document.createElement('div');
            this.decorationDiv.style.width = `${this.decorationContainerWidth()}px`;
            this.decorationDiv.classList.add('validation-decorator');
            this.containerElement.appendChild(this.decorationDiv);
        }
        return this.decorationDiv;
    }
    decorationContainerWidth() {
        return this.containerElement.clientWidth - 5;
    }
    adjustPosition() {
        if (this.decorationDiv) {
            const height = this.decorationDiv.clientHeight + 2;
            this.decorationDiv.style.top = `-${height}px`;
        }
    }
    isValidatedOk() {
        return this.isValidated && !this.hasValidationError;
    }
    invalidate() {
        this.isValidated = false;
    }
    dispose() {
        this.hasValidationError = false;
        this.isValidated = false;
        if (this.decorationDiv && this.containerElement && this.containerElement.contains(this.decorationDiv)) {
            this.containerElement.removeChild(this.decorationDiv);
            this.switchCssClasses(this.containerElement, []);
            this.decorationDiv = undefined;
        }
    }
}
exports.ValidationDecorator = ValidationDecorator;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/command-stack.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/command-stack.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPCommandStack = void 0;
/********************************************************************************
 * Copyright (c) 2019-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ./editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
let GLSPCommandStack = class GLSPCommandStack extends sprotty_1.CommandStack {
    constructor() {
        super(...arguments);
        this.toDispose = new sprotty_1.DisposableCollection();
        this.onCommandExecutedEmitter = new sprotty_1.Emitter();
    }
    get onCommandExecuted() {
        return this.onCommandExecutedEmitter.event;
    }
    initialize() {
        super.initialize();
        this.toDispose.push(this.onCommandExecutedEmitter);
    }
    dispose() {
        this.toDispose.dispose();
    }
    // Use lazyInjector to resolve circular dependency
    //  GLSPActionDispatcher --> GLSPCommandStack --> EditorContextService --> GLSPActionDispatcher
    get editorContext() {
        return this.lazyInjector.get(editor_context_service_1.EditorContextService);
    }
    /**
     * @deprecated Use the `EditorContext.onModelRootChanged` event instead
     */
    get onModelRootChanged() {
        return this.editorContext.onModelRootChanged;
    }
    /**
     * Client-side undo/redo is not supported in GLSP. The server is responsible for handling undo/redo requests.
     * If this method get called it's probably a mistake and a warning is logged
     */
    undo() {
        this.logger.warn(this, 'GLSPCommandStack.undo() was called. This should never happen as the GLSP server is responsible for handling undo requests');
        return this.currentModel;
    }
    /**
     * Client-side undo/redo is not supported in GLSP. The server is responsible for handling undo/redo requests.
     * If this method get called it's probably a mistake and a warning is logged
     */
    redo() {
        this.logger.warn(this, 'GLSPCommandStack.redo() was called. This should never happen as the GLSP server is responsible for handling redo requests');
        return this.currentModel;
    }
    /**
     * Client-side undo/redo is not supported in GLSP.
     * To avoid unnecessary infraction with the command stack (pushing/merging/popping commands)
     * related methods are overridden to no-ops.
     */
    pushToUndoStack(command) {
        // no-op
    }
    /**
     * Client-side undo/redo is not supported in GLSP.
     * To avoid unnecessary infraction with the command stack (pushing/merging/popping commands)
     * related methods are overridden to no-ops.
     */
    mergeOrPush(command, context) {
        // no-op
    }
    async execute(command) {
        const result = await super.execute(command);
        this.onCommandExecutedEmitter.fire({ command, newRoot: result });
        return result;
    }
};
exports.GLSPCommandStack = GLSPCommandStack;
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], GLSPCommandStack.prototype, "lazyInjector", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GLSPCommandStack.prototype, "initialize", null);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GLSPCommandStack.prototype, "dispose", null);
exports.GLSPCommandStack = GLSPCommandStack = __decorate([
    (0, inversify_1.injectable)()
], GLSPCommandStack);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/default.module.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/default.module.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! @vscode/codicons/dist/codicon.css */ "../node_modules/@vscode/codicons/dist/codicon.css");
__webpack_require__(/*! ../../css/glsp-sprotty.css */ "../node_modules/@eclipse-glsp/client/css/glsp-sprotty.css");
const action_dispatcher_1 = __webpack_require__(/*! ./action-dispatcher */ "../node_modules/@eclipse-glsp/client/lib/base/action-dispatcher.js");
const action_handler_registry_1 = __webpack_require__(/*! ./action-handler-registry */ "../node_modules/@eclipse-glsp/client/lib/base/action-handler-registry.js");
const command_stack_1 = __webpack_require__(/*! ./command-stack */ "../node_modules/@eclipse-glsp/client/lib/base/command-stack.js");
const editor_context_service_1 = __webpack_require__(/*! ./editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const css_feedback_1 = __webpack_require__(/*! ./feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const feedback_action_dispatcher_1 = __webpack_require__(/*! ./feedback/feedback-action-dispatcher */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-action-dispatcher.js");
const set_model_command_1 = __webpack_require__(/*! ./feedback/set-model-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/set-model-command.js");
const update_model_command_1 = __webpack_require__(/*! ./feedback/update-model-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/update-model-command.js");
const focus_state_change_action_1 = __webpack_require__(/*! ./focus/focus-state-change-action */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js");
const focus_tracker_1 = __webpack_require__(/*! ./focus/focus-tracker */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-tracker.js");
const diagram_loader_1 = __webpack_require__(/*! ./model/diagram-loader */ "../node_modules/@eclipse-glsp/client/lib/base/model/diagram-loader.js");
const glsp_model_source_1 = __webpack_require__(/*! ./model/glsp-model-source */ "../node_modules/@eclipse-glsp/client/lib/base/model/glsp-model-source.js");
const model_change_service_1 = __webpack_require__(/*! ./model/model-change-service */ "../node_modules/@eclipse-glsp/client/lib/base/model/model-change-service.js");
const model_initialization_constraint_1 = __webpack_require__(/*! ./model/model-initialization-constraint */ "../node_modules/@eclipse-glsp/client/lib/base/model/model-initialization-constraint.js");
const model_registry_1 = __webpack_require__(/*! ./model/model-registry */ "../node_modules/@eclipse-glsp/client/lib/base/model/model-registry.js");
const mouse_position_tracker_1 = __webpack_require__(/*! ./mouse-position-tracker */ "../node_modules/@eclipse-glsp/client/lib/base/mouse-position-tracker.js");
const selection_clearing_mouse_listener_1 = __webpack_require__(/*! ./selection-clearing-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/selection-clearing-mouse-listener.js");
const selection_service_1 = __webpack_require__(/*! ./selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const shortcuts_manager_1 = __webpack_require__(/*! ./shortcuts/shortcuts-manager */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/shortcuts-manager.js");
const tool_1 = __webpack_require__(/*! ./tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const tool_manager_1 = __webpack_require__(/*! ./tool-manager/tool-manager */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool-manager.js");
const ui_extension_registry_1 = __webpack_require__(/*! ./ui-extension/ui-extension-registry */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension-registry.js");
const key_tool_1 = __webpack_require__(/*! ./view/key-tool */ "../node_modules/@eclipse-glsp/client/lib/base/view/key-tool.js");
const mouse_tool_1 = __webpack_require__(/*! ./view/mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/base/view/mouse-tool.js");
const view_registry_1 = __webpack_require__(/*! ./view/view-registry */ "../node_modules/@eclipse-glsp/client/lib/base/view/view-registry.js");
/**
 * The default module provides all of GLSP's base functionality and services.
 * It builds on top of sprotty's default module {@link `sprottyDefaultModule`}.
 */
exports.defaultModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind, ...rest) => {
    // load bindings from sprotty's default module to avoid code duplication
    sprotty_1.sprottyDefaultModule.registry(bind, unbind, isBound, rebind, ...rest);
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindLazyInjector)(context);
    bind(editor_context_service_1.EditorContextService).toSelf().inSingletonScope();
    bind(sprotty_1.TYPES.IDiagramStartup).toService(editor_context_service_1.EditorContextService);
    // eslint-disable-next-line deprecation/deprecation
    bind(sprotty_1.TYPES.IEditorContextServiceProvider).toProvider(ctx => async () => ctx.container.get(editor_context_service_1.EditorContextService));
    bind(sprotty_1.TYPES.IModelChangeService).to(model_change_service_1.ModelChangeService).inSingletonScope();
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.SetEditModeAction.KIND, editor_context_service_1.EditorContextService);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.SetDirtyStateAction.KIND, editor_context_service_1.EditorContextService);
    bind(focus_tracker_1.FocusTracker).toSelf().inSingletonScope();
    bind(sprotty_1.TYPES.IDiagramStartup).toService(focus_tracker_1.FocusTracker);
    (0, sprotty_1.configureActionHandler)(context, focus_state_change_action_1.FocusStateChangedAction.KIND, focus_tracker_1.FocusTracker);
    // Model update initialization ------------------------------------
    bind(sprotty_1.TYPES.IFeedbackActionDispatcher).to(feedback_action_dispatcher_1.FeedbackActionDispatcher).inSingletonScope();
    (0, sprotty_1.configureCommand)(context, update_model_command_1.FeedbackAwareUpdateModelCommand);
    rebind(sprotty_1.SetModelCommand).to(set_model_command_1.FeedbackAwareSetModelCommand);
    bind(mouse_tool_1.GLSPMouseTool).toSelf().inSingletonScope();
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.MouseTool).toService(mouse_tool_1.GLSPMouseTool);
    bind(sprotty_1.TYPES.IDiagramStartup).toService(mouse_tool_1.GLSPMouseTool);
    bind(mouse_position_tracker_1.GLSPMousePositionTracker).toSelf().inSingletonScope();
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.MousePositionTracker).toService(mouse_position_tracker_1.GLSPMousePositionTracker);
    bind(key_tool_1.GLSPKeyTool).toSelf().inSingletonScope();
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.KeyTool).toService(key_tool_1.GLSPKeyTool);
    bind(sprotty_1.TYPES.IDiagramStartup).toService(key_tool_1.GLSPKeyTool);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.MouseListener, selection_clearing_mouse_listener_1.SelectionClearingMouseListener);
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.TYPES.ICommandStack).to(command_stack_1.GLSPCommandStack).inSingletonScope();
    bind(action_dispatcher_1.GLSPActionDispatcher).toSelf().inSingletonScope();
    bind(sprotty_1.TYPES.IGModelRootListener).toService(action_dispatcher_1.GLSPActionDispatcher);
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.TYPES.IActionDispatcher).toService(action_dispatcher_1.GLSPActionDispatcher);
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.ActionHandlerRegistry).to(action_handler_registry_1.GLSPActionHandlerRegistry).inSingletonScope();
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.ModelSource, glsp_model_source_1.GLSPModelSource);
    bind(diagram_loader_1.DiagramLoader).toSelf().inSingletonScope();
    bind(model_initialization_constraint_1.ModelInitializationConstraint).to(model_initialization_constraint_1.DefaultModelInitializationConstraint).inSingletonScope();
    // support re-registration of model elements and views
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.TYPES.SModelRegistry).to(model_registry_1.GModelRegistry).inSingletonScope();
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.TYPES.ViewRegistry).to(view_registry_1.GViewRegistry).inSingletonScope();
    bind(selection_service_1.SelectionService).toSelf().inSingletonScope();
    bind(sprotty_1.TYPES.IGModelRootListener).toService(selection_service_1.SelectionService);
    bind(sprotty_1.TYPES.IDiagramStartup).toService(selection_service_1.SelectionService);
    // Feedback Support ------------------------------------
    // Generic re-usable feedback modifying css classes
    (0, sprotty_1.configureCommand)(context, css_feedback_1.ModifyCssFeedbackCommand);
    // We support using sprotty's MoveCommand as client-side visual feedback
    (0, sprotty_1.configureCommand)(context, sprotty_1.MoveCommand);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IVNodePostprocessor, sprotty_1.LocationPostprocessor);
    bind(sprotty_1.TYPES.HiddenVNodePostprocessor).toService(sprotty_1.LocationPostprocessor);
    // Tool manager initialization ------------------------------------
    bind(sprotty_1.TYPES.IToolManager).to(tool_manager_1.ToolManager).inSingletonScope();
    bind(sprotty_1.TYPES.IDiagramStartup).toService(sprotty_1.TYPES.IToolManager);
    bind(sprotty_1.TYPES.IEditModeListener).toService(sprotty_1.TYPES.IToolManager);
    bind(tool_manager_1.DefaultToolsEnablingKeyListener).toSelf().inSingletonScope();
    bind(sprotty_1.TYPES.KeyListener).toService(tool_manager_1.DefaultToolsEnablingKeyListener);
    bind(tool_manager_1.ToolManagerActionHandler).toSelf().inSingletonScope();
    (0, sprotty_1.configureActionHandler)(context, tool_1.EnableDefaultToolsAction.KIND, tool_manager_1.ToolManagerActionHandler);
    (0, sprotty_1.configureActionHandler)(context, tool_1.EnableToolsAction.KIND, tool_manager_1.ToolManagerActionHandler);
    bind(ui_extension_registry_1.GLSPUIExtensionRegistry).toSelf().inSingletonScope();
    (0, sprotty_1.bindOrRebind)(context, sprotty_1.TYPES.UIExtensionRegistry).toService(ui_extension_registry_1.GLSPUIExtensionRegistry);
    bind(sprotty_1.TYPES.IDiagramStartup).toService(ui_extension_registry_1.GLSPUIExtensionRegistry);
    bind(sprotty_1.TYPES.EmptyArray).toDynamicValue(() => []);
    // Shortcut manager initialization ------------------------------------
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IShortcutManager, shortcuts_manager_1.ShortcutManager);
}, {
    featureId: Symbol('default')
});


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DragAwareMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
/**
 * A mouse listener that is aware of prior mouse dragging.
 *
 * Therefore, this listener distinguishes between mouse up events after dragging and
 * mouse up events without prior dragging. Subclasses may override the methods
 * `draggingMouseUp` and/or `nonDraggingMouseUp` to react to only these specific kinds
 * of mouse up events.
 */
class DragAwareMouseListener extends sprotty_1.MouseListener {
    constructor(dragSensitivity = 0) {
        super();
        this._isMouseDown = false;
        this._isMouseDrag = false;
        this._dragSensitivity = 0;
        this._dragSensitivity = dragSensitivity;
    }
    mouseDown(target, event) {
        this._isMouseDown = true;
        this._dragStart = this._dragSensitivity > 0 ? { x: event.clientX, y: event.clientY } : undefined;
        return [];
    }
    mouseMove(target, event) {
        if (this._isMouseDown) {
            if (this._dragStart) {
                const dragDistance = sprotty_1.Point.maxDistance(this._dragStart, { x: event.clientX, y: event.clientY });
                if (dragDistance < this._dragSensitivity) {
                    return this.nonDraggingMouseMove(target, event);
                }
            }
            this._isMouseDrag = true;
            return this.draggingMouseMove(target, event);
        }
        return this.nonDraggingMouseMove(target, event);
    }
    draggingMouseMove(target, event) {
        return [];
    }
    nonDraggingMouseMove(target, event) {
        return [];
    }
    mouseUp(element, event) {
        this._isMouseDown = false;
        this._dragStart = undefined;
        if (this._isMouseDrag) {
            this._isMouseDrag = false;
            return this.draggingMouseUp(element, event);
        }
        return this.nonDraggingMouseUp(element, event);
    }
    nonDraggingMouseUp(element, event) {
        return [];
    }
    draggingMouseUp(element, event) {
        return [];
    }
    get isMouseDrag() {
        return this._isMouseDrag;
    }
    get isMouseDown() {
        return this._isMouseDown;
    }
    dispose() {
        this._isMouseDrag = false;
        this._isMouseDown = false;
    }
}
exports.DragAwareMouseListener = DragAwareMouseListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorContextService = void 0;
/********************************************************************************
 * Copyright (c) 2020-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const focus_tracker_1 = __webpack_require__(/*! ./focus/focus-tracker */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-tracker.js");
const selection_service_1 = __webpack_require__(/*! ./selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
/**
 * The `EditorContextService` is a central injectable component that gives read-only access to
 * certain aspects of the diagram, such as the currently selected elements, the model root,
 * the edit mode, the latest position of the mouse in the diagram.
 *
 * It has been introduced for two main reasons:
 * 1. to simplify accessing the model root and the current selection from components that are
 *    not commands,
 * 2. to conveniently create an EditorContext, which is a context object sent as part of several
 *    actions to the server to describe the current state of the editor (selection, last mouse
 *    position, etc.).
 */
let EditorContextService = class EditorContextService {
    constructor() {
        this.onEditModeChangedEmitter = new sprotty_1.Emitter();
        this.onDirtyStateChangedEmitter = new sprotty_1.Emitter();
        this.toDispose = new sprotty_1.DisposableCollection();
    }
    /**
     * Event that is fired when the edit mode of the diagram changes i.e. after a {@link SetEditModeAction} has been handled.
     */
    get onEditModeChanged() {
        return this.onEditModeChangedEmitter.event;
    }
    /**
     * Event that is fired when the dirty state of the diagram changes i.e. after a {@link SetDirtyStateAction} has been handled.
     */
    get onDirtyStateChanged() {
        return this.onDirtyStateChangedEmitter.event;
    }
    /**
     * Event that is fired when the model root of the diagram changes i.e. after the `CommandStack` has processed a model update.
     */
    get onModelRootChanged() {
        return this.modelChangeService.onModelRootChanged;
    }
    /**
     * Event that is fired when the focus state of the diagram changes i.e. after a {@link FocusStateChangedAction} has been handled
     * by the {@link FocusTracker}.
     */
    get onFocusChanged() {
        return this.focusTracker.onFocusChanged;
    }
    /**
     * Event that is fired when the selection of the diagram changes i.e. a selection change has been handled
     * by the {@link SelectionService}.
     */
    get onSelectionChanged() {
        return this.selectionService.onSelectionChanged;
    }
    /**
     * Event that is fired when the viewport of the diagram changes i.e. after the `CommandStack` has processed a viewport update.
     * By default, this event is only fired if the viewport was changed via a `SetViewportCommand` or `BoundsAwareViewportCommand`
     */
    get onViewportChanged() {
        return this.modelChangeService.onViewportChanged;
    }
    initialize() {
        var _a;
        this._editMode = (_a = this.diagramOptions.editMode) !== null && _a !== void 0 ? _a : sprotty_1.EditMode.EDITABLE;
        this.toDispose.push(this.onEditModeChangedEmitter, this.onDirtyStateChangedEmitter);
    }
    dispose() {
        this.toDispose.dispose();
    }
    preLoadDiagram() {
        this.lazyInjector.getAll(sprotty_1.TYPES.IGModelRootListener).forEach(listener => {
            this.onModelRootChanged(event => listener.modelRootChanged(event));
        });
        this.lazyInjector.getAll(sprotty_1.TYPES.IEditModeListener).forEach(listener => {
            this.onEditModeChanged(event => listener.editModeChanged(event.newValue, event.oldValue));
        });
    }
    get(args) {
        return {
            selectedElementIds: Array.from(this.selectionService.getSelectedElementIDs()),
            lastMousePosition: this.mousePositionTracker.lastPositionOnDiagram,
            args
        };
    }
    getWithSelection(selectedElementIds, args) {
        return {
            selectedElementIds,
            lastMousePosition: this.mousePositionTracker.lastPositionOnDiagram,
            args
        };
    }
    handle(action) {
        if (sprotty_1.SetEditModeAction.is(action)) {
            this.handleSetEditModeAction(action);
        }
        else if (sprotty_1.SetDirtyStateAction.is(action)) {
            this.handleSetDirtyStateAction(action);
        }
    }
    handleSetEditModeAction(action) {
        const oldValue = this._editMode;
        this._editMode = action.editMode;
        this.onEditModeChangedEmitter.fire({ newValue: this.editMode, oldValue });
    }
    handleSetDirtyStateAction(action) {
        if (action.isDirty !== this._isDirty) {
            this._isDirty = action.isDirty;
            this.onDirtyStateChangedEmitter.fire(action);
        }
    }
    get sourceUri() {
        return this.diagramOptions.sourceUri;
    }
    get editMode() {
        return this._editMode;
    }
    get diagramType() {
        return this.diagramOptions.diagramType;
    }
    get clientId() {
        return this.diagramOptions.clientId;
    }
    get modelRoot() {
        if (!this.modelChangeService.currentRoot) {
            throw new Error('Model root not available yet');
        }
        return this.modelChangeService.currentRoot;
    }
    get viewport() {
        return this.modelRoot ? (0, sprotty_1.findParentByFeature)(this.modelRoot, sprotty_1.isViewport) : undefined;
    }
    get viewportData() {
        var _a, _b;
        const viewport = this.viewport;
        // default values aligned with GetViewportCommand
        return {
            scroll: (_a = viewport === null || viewport === void 0 ? void 0 : viewport.scroll) !== null && _a !== void 0 ? _a : sprotty_1.Point.ORIGIN,
            zoom: (_b = viewport === null || viewport === void 0 ? void 0 : viewport.zoom) !== null && _b !== void 0 ? _b : 1
        };
    }
    get canvasBounds() {
        var _a, _b;
        // default value aligned with the initialization of canvasBounds in GModelRoot
        return (_b = (_a = this.modelRoot) === null || _a === void 0 ? void 0 : _a.canvasBounds) !== null && _b !== void 0 ? _b : sprotty_1.Bounds.EMPTY;
    }
    get selectedElements() {
        return this.selectionService.getSelectedElements();
    }
    get isReadonly() {
        return this.editMode === sprotty_1.EditMode.READONLY;
    }
    get isDirty() {
        return this._isDirty;
    }
};
exports.EditorContextService = EditorContextService;
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], EditorContextService.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IModelChangeService),
    __metadata("design:type", Object)
], EditorContextService.prototype, "modelChangeService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.MousePositionTracker),
    __metadata("design:type", sprotty_1.MousePositionTracker)
], EditorContextService.prototype, "mousePositionTracker", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], EditorContextService.prototype, "lazyInjector", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IDiagramOptions),
    __metadata("design:type", Object)
], EditorContextService.prototype, "diagramOptions", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], EditorContextService.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(focus_tracker_1.FocusTracker),
    __metadata("design:type", focus_tracker_1.FocusTracker)
], EditorContextService.prototype, "focusTracker", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], EditorContextService.prototype, "initialize", null);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], EditorContextService.prototype, "dispose", null);
exports.EditorContextService = EditorContextService = __decorate([
    (0, inversify_1.injectable)()
], EditorContextService);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CursorCSS = exports.CSS_HIDDEN = exports.CSS_GHOST_ELEMENT = exports.ModifyCssFeedbackCommand = exports.ModifyCSSFeedbackAction = void 0;
exports.cursorFeedbackAction = cursorFeedbackAction;
exports.applyCssClasses = applyCssClasses;
exports.deleteCssClasses = deleteCssClasses;
exports.toggleCssClasses = toggleCssClasses;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const feedback_command_1 = __webpack_require__(/*! ./feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
var ModifyCSSFeedbackAction;
(function (ModifyCSSFeedbackAction) {
    ModifyCSSFeedbackAction.KIND = 'modifyCSSFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ModifyCSSFeedbackAction.KIND) && (0, sprotty_1.hasArrayProp)(object, 'elementIds');
    }
    ModifyCSSFeedbackAction.is = is;
    function create(options) {
        const { elements, ...rest } = options;
        const elementIds = elements ? elements.map(element => (typeof element === 'string' ? element : element.id)) : undefined;
        return {
            kind: ModifyCSSFeedbackAction.KIND,
            elementIds,
            ...rest
        };
    }
    ModifyCSSFeedbackAction.create = create;
})(ModifyCSSFeedbackAction || (exports.ModifyCSSFeedbackAction = ModifyCSSFeedbackAction = {}));
let ModifyCssFeedbackCommand = class ModifyCssFeedbackCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const elements = this.action.elementIds ? (0, gmodel_util_1.getElements)(context.root.index, this.action.elementIds) : [context.root];
        elements.forEach(e => {
            if (this.action.remove) {
                (0, gmodel_util_1.removeCssClasses)(e, this.action.remove);
            }
            if (this.action.add) {
                (0, gmodel_util_1.addCssClasses)(e, this.action.add);
            }
        });
        return context.root;
    }
};
exports.ModifyCssFeedbackCommand = ModifyCssFeedbackCommand;
ModifyCssFeedbackCommand.KIND = ModifyCSSFeedbackAction.KIND;
exports.ModifyCssFeedbackCommand = ModifyCssFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ModifyCssFeedbackCommand);
exports.CSS_GHOST_ELEMENT = 'ghost-element';
exports.CSS_HIDDEN = 'hidden';
var CursorCSS;
(function (CursorCSS) {
    CursorCSS["DEFAULT"] = "default-mode";
    CursorCSS["OVERLAP_FORBIDDEN"] = "overlap-forbidden-mode";
    CursorCSS["NODE_CREATION"] = "node-creation-mode";
    CursorCSS["EDGE_CREATION_SOURCE"] = "edge-creation-select-source-mode";
    CursorCSS["EDGE_CREATION_TARGET"] = "edge-creation-select-target-mode";
    CursorCSS["EDGE_RECONNECT"] = "edge-reconnect-select-target-mode";
    CursorCSS["EDGE_CHECK_PENDING"] = "edge-check-pending-mode";
    CursorCSS["OPERATION_NOT_ALLOWED"] = "edge-modification-not-allowed-mode";
    CursorCSS["ELEMENT_DELETION"] = "element-deletion-mode";
    CursorCSS["RESIZE_NESW"] = "resize-nesw-mode";
    CursorCSS["RESIZE_NWSE"] = "resize-nwse-mode";
    CursorCSS["RESIZE_NW"] = "resize-nw-mode";
    CursorCSS["RESIZE_N"] = "resize-n-mode";
    CursorCSS["RESIZE_NE"] = "resize-ne-mode";
    CursorCSS["RESIZE_E"] = "resize-e-mode";
    CursorCSS["RESIZE_SE"] = "resize-se-mode";
    CursorCSS["RESIZE_S"] = "resize-s-mode";
    CursorCSS["RESIZE_SW"] = "resize-sw-mode";
    CursorCSS["RESIZE_W"] = "resize-w-mode";
    CursorCSS["MOVE"] = "move-mode";
    CursorCSS["MARQUEE"] = "marquee-mode";
})(CursorCSS || (exports.CursorCSS = CursorCSS = {}));
function cursorFeedbackAction(cursorCss) {
    const add = [];
    if (cursorCss) {
        add.push(cursorCss);
    }
    return ModifyCSSFeedbackAction.create({ add, remove: Object.values(CursorCSS) });
}
function applyCssClasses(element, ...add) {
    return ModifyCSSFeedbackAction.create({ elements: [element], add });
}
function deleteCssClasses(element, ...remove) {
    return ModifyCSSFeedbackAction.create({ elements: [element], remove });
}
function toggleCssClasses(element, add, ...cssClasses) {
    return add ? applyCssClasses(element, ...cssClasses) : deleteCssClasses(element, ...cssClasses);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-action-dispatcher.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-action-dispatcher.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackActionDispatcher = exports.feedbackFeature = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const feedback_command_1 = __webpack_require__(/*! ./feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const feedback_emitter_1 = __webpack_require__(/*! ./feedback-emitter */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-emitter.js");
exports.feedbackFeature = Symbol('feedbackFeature');
let FeedbackActionDispatcher = class FeedbackActionDispatcher {
    constructor() {
        this.registeredFeedback = new Map();
        this.isDisposed = false;
    }
    registerFeedback(feedbackEmitter, feedbackActions, cleanupActions) {
        if (feedbackEmitter instanceof sprotty_1.GModelElement) {
            this.logger.log(this, 
            // eslint-disable-next-line max-len
            'GModelElements as feedback emitters are discouraged, as they usually change between model updates and are considered unstable.');
        }
        if (feedbackActions.length > 0) {
            this.registeredFeedback.set(feedbackEmitter, feedbackActions);
            this.dispatchFeedback(feedbackActions, feedbackEmitter);
        }
        return sprotty_1.Disposable.create(() => this.deregisterFeedback(feedbackEmitter, cleanupActions));
    }
    deregisterFeedback(feedbackEmitter, cleanupActions) {
        this.registeredFeedback.delete(feedbackEmitter);
        const actions = sprotty_1.MaybeActions.asArray(cleanupActions);
        if (actions.length > 0) {
            this.dispatchFeedback(actions, feedbackEmitter);
        }
    }
    getRegisteredFeedback() {
        const result = [];
        this.registeredFeedback.forEach(actions => result.push(...actions));
        return result;
    }
    getRegisteredFeedbackEmitters(action) {
        const result = [];
        this.registeredFeedback.forEach((actions, emitter) => {
            if (actions.includes(action)) {
                result.push(emitter);
            }
        });
        return result;
    }
    getFeedbackCommands() {
        return this.getRegisteredFeedback()
            .flatMap(action => this.actionToCommands(action))
            .sort((left, right) => (0, feedback_command_1.getFeedbackRank)(left) - (0, feedback_command_1.getFeedbackRank)(right));
    }
    async applyFeedbackCommands(context) {
        var _a;
        const feedbackCommands = (_a = this.getFeedbackCommands()) !== null && _a !== void 0 ? _a : [];
        if ((feedbackCommands === null || feedbackCommands === void 0 ? void 0 : feedbackCommands.length) > 0) {
            const results = feedbackCommands.map(command => command.execute(context));
            await Promise.all(results);
        }
    }
    actionToCommands(action) {
        var _a;
        return ((_a = this.actionHandlerRegistry
            .get(action.kind)
            .filter((0, sprotty_1.toTypeGuard)(sprotty_1.CommandActionHandler))
            .map(handler => handler.handle(action))) !== null && _a !== void 0 ? _a : []);
    }
    createEmitter() {
        return new feedback_emitter_1.FeedbackEmitter(this);
    }
    async dispatchFeedback(actions, feedbackEmitter) {
        try {
            if (this.isDisposed) {
                return;
            }
            await this.actionDispatcher.dispatchAll(actions);
            this.logger.info(this, `Dispatched feedback actions for ${feedbackEmitter}`);
        }
        catch (reason) {
            this.logger.error(this, 'Failed to dispatch feedback actions', reason);
        }
    }
    dispose() {
        this.registeredFeedback.clear();
        this.isDisposed = true;
    }
};
exports.FeedbackActionDispatcher = FeedbackActionDispatcher;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], FeedbackActionDispatcher.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], FeedbackActionDispatcher.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.ActionHandlerRegistry),
    __metadata("design:type", sprotty_1.ActionHandlerRegistry)
], FeedbackActionDispatcher.prototype, "actionHandlerRegistry", void 0);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], FeedbackActionDispatcher.prototype, "dispose", null);
exports.FeedbackActionDispatcher = FeedbackActionDispatcher = __decorate([
    (0, inversify_1.injectable)()
], FeedbackActionDispatcher);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackCommand = void 0;
exports.getFeedbackRank = getFeedbackRank;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable deprecation/deprecation */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const ranked_1 = __webpack_require__(/*! ../ranked */ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js");
class FeedbackCommand extends sprotty_1.Command {
    constructor() {
        super(...arguments);
        /** @deprecated Use rank instead. Please note that a lower rank implies higher priority, so the order is reversed. */
        this.priority = 0;
        // backwards compatibility: convert any existing priority to an equivalent rank
        this.rank = this.priority ? -this.priority : ranked_1.Ranked.DEFAULT_RANK;
    }
    undo(context) {
        return context.root;
    }
    redo(context) {
        return context.root;
    }
}
exports.FeedbackCommand = FeedbackCommand;
/** Used for backwards compatibility, otherwise use Ranked.getRank or Ranked sort functions. */
function getFeedbackRank(command) {
    var _a;
    const feedbackCommand = command;
    return (feedbackCommand === null || feedbackCommand === void 0 ? void 0 : feedbackCommand.priority) ? -feedbackCommand.priority : (_a = feedbackCommand.rank) !== null && _a !== void 0 ? _a : ranked_1.Ranked.DEFAULT_RANK;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-emitter.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-emitter.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackEmitter = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
// counter for internal id, mainly useful for debugging
let idCounter = 0;
/**
 * A helper object to collect, submit and undo feedback consisting of several actions.
 */
class FeedbackEmitter {
    constructor(feedbackDispatcher) {
        this.feedbackDispatcher = feedbackDispatcher;
        this.id = idCounter++;
        this.feedbackActions = [];
        this.cleanupActions = [];
    }
    /**
     * Adds an action as part of this emitters feedback. Please note that the action is only applied as feedback
     * once the {@link submit} method is called.
     *
     * @param action feedback action
     * @param cleanupAction action that undoes the feedback action. This is only triggered when {@link revert} or {@link dispose} is called.
     */
    add(action, cleanupAction) {
        if (!action && !cleanupAction) {
            return this;
        }
        const idx = this.feedbackActions.length;
        this.feedbackActions[idx] = action;
        if (cleanupAction) {
            this.cleanupActions[idx] = cleanupAction;
        }
        return this;
    }
    /**
     * Merges the feedback of another emitter into this emitter.
     *
     * @param feedback feedback to merge
     */
    merge(feedback) {
        this.feedbackActions.push(...feedback.feedbackActions);
        this.cleanupActions.push(...feedback.cleanupActions);
        return this;
    }
    /**
     * Removes the action as part of this emitters feedback. If the action cannot be found, this is a no-op.
     * Please note that this also removed the corresponding cleanup action.
     * If the feedback has already been submitted as part of the {@link submit} method, the whole feedback must be de-registered
     * or a new feedback without the given action needs to be registered.
     *
     * @param action feedback action
     */
    remove(action) {
        const idx = this.feedbackActions.indexOf(action);
        if (idx >= 0) {
            this.feedbackActions.splice(idx, 1);
            this.cleanupActions.splice(idx, 1);
        }
        return this;
    }
    /**
     * Clears any, not yet registered feedback actions and their corresponding cleanup actions.
     */
    clear() {
        this.feedbackActions = [];
        this.cleanupActions = [];
        return this;
    }
    /**
     * Registers any pending actions as feedback. Any previously submitted feedback becomes invalid.
     */
    submit() {
        // with 'arrayOf' we skip undefined entries that are created for non-cleanup actions or cleanup-only actions
        const actions = (0, sprotty_1.arrayOf)(...this.feedbackActions);
        const cleanupActions = (0, sprotty_1.arrayOf)(...this.cleanupActions);
        if (actions.length > 0 || cleanupActions.length > 0) {
            this.deregistration = this.feedbackDispatcher.registerFeedback(this, actions, () => cleanupActions.flatMap(sprotty_1.MaybeActions.asArray));
            this.clear();
        }
        return this;
    }
    /**
     * Removes the registered feedback WITHOUT calling any potential cleanup actions
     * Any pending actions can still be registerd with the {@link submit} method.
     */
    discard() {
        this.feedbackDispatcher.deregisterFeedback(this);
        this.deregistration = undefined;
        return this;
    }
    /**
     * Removes the registered feedback and calls the registered cleanup actions.
     * Any pending actions can still be registerd with the {@link submit} method.
     */
    revert() {
        var _a;
        (_a = this.deregistration) === null || _a === void 0 ? void 0 : _a.dispose();
        this.deregistration = undefined;
        return this;
    }
    /**
     * Disposes any registered feedback and any pending, not yet registered feedback actions.
     */
    dispose() {
        this.revert();
        this.clear();
        return this;
    }
}
exports.FeedbackEmitter = FeedbackEmitter;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/feedback/set-model-command.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/feedback/set-model-command.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackAwareSetModelCommand = void 0;
/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let FeedbackAwareSetModelCommand = class FeedbackAwareSetModelCommand extends sprotty_1.SetModelCommand {
    constructor(action) {
        super(action);
    }
    execute(context) {
        const root = super.execute(context);
        this.applyFeedback(root, context);
        return root;
    }
    applyFeedback(newRoot, context) {
        var _a;
        // Create a temporary context which defines the `newRoot` as `root`
        // This way we do not corrupt the redo/undo behavior of the super class
        const tempContext = { ...context, root: newRoot };
        (_a = this.feedbackActionDispatcher) === null || _a === void 0 ? void 0 : _a.applyFeedbackCommands(tempContext);
    }
};
exports.FeedbackAwareSetModelCommand = FeedbackAwareSetModelCommand;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], FeedbackAwareSetModelCommand.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], FeedbackAwareSetModelCommand.prototype, "feedbackActionDispatcher", void 0);
exports.FeedbackAwareSetModelCommand = FeedbackAwareSetModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], FeedbackAwareSetModelCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/feedback/update-model-command.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/feedback/update-model-command.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackAwareUpdateModelCommand = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
/**
 * A special {@link UpdateModelCommand} that retrieves all registered {@link Action}s from the {@link IFeedbackActionDispatcher}
 * (if present) and applies their feedback to the `newRoot` before performing the update. This enables persistent client-side feedback
 * across model updates initiated by the GLSP server.
 */
let FeedbackAwareUpdateModelCommand = class FeedbackAwareUpdateModelCommand extends sprotty_1.UpdateModelCommand {
    constructor(action) {
        super({ animate: true, ...action });
    }
    performUpdate(oldRoot, newRoot, context) {
        var _a;
        // Create a temporary context which defines the `newRoot` as `root`
        // This way we do not corrupt the redo/undo behavior of the super class
        const tempContext = { ...context, root: newRoot };
        (_a = this.feedbackActionDispatcher) === null || _a === void 0 ? void 0 : _a.applyFeedbackCommands(tempContext);
        return super.performUpdate(oldRoot, newRoot, context);
    }
    // Override the `createAnimations` implementation and remove the animation for edge morphing. Otherwise routing & reconnect
    // handles flicker after each server update.
    createAnimations(data, root, context) {
        const animations = super.createAnimations(data, root, context);
        return animations.filter(animation => !(animation instanceof sprotty_1.MorphEdgesAnimation));
    }
};
exports.FeedbackAwareUpdateModelCommand = FeedbackAwareUpdateModelCommand;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], FeedbackAwareUpdateModelCommand.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], FeedbackAwareUpdateModelCommand.prototype, "feedbackActionDispatcher", void 0);
exports.FeedbackAwareUpdateModelCommand = FeedbackAwareUpdateModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], FeedbackAwareUpdateModelCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FocusStateChangedAction = void 0;
/********************************************************************************
 * Copyright (c) 2021-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var FocusStateChangedAction;
(function (FocusStateChangedAction) {
    FocusStateChangedAction.KIND = 'focusStateChanged';
    function is(object) {
        return sprotty_1.Action.hasKind(object, FocusStateChangedAction.KIND) && (0, sprotty_1.hasBooleanProp)(object, 'hasFocus');
    }
    FocusStateChangedAction.is = is;
    function create(hasFocus = true) {
        return {
            kind: FocusStateChangedAction.KIND,
            hasFocus
        };
    }
    FocusStateChangedAction.create = create;
})(FocusStateChangedAction || (exports.FocusStateChangedAction = FocusStateChangedAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-tracker.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/focus/focus-tracker.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FocusTracker = void 0;
/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const focus_state_change_action_1 = __webpack_require__(/*! ./focus-state-change-action */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js");
/**
 * Tracks the focus state of the diagram by handling {@link FocusStateChangedAction}s.
 * Emits a {@link FocusChange} event when the focus state changes.
 * Allows querying of the current focus state and the focused root diagram element and the currently focused element within the diagram.
 */
let FocusTracker = class FocusTracker {
    constructor() {
        this.inActiveCssClass = 'inactive';
        this._hasFocus = true;
        this.onFocusChangedEmitter = new sprotty_1.Emitter();
    }
    /**
     * Event that is fired when the focus state of the diagram changes i.e. after a {@link FocusStateChangedAction} has been handled.
     */
    get onFocusChanged() {
        return this.onFocusChangedEmitter.event;
    }
    get hasFocus() {
        return this._hasFocus;
    }
    get focusElement() {
        return this._focusElement;
    }
    get diagramElement() {
        return this._diagramElement;
    }
    handle(action) {
        if (!focus_state_change_action_1.FocusStateChangedAction.is(action)) {
            return;
        }
        this._hasFocus = action.hasFocus;
        this._focusElement = document.activeElement;
        this._diagramElement = document.getElementById(this.options.baseDiv);
        if (!this._diagramElement) {
            return;
        }
        if (this.hasFocus) {
            if (this._diagramElement.classList.contains(this.inActiveCssClass)) {
                this._diagramElement.classList.remove(this.inActiveCssClass);
            }
        }
        else {
            this._diagramElement.classList.add(this.inActiveCssClass);
        }
        this.onFocusChangedEmitter.fire({ hasFocus: this.hasFocus, focusElement: this.focusElement, diagramElement: this.diagramElement });
    }
    dispose() {
        this.onFocusChangedEmitter.dispose();
    }
};
exports.FocusTracker = FocusTracker;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], FocusTracker.prototype, "options", void 0);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], FocusTracker.prototype, "dispose", null);
exports.FocusTracker = FocusTracker = __decorate([
    (0, inversify_1.injectable)()
], FocusTracker);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/messages.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/messages.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateMessages = exports.onMessagesUpdated = exports.messages = void 0;
exports.repeatOnMessagesUpdated = repeatOnMessagesUpdated;
/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const rawMessages = __webpack_require__(/*! ./messages.json */ "../node_modules/@eclipse-glsp/client/lib/base/messages.json");
const deepUpdate = (target, updates) => {
    for (const key in updates) {
        // Guard against prototype pollution and block __proto__ and constructor
        if (!Object.prototype.hasOwnProperty.call(updates, key) || key === '__proto__' || key === 'constructor') {
            continue;
        }
        if (updates[key] && typeof updates[key] === 'object' && !Array.isArray(updates[key])) {
            if (!target[key]) {
                target[key] = {};
            }
            deepUpdate(target[key], updates[key]);
        }
        else {
            target[key] = updates[key];
        }
    }
};
/**
 * The messages object containing all known messages.
 */
exports.messages = rawMessages;
const messagesUpdatedEmitter = new sprotty_1.Emitter();
/**
 * Event that is fired when the messages are updated.
 */
exports.onMessagesUpdated = messagesUpdatedEmitter.event;
/**
 * Update the messages with the given set of messages. This may include overwriting existing messages or adding new ones.
 *
 * @param updates The updates to apply to the messages object.
 */
const updateMessages = (updates) => {
    deepUpdate(exports.messages, updates);
    messagesUpdatedEmitter.fire(exports.messages);
};
exports.updateMessages = updateMessages;
/**
 * Executes the given listener with the current messages and re-executes it whenever the messages are updated.
 * If the listener returns a disposable, it will be disposed before the listener is called again.
 *
 * @param listener The listener to re-execute when the messages are updated.
 * @param options Options to control the behavior of the listener execution.
 * @returns A disposable that can be used to clean up the listener.
 */
function repeatOnMessagesUpdated(listener, options = { initial: true }) {
    let cleanup = options.initial ? listener(exports.messages) : {};
    const updateListener = (0, exports.onMessagesUpdated)(() => {
        sprotty_1.Disposable.dispose(cleanup);
        cleanup = listener();
    });
    return sprotty_1.Disposable.create(() => {
        sprotty_1.Disposable.dispose(cleanup);
        updateListener.dispose();
    });
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/model/diagram-loader.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/model/diagram-loader.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagramLoader = exports.IDiagramStartup = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ranked_1 = __webpack_require__(/*! ../ranked */ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js");
const glsp_model_source_1 = __webpack_require__(/*! ./glsp-model-source */ "../node_modules/@eclipse-glsp/client/lib/base/model/glsp-model-source.js");
const model_initialization_constraint_1 = __webpack_require__(/*! ./model-initialization-constraint */ "../node_modules/@eclipse-glsp/client/lib/base/model/model-initialization-constraint.js");
var IDiagramStartup;
(function (IDiagramStartup) {
    function is(object) {
        return (sprotty_1.AnyObject.is(object) &&
            (0, sprotty_1.hasNumberProp)(object, 'rank', true) &&
            ('preLoadDiagram' in object ||
                'preInitialize' in object ||
                'preRequestModel' in object ||
                'postRequestModel' in object ||
                'postModelInitialization' in object));
    }
    IDiagramStartup.is = is;
})(IDiagramStartup || (exports.IDiagramStartup = IDiagramStartup = {}));
/**
 * The central component responsible for initializing the diagram and loading the graphical model
 * from the GLSP server.
 * Invoking the {@link DiagramLoader.load} method is typically the first operation that is executed after
 * a diagram DI container has been created.
 */
let DiagramLoader = class DiagramLoader {
    get diagramStartups() {
        return this.lazyInjector.getAll(sprotty_1.TYPES.IDiagramStartup);
    }
    async load(options = {}) {
        var _a, _b, _c, _d;
        this.diagramStartups.sort(ranked_1.Ranked.sort);
        await this.invokeStartupHook('preLoadDiagram');
        const resolvedOptions = {
            requestModelOptions: {
                sourceUri: (_a = this.options.sourceUri) !== null && _a !== void 0 ? _a : '',
                diagramType: this.options.diagramType,
                ...options.requestModelOptions
            },
            initializeParameters: {
                applicationId: sprotty_1.ApplicationIdProvider.get(),
                protocolVersion: sprotty_1.GLSPClient.protocolVersion,
                ...options.initializeParameters
            },
            enableNotifications: (_b = options.enableNotifications) !== null && _b !== void 0 ? _b : true
        };
        // Ensure that the action dispatcher is initialized before starting the diagram loading process
        await ((_d = (_c = this.actionDispatcher).initialize) === null || _d === void 0 ? void 0 : _d.call(_c));
        await this.invokeStartupHook('preInitialize');
        await this.initialize(resolvedOptions);
        await this.invokeStartupHook('preRequestModel');
        await this.requestModel(resolvedOptions);
        await this.invokeStartupHook('postRequestModel');
        await this.modelInitializationConstraint.onInitialized();
        await this.invokeStartupHook('postModelInitialization');
    }
    async invokeStartupHook(hook) {
        var _a;
        for (const startup of this.diagramStartups) {
            try {
                await ((_a = startup[hook]) === null || _a === void 0 ? void 0 : _a.call(startup));
            }
            catch (err) {
                console.error(`Error invoking diagram startup hook '${hook}':`, '\n', err);
            }
        }
    }
    async requestModel(options) {
        await this.actionDispatcher.dispatch(sprotty_1.RequestModelAction.create({ options: options.requestModelOptions, requestId: sprotty_1.RequestAction.generateRequestId() }));
    }
    async initialize(options) {
        if (options.enableNotifications) {
            await this.actionDispatcher.dispatch(sprotty_1.StatusAction.create('Initializing...', { severity: 'INFO' }));
        }
        const glspClient = await this.options.glspClientProvider();
        await glspClient.start();
        if (!glspClient.initializeResult) {
            await glspClient.initializeServer(options.initializeParameters);
        }
        this.modelSource.configure(glspClient);
        if (options.enableNotifications) {
            this.actionDispatcher.dispatch(sprotty_1.StatusAction.create('', { severity: 'NONE' }));
        }
    }
};
exports.DiagramLoader = DiagramLoader;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IDiagramOptions),
    __metadata("design:type", Object)
], DiagramLoader.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], DiagramLoader.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(glsp_model_source_1.GLSPModelSource),
    __metadata("design:type", glsp_model_source_1.GLSPModelSource)
], DiagramLoader.prototype, "modelSource", void 0);
__decorate([
    (0, inversify_1.inject)(model_initialization_constraint_1.ModelInitializationConstraint),
    __metadata("design:type", model_initialization_constraint_1.ModelInitializationConstraint)
], DiagramLoader.prototype, "modelInitializationConstraint", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], DiagramLoader.prototype, "lazyInjector", void 0);
exports.DiagramLoader = DiagramLoader = __decorate([
    (0, inversify_1.injectable)()
], DiagramLoader);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/model/glsp-model-source.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/model/glsp-model-source.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPModelSource = exports.OptionalAction = exports.ServerAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
var ServerAction;
(function (ServerAction) {
    function is(object) {
        return sprotty_1.Action.is(object) && '__receivedFromServer' in object && object.__receivedFromServer === true;
    }
    ServerAction.is = is;
    /**
     * Mark the given action as {@link ServerAction} by attaching the "__receivedFromServer" property
     * @param action The action that should be marked as server action
     */
    function mark(action) {
        action.__receivedFromServer = true;
    }
    ServerAction.mark = mark;
})(ServerAction || (exports.ServerAction = ServerAction = {}));
var OptionalAction;
(function (OptionalAction) {
    function is(object) {
        return sprotty_1.Action.is(object) && '__skipErrorIfNoHandler' in object && object.__skipErrorIfNoHandler === true;
    }
    OptionalAction.is = is;
    /**
     * Mark the given action as {@link OptionalAction} by attaching the "__skipErrorIfNoHandler" property
     * @param action The action that should be marked as optional action
     */
    function mark(action) {
        action.__skipErrorIfNoHandler = true;
        return action;
    }
    OptionalAction.mark = mark;
})(OptionalAction || (exports.OptionalAction = OptionalAction = {}));
/**
 * Central component for enabling the client-server action flow with the help of an underlying {@link GLSPClient}.
 * Handles & forwards actions that are intended for the GLSP server. In addition, it handles {@link ActionMessage}s received
 * from the server and dispatches the corresponding actions locally.
 *
 * Note that in sprotty a {@link ModelSource} is serving the model to the event cycle and
 * is used to commit the local (i.e. client-side) model back to the source.
 * However, in GLSP the update flow is reversed meaning that changes to the source model are applied
 * on the server side and then an update is sent to the client.
 */
let GLSPModelSource = class GLSPModelSource extends sprotty_1.ModelSource {
    constructor() {
        super(...arguments);
        this.toDispose = new sprotty_1.DisposableCollection();
    }
    get diagramType() {
        return this.options.diagramType;
    }
    get sourceUri() {
        return this.options.sourceUri;
    }
    /**
     * Configure forwarding of server-handled actions to the given {@link GLSPClient} and
     * handling of action received from the `GLSPClient` (i.e. server). It is expected that the
     * given GLSP client has already been initialized.
     * @param glspClient The GLSP  to use.
     * @throws An error if the given `GLSPClient` has not been initialized yet or if the set of server handled
     *         action kinds could not be derived from the initialize result
     */
    configure(glspClient) {
        this.glspClient = glspClient;
        if (!glspClient.initializeResult) {
            throw new Error('Could not configure model source. The GLSP client is not initialized yet!');
        }
        const initializeParams = this.createInitializeClientSessionParameters(glspClient.initializeResult);
        this.configureServeActions(glspClient.initializeResult);
        this.toDispose.push(glspClient.onActionMessage(message => this.messageReceived(message), this.clientId), sprotty_1.Disposable.create(() => glspClient.disposeClientSession(this.createDisposeClientSessionParameters())));
        return glspClient.initializeClientSession(initializeParams);
    }
    createInitializeClientSessionParameters(_initializeResult) {
        const clientActionKinds = this.registry.getHandledActionKinds();
        return {
            clientSessionId: this.clientId,
            clientActionKinds,
            diagramType: this.diagramType
        };
    }
    createDisposeClientSessionParameters() {
        return {
            clientSessionId: this.clientId
        };
    }
    configureServeActions(initializeResult) {
        const serverActions = initializeResult.serverActions[this.diagramType];
        if ((serverActions === null || serverActions === void 0 ? void 0 : serverActions.length) === 0) {
            throw new Error(`No server-handled actions could be derived from the initialize result for diagramType: ${this.diagramType}!`);
        }
        serverActions.forEach(action => this.registry.register(action, this));
    }
    messageReceived(message) {
        if (this.clientId !== message.clientId) {
            return;
        }
        const action = message.action;
        ServerAction.mark(action);
        this.logger.log(this, 'receiving', action);
        this.actionDispatcher.dispatch(action);
    }
    initialize(registry) {
        var _a;
        // Registering actions here is discouraged and it's recommended
        // to implemented dedicated action handlers.
        if (!this.clientId) {
            this.clientId = (_a = this.options.clientId) !== null && _a !== void 0 ? _a : this.viewerOptions.baseDiv;
        }
        this.registry = registry;
    }
    handle(action) {
        // Handling additional actions here is discouraged and it's recommended
        // to implemented dedicated action handlers.
        if (this.shouldForwardToServer(action)) {
            this.forwardToServer(action);
        }
    }
    forwardToServer(action) {
        const message = {
            clientId: this.clientId,
            action: action
        };
        this.logger.log(this, 'sending', message);
        if (this.glspClient) {
            this.glspClient.sendActionMessage(message);
        }
        else {
            throw new Error('GLSPClient is not connected');
        }
    }
    shouldForwardToServer(action) {
        return !ServerAction.is(action);
    }
    commitModel(newRoot) {
        /* In GLSP the model update flow is server-driven. i.e. changes to the graphical model are applied
         * on server-side an only the server can issue a model update.
         * The internal/local model should never be committed back to the model source i.e. GLSP server.
         * => no-op implementation that simply returns the `newRoot`
         */
        this._currentRoot = newRoot;
        return newRoot;
    }
    get model() {
        return this._currentRoot;
    }
    dispose() {
        this.toDispose.dispose();
    }
};
exports.GLSPModelSource = GLSPModelSource;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], GLSPModelSource.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IDiagramOptions),
    __metadata("design:type", Object)
], GLSPModelSource.prototype, "options", void 0);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GLSPModelSource.prototype, "dispose", null);
exports.GLSPModelSource = GLSPModelSource = __decorate([
    (0, inversify_1.injectable)()
], GLSPModelSource);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/model/model-change-service.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/model/model-change-service.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModelChangeService = void 0;
/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
class ModelChangeService {
    constructor() {
        this.toDispose = new sprotty_1.DisposableCollection();
        this.onModelRootChangedEmitter = new sprotty_1.Emitter();
        this.onViewportChangedEmitter = new sprotty_1.Emitter();
    }
    get currentRoot() {
        return this._currentRoot;
    }
    get commandStack() {
        return this.lazyInjector.get(sprotty_1.TYPES.ICommandStack);
    }
    get onModelRootChanged() {
        return this.onModelRootChangedEmitter.event;
    }
    get onViewportChanged() {
        return this.onViewportChangedEmitter.event;
    }
    initialize() {
        this.toDispose.push(this.onModelRootChangedEmitter, this.onViewportChangedEmitter);
        this.commandStack.onCommandExecuted(data => this.handleCommandExecution(data.command, data.newRoot));
    }
    dispose() {
        this.toDispose.dispose();
    }
    handleCommandExecution(command, newRoot) {
        if (this.isModelRootChangeCommand(command)) {
            this.handleModelRootChangeCommand(command, newRoot);
        }
        if (this.isViewportChangeCommand(command)) {
            this.handleViewportChangeCommand(command, newRoot);
        }
    }
    isModelRootChangeCommand(command) {
        return command instanceof sprotty_1.SetModelCommand || command instanceof sprotty_1.UpdateModelCommand;
    }
    isViewportChangeCommand(command) {
        return command instanceof sprotty_1.SetViewportCommand || command instanceof sprotty_1.BoundsAwareViewportCommand;
    }
    handleModelRootChangeCommand(command, newRoot) {
        this._currentRoot = newRoot;
        this.lastViewport = this.toViewport(newRoot);
        this.onModelRootChangedEmitter.fire(newRoot);
    }
    handleViewportChangeCommand(command, newRoot) {
        const viewport = this.toViewport(newRoot);
        if (!viewport) {
            return;
        }
        if (this.hasViewportChanged(viewport)) {
            this.onViewportChangedEmitter.fire({ newViewport: viewport, oldViewport: this.lastViewport });
            this.lastViewport = viewport;
        }
    }
    hasViewportChanged(newViewport) {
        if (!this.lastViewport) {
            return true;
        }
        return !((0, sprotty_1.almostEquals)(newViewport.zoom, this.lastViewport.zoom) &&
            (0, sprotty_1.almostEquals)(newViewport.scroll.x, this.lastViewport.scroll.x) &&
            (0, sprotty_1.almostEquals)(newViewport.scroll.y, this.lastViewport.scroll.y));
    }
    toViewport(root) {
        return (0, sprotty_1.isViewport)(root) ? { scroll: root.scroll, zoom: root.zoom } : undefined;
    }
}
exports.ModelChangeService = ModelChangeService;
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], ModelChangeService.prototype, "lazyInjector", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ModelChangeService.prototype, "initialize", null);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ModelChangeService.prototype, "dispose", null);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/model/model-initialization-constraint.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/model/model-initialization-constraint.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultModelInitializationConstraint = exports.ModelInitializationConstraint = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
/**
 * The constraint defining when the initialization of the GLSP model is completed.
 *
 * Many actions, such as the `CenterAction`, can only be successfully processed if
 * the GLSP model initialization is completed, that is, the model has been set,
 * its bounds have been computed, the canvas bounds are available, etc.
 *
 * An injectable implementation of this constraint will be used by the
 * `GLSPActionDispatcher` to determine when the initialization is completed.
 * The action dispatcher therefore provides a promise via `onceInitialized()`
 * to trigger clients that want to dispatch an action, once the initialization
 * is done.
 *
 * For most of the cases `DefaultInitializationConstraint` can be used. In fact,
 * it is bound by default. However, custom implementations can rebind other
 * implementations of this constraint to, for instance, delay further before the
 * `onceInitialized()` promise is fulfilled by the `GLSPActionDispatcher`.
 */
let ModelInitializationConstraint = class ModelInitializationConstraint {
    constructor() {
        this.completion = new sprotty_1.Deferred();
        this._isCompleted = false;
        this.onInitializedEmitter = new sprotty_1.Emitter();
    }
    get isCompleted() {
        return this._isCompleted;
    }
    onInitialized(listener) {
        if (!listener) {
            return this.completion.promise;
        }
        if (this.isCompleted) {
            listener();
            return sprotty_1.Disposable.empty();
        }
        return this.onInitializedEmitter.event(listener);
    }
    setCompleted() {
        if (!this.isCompleted) {
            this._isCompleted = true;
            this.completion.resolve();
            this.onInitializedEmitter.fire();
            this.onInitializedEmitter.dispose();
        }
    }
    notifyDispatched(action) {
        if (this.isCompleted) {
            return;
        }
        if (this.isInitializedAfter(action)) {
            this.setCompleted();
        }
    }
};
exports.ModelInitializationConstraint = ModelInitializationConstraint;
exports.ModelInitializationConstraint = ModelInitializationConstraint = __decorate([
    (0, inversify_1.injectable)()
], ModelInitializationConstraint);
/**
 * Default initialization constraint triggers after a non-empty `UpdateModelAction`
 * and a subsequent `InitializeCanvasBoundsAction`.
 */
let DefaultModelInitializationConstraint = class DefaultModelInitializationConstraint extends ModelInitializationConstraint {
    constructor() {
        super(...arguments);
        this.seenNonEmptyModelAction = false;
    }
    isInitializedAfter(action) {
        if (this.isNonEmptyModelAction(action)) {
            this.seenNonEmptyModelAction = true;
        }
        else if (this.seenNonEmptyModelAction && action.kind === sprotty_1.InitializeCanvasBoundsAction.KIND) {
            return true;
        }
        return false;
    }
    isNonEmptyModelAction(action) {
        if (sprotty_1.SetModelAction.is(action) || sprotty_1.UpdateModelAction.is(action)) {
            return action.newRoot.type !== 'NONE';
        }
        return false;
    }
};
exports.DefaultModelInitializationConstraint = DefaultModelInitializationConstraint;
exports.DefaultModelInitializationConstraint = DefaultModelInitializationConstraint = __decorate([
    (0, inversify_1.injectable)()
], DefaultModelInitializationConstraint);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/model/model-registry.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/model/model-registry.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GModelRegistry = void 0;
/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const args_feature_1 = __webpack_require__(/*! ../args-feature */ "../node_modules/@eclipse-glsp/client/lib/base/args-feature.js");
/**
 *  Model element classes registered here are considered automatically when constructing a model from its schema.
 *  Use the `configureModelElement` utility function to register a model element and its target render view in the
 *  corresponding factories.
 */
let GModelRegistry = class GModelRegistry extends sprotty_1.SModelRegistry {
    /* Overwrite the `register` method to only log an info message (instead of thrown an error) if
       an existing registration is overwritten */
    register(key, factory) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        if (this.hasKey(key)) {
            // do not throw error but log overwriting
            console.log(`Key is already registered: ${key}.Factory for model element '${key}' will be overwritten.`);
            console.warn('Implicit overwriting by registering the same key twice is deprecated' +
                "\n Use 'overrideModelElement()' instead of 'configureModelElement()' for explicit overwriting.");
        }
        this.elements.set(key, factory);
    }
    getDefaultFeatures(constr) {
        var _a;
        // Add the argsFeature per default to all model elements
        const features = [...((_a = super.getDefaultFeatures(constr)) !== null && _a !== void 0 ? _a : [])];
        if (!features.includes(args_feature_1.argsFeature)) {
            features.push(args_feature_1.argsFeature);
        }
        return features;
    }
};
exports.GModelRegistry = GModelRegistry;
exports.GModelRegistry = GModelRegistry = __decorate([
    (0, inversify_1.injectable)()
], GModelRegistry);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/mouse-position-tracker.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/mouse-position-tracker.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPMousePositionTracker = void 0;
/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
    rank: number;
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ranked_1 = __webpack_require__(/*! ./ranked */ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js");
let GLSPMousePositionTracker = class GLSPMousePositionTracker extends sprotty_1.MousePositionTracker {
    constructor() {
        super(...arguments);
        /* we want to be executed before all default mouse listeners since we are just tracking the position and others may need it */
        this.rank = ranked_1.Ranked.DEFAULT_RANK - 200;
    }
    mouseMove(target, event) {
        // we cannot simply use the offsetX and offsetY properties of the event since they also consider nested HTML elements
        // such as foreignObjects or the projection bars divs. Instead, we manually translate the client coordinates to the diagram
        const globalOrigin = target.root.canvasBounds;
        const clientToPosition = { x: event.clientX, y: event.clientY };
        const rootToPosition = sprotty_1.Point.subtract(clientToPosition, globalOrigin);
        const positionOnDiagram = target.root.parentToLocal(rootToPosition);
        this.lastPosition = positionOnDiagram;
        return [];
    }
};
exports.GLSPMousePositionTracker = GLSPMousePositionTracker;
exports.GLSPMousePositionTracker = GLSPMousePositionTracker = __decorate([
    (0, inversify_1.injectable)()
], GLSPMousePositionTracker);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js":
/*!***************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/ranked.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Ranked = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var Ranked;
(function (Ranked) {
    Ranked.DEFAULT_RANK = 0;
    function is(object) {
        return sprotty_1.AnyObject.is(object) && (0, sprotty_1.hasNumberProp)(object, 'rank');
    }
    Ranked.is = is;
    /**
     * Tries to retrieve the rank form the given object. If the object
     * implements the {@link Ranked} interface the corresponding rank is returned
     * otherwise the {@link DEFAULT_RANK} is returned.
     * @param object
     */
    function getRank(object) {
        return is(object) ? object.rank : Ranked.DEFAULT_RANK;
    }
    Ranked.getRank = getRank;
    /** Sort function for lowest rank first. */
    Ranked.sortAsc = (left, right) => getRank(left) - getRank(right);
    /** Sort function for highest rank first. */
    Ranked.sortDesc = (left, right) => getRank(right) - getRank(left);
    /** Default sort function for rank: Lowest rank first */
    Ranked.sort = Ranked.sortAsc;
})(Ranked || (exports.Ranked = Ranked = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/selection-clearing-mouse-listener.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/selection-clearing-mouse-listener.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionClearingMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
/**
 * A mouse listener that clears the document selection on click
 *
 * Clicking on SVG elements doesn't update the document selection. In the context of diagramming
 * with GLSP, this is unnatural, as the user would expect that clicking in the diagram (e.g. to
 * select a diagram element) would clear any other selection state in the DOM. From a technical
 * point of view, an active selection in the document after clicking into the diagram may also
 * lead to bogus target elements in certain browser events, such as clipboard events, etc.
 *
 * This listener helps to overcome this problem by actively clearing any existing selection in
 * the document, if the user clicks into the diagram.
 */
let SelectionClearingMouseListener = class SelectionClearingMouseListener extends sprotty_1.MouseListener {
    mouseDown(_target, event) {
        const selection = document.getSelection();
        // eslint-disable-next-line no-null/no-null
        if (selection === null) {
            return [];
        }
        selection.removeAllRanges();
        selection.addRange(document.createRange());
        return [];
    }
};
exports.SelectionClearingMouseListener = SelectionClearingMouseListener;
exports.SelectionClearingMouseListener = SelectionClearingMouseListener = __decorate([
    (0, inversify_1.injectable)()
], SelectionClearingMouseListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/selection-service.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectFeedbackAction = exports.SelectAllCommand = exports.SelectCommand = exports.SelectionService = exports.ISelectionListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const gmodel_util_1 = __webpack_require__(/*! ../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
var ISelectionListener;
(function (ISelectionListener) {
    function is(object) {
        return sprotty_1.AnyObject.is(object) && (0, sprotty_1.hasFunctionProp)(object, 'selectionChanged');
    }
    ISelectionListener.is = is;
})(ISelectionListener || (exports.ISelectionListener = ISelectionListener = {}));
let SelectionService = class SelectionService {
    constructor() {
        this.selectedElementIDs = new Set();
        this.toDispose = new sprotty_1.DisposableCollection();
        this.onSelectionChangedEmitter = new sprotty_1.Emitter();
    }
    initialize() {
        this.toDispose.push(this.onSelectionChangedEmitter);
    }
    preLoadDiagram() {
        this.lazyInjector.getAll(sprotty_1.TYPES.ISelectionListener).forEach(listener => this.addListener(listener));
    }
    dispose() {
        this.toDispose.dispose();
    }
    get onSelectionChanged() {
        return this.onSelectionChangedEmitter.event;
    }
    addListener(listener) {
        return this.onSelectionChanged(change => listener.selectionChanged(change.root, change.selectedElements, change.deselectedElements));
    }
    modelRootChanged(root) {
        this.updateSelection(root, [], []);
    }
    updateSelection(newRoot, select, deselect) {
        if (newRoot === undefined && select.length === 0 && deselect.length === 0) {
            return;
        }
        const prevRoot = this.root;
        const prevSelectedElementIDs = new Set(this.selectedElementIDs);
        this.root = newRoot;
        // We only select elements that are not part of the deselection
        const toSelect = [...select].filter(selectId => deselect.indexOf(selectId) === -1);
        // We only need to deselect elements that are not part of the selection
        // If an element is part of both the select and deselect, it's state is not changed
        const toDeselect = [...deselect].filter(deselectId => select.indexOf(deselectId) === -1 && this.selectedElementIDs.has(deselectId));
        // update selected element ids
        toDeselect.forEach(toDeselectId => this.selectedElementIDs.delete(toDeselectId));
        toSelect.forEach(toSelectId => this.selectedElementIDs.add(toSelectId));
        // check if the newly or previously selected elements still exist in the updated root
        const deselectedElementIDs = new Set(toDeselect);
        for (const id of this.selectedElementIDs) {
            const element = newRoot.index.getById(id);
            if (element === undefined) {
                // element to be selected does not exist in the root...
                this.selectedElementIDs.delete(id);
                if (prevRoot === null || prevRoot === void 0 ? void 0 : prevRoot.index.getById(id)) {
                    // ...but existed in the previous root, so we want to consider it deselected
                    deselectedElementIDs.add(id);
                }
            }
        }
        // only send out changes if there actually are changes, i.e., any of the selected elements ids has changed
        const selectionChanged = prevSelectedElementIDs.size !== this.selectedElementIDs.size ||
            ![...prevSelectedElementIDs].every(value => this.selectedElementIDs.has(value));
        if (selectionChanged) {
            // aggregate to feedback action handling all elements as only the last feedback is restored
            this.dispatchFeedback([
                SelectFeedbackAction.create({
                    selectedElementsIDs: [...this.selectedElementIDs],
                    deselectedElementsIDs: [...deselectedElementIDs]
                })
            ]);
            // notify listeners after the feedback action
            this.notifyListeners(this.root, this.selectedElementIDs, deselectedElementIDs);
        }
    }
    dispatchFeedback(actions) {
        this.feedbackDispatcher.registerFeedback(this, actions);
    }
    notifyListeners(root, selectedElementIDs, deselectedElementIDs) {
        this.onSelectionChangedEmitter.fire({
            root,
            selectedElements: Array.from(selectedElementIDs),
            deselectedElements: Array.from(deselectedElementIDs)
        });
    }
    getModelRoot() {
        return this.root;
    }
    getSelectedElements() {
        return !this.root ? [] : (0, gmodel_util_1.getElements)(this.root.index, Array.from(this.selectedElementIDs), sprotty_1.isSelectable);
    }
    /**
     * QUERY METHODS
     */
    getSelectedElementIDs() {
        return [...this.selectedElementIDs];
    }
    hasSelectedElements() {
        return this.selectedElementIDs.size > 0;
    }
    isSingleSelection() {
        return this.selectedElementIDs.size === 1;
    }
    isMultiSelection() {
        return this.selectedElementIDs.size > 1;
    }
};
exports.SelectionService = SelectionService;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], SelectionService.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], SelectionService.prototype, "lazyInjector", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], SelectionService.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SelectionService.prototype, "initialize", null);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SelectionService.prototype, "dispose", null);
exports.SelectionService = SelectionService = __decorate([
    (0, inversify_1.injectable)()
], SelectionService);
/**
 * Handles a {@link SelectAction} and propagates the new selection to the {@link SelectionService}.
 * Other tools might be selection-sensitive which means {@link SelectAction}s must be processed as fast as possible.
 * Handling the action with a command ensures that the action is processed before the next render tick.
 */
let SelectCommand = class SelectCommand extends sprotty_1.Command {
    constructor(action, selectionService) {
        super();
        this.action = action;
        this.selectionService = selectionService;
        this.selected = [];
        this.deselected = [];
    }
    execute(context) {
        const model = context.root;
        const selectionGuard = (element) => element instanceof sprotty_1.GChildElement && (0, sprotty_1.isSelectable)(element);
        const selectedElements = (0, gmodel_util_1.getElements)(model.index, this.action.selectedElementsIDs, selectionGuard);
        const deselectedElements = this.action.deselectAll
            ? this.selectionService.getSelectedElements()
            : (0, gmodel_util_1.getElements)(model.index, this.action.deselectedElementsIDs, selectionGuard);
        this.selectionService.updateSelection(model, (0, sprotty_1.pluck)(selectedElements, 'id'), (0, sprotty_1.pluck)(deselectedElements, 'id'));
        return model;
    }
    // Basically no-op since client-side undo is not supported in GLSP.
    undo(context) {
        return context.root;
    }
    // Basically no-op since client-side redo is not supported in GLSP.
    redo(context) {
        return context.root;
    }
};
exports.SelectCommand = SelectCommand;
SelectCommand.KIND = sprotty_1.SprottySelectCommand.KIND;
exports.SelectCommand = SelectCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __param(1, (0, inversify_1.inject)(SelectionService)),
    __metadata("design:paramtypes", [Object, SelectionService])
], SelectCommand);
/**
 * Handles a {@link SelectAllAction} and propagates the new selection to the {@link SelectionService}.
 * Other tools might be selection-sensitive which means {@link SelectionAllAction}s must be processed as fast as possible.
 * Handling the action with a command ensures that the action is processed before the next render tick.
 */
let SelectAllCommand = class SelectAllCommand extends sprotty_1.Command {
    constructor(action, selectionService) {
        super();
        this.action = action;
        this.selectionService = selectionService;
        this.previousSelection = new Map();
    }
    execute(context) {
        const model = context.root;
        const selectionGuard = (element) => element instanceof sprotty_1.GChildElement && (0, sprotty_1.isSelectable)(element);
        const selectables = (0, gmodel_util_1.getMatchingElements)(model.index, selectionGuard);
        const selectableIds = (0, sprotty_1.pluck)(selectables, 'id');
        if (this.action.select) {
            this.selectionService.updateSelection(model, selectableIds, []);
        }
        else {
            this.selectionService.updateSelection(model, [], selectableIds);
        }
        return model;
    }
    // Basically no-op since client-side undo is not supported in GLSP.
    undo(context) {
        return context.root;
    }
    // Basically no-op since client-side redo is not supported in GLSP.
    redo(context) {
        return context.root;
    }
};
exports.SelectAllCommand = SelectAllCommand;
SelectAllCommand.KIND = sprotty_1.SprottySelectAllCommand.KIND;
exports.SelectAllCommand = SelectAllCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __param(1, (0, inversify_1.inject)(SelectionService)),
    __metadata("design:paramtypes", [Object, SelectionService])
], SelectAllCommand);
var SelectFeedbackAction;
(function (SelectFeedbackAction) {
    SelectFeedbackAction.KIND = 'selectFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, SelectFeedbackAction.KIND) && (0, sprotty_1.hasArrayProp)(object, 'selectedElementsIDs') && (0, sprotty_1.hasArrayProp)(object, 'deselectedElementsIDs');
    }
    SelectFeedbackAction.is = is;
    function create(options) {
        return { ...sprotty_1.SelectAction.create(options), kind: SelectFeedbackAction.KIND };
    }
    SelectFeedbackAction.create = create;
    function addSelection(selectedElementsIDs) {
        return { ...sprotty_1.SelectAction.addSelection(selectedElementsIDs), kind: SelectFeedbackAction.KIND };
    }
    SelectFeedbackAction.addSelection = addSelection;
    function removeSelection(deselectedElementsIDs) {
        return { ...sprotty_1.SelectAction.removeSelection(deselectedElementsIDs), kind: SelectFeedbackAction.KIND };
    }
    SelectFeedbackAction.removeSelection = removeSelection;
    function setSelection(selectedElementsIDs) {
        return { ...sprotty_1.SelectAction.setSelection(selectedElementsIDs), kind: SelectFeedbackAction.KIND };
    }
    SelectFeedbackAction.setSelection = setSelection;
})(SelectFeedbackAction || (exports.SelectFeedbackAction = SelectFeedbackAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-extension.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-extension.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AvailableShortcutsUIExtension_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AvailableShortcutsUIExtension = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const lodash_1 = __webpack_require__(/*! lodash */ "../node_modules/lodash/lodash.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
const messages_1 = __webpack_require__(/*! ../messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
let AvailableShortcutsUIExtension = AvailableShortcutsUIExtension_1 = class AvailableShortcutsUIExtension extends ui_extension_1.GLSPAbstractUIExtension {
    id() {
        return AvailableShortcutsUIExtension_1.ID;
    }
    containerClass() {
        return AvailableShortcutsUIExtension_1.ID;
    }
    show(root, ...contextElementIds) {
        super.show(root, ...contextElementIds);
        this.shortcutsContainer.focus();
        this.toDisposeOnHide.push(this.shortcutManager.onDidChange(() => this.refreshUI()));
    }
    refreshUI() {
        this.shortcutsContainer.innerHTML = '';
        const registrations = this.shortcutManager.getRegistrations();
        registrations.sort((a, b) => {
            if (a.group < b.group) {
                return -1;
            }
            if (a.group > b.group) {
                return 1;
            }
            return a.position - b.position;
        });
        const grouped = (0, lodash_1.groupBy)(registrations, k => k.group);
        const groupTable = document.createElement('table');
        groupTable.classList.add('shortcut-table');
        const tableHead = document.createElement('thead');
        const tableBody = document.createElement('tbody');
        const headerRow = document.createElement('tr');
        const commandCell = document.createElement('th');
        const keybindingCell = document.createElement('th');
        commandCell.classList.add('column-title');
        commandCell.innerText = messages_1.messages.shortcut.header_command;
        keybindingCell.innerText = messages_1.messages.shortcut.header_shortcut;
        headerRow.appendChild(commandCell);
        headerRow.appendChild(keybindingCell);
        tableHead.appendChild(headerRow);
        for (const [group, shortcuts] of Object.entries(grouped)) {
            tableBody.appendChild(this.createGroupHeader(group));
            shortcuts.forEach(s => {
                tableBody.appendChild(this.createEntry(s));
            });
        }
        groupTable.appendChild(tableHead);
        groupTable.appendChild(tableBody);
        this.shortcutsContainer.append(groupTable);
    }
    createGroupHeader(group) {
        const entryRow = document.createElement('tr');
        const groupElement = document.createElement('td');
        const text = document.createElement('strong');
        const emptyElement = document.createElement('td');
        text.innerText = group;
        groupElement.appendChild(text);
        entryRow.appendChild(groupElement);
        entryRow.appendChild(emptyElement);
        return entryRow;
    }
    getShortcutHTML(shortcuts) {
        const shortcutKeys = document.createElement('span');
        shortcutKeys.innerHTML = shortcuts.map(key => `<kbd>${key}</kbd>`).join(' + ');
        return shortcutKeys;
    }
    createEntry(registration) {
        const entryRow = document.createElement('tr');
        const shortcutElement = document.createElement('td');
        const descElement = document.createElement('td');
        const shortcut = this.getShortcutHTML(registration.shortcuts);
        descElement.innerText = registration.description;
        shortcutElement.appendChild(shortcut);
        entryRow.appendChild(descElement);
        entryRow.appendChild(shortcutElement);
        return entryRow;
    }
    initializeContents(containerElement) {
        this.container = document.createElement('div');
        this.container.classList.add('keyboard-shortcuts-menu');
        // create title
        const menuTitle = document.createElement('h3');
        menuTitle.classList.add('menu-header');
        menuTitle.innerText = messages_1.messages.shortcut.title;
        this.container.appendChild(menuTitle);
        const closeBtn = document.createElement('button');
        closeBtn.id = 'key-shortcut-close-btn';
        closeBtn.textContent = 'x';
        closeBtn.addEventListener('click', () => {
            this.hide();
        });
        this.container.appendChild(closeBtn);
        // create shortcuts container
        this.shortcutsContainer = document.createElement('div');
        this.shortcutsContainer.classList.add('keyboard-shortcuts-container');
        this.shortcutsContainer.tabIndex = 30;
        this.shortcutsContainer.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' || (0, sprotty_1.matchesKeystroke)(event, 'KeyH', 'alt')) {
                this.hide();
            }
        });
        this.container.appendChild(this.shortcutsContainer);
        containerElement.appendChild(this.container);
        containerElement.ariaLabel = messages_1.messages.shortcut.menu_title;
        this.refreshUI();
    }
};
exports.AvailableShortcutsUIExtension = AvailableShortcutsUIExtension;
AvailableShortcutsUIExtension.ID = 'key-shortcut';
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], AvailableShortcutsUIExtension.prototype, "shortcutManager", void 0);
exports.AvailableShortcutsUIExtension = AvailableShortcutsUIExtension = AvailableShortcutsUIExtension_1 = __decorate([
    (0, inversify_1.injectable)()
], AvailableShortcutsUIExtension);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-tool.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-tool.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AvailableShortcutsTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AccessibleShortcutKeyListener = exports.AvailableShortcutsTool = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const base_tools_1 = __webpack_require__(/*! ../../features/tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const available_shortcuts_extension_1 = __webpack_require__(/*! ./available-shortcuts-extension */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-extension.js");
let AvailableShortcutsTool = AvailableShortcutsTool_1 = class AvailableShortcutsTool extends base_tools_1.BaseTool {
    constructor() {
        super(...arguments);
        this.shortcutKeyListener = new AccessibleShortcutKeyListener();
    }
    get id() {
        return AvailableShortcutsTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.shortcutKeyListener));
    }
};
exports.AvailableShortcutsTool = AvailableShortcutsTool;
AvailableShortcutsTool.ID = 'available-shortcuts-tool';
exports.AvailableShortcutsTool = AvailableShortcutsTool = AvailableShortcutsTool_1 = __decorate([
    (0, inversify_1.injectable)()
], AvailableShortcutsTool);
class AccessibleShortcutKeyListener extends sprotty_1.KeyListener {
    constructor() {
        super(...arguments);
        this.token = Symbol(AccessibleShortcutKeyListener.name);
    }
    keyDown(element, event) {
        if (this.matchesActivateShortcutHelpKeystroke(event)) {
            return [sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: available_shortcuts_extension_1.AvailableShortcutsUIExtension.ID, visible: true })];
        }
        return [];
    }
    matchesActivateShortcutHelpKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyH', 'alt');
    }
}
exports.AccessibleShortcutKeyListener = AccessibleShortcutKeyListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/shortcuts-manager.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/shortcuts/shortcuts-manager.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShortcutManager = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let ShortcutManager = class ShortcutManager {
    constructor() {
        this.registrations = new Map();
        this.onDidChangeEmitter = new sprotty_1.Emitter();
        this.onDidChange = this.onDidChangeEmitter.event;
    }
    getShortcuts() {
        return this.registrations;
    }
    getRegistrations() {
        return Array.from(this.registrations.values()).flat();
    }
    register(token, shortcuts) {
        this.registrations.set(token, shortcuts);
        this.onDidChangeEmitter.fire(this.registrations);
        return sprotty_1.Disposable.create(() => {
            this.deregister(token);
        });
    }
    deregister(token) {
        this.registrations.delete(token);
        this.onDidChangeEmitter.fire(this.registrations);
    }
};
exports.ShortcutManager = ShortcutManager;
exports.ShortcutManager = ShortcutManager = __decorate([
    (0, inversify_1.injectable)()
], ShortcutManager);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/shortcuts-module.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/shortcuts/shortcuts-module.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.standaloneShortcutsModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../css/key-shortcut.css */ "../node_modules/@eclipse-glsp/client/css/key-shortcut.css");
const available_shortcuts_extension_1 = __webpack_require__(/*! ./available-shortcuts-extension */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-extension.js");
const available_shortcuts_tool_1 = __webpack_require__(/*! ./available-shortcuts-tool */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-tool.js");
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.standaloneShortcutsModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, available_shortcuts_tool_1.AvailableShortcutsTool);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, available_shortcuts_extension_1.AvailableShortcutsUIExtension);
}, { featureId: Symbol('standaloneShortcuts') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool-manager.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool-manager.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultToolsEnablingKeyListener = exports.ToolManagerActionHandler = exports.ToolManager = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const ranked_1 = __webpack_require__(/*! ../ranked */ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js");
const tool_1 = __webpack_require__(/*! ./tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
/**
 * The default {@link IToolManager} implementation. Allows
 * registration of tools via Dependency Injection.
 */
let ToolManager = class ToolManager {
    constructor() {
        this.actives = [];
        this.tools = [];
        this.defaultTools = [];
        this._defaultToolsEnabled = false;
    }
    get defaultToolsEnabled() {
        return this._defaultToolsEnabled;
    }
    preLoadDiagram() {
        const tools = this.lazyInjector.getAll(sprotty_1.TYPES.ITool);
        const defaultTools = this.lazyInjector.getAll(sprotty_1.TYPES.IDefaultTool);
        this.registerTools(...tools);
        this.registerDefaultTools(...defaultTools);
        this.enableDefaultTools();
    }
    get managedTools() {
        return this.defaultTools.concat(this.tools);
    }
    get activeTools() {
        return this.actives;
    }
    get rank() {
        return ranked_1.Ranked.DEFAULT_RANK - 100;
    }
    registerDefaultTools(...tools) {
        (0, sprotty_1.distinctAdd)(this.defaultTools, ...tools);
    }
    registerTools(...tools) {
        (0, sprotty_1.distinctAdd)(this.tools, ...tools);
    }
    disableActiveTools() {
        this._defaultToolsEnabled = false;
        this.actives.forEach(tool => tool.disable());
        this.actives.splice(0, this.actives.length);
    }
    enableDefaultTools() {
        if (this.defaultToolsEnabled) {
            return;
        }
        this.enable((0, sprotty_1.pluck)(this.defaultTools, 'id'));
        this._defaultToolsEnabled = true;
    }
    enable(toolIds) {
        this.disableActiveTools();
        let tools = toolIds.map(id => this.tool(id));
        if (this.editorContext && this.editorContext.isReadonly) {
            tools = tools.filter(tool => !(tool === null || tool === void 0 ? void 0 : tool.isEditTool));
        }
        tools.forEach(tool => {
            if (tool !== undefined) {
                tool.enable();
                this.actives.push(tool);
            }
        });
    }
    tool(toolId) {
        return this.managedTools.find(tool => tool.id === toolId);
    }
    disableEditTools() {
        this.disableActiveTools();
        this.enable(this.defaultTools.filter(tool => !tool.isEditTool).map(tool => tool.id));
    }
    editModeChanged(newValue, oldValue) {
        if (oldValue === newValue) {
            return;
        }
        if (newValue === sprotty_1.EditMode.READONLY) {
            this.disableEditTools();
        }
        else if (newValue === sprotty_1.EditMode.EDITABLE) {
            this.enableDefaultTools();
        }
    }
};
exports.ToolManager = ToolManager;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ToolManager.prototype, "editorContext", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], ToolManager.prototype, "lazyInjector", void 0);
exports.ToolManager = ToolManager = __decorate([
    (0, inversify_1.injectable)()
], ToolManager);
let ToolManagerActionHandler = class ToolManagerActionHandler {
    handle(action) {
        if (tool_1.EnableDefaultToolsAction.is(action)) {
            this.toolManager.enableDefaultTools();
        }
        else if (tool_1.EnableToolsAction.is(action)) {
            this.toolManager.enable(action.toolIds);
        }
    }
};
exports.ToolManagerActionHandler = ToolManagerActionHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IToolManager),
    __metadata("design:type", Object)
], ToolManagerActionHandler.prototype, "toolManager", void 0);
exports.ToolManagerActionHandler = ToolManagerActionHandler = __decorate([
    (0, inversify_1.injectable)()
], ToolManagerActionHandler);
let DefaultToolsEnablingKeyListener = class DefaultToolsEnablingKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Escape')) {
            return [tool_1.EnableDefaultToolsAction.create()];
        }
        return [];
    }
};
exports.DefaultToolsEnablingKeyListener = DefaultToolsEnablingKeyListener;
exports.DefaultToolsEnablingKeyListener = DefaultToolsEnablingKeyListener = __decorate([
    (0, inversify_1.injectable)()
], DefaultToolsEnablingKeyListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tool = exports.EnableDefaultToolsAction = exports.EnableToolsAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var EnableToolsAction;
(function (EnableToolsAction) {
    EnableToolsAction.KIND = 'enable-tools';
    function is(object) {
        return sprotty_1.Action.hasKind(object, EnableToolsAction.KIND) && (0, sprotty_1.hasArrayProp)(object, 'toolIds');
    }
    EnableToolsAction.is = is;
    function create(toolIds) {
        return {
            kind: EnableToolsAction.KIND,
            toolIds
        };
    }
    EnableToolsAction.create = create;
})(EnableToolsAction || (exports.EnableToolsAction = EnableToolsAction = {}));
var EnableDefaultToolsAction;
(function (EnableDefaultToolsAction) {
    EnableDefaultToolsAction.KIND = 'enable-default-tools';
    function is(object) {
        return sprotty_1.Action.hasKind(object, EnableDefaultToolsAction.KIND);
    }
    EnableDefaultToolsAction.is = is;
    function create() {
        return {
            kind: EnableDefaultToolsAction.KIND
        };
    }
    EnableDefaultToolsAction.create = create;
})(EnableDefaultToolsAction || (exports.EnableDefaultToolsAction = EnableDefaultToolsAction = {}));
var Tool;
(function (Tool) {
    function is(object) {
        return (sprotty_1.AnyObject.is(object) &&
            (0, sprotty_1.hasStringProp)(object, 'id') &&
            (0, sprotty_1.hasFunctionProp)(object, 'enable') &&
            (0, sprotty_1.hasFunctionProp)(object, 'disable') &&
            (0, sprotty_1.hasBooleanProp)(object, 'isEditTool', true));
    }
    Tool.is = is;
})(Tool || (exports.Tool = Tool = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension-registry.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension-registry.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPUIExtensionRegistry = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let GLSPUIExtensionRegistry = class GLSPUIExtensionRegistry extends sprotty_1.UIExtensionRegistry {
    constructor(extensions) {
        super(extensions);
    }
    preLoadDiagram() {
        this.lazyInjector.getAll(sprotty_1.TYPES.IUIExtension).forEach(extension => this.register(extension.id(), extension));
    }
};
exports.GLSPUIExtensionRegistry = GLSPUIExtensionRegistry;
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], GLSPUIExtensionRegistry.prototype, "lazyInjector", void 0);
exports.GLSPUIExtensionRegistry = GLSPUIExtensionRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.EmptyArray)),
    __metadata("design:paramtypes", [Array])
], GLSPUIExtensionRegistry);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPAbstractUIExtension = exports.CSS_HIDDEN_EXTENSION_CLASS = exports.CSS_UI_EXTENSION_CLASS = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
exports.CSS_UI_EXTENSION_CLASS = 'ui-extension';
exports.CSS_HIDDEN_EXTENSION_CLASS = 'hidden';
/**
 * Reusable abstract base implementation for UI extensions.
 * Intended for UI extensions that directly interact with the DOM API to create and manage UI elements.
 */
let GLSPAbstractUIExtension = class GLSPAbstractUIExtension extends sprotty_1.AbstractUIExtension {
    constructor() {
        super(...arguments);
        this.toDisposeOnHide = new sprotty_1.DisposableCollection();
    }
    get diagramContainerId() {
        return this.options.baseDiv;
    }
    get parentContainerSelector() {
        return '#' + this.diagramContainerId;
    }
    get containerSelector() {
        return '#' + this.id();
    }
    get initialized() {
        return !!this.containerElement;
    }
    initialize() {
        if (this.initialized) {
            return true;
        }
        try {
            this.containerElement = this.getOrCreateContainer();
            this.initializeContainer(this.containerElement);
            this.initializeContents(this.containerElement);
        }
        catch (error) {
            const msg = error instanceof Error ? error.message : `Could not retrieve container element for UI extension ${this.id}`;
            this.logger.error(this, msg);
            return false;
        }
        return true;
    }
    getOrCreateContainer() {
        if (this.containerElement) {
            return this.containerElement;
        }
        // check if the container already exists, independent from any potential parent container
        // this allows us to use existing elements defined anywhere in the document
        const existingContainer = this.getContainer();
        if (existingContainer) {
            return existingContainer;
        }
        // to create a container the parent container
        const parent = this.getParentContainer();
        if (!(parent === null || parent === void 0 ? void 0 : parent.isConnected)) {
            throw new Error(`Could not obtain attached parent for initializing UI extension ${this.id}`);
        }
        const container = this.createContainer(parent);
        this.insertContainerIntoParent(container, parent);
        return container;
    }
    getContainer() {
        return document.querySelector(this.containerSelector);
    }
    createContainer(parent) {
        const container = document.createElement('div');
        container.id = parent.id + '_' + this.id();
        return container;
    }
    initializeContainer(container) {
        container.classList.add(exports.CSS_UI_EXTENSION_CLASS, this.containerClass());
    }
    getParentContainer() {
        return document.querySelector(this.parentContainerSelector);
    }
    insertContainerIntoParent(container, parent) {
        parent.insertBefore(container, parent.firstChild);
    }
    setContainerVisible(visible) {
        var _a, _b;
        // the parent class simply sets the style directly, however classes provide more fine-grained control
        if (visible) {
            (_a = this.containerElement) === null || _a === void 0 ? void 0 : _a.classList.remove(exports.CSS_HIDDEN_EXTENSION_CLASS);
        }
        else {
            (_b = this.containerElement) === null || _b === void 0 ? void 0 : _b.classList.add(exports.CSS_HIDDEN_EXTENSION_CLASS);
        }
    }
    isContainerVisible() {
        var _a;
        return !((_a = this.containerElement) === null || _a === void 0 ? void 0 : _a.classList.contains(exports.CSS_HIDDEN_EXTENSION_CLASS));
    }
    toggleContainerVisible() {
        this.setContainerVisible(!this.isContainerVisible());
    }
    hide() {
        super.hide();
        this.toDisposeOnHide.dispose();
    }
};
exports.GLSPAbstractUIExtension = GLSPAbstractUIExtension;
exports.GLSPAbstractUIExtension = GLSPAbstractUIExtension = __decorate([
    (0, inversify_1.injectable)()
], GLSPAbstractUIExtension);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/view/key-tool.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/view/key-tool.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPKeyTool = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let GLSPKeyTool = class GLSPKeyTool extends sprotty_1.KeyTool {
    constructor(keyListeners) {
        super(keyListeners);
    }
    registerListener(keyListener) {
        super.register(keyListener);
        return sprotty_1.Disposable.create(() => this.deregister(keyListener));
    }
    preLoadDiagram() {
        this.lazyInjector.getAll(sprotty_1.TYPES.KeyListener).forEach(listener => this.register(listener));
    }
};
exports.GLSPKeyTool = GLSPKeyTool;
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], GLSPKeyTool.prototype, "lazyInjector", void 0);
exports.GLSPKeyTool = GLSPKeyTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.EmptyArray)),
    __metadata("design:paramtypes", [Array])
], GLSPKeyTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/view/mouse-tool.js":
/*!************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/view/mouse-tool.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPMouseTool = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ranked_1 = __webpack_require__(/*! ../ranked */ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js");
let GLSPMouseTool = class GLSPMouseTool extends sprotty_1.MouseTool {
    constructor(mouseListeners) {
        super(mouseListeners);
    }
    preLoadDiagram() {
        this.lazyInjector.getAll(sprotty_1.TYPES.MouseListener).forEach(listener => this.register(listener));
    }
    register(mouseListener) {
        super.register(mouseListener);
        this.rankedMouseListeners = groupBy(this.mouseListeners, listener => ranked_1.Ranked.getRank(listener));
    }
    registerListener(mouseListener) {
        this.register(mouseListener);
        return sprotty_1.Disposable.create(() => this.deregister(mouseListener));
    }
    deregister(mouseListener) {
        super.deregister(mouseListener);
        this.rankedMouseListeners = groupBy(this.mouseListeners, listener => ranked_1.Ranked.getRank(listener));
    }
    handleEvent(methodName, model, event) {
        this.focusOnMouseEvent(methodName, model);
        const element = this.getTargetElement(model, event);
        if (!element) {
            return;
        }
        this.notifyListenersByRank(element, methodName, event);
    }
    async notifyListenersByRank(element, methodName, event) {
        for (const rank of this.rankedMouseListeners) {
            await this.dispatchActions(rank[1], methodName, element, event);
        }
    }
    async dispatchActions(mouseListeners, methodName, element, event) {
        const actions = mouseListeners.map(listener => listener[methodName](element, event)).reduce((a, b) => a.concat(b));
        if (actions.length > 0) {
            event.preventDefault();
            for (const actionOrPromise of actions) {
                if (sprotty_1.Action.is(actionOrPromise)) {
                    await this.actionDispatcher.dispatch(actionOrPromise);
                }
                else {
                    actionOrPromise.then((action) => {
                        this.actionDispatcher.dispatch(action);
                    });
                }
            }
        }
    }
};
exports.GLSPMouseTool = GLSPMouseTool;
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], GLSPMouseTool.prototype, "lazyInjector", void 0);
exports.GLSPMouseTool = GLSPMouseTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.EmptyArray)),
    __metadata("design:paramtypes", [Array])
], GLSPMouseTool);
function groupBy(array, keyFunction) {
    const unsortedMap = array.reduce((result, item) => {
        const key = keyFunction(item);
        if (!result.has(key)) {
            result.set(key, [item]);
        }
        else {
            const entries = result.get(key);
            if (entries) {
                entries.push(item);
            }
        }
        return result;
    }, new Map());
    return new Map([...unsortedMap.entries()].sort());
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/view/view-registry.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/view/view-registry.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GViewRegistry = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
/**
 * Allows to look up the IView for a given GModelElement based on its type.
 */
let GViewRegistry = class GViewRegistry extends sprotty_1.ViewRegistry {
    /* Overwrite the `register` method to only log an info message (instead of thrown an error) if
       an existing registration is overwritten */
    register(key, instance) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        if (this.hasKey(key)) {
            // do not throw error but log overwriting
            console.log(`View instance for type '${key}' will be overwritten.`);
        }
        this.elements.set(key, instance);
    }
};
exports.GViewRegistry = GViewRegistry;
exports.GViewRegistry = GViewRegistry = __decorate([
    (0, inversify_1.injectable)()
], GViewRegistry);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/default-modules.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/default-modules.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_MODULES = void 0;
exports.createDiagramOptionsModule = createDiagramOptionsModule;
exports.configureDiagramOptions = configureDiagramOptions;
exports.initializeDiagramContainer = initializeDiagramContainer;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const default_module_1 = __webpack_require__(/*! ./base/default.module */ "../node_modules/@eclipse-glsp/client/lib/base/default.module.js");
const bounds_module_1 = __webpack_require__(/*! ./features/bounds/bounds-module */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/bounds-module.js");
const resize_module_1 = __webpack_require__(/*! ./features/change-bounds/resize/resize-module */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-module.js");
const command_palette_module_1 = __webpack_require__(/*! ./features/command-palette/command-palette-module */ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette-module.js");
const context_menu_module_1 = __webpack_require__(/*! ./features/context-menu/context-menu-module */ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/context-menu-module.js");
const copy_paste_modules_1 = __webpack_require__(/*! ./features/copy-paste/copy-paste-modules */ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-modules.js");
const decoration_module_1 = __webpack_require__(/*! ./features/decoration/decoration-module */ "../node_modules/@eclipse-glsp/client/lib/features/decoration/decoration-module.js");
const element_template_module_1 = __webpack_require__(/*! ./features/element-template/element-template-module */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/element-template-module.js");
const export_modules_1 = __webpack_require__(/*! ./features/export/export-modules */ "../node_modules/@eclipse-glsp/client/lib/features/export/export-modules.js");
const type_hints_module_1 = __webpack_require__(/*! ./features/hints/type-hints-module */ "../node_modules/@eclipse-glsp/client/lib/features/hints/type-hints-module.js");
const hover_module_1 = __webpack_require__(/*! ./features/hover/hover-module */ "../node_modules/@eclipse-glsp/client/lib/features/hover/hover-module.js");
const label_edit_ui_module_1 = __webpack_require__(/*! ./features/label-edit-ui/label-edit-ui-module */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit-ui/label-edit-ui-module.js");
const label_edit_module_1 = __webpack_require__(/*! ./features/label-edit/label-edit-module */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/label-edit-module.js");
const layout_module_1 = __webpack_require__(/*! ./features/layout/layout-module */ "../node_modules/@eclipse-glsp/client/lib/features/layout/layout-module.js");
const navigation_module_1 = __webpack_require__(/*! ./features/navigation/navigation-module */ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-module.js");
const routing_module_1 = __webpack_require__(/*! ./features/routing/routing-module */ "../node_modules/@eclipse-glsp/client/lib/features/routing/routing-module.js");
const select_module_1 = __webpack_require__(/*! ./features/select/select-module */ "../node_modules/@eclipse-glsp/client/lib/features/select/select-module.js");
const source_model_watcher_module_1 = __webpack_require__(/*! ./features/source-model-watcher/source-model-watcher-module */ "../node_modules/@eclipse-glsp/client/lib/features/source-model-watcher/source-model-watcher-module.js");
const status_module_1 = __webpack_require__(/*! ./features/status/status-module */ "../node_modules/@eclipse-glsp/client/lib/features/status/status-module.js");
const svg_metadata_module_1 = __webpack_require__(/*! ./features/svg-metadata/svg-metadata-module */ "../node_modules/@eclipse-glsp/client/lib/features/svg-metadata/svg-metadata-module.js");
const tool_palette_module_1 = __webpack_require__(/*! ./features/tool-palette/tool-palette-module */ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette-module.js");
const change_bounds_tool_module_1 = __webpack_require__(/*! ./features/tools/change-bounds/change-bounds-tool-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-module.js");
const deletion_tool_module_1 = __webpack_require__(/*! ./features/tools/deletion/deletion-tool-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/deletion-tool-module.js");
const edege_creation_module_1 = __webpack_require__(/*! ./features/tools/edge-creation/edege-creation-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edege-creation-module.js");
const edge_edit_module_1 = __webpack_require__(/*! ./features/tools/edge-edit/edge-edit-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-module.js");
const marquee_selection_module_1 = __webpack_require__(/*! ./features/tools/marquee-selection/marquee-selection-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-selection-module.js");
const node_creation_module_1 = __webpack_require__(/*! ./features/tools/node-creation/node-creation-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-module.js");
const tool_focus_loss_module_1 = __webpack_require__(/*! ./features/tools/tool-focus-loss-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/tool-focus-loss-module.js");
const validation_modules_1 = __webpack_require__(/*! ./features/validation/validation-modules */ "../node_modules/@eclipse-glsp/client/lib/features/validation/validation-modules.js");
const viewport_modules_1 = __webpack_require__(/*! ./features/viewport/viewport-modules */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-modules.js");
const zorder_module_1 = __webpack_require__(/*! ./features/zorder/zorder-module */ "../node_modules/@eclipse-glsp/client/lib/features/zorder/zorder-module.js");
exports.DEFAULT_MODULES = [
    default_module_1.defaultModule,
    sprotty_1.buttonModule,
    sprotty_1.edgeIntersectionModule,
    sprotty_1.edgeLayoutModule,
    sprotty_1.expandModule,
    export_modules_1.exportModule,
    sprotty_1.fadeModule,
    bounds_module_1.boundsModule,
    command_palette_module_1.commandPaletteModule,
    context_menu_module_1.contextMenuModule,
    decoration_module_1.decorationModule,
    label_edit_module_1.labelEditModule,
    hover_module_1.hoverModule,
    select_module_1.selectModule,
    copy_paste_modules_1.copyPasteModule,
    viewport_modules_1.viewportModule,
    label_edit_ui_module_1.labelEditUiModule,
    layout_module_1.layoutModule,
    validation_modules_1.markerNavigatorModule,
    type_hints_module_1.typeHintsModule,
    sprotty_1.modelSourceModule,
    source_model_watcher_module_1.sourceModelWatcherModule,
    navigation_module_1.navigationModule,
    routing_module_1.routingModule,
    tool_palette_module_1.toolPaletteModule,
    edege_creation_module_1.edgeCreationToolModule,
    edge_edit_module_1.edgeEditToolModule,
    deletion_tool_module_1.deletionToolModule,
    element_template_module_1.elementTemplateModule,
    node_creation_module_1.nodeCreationToolModule,
    change_bounds_tool_module_1.changeBoundsToolModule,
    marquee_selection_module_1.marqueeSelectionToolModule,
    tool_focus_loss_module_1.toolFocusLossModule,
    validation_modules_1.validationModule,
    zorder_module_1.zorderModule,
    svg_metadata_module_1.svgMetadataModule,
    status_module_1.statusModule,
    resize_module_1.resizeModule
];
/**
 * Wraps the {@link configureDiagramOptions} utility function in a module. Adopters can either include this
 * module into the container {@link ModuleConfiguration} or configure the container after its creation
 * (e.g. using the {@link configureDiagramOptions} utility function).
 * @param diagramOptions The diagram instance specific configuration options
 * @param viewerOptions Optional {@link ViewerOptions} that should be configured
 * @returns The corresponding {@link FeatureModule}
 */
function createDiagramOptionsModule(diagramOptions, viewerOptions) {
    return new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => configureDiagramOptions({ bind, unbind, isBound, rebind }, diagramOptions, viewerOptions));
}
/**
 * Utility function to bind the diagram instance specific configuration options.
 * In addition to binding the {@link IDiagramOptions} this function also overrides the
 * {@link ViewerOptions} to match the given client id.
 * @param context The binding context
 * @param diagramOptions The {@link IDiagramOptions} that should be bound
 * @param viewerOptions Optional {@link ViewerOptions} that should be configured
 */
function configureDiagramOptions(context, diagramOptions, viewerOptions) {
    (0, sprotty_1.configureViewerOptions)(context, {
        baseDiv: diagramOptions.clientId,
        hiddenDiv: diagramOptions.clientId + '_hidden',
        zoomLimits: { min: 0.1, max: 20 },
        ...viewerOptions
    });
    context.bind(sprotty_1.TYPES.IDiagramOptions).toConstantValue(diagramOptions);
}
/**
 *  Initializes a GLSP Diagram container with the GLSP default modules and the specified custom `modules`.
 *  Additional modules can be passed as direct arguments or as part of a {@link ModuleConfiguration}.
 *  ```typescript
 *  const container= createDiagramContainer(myModule1, myModule2)
 *  // or
 *  const container= createDiagramContainer({ add: [myModule1, myModule2]})
 *  ```
 *  Default modules can be excluded using {@link ModuleConfiguration}s.
 *  This means, you can still customize the default modules in two ways.
 *
 * First, you can exclude default modules and add a module with your custom code.
 *
 * ```typescript
 * const container = createDiagramContainer({ add:myModelSourceWatcherModule, remove: modelSourceWatcherModule} );
 * ```
 *
 * Second, you can unbind or rebind implementations that are originally bound in one of the default modules.
 *
 * ```typescript
 * rebind(NavigationTargetResolver).to(MyNavigationTargetResolver);
 * ```
 * @param container The container that should be initialized
 * @param containerConfigurations
 *          Custom modules to be loaded in addition to the default modules and/or default modules that should be excluded.
 * @throws An error if the first module to load is not the `defaultModule` (or an equivalent custom replacement module)
 * @returns The initialized container.
 */
function initializeDiagramContainer(container, ...containerConfigurations) {
    const modules = (0, sprotty_1.resolveContainerConfiguration)(...exports.DEFAULT_MODULES, ...containerConfigurations);
    // The `defaultModule` (or a custom replacement module with the same `featureId`) should be the first module that is
    // loaded into the container
    const firstModule = modules[0];
    if (!firstModule || !(firstModule instanceof sprotty_1.FeatureModule && firstModule.featureId === default_module_1.defaultModule.featureId)) {
        throw new Error('Invalid module configuration. The first module to load should be the `defaultModule` (or an equivalent replacement module)');
    }
    container.load(...modules);
    return container;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/accessibility-module.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/accessibility-module.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.accessibilityModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const element_navigation_module_1 = __webpack_require__(/*! ./element-navigation/element-navigation-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/element-navigation-module.js");
const focus_tracker_module_1 = __webpack_require__(/*! ./focus-tracker/focus-tracker-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/focus-tracker/focus-tracker-module.js");
const keyboard_pointer_module_1 = __webpack_require__(/*! ./keyboard-pointer/keyboard-pointer-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-module.js");
const keyboard_tool_palette_module_1 = __webpack_require__(/*! ./keyboard-tool-palette/keyboard-tool-palette-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-tool-palette/keyboard-tool-palette-module.js");
const search_palette_module_1 = __webpack_require__(/*! ./search/search-palette-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette-module.js");
const toast_module_1 = __webpack_require__(/*! ./toast/toast-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-module.js");
const view_key_tools_module_1 = __webpack_require__(/*! ./view-key-tools/view-key-tools-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/view-key-tools-module.js");
/**
 * Enables the accessibility tools for a keyboard-only-usage
 */
exports.accessibilityModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, view_key_tools_module_1.configureViewKeyTools)(context);
    (0, search_palette_module_1.configureSearchPaletteModule)(context);
    (0, keyboard_tool_palette_module_1.configureKeyboardToolPaletteTool)(context);
    (0, keyboard_pointer_module_1.configureKeyboardControlTools)(context);
    (0, element_navigation_module_1.configureElementNavigationTool)(context);
    (0, focus_tracker_module_1.configureFocusTrackerTool)(context);
    (0, toast_module_1.configureToastTool)(context);
}, {
    featureId: Symbol('accessibility')
});


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/actions.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/actions.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FocusDomAction = void 0;
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var FocusDomAction;
(function (FocusDomAction) {
    FocusDomAction.KIND = 'focusDomAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, FocusDomAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'id');
    }
    FocusDomAction.is = is;
    function create(id) {
        return { kind: FocusDomAction.KIND, id };
    }
    FocusDomAction.create = create;
})(FocusDomAction || (exports.FocusDomAction = FocusDomAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/action.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/action.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetEdgeTargetSelectionAction = void 0;
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var SetEdgeTargetSelectionAction;
(function (SetEdgeTargetSelectionAction) {
    SetEdgeTargetSelectionAction.KIND = 'setEdgeTargetSelectionAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, SetEdgeTargetSelectionAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'elementId') && (0, sprotty_1.hasObjectProp)(object, 'context');
    }
    SetEdgeTargetSelectionAction.is = is;
    function create(elementId, context) {
        return { kind: SetEdgeTargetSelectionAction.KIND, elementId, context };
    }
    SetEdgeTargetSelectionAction.create = create;
})(SetEdgeTargetSelectionAction || (exports.SetEdgeTargetSelectionAction = SetEdgeTargetSelectionAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-context.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-context.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-palette.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-palette.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PossibleEdgeTargetAutocompleteSuggestionProvider = exports.EdgeAutocompletePalette = exports.EdgeAutocompletePaletteMetadata = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const auto_complete_widget_1 = __webpack_require__(/*! ../../../base/auto-complete/auto-complete-widget */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-widget.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const model_1 = __webpack_require__(/*! ../../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const search_palette_1 = __webpack_require__(/*! ../search/search-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette.js");
const action_1 = __webpack_require__(/*! ./action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/action.js");
var EdgeAutocompletePaletteMetadata;
(function (EdgeAutocompletePaletteMetadata) {
    EdgeAutocompletePaletteMetadata.ID = 'edge-autocomplete-palette';
})(EdgeAutocompletePaletteMetadata || (exports.EdgeAutocompletePaletteMetadata = EdgeAutocompletePaletteMetadata = {}));
let EdgeAutocompletePalette = class EdgeAutocompletePalette extends search_palette_1.SearchAutocompletePalette {
    constructor() {
        super(...arguments);
        this.targetSuggestionProvider = new PossibleEdgeTargetAutocompleteSuggestionProvider();
    }
    id() {
        return EdgeAutocompletePaletteMetadata.ID;
    }
    handle(action) {
        if (sprotty_1.TriggerEdgeCreationAction.is(action)) {
            this.context = {
                trigger: action,
                role: 'source'
            };
            this.targetSuggestionProvider.setContext(action, this.context);
        }
    }
    onBeforeShow(containerElement, root, ...contextElementIds) {
        var _a;
        super.onBeforeShow(containerElement, root, ...contextElementIds);
        this.autocompleteWidget.inputField.placeholder = `Search for ${(_a = this.context) === null || _a === void 0 ? void 0 : _a.role} elements`;
    }
    getSuggestionProviders(root, input) {
        return [this.targetSuggestionProvider];
    }
    reload() {
        const context = this.context;
        this.hide();
        this.context = context;
        this.actionDispatcher.dispatch(sprotty_1.SetUIExtensionVisibilityAction.create({
            extensionId: EdgeAutocompletePaletteMetadata.ID,
            visible: true
        }));
    }
    executeSuggestion(input) {
        var _a, _b, _c, _d;
        const action = (0, auto_complete_widget_1.toActionArray)(input)[0];
        if (((_a = this.context) === null || _a === void 0 ? void 0 : _a.role) === 'source') {
            this.context.sourceId = action.elementId;
            this.context.role = 'target';
            this.reload();
        }
        else if (((_b = this.context) === null || _b === void 0 ? void 0 : _b.role) === 'target') {
            this.context.targetId = action.elementId;
        }
        if (((_c = this.context) === null || _c === void 0 ? void 0 : _c.sourceId) !== undefined && ((_d = this.context) === null || _d === void 0 ? void 0 : _d.targetId) !== undefined) {
            this.actionDispatcher.dispatchAll([
                sprotty_1.CreateEdgeOperation.create({
                    elementTypeId: this.context.trigger.elementTypeId,
                    sourceElementId: this.context.sourceId,
                    targetElementId: this.context.targetId,
                    args: this.context.trigger.args
                }),
                tool_1.EnableDefaultToolsAction.create()
            ]);
            this.hide();
        }
    }
    autocompleteHide(reason) {
        if (reason !== 'submission') {
            this.hide();
        }
    }
};
exports.EdgeAutocompletePalette = EdgeAutocompletePalette;
exports.EdgeAutocompletePalette = EdgeAutocompletePalette = __decorate([
    (0, inversify_1.injectable)()
], EdgeAutocompletePalette);
let PossibleEdgeTargetAutocompleteSuggestionProvider = class PossibleEdgeTargetAutocompleteSuggestionProvider {
    setContext(triggerAction, edgeAutocompleteContext) {
        this.proxyEdge = new model_1.GEdge();
        this.proxyEdge.type = triggerAction.elementTypeId;
        this.context = edgeAutocompleteContext;
    }
    isAllowedSource(element, role) {
        return element !== undefined && this.proxyEdge !== undefined && (0, sprotty_1.isConnectable)(element) && element.canConnect(this.proxyEdge, role);
    }
    async retrieveSuggestions(root, text) {
        const context = this.context;
        if (this.context === undefined) {
            return [];
        }
        const nodes = (0, sprotty_1.toArray)(root.index.all().filter(element => this.isAllowedSource(element, context.role)));
        return nodes.map(node => {
            var _a;
            return ({
                element: node,
                action: {
                    label: `[${node.type}] ${(_a = (0, sprotty_1.name)(node)) !== null && _a !== void 0 ? _a : '<no-name>'}`,
                    actions: [action_1.SetEdgeTargetSelectionAction.create(node.id, context.role)],
                    icon: (0, sprotty_1.codiconCSSString)('arrow-both')
                }
            });
        });
    }
};
exports.PossibleEdgeTargetAutocompleteSuggestionProvider = PossibleEdgeTargetAutocompleteSuggestionProvider;
exports.PossibleEdgeTargetAutocompleteSuggestionProvider = PossibleEdgeTargetAutocompleteSuggestionProvider = __decorate([
    (0, inversify_1.injectable)()
], PossibleEdgeTargetAutocompleteSuggestionProvider);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-tool.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-tool.js ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EdgeAutocompletePaletteTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EdgeAutocompletePaletteKeyListener = exports.EdgeAutocompletePaletteTool = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const edge_autocomplete_palette_1 = __webpack_require__(/*! ./edge-autocomplete-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-palette.js");
let EdgeAutocompletePaletteTool = EdgeAutocompletePaletteTool_1 = class EdgeAutocompletePaletteTool {
    constructor() {
        this.keyListener = new EdgeAutocompletePaletteKeyListener();
    }
    get id() {
        return EdgeAutocompletePaletteTool_1.ID;
    }
    enable() {
        this.keyTool.register(this.keyListener);
    }
    disable() {
        this.keyTool.deregister(this.keyListener);
    }
};
exports.EdgeAutocompletePaletteTool = EdgeAutocompletePaletteTool;
EdgeAutocompletePaletteTool.ID = 'glsp.edge-autocomplete-palette-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], EdgeAutocompletePaletteTool.prototype, "keyTool", void 0);
exports.EdgeAutocompletePaletteTool = EdgeAutocompletePaletteTool = EdgeAutocompletePaletteTool_1 = __decorate([
    (0, inversify_1.injectable)()
], EdgeAutocompletePaletteTool);
class EdgeAutocompletePaletteKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Escape')) {
            return [
                sprotty_1.SetUIExtensionVisibilityAction.create({
                    extensionId: edge_autocomplete_palette_1.EdgeAutocompletePaletteMetadata.ID,
                    visible: false,
                    contextElementsId: []
                })
            ];
        }
        return [];
    }
}
exports.EdgeAutocompletePaletteKeyListener = EdgeAutocompletePaletteKeyListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/diagram-navigation-tool.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/diagram-navigation-tool.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ElementNavigatorTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElementNavigatorKeyListener = exports.ElementNavigatorTool = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const available_shortcuts_tool_1 = __webpack_require__(/*! ../../../base/shortcuts/available-shortcuts-tool */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-tool.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const model_1 = __webpack_require__(/*! ../../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const base_tools_1 = __webpack_require__(/*! ../../tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const reposition_1 = __webpack_require__(/*! ../../viewport/reposition */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/reposition.js");
const search_tool_1 = __webpack_require__(/*! ../search/search-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-tool.js");
const toast_handler_1 = __webpack_require__(/*! ../toast/toast-handler */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js");
let ElementNavigatorTool = ElementNavigatorTool_1 = class ElementNavigatorTool extends base_tools_1.BaseTool {
    constructor() {
        super(...arguments);
        this.elementNavigatorKeyListener = new ElementNavigatorKeyListener(this);
    }
    get id() {
        return ElementNavigatorTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.elementNavigatorKeyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(ElementNavigatorTool_1.TOKEN, [
            {
                shortcuts: ['ALT', 'N'],
                description: messages_1.messages.navigation.shortcut_local_mode,
                group: messages_1.messages.shortcut.group_navigation,
                position: 0
            },
            {
                shortcuts: ['N'],
                description: messages_1.messages.navigation.shortcut_global_mode,
                group: messages_1.messages.shortcut.group_navigation,
                position: 1
            }
        ])));
    }
};
exports.ElementNavigatorTool = ElementNavigatorTool;
ElementNavigatorTool.ID = 'glsp.diagram-navigation';
ElementNavigatorTool.TOKEN = Symbol.for(ElementNavigatorTool_1.ID);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], ElementNavigatorTool.prototype, "shortcutManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IElementNavigator),
    __metadata("design:type", Object)
], ElementNavigatorTool.prototype, "elementNavigator", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILocalElementNavigator),
    __metadata("design:type", Object)
], ElementNavigatorTool.prototype, "localElementNavigator", void 0);
exports.ElementNavigatorTool = ElementNavigatorTool = ElementNavigatorTool_1 = __decorate([
    (0, inversify_1.injectable)()
], ElementNavigatorTool);
var NavigationMode;
(function (NavigationMode) {
    NavigationMode["POSITION"] = "position";
    NavigationMode["DEFAULT"] = "default";
    NavigationMode["NONE"] = "none";
})(NavigationMode || (NavigationMode = {}));
class ElementNavigatorKeyListener extends sprotty_1.KeyListener {
    constructor(tool) {
        super();
        this.tool = tool;
        this.mode = NavigationMode.NONE;
        this.token = ElementNavigatorKeyListener.name;
    }
    keyDown(element, event) {
        this.resetOnEscape(event, element);
        if (this.getSelectedElements(element.root).length > 0) {
            if (!this.triggerPositionNavigationOnEvent(event, element)) {
                this.triggerDefaultNavigationOnEvent(event, element);
            }
            return this.navigate(element, event);
        }
        this.resetPositionNavigationOnEvent(event, element);
        this.resetDefaultNavigationOnEvent(event, element);
        return [];
    }
    resetOnEscape(event, element) {
        var _a, _b;
        if (this.mode !== NavigationMode.NONE && this.matchesDeactivateNavigationMode(event)) {
            (_b = (_a = this.navigator) === null || _a === void 0 ? void 0 : _a.clean) === null || _b === void 0 ? void 0 : _b.call(_a, element.root);
            this.clean();
            if (this.mode === NavigationMode.POSITION) {
                this.tool.dispatchActions([
                    tool_1.EnableDefaultToolsAction.create(),
                    toast_handler_1.ShowToastMessageAction.createWithTimeout({
                        id: Symbol.for(ElementNavigatorKeyListener.name),
                        message: messages_1.messages.navigation.local_navigation_mode_deactivated
                    })
                ]);
            }
            else if (this.mode === NavigationMode.DEFAULT) {
                this.tool.dispatchActions([
                    tool_1.EnableDefaultToolsAction.create(),
                    toast_handler_1.ShowToastMessageAction.createWithTimeout({
                        id: Symbol.for(ElementNavigatorKeyListener.name),
                        message: messages_1.messages.navigation.default_navigation_mode_deactivated
                    })
                ]);
            }
            this.mode = NavigationMode.NONE;
        }
    }
    triggerPositionNavigationOnEvent(event, element) {
        if (this.matchesActivatePositionNavigation(event)) {
            if (this.mode !== NavigationMode.POSITION) {
                this.clean();
                this.tool.dispatchActions([
                    tool_1.EnableToolsAction.create([ElementNavigatorTool.ID, search_tool_1.SearchAutocompletePaletteTool.ID, available_shortcuts_tool_1.AvailableShortcutsTool.ID]),
                    toast_handler_1.ShowToastMessageAction.create({
                        id: Symbol.for(ElementNavigatorKeyListener.name),
                        message: messages_1.messages.navigation.local_navigation_mode_activated
                    })
                ]);
                this.navigator = this.tool.elementNavigator;
                this.mode = NavigationMode.POSITION;
            }
            else {
                this.resetPositionNavigationOnEvent(event, element);
            }
            return true;
        }
        return false;
    }
    resetPositionNavigationOnEvent(event, element) {
        var _a, _b;
        if (this.mode === NavigationMode.POSITION && this.matchesActivatePositionNavigation(event)) {
            (_b = (_a = this.navigator) === null || _a === void 0 ? void 0 : _a.clean) === null || _b === void 0 ? void 0 : _b.call(_a, element.root);
            this.clean();
            this.mode = NavigationMode.NONE;
            this.tool.dispatchActions([
                tool_1.EnableDefaultToolsAction.create(),
                toast_handler_1.ShowToastMessageAction.createWithTimeout({
                    id: Symbol.for(ElementNavigatorKeyListener.name),
                    message: messages_1.messages.navigation.local_navigation_mode_deactivated
                })
            ]);
        }
    }
    triggerDefaultNavigationOnEvent(event, element) {
        if (this.matchesActivateDefaultNavigation(event)) {
            if (this.mode !== NavigationMode.DEFAULT) {
                this.clean();
                this.tool.dispatchActions([
                    tool_1.EnableToolsAction.create([ElementNavigatorTool.ID, search_tool_1.SearchAutocompletePaletteTool.ID, available_shortcuts_tool_1.AvailableShortcutsTool.ID]),
                    toast_handler_1.ShowToastMessageAction.create({
                        id: Symbol.for(ElementNavigatorKeyListener.name),
                        message: messages_1.messages.navigation.default_navigation_mode_activated
                    })
                ]);
                this.navigator = this.tool.localElementNavigator;
                this.mode = NavigationMode.DEFAULT;
            }
            else {
                this.resetDefaultNavigationOnEvent(event, element);
            }
            return true;
        }
        return false;
    }
    resetDefaultNavigationOnEvent(event, element) {
        var _a, _b;
        if (this.mode === NavigationMode.DEFAULT && this.matchesActivateDefaultNavigation(event)) {
            (_b = (_a = this.navigator) === null || _a === void 0 ? void 0 : _a.clean) === null || _b === void 0 ? void 0 : _b.call(_a, element.root);
            this.clean();
            this.mode = NavigationMode.NONE;
            this.tool.dispatchActions([
                tool_1.EnableDefaultToolsAction.create(),
                toast_handler_1.ShowToastMessageAction.createWithTimeout({
                    id: Symbol.for(ElementNavigatorKeyListener.name),
                    message: messages_1.messages.navigation.default_navigation_mode_deactivated
                })
            ]);
        }
    }
    navigate(element, event) {
        var _a, _b, _c, _d;
        const selected = this.getSelectedElements(element.root);
        const current = selected.length > 0 ? selected[0] : undefined;
        if (this.mode !== NavigationMode.NONE && this.navigator !== undefined && current !== undefined && (0, sprotty_1.isBoundsAware)(current)) {
            (_b = (_a = this.navigator).clean) === null || _b === void 0 ? void 0 : _b.call(_a, current.root, current, this.previousNode);
            const target = this.navigateOnEvent(event, this.navigator, current);
            if (target !== undefined) {
                (_d = (_c = this.navigator).process) === null || _d === void 0 ? void 0 : _d.call(_c, current.root, current, target, this.previousNode);
            }
            const selectableTarget = target ? (0, sprotty_1.findParentByFeature)(target, sprotty_1.isSelectable) : undefined;
            if (selectableTarget) {
                if (!(current instanceof model_1.GEdge)) {
                    this.previousNode = current;
                }
                const deselectedElementsIDs = selected.map(e => e.id).filter(id => id !== selectableTarget.id);
                return [
                    sprotty_1.SelectAction.create({ selectedElementsIDs: [selectableTarget.id], deselectedElementsIDs }),
                    reposition_1.RepositionAction.create([selectableTarget.id])
                ];
            }
        }
        return [];
    }
    navigateOnEvent(event, navigator, current) {
        var _a, _b;
        if (this.matchesNavigatePrevious(event)) {
            return navigator.previous(current.root, current);
        }
        else if (this.matchesNavigateNext(event)) {
            return navigator.next(current.root, current);
        }
        else if (this.matchesNavigateUp(event)) {
            return (_a = navigator.up) === null || _a === void 0 ? void 0 : _a.call(navigator, current.root, current, this.previousNode);
        }
        else if (this.matchesNavigateDown(event)) {
            return (_b = navigator.down) === null || _b === void 0 ? void 0 : _b.call(navigator, current.root, current, this.previousNode);
        }
        return undefined;
    }
    clean() {
        this.previousNode = undefined;
        this.navigator = undefined;
    }
    getSelectedElements(root) {
        return (0, sprotty_1.toArray)(root.index.all().filter(e => (0, sprotty_1.isSelected)(e)));
    }
    matchesDeactivateNavigationMode(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Escape');
    }
    matchesActivateDefaultNavigation(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyN');
    }
    matchesActivatePositionNavigation(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyN', 'alt');
    }
    matchesNavigatePrevious(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft');
    }
    matchesNavigateNext(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight');
    }
    matchesNavigateUp(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp');
    }
    matchesNavigateDown(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown');
    }
}
exports.ElementNavigatorKeyListener = ElementNavigatorKeyListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/element-navigation-module.js":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/element-navigation-module.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.glspElementNavigationModule = exports.elementNavigationModule = void 0;
exports.configureElementNavigationTool = configureElementNavigationTool;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../../css/navigation.css */ "../node_modules/@eclipse-glsp/client/css/navigation.css");
const diagram_navigation_tool_1 = __webpack_require__(/*! ./diagram-navigation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/diagram-navigation-tool.js");
const local_element_navigator_1 = __webpack_require__(/*! ./local-element-navigator */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/local-element-navigator.js");
const position_navigator_1 = __webpack_require__(/*! ./position-navigator */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/position-navigator.js");
/**
 * Handles element navigation actions.
 */
exports.elementNavigationModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    configureElementNavigationTool(context);
}, { featureId: Symbol('elementNavigation') });
exports.glspElementNavigationModule = exports.elementNavigationModule;
function configureElementNavigationTool(context) {
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, diagram_navigation_tool_1.ElementNavigatorTool);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IElementNavigator, position_navigator_1.PositionNavigator);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.ILocalElementNavigator, local_element_navigator_1.LocalElementNavigator);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/element-navigator.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/element-navigator.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/left-right-top-bottom-navigator.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/left-right-top-bottom-navigator.js ***!
  \*****************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LeftToRightTopToBottomElementNavigator = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ../../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
let LeftToRightTopToBottomElementNavigator = class LeftToRightTopToBottomElementNavigator {
    previous(root, current, previousCurrent, predicate = () => true) {
        const elements = this.getElements(root, predicate);
        if (current === undefined) {
            return elements.length > 0 ? elements[0] : undefined;
        }
        return elements[this.getPreviousIndex(current, elements) % elements.length];
    }
    next(root, current, previousCurrent, predicate = () => true) {
        const elements = this.getElements(root, predicate);
        if (current === undefined) {
            return elements.length > 0 ? elements[0] : undefined;
        }
        return elements[this.getNextIndex(current, elements) % elements.length];
    }
    getElements(root, predicate) {
        const elements = (0, sprotty_1.toArray)(root.index.all().filter(e => (0, gmodel_util_1.isSelectableAndBoundsAware)(e)));
        return elements.sort((a, b) => this.compare(a, b)).filter(predicate);
    }
    getNextIndex(current, elements) {
        for (let index = 0; index < elements.length; index++) {
            if (this.compare(elements[index], current) > 0) {
                return index;
            }
        }
        return 0;
    }
    getPreviousIndex(current, elements) {
        for (let index = elements.length - 1; index >= 0; index--) {
            if (this.compare(elements[index], current) < 0) {
                return index;
            }
        }
        return elements.length - 1;
    }
    compare(one, other) {
        var _a, _b;
        let positionOne = undefined;
        let positionOther = undefined;
        if (one instanceof model_1.GEdge && (0, gmodel_util_1.isRoutable)(one)) {
            positionOne = (_a = (0, gmodel_util_1.calcElementAndRoute)(one, this.edgeRouterRegistry).newRoutingPoints) === null || _a === void 0 ? void 0 : _a[0];
        }
        if (other instanceof model_1.GEdge && (0, gmodel_util_1.isRoutable)(other)) {
            positionOther = (_b = (0, gmodel_util_1.calcElementAndRoute)(other, this.edgeRouterRegistry).newRoutingPoints) === null || _b === void 0 ? void 0 : _b[0];
        }
        const boundsOne = (0, sprotty_1.findParentByFeature)(one, gmodel_util_1.isSelectableAndBoundsAware);
        const boundsOther = (0, sprotty_1.findParentByFeature)(other, gmodel_util_1.isSelectableAndBoundsAware);
        if (positionOne === undefined && boundsOne) {
            positionOne = boundsOne.bounds;
        }
        if (positionOther === undefined && boundsOther) {
            positionOther = boundsOther.bounds;
        }
        if (positionOne && positionOther) {
            if (positionOne.y !== positionOther.y) {
                return positionOne.y - positionOther.y;
            }
            if (positionOne.x !== positionOther.x) {
                return positionOne.x - positionOther.x;
            }
        }
        return 0;
    }
};
exports.LeftToRightTopToBottomElementNavigator = LeftToRightTopToBottomElementNavigator;
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], LeftToRightTopToBottomElementNavigator.prototype, "edgeRouterRegistry", void 0);
exports.LeftToRightTopToBottomElementNavigator = LeftToRightTopToBottomElementNavigator = __decorate([
    (0, inversify_1.injectable)()
], LeftToRightTopToBottomElementNavigator);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/local-element-navigator.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/local-element-navigator.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalElementNavigator = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const model_1 = __webpack_require__(/*! ../../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
let LocalElementNavigator = class LocalElementNavigator {
    constructor() {
        this.navigableElementCSS = 'navigable-element';
    }
    previous(root, current, previousCurrent, predicate) {
        return this.getPreviousElement(current, predicate);
    }
    next(root, current, previousCurrent, predicate) {
        return this.getNextElement(current, predicate);
    }
    up(root, current, previousCurrent, predicate) {
        return this.getIterable(current, previousCurrent, predicate);
    }
    down(root, current, previousCurrent, predicate) {
        return this.getIterable(current, previousCurrent, predicate);
    }
    process(root, current, target, previousCurrent, predicate) {
        let elements = [];
        // Mark only edges
        if (target instanceof model_1.GEdge) {
            // If current is a edge, we have to check the source and target
            if (current instanceof model_1.GEdge) {
                elements = this.getIterables(target, current.source === target.source ? current.source : current.target, predicate);
            }
            else {
                // Otherwise take the current as it is
                elements = this.getIterables(target, current, predicate);
            }
        }
        elements.filter(e => e.id !== target.id).forEach(e => this.actionDispatcher.dispatch((0, css_feedback_1.applyCssClasses)(e, this.navigableElementCSS)));
    }
    clean(root, current, previousCurrent) {
        root.index.all().forEach(e => this.actionDispatcher.dispatch((0, css_feedback_1.deleteCssClasses)(e, this.navigableElementCSS)));
    }
    getIterables(current, previousCurrent, predicate = () => true) {
        var _a, _b;
        const elements = [];
        if (current instanceof model_1.GEdge) {
            if (current.target === previousCurrent) {
                (_a = current.target) === null || _a === void 0 ? void 0 : _a.incomingEdges.forEach(e => elements.push(e));
            }
            else {
                (_b = current.source) === null || _b === void 0 ? void 0 : _b.outgoingEdges.forEach(e => elements.push(e));
            }
        }
        return elements.filter(predicate);
    }
    getIterable(current, previousCurrent, predicate = () => true) {
        return this.getIterables(current, previousCurrent, predicate).filter(e => e.id !== current.id)[0];
    }
    getNextElement(current, predicate = () => true) {
        const elements = [];
        if (current instanceof sprotty_1.GConnectableElement) {
            current.outgoingEdges.forEach(e => elements.push(e));
        }
        else if (current instanceof model_1.GEdge) {
            const target = current.target;
            elements.push(target);
        }
        return elements.filter(predicate)[0];
    }
    getPreviousElement(current, predicate = () => true) {
        const elements = [];
        if (current instanceof sprotty_1.GConnectableElement) {
            current.incomingEdges.forEach(e => elements.push(e));
        }
        else if (current instanceof model_1.GEdge) {
            const source = current.source;
            elements.push(source);
        }
        return elements.filter(predicate)[0];
    }
};
exports.LocalElementNavigator = LocalElementNavigator;
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], LocalElementNavigator.prototype, "edgeRouterRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], LocalElementNavigator.prototype, "actionDispatcher", void 0);
exports.LocalElementNavigator = LocalElementNavigator = __decorate([
    (0, inversify_1.injectable)()
], LocalElementNavigator);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/position-navigator.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/position-navigator.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PositionNavigator = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let PositionNavigator = class PositionNavigator {
    previous(root, current, previousCurrent, predicate) {
        return this.getNearestElement(root, current, e => this.bounds(root, e).x < this.bounds(root, current).x);
    }
    next(root, current, previousCurrent, predicate) {
        return this.getNearestElement(root, current, e => this.bounds(root, e).x > this.bounds(root, current).x);
    }
    up(root, current, previousCurrent, predicate) {
        return this.getNearestElement(root, current, e => this.bounds(root, e).y < this.bounds(root, current).y);
    }
    down(root, current, previousCurrent, predicate) {
        return this.getNearestElement(root, current, e => this.bounds(root, e).y > this.bounds(root, current).y);
    }
    getNearestElement(root, current, filter) {
        const elements = this.boundElements(root).filter(filter);
        return this.sortByDistance(root, current, elements)[0];
    }
    sortByDistance(root, current, elements) {
        // https://www.tutorialspoint.com/sort-array-of-points-by-ascending-distance-from-a-given-point-javascript
        const distance = (coor1, coor2) => {
            const x = coor2.x - coor1.x;
            const y = coor2.y - coor1.y;
            return Math.sqrt(x * x + y * y);
        };
        return elements.sort((a, b) => distance(this.bounds(root, a), this.bounds(root, current)) - distance(this.bounds(root, b), this.bounds(root, current)));
    }
    boundElements(root) {
        return (0, sprotty_1.toArray)(root.index.all().filter(e => e instanceof sprotty_1.GNode && (0, sprotty_1.isSelectable)(e) && (0, sprotty_1.isBoundsAware)(e)));
    }
    bounds(root, element) {
        return this.boundsInViewport(element, element.bounds, root);
    }
    boundsInViewport(element, bounds, viewport) {
        if (element instanceof sprotty_1.GChildElement && element.parent !== viewport) {
            return this.boundsInViewport(element.parent, element.parent.localToParent(bounds), viewport);
        }
        else {
            return bounds;
        }
    }
};
exports.PositionNavigator = PositionNavigator;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], PositionNavigator.prototype, "actionDispatcher", void 0);
exports.PositionNavigator = PositionNavigator = __decorate([
    (0, inversify_1.injectable)()
], PositionNavigator);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/focus-tracker/focus-tracker-module.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/focus-tracker/focus-tracker-module.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.glspFocusTrackerModule = exports.focusTrackerModule = void 0;
exports.configureFocusTrackerTool = configureFocusTrackerTool;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const focus_tracker_tool_1 = __webpack_require__(/*! ./focus-tracker-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/focus-tracker/focus-tracker-tool.js");
/**
 * Handles actions for tracking the focus of the cursor.
 */
exports.focusTrackerModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    configureFocusTrackerTool(context);
}, { featureId: Symbol('focusTracker') });
exports.glspFocusTrackerModule = exports.focusTrackerModule;
function configureFocusTrackerTool(context) {
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, focus_tracker_tool_1.FocusTrackerTool);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/focus-tracker/focus-tracker-tool.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/focus-tracker/focus-tracker-tool.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var FocusTrackerTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FocusTrackerTool = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const toast_handler_1 = __webpack_require__(/*! ../toast/toast-handler */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js");
let FocusTrackerTool = FocusTrackerTool_1 = class FocusTrackerTool {
    constructor() {
        this.isEditTool = false;
        this.focusInFunction = (event) => this.focusIn(event);
        this.focusOutFunction = (event) => this.focusOut(event);
        this.registered = false;
    }
    get id() {
        return FocusTrackerTool_1.ID;
    }
    enable() {
        if (!this.registered) {
            document.addEventListener('focusin', this.focusInFunction);
            document.addEventListener('focusout', this.focusOutFunction);
        }
        this.registered = true;
    }
    disable() {
        // the focus tracker cannot be disabled after enabling it
    }
    async focusOut(event) {
        await this.showToast(messages_1.messages.focus.focus_not_set);
    }
    async focusIn(event) {
        let message;
        const target = event.target;
        if (target instanceof HTMLElement) {
            const parent = this.parentWithAriaLabel(target);
            const textMessage = this.handleTextNode(target);
            // eslint-disable-next-line no-null/no-null
            if (target.ariaLabel !== null) {
                message = this.handleAriaLabel(target);
            }
            else {
                if (parent === undefined && textMessage !== undefined) {
                    message = textMessage;
                }
                else if (parent !== undefined && textMessage === undefined) {
                    message = `${messages_1.messages.focus.focus_within} ${parent.ariaLabel}`;
                }
                else if (parent !== undefined && textMessage !== undefined) {
                    message = `${parent.ariaLabel} -> ${textMessage}`;
                }
            }
        }
        await this.showToast(message);
    }
    handleTextNode(target) {
        const textNode = Array.prototype.filter
            .call(target.childNodes, element => element.nodeType === Node.TEXT_NODE)
            .map(element => element.textContent)
            .join('');
        if (textNode.trim().length !== 0) {
            return textNode;
        }
        return undefined;
    }
    handleAriaLabel(target) {
        // eslint-disable-next-line no-null/no-null
        return target.ariaLabel === null ? undefined : target.ariaLabel;
    }
    showToast(message) {
        return this.actionDispatcher.dispatchAll([
            toast_handler_1.ShowToastMessageAction.create({
                id: Symbol.for(FocusTrackerTool_1.ID),
                message: `${messages_1.messages.focus.focus_on} ${message !== null && message !== void 0 ? message : 'unknown'}`,
                position: 'left'
            })
        ]);
    }
    parentWithAriaLabel(target) {
        let current = target.parentElement;
        while (
        // eslint-disable-next-line no-null/no-null
        current !== null &&
            current !== document.body &&
            current !== document.getElementById(this.viewerOptions.baseDiv) &&
            // eslint-disable-next-line no-null/no-null
            current.ariaLabel === null) {
            current = current.parentElement;
        }
        if (current === document.getElementById(this.viewerOptions.baseDiv) || current === document.body) {
            return undefined;
        }
        return current !== null && current !== void 0 ? current : undefined;
    }
};
exports.FocusTrackerTool = FocusTrackerTool;
FocusTrackerTool.ID = 'glsp.focus-tracker';
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], FocusTrackerTool.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], FocusTrackerTool.prototype, "viewerOptions", void 0);
exports.FocusTrackerTool = FocusTrackerTool = FocusTrackerTool_1 = __decorate([
    (0, inversify_1.injectable)()
], FocusTrackerTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/global-keylistener-tool.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/global-keylistener-tool.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GlobalKeyListenerTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlobalKeyListenerTool = void 0;
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const messages_1 = __webpack_require__(/*! ../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const constants_1 = __webpack_require__(/*! ../accessibility/keyboard-grid/constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js");
const tool_palette_1 = __webpack_require__(/*! ../tool-palette/tool-palette */ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette.js");
const base_tools_1 = __webpack_require__(/*! ../tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const actions_1 = __webpack_require__(/*! ./actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/actions.js");
const constants_2 = __webpack_require__(/*! ./keyboard-pointer/constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/constants.js");
let GlobalKeyListenerTool = GlobalKeyListenerTool_1 = class GlobalKeyListenerTool extends base_tools_1.BaseEditTool {
    constructor() {
        super(...arguments);
        this.alreadyRegistered = false;
    }
    get id() {
        return GlobalKeyListenerTool_1.ID;
    }
    enable() {
        if (!this.alreadyRegistered) {
            this.alreadyRegistered = true;
            document.addEventListener('keyup', this.trigger.bind(this));
            (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(GlobalKeyListenerTool_1.TOKEN, [
                {
                    shortcuts: ['ALT', 'P'],
                    description: messages_1.messages.focus.shortcut_focus_palette,
                    group: messages_1.messages.shortcut.group_tool_palette,
                    position: 0
                },
                {
                    shortcuts: ['ALT', 'G'],
                    description: messages_1.messages.focus.shortcut_focus_graph,
                    group: messages_1.messages.shortcut.group_graph,
                    position: 0
                }
            ]));
        }
    }
    trigger(event) {
        this.actionDispatcher.dispatchAll(this.handleKeyEvent(event));
    }
    handleKeyEvent(event) {
        if (this.matchesSetFocusOnToolPalette(event)) {
            return [actions_1.FocusDomAction.create(tool_palette_1.ToolPalette.ID)];
        }
        else if (this.matchesSetFocusOnDiagram(event)) {
            return [actions_1.FocusDomAction.create('graph')];
        }
        else if (this.matchesReleaseFocusFromToolPalette(event)) {
            return [
                sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: constants_2.KeyboardPointerMetadata.ID, visible: false, contextElementsId: [] }),
                sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: constants_1.KeyboardGridMetadata.ID, visible: false, contextElementsId: [] }),
                sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: constants_1.KeyboardNodeGridMetadata.ID, visible: false, contextElementsId: [] })
            ];
        }
        return [];
    }
    matchesSetFocusOnToolPalette(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyP', 'alt');
    }
    matchesSetFocusOnDiagram(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyG', 'alt');
    }
    matchesReleaseFocusFromToolPalette(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Escape');
    }
};
exports.GlobalKeyListenerTool = GlobalKeyListenerTool;
GlobalKeyListenerTool.ID = 'glsp.global-key-listener';
GlobalKeyListenerTool.TOKEN = Symbol.for(GlobalKeyListenerTool_1.name);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], GlobalKeyListenerTool.prototype, "shortcutManager", void 0);
exports.GlobalKeyListenerTool = GlobalKeyListenerTool = GlobalKeyListenerTool_1 = __decorate([
    (0, inversify_1.injectable)()
], GlobalKeyListenerTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/action.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/action.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardGridKeyboardEventAction = exports.KeyboardGridCellSelectedAction = exports.EnableKeyboardGridAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var EnableKeyboardGridAction;
(function (EnableKeyboardGridAction) {
    EnableKeyboardGridAction.KIND = 'enableKeyboardGrid';
    function is(object) {
        return sprotty_1.Action.hasKind(object, EnableKeyboardGridAction.KIND) && (0, sprotty_1.hasObjectProp)(object, 'options');
    }
    EnableKeyboardGridAction.is = is;
    function create(options) {
        return {
            kind: EnableKeyboardGridAction.KIND,
            options
        };
    }
    EnableKeyboardGridAction.create = create;
})(EnableKeyboardGridAction || (exports.EnableKeyboardGridAction = EnableKeyboardGridAction = {}));
var KeyboardGridCellSelectedAction;
(function (KeyboardGridCellSelectedAction) {
    KeyboardGridCellSelectedAction.KIND = 'keyboardGridCellSelectedAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, KeyboardGridCellSelectedAction.KIND) && (0, sprotty_1.hasObjectProp)(object, 'options');
    }
    KeyboardGridCellSelectedAction.is = is;
    function create(options) {
        return {
            kind: KeyboardGridCellSelectedAction.KIND,
            options
        };
    }
    KeyboardGridCellSelectedAction.create = create;
})(KeyboardGridCellSelectedAction || (exports.KeyboardGridCellSelectedAction = KeyboardGridCellSelectedAction = {}));
var KeyboardGridKeyboardEventAction;
(function (KeyboardGridKeyboardEventAction) {
    KeyboardGridKeyboardEventAction.KIND = 'keyboardGridKeyboardEvent';
    function is(object) {
        return sprotty_1.Action.hasKind(object, KeyboardGridKeyboardEventAction.KIND) && (0, sprotty_1.hasObjectProp)(object, 'options');
    }
    KeyboardGridKeyboardEventAction.is = is;
    function create(options) {
        return {
            kind: KeyboardGridKeyboardEventAction.KIND,
            options
        };
    }
    KeyboardGridKeyboardEventAction.create = create;
})(KeyboardGridKeyboardEventAction || (exports.KeyboardGridKeyboardEventAction = KeyboardGridKeyboardEventAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardNodeGridMetadata = exports.KeyboardGridMetadata = void 0;
var KeyboardGridMetadata;
(function (KeyboardGridMetadata) {
    KeyboardGridMetadata.ID = 'keyboard-grid';
    KeyboardGridMetadata.TAB_INDEX = 15;
})(KeyboardGridMetadata || (exports.KeyboardGridMetadata = KeyboardGridMetadata = {}));
var KeyboardNodeGridMetadata;
(function (KeyboardNodeGridMetadata) {
    KeyboardNodeGridMetadata.ID = 'keyboard-node-grid';
})(KeyboardNodeGridMetadata || (exports.KeyboardNodeGridMetadata = KeyboardNodeGridMetadata = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid-search-palette.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid-search-palette.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridRevealNamedElementSuggestionProvider = exports.GridRevealEdgeSuggestionProvider = exports.GridSearchPalette = exports.GridSearchPaletteMetadata = void 0;
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__webpack_require__(/*! ../../../../css/keyboard.css */ "../node_modules/@eclipse-glsp/client/css/keyboard.css");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const search_palette_1 = __webpack_require__(/*! ../search/search-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette.js");
const constants_1 = __webpack_require__(/*! ./constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js");
var GridSearchPaletteMetadata;
(function (GridSearchPaletteMetadata) {
    GridSearchPaletteMetadata.ID = 'grid-search-palette';
})(GridSearchPaletteMetadata || (exports.GridSearchPaletteMetadata = GridSearchPaletteMetadata = {}));
let GridSearchPalette = class GridSearchPalette extends search_palette_1.SearchAutocompletePalette {
    id() {
        return GridSearchPaletteMetadata.ID;
    }
    getSuggestionProviders(root, input) {
        return [new GridRevealNamedElementSuggestionProvider(), new GridRevealEdgeSuggestionProvider()];
    }
};
exports.GridSearchPalette = GridSearchPalette;
exports.GridSearchPalette = GridSearchPalette = __decorate([
    (0, inversify_1.injectable)()
], GridSearchPalette);
class GridRevealEdgeSuggestionProvider extends search_palette_1.RevealEdgeElementAutocompleteSuggestionProvider {
    getActions(edge) {
        return [
            ...super.getActions(edge),
            sprotty_1.SetUIExtensionVisibilityAction.create({
                extensionId: constants_1.KeyboardGridMetadata.ID,
                visible: true
            })
        ];
    }
}
exports.GridRevealEdgeSuggestionProvider = GridRevealEdgeSuggestionProvider;
class GridRevealNamedElementSuggestionProvider extends search_palette_1.RevealNamedElementAutocompleteSuggestionProvider {
    getActions(nameable) {
        return [
            ...super.getActions(nameable),
            sprotty_1.SetUIExtensionVisibilityAction.create({
                extensionId: constants_1.KeyboardGridMetadata.ID,
                visible: true
            })
        ];
    }
}
exports.GridRevealNamedElementSuggestionProvider = GridRevealNamedElementSuggestionProvider;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardGrid = void 0;
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__webpack_require__(/*! ../../../../css/keyboard.css */ "../node_modules/@eclipse-glsp/client/css/keyboard.css");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ui_extension_1 = __webpack_require__(/*! ../../../base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
const action_1 = __webpack_require__(/*! ./action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/action.js");
const constants_1 = __webpack_require__(/*! ./constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js");
let KeyboardGrid = class KeyboardGrid extends ui_extension_1.GLSPAbstractUIExtension {
    constructor() {
        super(...arguments);
        this.triggerActions = [];
    }
    id() {
        return constants_1.KeyboardGridMetadata.ID;
    }
    containerClass() {
        return constants_1.KeyboardGridMetadata.ID;
    }
    handle(action) {
        if (action_1.EnableKeyboardGridAction.is(action)) {
            this.triggerActions = action.options.triggerActions;
            this.originId = action.options.originId;
            this.actionDispatcher.dispatch(sprotty_1.SetUIExtensionVisibilityAction.create({
                extensionId: constants_1.KeyboardGridMetadata.ID,
                visible: true
            }));
        }
    }
    initializeContents(containerElement) {
        containerElement.tabIndex = constants_1.KeyboardGridMetadata.TAB_INDEX;
        containerElement.classList.add('grid-container');
        for (let i = 1; i <= 9; i++) {
            const gridNumber = document.createElement('div');
            const gridItem = document.createElement('div');
            gridItem.classList.add('grid-item');
            gridItem.id = `keyboard-grid-item-${i}`;
            gridNumber.classList.add('grid-item-number');
            gridNumber.innerHTML = i.toString();
            gridItem.appendChild(gridNumber);
            containerElement.appendChild(gridItem);
        }
        this.containerElement.onkeydown = ev => {
            this.onKeyDown(ev);
        };
    }
    onKeyDown(event) {
        this.activateCellIfDigitEvent(event);
        this.hideIfEscapeEvent(event);
        this.actionDispatcher.dispatch(action_1.KeyboardGridKeyboardEventAction.create({
            originId: this.originId,
            event
        }));
    }
    setContainerVisible(visible) {
        if (this.containerElement) {
            if (visible) {
                this.containerElement.classList.remove('grid-hidden');
                this.containerElement.classList.add('grid-visible');
            }
            else {
                this.containerElement.classList.remove('grid-visible');
                this.containerElement.classList.add('grid-hidden');
            }
        }
    }
    show(root, ...contextElementIds) {
        super.show(root, ...contextElementIds);
        this.containerElement.focus();
    }
    hideIfEscapeEvent(event) {
        if (this.matchesDeactivateGrid(event)) {
            this.hide();
        }
    }
    activateCellIfDigitEvent(event) {
        let index = undefined;
        for (let i = 1; i <= 9; i++) {
            if (this.matchesGridBoxAtIndex(event, i)) {
                index = i;
                break;
            }
        }
        if (index !== undefined) {
            const position = this.centerPositionOfCell(index);
            this.dispatchActionsForCell(index, position);
        }
    }
    dispatchActionsForCell(index, cellCenter) {
        this.actionDispatcher.dispatchAll([
            ...this.triggerActions,
            action_1.KeyboardGridCellSelectedAction.create({
                originId: this.originId,
                cellId: index.toString(),
                centerCellPosition: cellCenter
            })
        ]);
    }
    centerPositionOfCell(index) {
        let x = 0;
        let y = 0;
        const activeGridCell = document.getElementById(`keyboard-grid-item-${index}`);
        // eslint-disable-next-line no-null/no-null
        if (activeGridCell !== null) {
            const positions = this.getCenterOfCell(activeGridCell);
            x = positions[0];
            y = positions[1];
        }
        return {
            x,
            y
        };
    }
    matchesDeactivateGrid(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Escape');
    }
    matchesGridBoxAtIndex(event, index) {
        return (0, sprotty_1.matchesKeystroke)(event, ('Digit' + index)) || (0, sprotty_1.matchesKeystroke)(event, ('Numpad' + index));
    }
    // https://www.delftstack.com/howto/javascript/get-position-of-element-in-javascript/
    getOffset(el) {
        let _x = 0;
        let _y = 0;
        while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
            _x += el.offsetLeft - el.scrollLeft;
            _y += el.offsetTop - el.scrollTop;
            el = el.offsetParent;
        }
        return { top: _y, left: _x };
    }
    getCenterOfCell(cell) {
        const cellLeft = this.getOffset(cell).left;
        const cellTop = this.getOffset(cell).top;
        const cellWidth = cell.offsetWidth;
        const cellHeight = cell.offsetHeight;
        const newCellWidth = cellWidth / 2;
        const newCellHeight = cellHeight / 2;
        return [cellLeft + newCellWidth, cellTop + newCellHeight];
    }
};
exports.KeyboardGrid = KeyboardGrid;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], KeyboardGrid.prototype, "actionDispatcher", void 0);
exports.KeyboardGrid = KeyboardGrid = __decorate([
    (0, inversify_1.injectable)()
], KeyboardGrid);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-node-grid.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-node-grid.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardNodeGrid = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__webpack_require__(/*! ../../../../css/keyboard.css */ "../node_modules/@eclipse-glsp/client/css/keyboard.css");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const constants_1 = __webpack_require__(/*! ../keyboard-pointer/constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/constants.js");
const keyboard_pointer_1 = __webpack_require__(/*! ../keyboard-pointer/keyboard-pointer */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer.js");
const constants_2 = __webpack_require__(/*! ./constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js");
const keyboard_grid_1 = __webpack_require__(/*! ./keyboard-grid */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid.js");
const keyboard_grid_search_palette_1 = __webpack_require__(/*! ./keyboard-grid-search-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid-search-palette.js");
let KeyboardNodeGrid = class KeyboardNodeGrid extends keyboard_grid_1.KeyboardGrid {
    constructor() {
        super(...arguments);
        this.triggerActions = [sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: constants_1.KeyboardPointerMetadata.ID, visible: true })];
        this.originId = constants_1.KeyboardPointerMetadata.ID;
    }
    id() {
        return constants_2.KeyboardNodeGridMetadata.ID;
    }
    handle(action) {
        // Do nothing
    }
    onKeyDown(event) {
        super.onKeyDown(event);
        this.showSearchOnEvent(event);
        if (this.keyboardPointer.isVisible) {
            this.keyboardPointer.getKeyListener.keyDown(event);
        }
    }
    showSearchOnEvent(event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'KeyF', 'ctrl')) {
            event.preventDefault();
            this.actionDispatcher.dispatch(sprotty_1.SetUIExtensionVisibilityAction.create({
                extensionId: keyboard_grid_search_palette_1.GridSearchPaletteMetadata.ID,
                visible: true
            }));
            this.hide();
        }
    }
};
exports.KeyboardNodeGrid = KeyboardNodeGrid;
__decorate([
    (0, inversify_1.inject)(keyboard_pointer_1.KeyboardPointer),
    __metadata("design:type", keyboard_pointer_1.KeyboardPointer)
], KeyboardNodeGrid.prototype, "keyboardPointer", void 0);
exports.KeyboardNodeGrid = KeyboardNodeGrid = __decorate([
    (0, inversify_1.injectable)()
], KeyboardNodeGrid);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/actions.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/actions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetKeyboardPointerRenderPositionAction = void 0;
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var SetKeyboardPointerRenderPositionAction;
(function (SetKeyboardPointerRenderPositionAction) {
    SetKeyboardPointerRenderPositionAction.KIND = 'setKeyboardPointerRenderPositionAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, SetKeyboardPointerRenderPositionAction.KIND) && (0, sprotty_1.hasNumberProp)(object, 'x') && (0, sprotty_1.hasNumberProp)(object, 'y');
    }
    SetKeyboardPointerRenderPositionAction.is = is;
    function create(x, y) {
        return { kind: SetKeyboardPointerRenderPositionAction.KIND, x, y };
    }
    SetKeyboardPointerRenderPositionAction.create = create;
})(SetKeyboardPointerRenderPositionAction || (exports.SetKeyboardPointerRenderPositionAction = SetKeyboardPointerRenderPositionAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/constants.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/constants.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardPointerMetadata = void 0;
var KeyboardPointerMetadata;
(function (KeyboardPointerMetadata) {
    KeyboardPointerMetadata.ID = 'keyboard-pointer';
    KeyboardPointerMetadata.CRICLE_HEIGHT = 16;
    KeyboardPointerMetadata.CIRCLE_WIDTH = 16;
    KeyboardPointerMetadata.TAB_INDEX = 10;
})(KeyboardPointerMetadata || (exports.KeyboardPointerMetadata = KeyboardPointerMetadata = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-listener.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-listener.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardPointerKeyboardListener = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const constants_1 = __webpack_require__(/*! ../keyboard-grid/constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js");
const constants_2 = __webpack_require__(/*! ./constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/constants.js");
/**
 * Keyboard listener for the pointer with the necessary logic to handle keyboard events
 */
class KeyboardPointerKeyboardListener {
    get position() {
        return this.keyboardPointer.getPosition;
    }
    constructor(keyboardPointer, actionDispatcher) {
        this.keyboardPointer = keyboardPointer;
        this.actionDispatcher = actionDispatcher;
    }
    keyDown(event) {
        this.moveIfArrows(event);
        this.createIfEnterEvent(event);
        this.hideIfEscapeEvent(event);
    }
    moveIfArrows(event) {
        if (this.matchesMovePointerDown(event)) {
            this.position.renderPosition = this.position.calcRelativeRenderPosition(0, 10);
            this.keyboardPointer.render();
        }
        else if (this.matchesMovePointerUp(event)) {
            this.position.renderPosition = this.position.calcRelativeRenderPosition(0, -10);
            this.keyboardPointer.render();
        }
        else if (this.matchesMovePointerRight(event)) {
            this.position.renderPosition = this.position.calcRelativeRenderPosition(10, 0);
            this.keyboardPointer.render();
        }
        else if (this.matchesMovePointerLeft(event)) {
            this.position.renderPosition = this.position.calcRelativeRenderPosition(-10, 0);
            this.keyboardPointer.render();
        }
    }
    createIfEnterEvent(event) {
        const elementTypeId = this.keyboardPointer.triggerAction.elementTypeId;
        const { container, status } = this.position.containableParentAtDiagramPosition(elementTypeId);
        if (container !== undefined && status === css_feedback_1.CursorCSS.NODE_CREATION) {
            if (this.matchesConfirmPointerPosition(event)) {
                // close everything and return to default
                const containerId = container.id;
                const location = this.position.diagramPosition;
                this.actionDispatcher.dispatchAll([
                    sprotty_1.SetUIExtensionVisibilityAction.create({
                        extensionId: constants_2.KeyboardPointerMetadata.ID,
                        visible: false,
                        contextElementsId: []
                    }),
                    sprotty_1.SetUIExtensionVisibilityAction.create({
                        extensionId: constants_1.KeyboardNodeGridMetadata.ID,
                        visible: false,
                        contextElementsId: []
                    }),
                    sprotty_1.CreateNodeOperation.create(elementTypeId, { location, containerId, args: this.keyboardPointer.triggerAction.args }),
                    tool_1.EnableDefaultToolsAction.create()
                ]);
            }
            else if (this.matchesConfirmPointerPositionAndStayInMode(event)) {
                // stay in this mode, selected palette option stays, grid and keyboard mouse are displayed
                const containerId = container.id;
                const location = this.position.diagramPosition;
                this.actionDispatcher.dispatch(sprotty_1.CreateNodeOperation.create(elementTypeId, { location, containerId, args: this.keyboardPointer.triggerAction.args }));
            }
        }
    }
    hideIfEscapeEvent(event) {
        if (this.matchesDeactivatePointer(event)) {
            this.keyboardPointer.hide();
        }
    }
    matchesDeactivatePointer(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Escape');
    }
    matchesConfirmPointerPosition(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Enter');
    }
    matchesConfirmPointerPositionAndStayInMode(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Enter', 'ctrl');
    }
    matchesMovePointerLeft(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft');
    }
    matchesMovePointerRight(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight');
    }
    matchesMovePointerUp(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp');
    }
    matchesMovePointerDown(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown');
    }
}
exports.KeyboardPointerKeyboardListener = KeyboardPointerKeyboardListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-module.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-module.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.keyboardControlModule = void 0;
exports.configureKeyboardControlTools = configureKeyboardControlTools;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const action_1 = __webpack_require__(/*! ../edge-autocomplete/action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/action.js");
const edge_autocomplete_palette_1 = __webpack_require__(/*! ../edge-autocomplete/edge-autocomplete-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-palette.js");
const edge_autocomplete_tool_1 = __webpack_require__(/*! ../edge-autocomplete/edge-autocomplete-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-tool.js");
const global_keylistener_tool_1 = __webpack_require__(/*! ../global-keylistener-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/global-keylistener-tool.js");
const action_2 = __webpack_require__(/*! ../keyboard-grid/action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/action.js");
const keyboard_grid_1 = __webpack_require__(/*! ../keyboard-grid/keyboard-grid */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid.js");
const keyboard_grid_search_palette_1 = __webpack_require__(/*! ../keyboard-grid/keyboard-grid-search-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid-search-palette.js");
const keyboard_node_grid_1 = __webpack_require__(/*! ../keyboard-grid/keyboard-node-grid */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-node-grid.js");
const actions_1 = __webpack_require__(/*! ./actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/actions.js");
const keyboard_pointer_1 = __webpack_require__(/*! ./keyboard-pointer */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer.js");
/**
 * Handles the pointer used via grid to position new elements.
 */
exports.keyboardControlModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    configureKeyboardControlTools(context);
}, { featureId: Symbol('keyboardControl') });
function configureKeyboardControlTools(context) {
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, global_keylistener_tool_1.GlobalKeyListenerTool);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_pointer_1.KeyboardPointer);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_grid_1.KeyboardGrid);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_node_grid_1.KeyboardNodeGrid);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.TriggerNodeCreationAction.KIND, keyboard_pointer_1.KeyboardPointer);
    (0, sprotty_1.configureActionHandler)(context, actions_1.SetKeyboardPointerRenderPositionAction.KIND, keyboard_pointer_1.KeyboardPointer);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, edge_autocomplete_palette_1.EdgeAutocompletePalette);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, edge_autocomplete_tool_1.EdgeAutocompletePaletteTool);
    (0, sprotty_1.configureActionHandler)(context, action_2.EnableKeyboardGridAction.KIND, keyboard_grid_1.KeyboardGrid);
    (0, sprotty_1.configureActionHandler)(context, action_2.KeyboardGridCellSelectedAction.KIND, keyboard_pointer_1.KeyboardPointer);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.TriggerEdgeCreationAction.KIND, edge_autocomplete_palette_1.EdgeAutocompletePalette);
    (0, sprotty_1.configureActionHandler)(context, action_1.SetEdgeTargetSelectionAction.KIND, edge_autocomplete_palette_1.EdgeAutocompletePalette);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_grid_search_palette_1.GridSearchPalette);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-position.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-position.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardPointerPosition = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const model_1 = __webpack_require__(/*! ../../hints/model */ "../node_modules/@eclipse-glsp/client/lib/features/hints/model.js");
const constants_1 = __webpack_require__(/*! ./constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/constants.js");
class KeyboardPointerPosition {
    constructor(keyboardPointer) {
        this.keyboardPointer = keyboardPointer;
        this.renderPosition = { x: 20, y: 20 };
    }
    get centerizedRenderPosition() {
        return {
            x: this.renderPosition.x + constants_1.KeyboardPointerMetadata.CIRCLE_WIDTH / 2,
            y: this.renderPosition.y + constants_1.KeyboardPointerMetadata.CRICLE_HEIGHT / 2
        };
    }
    get diagramPosition() {
        return (0, viewpoint_util_1.getAbsolutePositionByPoint)(this.keyboardPointer.editorContextService.modelRoot, this.centerizedRenderPosition);
    }
    childrenAtDiagramPosition() {
        const position = this.diagramPosition;
        return [
            this.keyboardPointer.editorContextService.modelRoot,
            ...(0, sprotty_1.findChildrenAtPosition)(this.keyboardPointer.editorContextService.modelRoot, position)
        ];
    }
    containableParentAtDiagramPosition(elementTypeId) {
        const children = this.childrenAtDiagramPosition();
        return this.containableParentOf(children.reverse()[0], elementTypeId);
    }
    calcRelativeRenderPosition(x, y) {
        return {
            x: this.renderPosition.x + x,
            y: this.renderPosition.y + y
        };
    }
    containableParentOf(target, elementTypeId) {
        const container = (0, sprotty_1.findParentByFeature)(target, model_1.isContainable);
        return {
            container,
            status: this.keyboardPointer.containerManager.isCreationAllowed(container, elementTypeId)
                ? css_feedback_1.CursorCSS.NODE_CREATION
                : css_feedback_1.CursorCSS.OPERATION_NOT_ALLOWED
        };
    }
}
exports.KeyboardPointerPosition = KeyboardPointerPosition;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardPointer = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const ui_extension_1 = __webpack_require__(/*! ../../../base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
const container_manager_1 = __webpack_require__(/*! ../../tools/node-creation/container-manager */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/container-manager.js");
const action_1 = __webpack_require__(/*! ../keyboard-grid/action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/action.js");
const actions_1 = __webpack_require__(/*! ./actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/actions.js");
const constants_1 = __webpack_require__(/*! ./constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/constants.js");
const keyboard_pointer_listener_1 = __webpack_require__(/*! ./keyboard-pointer-listener */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-listener.js");
const keyboard_pointer_position_1 = __webpack_require__(/*! ./keyboard-pointer-position */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-position.js");
let KeyboardPointer = class KeyboardPointer extends ui_extension_1.GLSPAbstractUIExtension {
    constructor(actionDispatcher) {
        super();
        this.actionDispatcher = actionDispatcher;
        this._triggerAction = {
            elementTypeId: 'task:automated',
            kind: 'triggerNodeCreation'
        };
        this.position = new keyboard_pointer_position_1.KeyboardPointerPosition(this);
        this.keyListener = new keyboard_pointer_listener_1.KeyboardPointerKeyboardListener(this, actionDispatcher);
    }
    get triggerAction() {
        return this._triggerAction;
    }
    get isVisible() {
        var _a;
        return ((_a = this.containerElement) === null || _a === void 0 ? void 0 : _a.style.visibility) === 'visible';
    }
    get getPosition() {
        return this.position;
    }
    get getKeyListener() {
        return this.keyListener;
    }
    id() {
        return constants_1.KeyboardPointerMetadata.ID;
    }
    containerClass() {
        return constants_1.KeyboardPointerMetadata.ID;
    }
    initializeContents(containerElement) {
        containerElement.style.position = 'absolute';
        containerElement.style.height = `${constants_1.KeyboardPointerMetadata.CRICLE_HEIGHT}px`;
        containerElement.style.width = `${constants_1.KeyboardPointerMetadata.CIRCLE_WIDTH}px`;
        containerElement.style.borderRadius = '100%';
    }
    onBeforeShow(containerElement, root, ...selectedElementIds) {
        this.render();
    }
    handle(action) {
        if (sprotty_1.TriggerNodeCreationAction.is(action)) {
            this._triggerAction = action;
        }
        else if (actions_1.SetKeyboardPointerRenderPositionAction.is(action)) {
            this.position.renderPosition = { x: action.x, y: action.y };
            this.render();
        }
        else if (action_1.KeyboardGridCellSelectedAction.is(action) && action.options.originId === constants_1.KeyboardPointerMetadata.ID) {
            this.position.renderPosition = action.options.centerCellPosition;
            this.render();
        }
    }
    render() {
        if (this.containerElement !== undefined) {
            const { x, y } = this.position.renderPosition;
            this.containerElement.style.left = `${x}px`;
            this.containerElement.style.top = `${y}px`;
            const { status } = this.position.containableParentAtDiagramPosition(this._triggerAction.elementTypeId);
            this.containerElement.style.borderStyle = 'solid';
            this.containerElement.style.borderWidth = 'thick';
            switch (status) {
                case css_feedback_1.CursorCSS.NODE_CREATION: {
                    this.containerElement.style.borderColor = 'green';
                    break;
                }
                case css_feedback_1.CursorCSS.OPERATION_NOT_ALLOWED: {
                    this.containerElement.style.borderColor = 'red';
                    break;
                }
            }
        }
    }
};
exports.KeyboardPointer = KeyboardPointer;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], KeyboardPointer.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IContainerManager),
    __metadata("design:type", container_manager_1.ContainerManager)
], KeyboardPointer.prototype, "containerManager", void 0);
exports.KeyboardPointer = KeyboardPointer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher)),
    __metadata("design:paramtypes", [Object])
], KeyboardPointer);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-tool-palette/keyboard-tool-palette-module.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-tool-palette/keyboard-tool-palette-module.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.keyboardToolPaletteModule = void 0;
exports.configureKeyboardToolPaletteTool = configureKeyboardToolPaletteTool;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__webpack_require__(/*! ../../../../css/keyboard-tool-palette.css */ "../node_modules/@eclipse-glsp/client/css/keyboard-tool-palette.css");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const tool_palette_1 = __webpack_require__(/*! ../../tool-palette/tool-palette */ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette.js");
const actions_1 = __webpack_require__(/*! ../actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/actions.js");
const keyboard_tool_palette_1 = __webpack_require__(/*! ./keyboard-tool-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-tool-palette/keyboard-tool-palette.js");
exports.keyboardToolPaletteModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    configureKeyboardToolPaletteTool(context);
}, { featureId: Symbol('keyboardToolPalette') });
function configureKeyboardToolPaletteTool(context) {
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_tool_palette_1.KeyboardToolPalette);
    context.bind(sprotty_1.TYPES.IDiagramStartup).toService(keyboard_tool_palette_1.KeyboardToolPalette);
    (0, sprotty_1.configureActionHandler)(context, tool_1.EnableDefaultToolsAction.KIND, keyboard_tool_palette_1.KeyboardToolPalette);
    (0, sprotty_1.configureActionHandler)(context, actions_1.FocusDomAction.KIND, keyboard_tool_palette_1.KeyboardToolPalette);
    (0, sprotty_1.configureActionHandler)(context, tool_palette_1.EnableToolPaletteAction.KIND, keyboard_tool_palette_1.KeyboardToolPalette);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.UpdateModelAction.KIND, keyboard_tool_palette_1.KeyboardToolPalette);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.SetModelAction.KIND, keyboard_tool_palette_1.KeyboardToolPalette);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-tool-palette/keyboard-tool-palette.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-tool-palette/keyboard-tool-palette.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyboardToolPalette = void 0;
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const tool_palette_1 = __webpack_require__(/*! ../../tool-palette/tool-palette */ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette.js");
const delete_tool_1 = __webpack_require__(/*! ../../tools/deletion/delete-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/delete-tool.js");
const marquee_mouse_tool_1 = __webpack_require__(/*! ../../tools/marquee-selection/marquee-mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-mouse-tool.js");
const actions_1 = __webpack_require__(/*! ../actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/actions.js");
const edge_autocomplete_palette_1 = __webpack_require__(/*! ../edge-autocomplete/edge-autocomplete-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-palette.js");
const diagram_navigation_tool_1 = __webpack_require__(/*! ../element-navigation/diagram-navigation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/diagram-navigation-tool.js");
const constants_1 = __webpack_require__(/*! ../keyboard-grid/constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js");
const toast_handler_1 = __webpack_require__(/*! ../toast/toast-handler */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js");
const SEARCH_ICON_ID = 'search';
const SELECTION_TOOL_KEY = ['Digit1', 'Numpad1'];
const DELETION_TOOL_KEY = ['Digit2', 'Numpad2'];
const MARQUEE_TOOL_KEY = ['Digit3', 'Numpad3'];
const VALIDATION_TOOL_KEY = ['Digit4', 'Numpad4'];
const SEARCH_TOOL_KEY = ['Digit5', 'Numpad5'];
const SHOW_SHORTCUTS_CLASS = 'accessibility-show-shortcuts';
const AVAILABLE_KEYS = [
    'KeyA',
    'KeyB',
    'KeyC',
    'KeyD',
    'KeyE',
    'KeyF',
    'KeyG',
    'KeyH',
    'KeyI',
    'KeyJ',
    'KeyK',
    'KeyL',
    'KeyM',
    'KeyN',
    'KeyO',
    'KeyP',
    'KeyQ',
    'KeyR',
    'KeyS',
    'KeyT',
    'KeyU',
    'KeyV',
    'KeyX',
    'KeyY',
    'KeyZ'
];
const HEADER_TOOL_KEYS = [SELECTION_TOOL_KEY, DELETION_TOOL_KEY, MARQUEE_TOOL_KEY, VALIDATION_TOOL_KEY, SEARCH_TOOL_KEY];
let KeyboardToolPalette = class KeyboardToolPalette extends tool_palette_1.ToolPalette {
    constructor() {
        super(...arguments);
        this.keyboardIndexButtonMapping = new Map();
        this.headerToolsButtonMapping = new Map();
    }
    get interactablePaletteItems() {
        return this.paletteItems
            .sort(tool_palette_1.compare)
            .map(item => { var _a, _b; return (_b = (_a = item.children) === null || _a === void 0 ? void 0 : _a.sort(tool_palette_1.compare)) !== null && _b !== void 0 ? _b : [item]; })
            .reduce((acc, val) => acc.concat(val), []);
    }
    initializeContents(_containerElement) {
        this.containerElement.setAttribute('aria-label', messages_1.messages.tool_palette.label);
        this.containerElement.tabIndex = 20;
        this.containerElement.classList.add('accessibility-tool-palette');
        this.addMinimizePaletteButton();
        this.createHeader();
        this.createBody();
        this.lastActiveButton = this.defaultToolsButton;
        this.containerElement.onkeyup = ev => {
            this.clearToolOnEscape(ev);
            if (this.isShortcutsVisible()) {
                this.selectItemOnCharacter(ev);
                this.triggerHeaderToolsByKey(ev);
            }
        };
    }
    handle(action) {
        if (tool_palette_1.EnableToolPaletteAction.is(action)) {
            const requestAction = sprotty_1.RequestContextActions.create({
                contextId: tool_palette_1.ToolPalette.ID,
                editorContext: {
                    selectedElementIds: []
                }
            });
            this.actionDispatcher.requestUntil(requestAction).then(response => {
                if (sprotty_1.SetContextActions.is(response)) {
                    this.paletteItems = response.actions.map(e => e);
                    this.actionDispatcher.dispatchAll([
                        sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: tool_palette_1.ToolPalette.ID, visible: !this.editorContext.isReadonly })
                    ]);
                }
            });
        }
        else if (actions_1.FocusDomAction.is(action) && action.id === tool_palette_1.ToolPalette.ID) {
            if (this.containerElement.contains(document.activeElement)) {
                this.toggleShortcutVisibility();
            }
            else {
                this.showShortcuts();
            }
            this.containerElement.focus();
        }
        else {
            super.handle(action);
        }
    }
    createBody() {
        const bodyDiv = document.createElement('div');
        bodyDiv.classList.add('palette-body');
        const tabIndex = 21;
        let toolButtonCounter = 0;
        this.keyboardIndexButtonMapping.clear();
        this.paletteItems.sort(tool_palette_1.compare).forEach(item => {
            if (item.children) {
                const group = (0, tool_palette_1.createToolGroup)(item);
                item.children.sort(tool_palette_1.compare).forEach(child => {
                    const button = this.createKeyboardToolButton(child, tabIndex, toolButtonCounter);
                    group.appendChild(button);
                    this.keyboardIndexButtonMapping.set(toolButtonCounter, button);
                    toolButtonCounter++;
                });
                bodyDiv.appendChild(group);
            }
            else {
                const button = this.createKeyboardToolButton(item, tabIndex, toolButtonCounter);
                bodyDiv.appendChild(button);
                this.keyboardIndexButtonMapping.set(toolButtonCounter, button);
                toolButtonCounter++;
            }
        });
        if (this.paletteItems.length === 0) {
            const noResultsDiv = document.createElement('div');
            noResultsDiv.innerText = messages_1.messages.tool_palette.no_items;
            noResultsDiv.classList.add('tool-button');
            bodyDiv.appendChild(noResultsDiv);
        }
        // Replace existing body to refresh filtered entries
        if (this.bodyDiv) {
            this.containerElement.removeChild(this.bodyDiv);
        }
        this.containerElement.appendChild(bodyDiv);
        this.bodyDiv = bodyDiv;
    }
    createHeaderTools() {
        this.headerToolsButtonMapping.clear();
        let mappingIndex = 0;
        const headerTools = document.createElement('div');
        headerTools.classList.add('header-tools');
        this.defaultToolsButton = this.createDefaultToolButton();
        this.headerToolsButtonMapping.set(mappingIndex++, this.defaultToolsButton);
        headerTools.appendChild(this.defaultToolsButton);
        this.deleteToolButton = this.createMouseDeleteToolButton();
        this.headerToolsButtonMapping.set(mappingIndex++, this.deleteToolButton);
        headerTools.appendChild(this.deleteToolButton);
        this.marqueeToolButton = this.createMarqueeToolButton();
        this.headerToolsButtonMapping.set(mappingIndex++, this.marqueeToolButton);
        headerTools.appendChild(this.marqueeToolButton);
        this.validateToolButton = this.createValidateButton();
        this.headerToolsButtonMapping.set(mappingIndex++, this.validateToolButton);
        headerTools.appendChild(this.validateToolButton);
        const resetViewportButton = this.createResetViewportButton();
        this.headerToolsButtonMapping.set(mappingIndex++, resetViewportButton);
        headerTools.appendChild(resetViewportButton);
        if (this.gridManager) {
            const toggleGridButton = this.createToggleGridButton();
            this.headerToolsButtonMapping.set(mappingIndex++, toggleGridButton);
            headerTools.appendChild(toggleGridButton);
        }
        if (this.debugManager) {
            const toggleDebugButton = this.createToggleDebugButton();
            this.headerToolsButtonMapping.set(mappingIndex++, toggleDebugButton);
            headerTools.appendChild(toggleDebugButton);
        }
        // Create button for Search
        this.searchToolButton = this.createSearchButton();
        this.headerToolsButtonMapping.set(mappingIndex++, this.searchToolButton);
        headerTools.appendChild(this.searchToolButton);
        return headerTools;
    }
    createDefaultToolButton() {
        const button = (0, tool_palette_1.createIcon)('inspect');
        button.id = 'btn_default_tools';
        button.title = messages_1.messages.tool_palette.selection_button;
        button.onclick = this.onClickStaticToolButton(button);
        button.appendChild(this.createKeyboardShotcut(SELECTION_TOOL_KEY[0]));
        return button;
    }
    createMouseDeleteToolButton() {
        const deleteToolButton = (0, tool_palette_1.createIcon)('chrome-close');
        deleteToolButton.title = messages_1.messages.tool_palette.delete_button;
        deleteToolButton.onclick = this.onClickStaticToolButton(deleteToolButton, delete_tool_1.MouseDeleteTool.ID);
        deleteToolButton.appendChild(this.createKeyboardShotcut(DELETION_TOOL_KEY[0]));
        return deleteToolButton;
    }
    createMarqueeToolButton() {
        const marqueeToolButton = (0, tool_palette_1.createIcon)('screen-full');
        marqueeToolButton.title = messages_1.messages.tool_palette.marquee_button;
        const toastMessageAction = toast_handler_1.ShowToastMessageAction.createWithTimeout({
            id: Symbol.for(diagram_navigation_tool_1.ElementNavigatorKeyListener.name),
            message: messages_1.messages.tool_palette.marquee_message
        });
        marqueeToolButton.onclick = this.onClickStaticToolButton(marqueeToolButton, marquee_mouse_tool_1.MarqueeMouseTool.ID, toastMessageAction);
        marqueeToolButton.appendChild(this.createKeyboardShotcut(MARQUEE_TOOL_KEY[0]));
        return marqueeToolButton;
    }
    createValidateButton() {
        const validateToolButton = (0, tool_palette_1.createIcon)('pass');
        validateToolButton.title = messages_1.messages.tool_palette.validate_button;
        validateToolButton.onclick = _event => {
            const modelIds = [this.modelRootId];
            this.actionDispatcher.dispatch(sprotty_1.RequestMarkersAction.create(modelIds));
        };
        validateToolButton.appendChild(this.createKeyboardShotcut(VALIDATION_TOOL_KEY[0]));
        return validateToolButton;
    }
    onClickStaticToolButton(button, toolId, action) {
        return (_ev) => {
            if (!this.editorContext.isReadonly) {
                const defaultAction = toolId ? tool_1.EnableToolsAction.create([toolId]) : tool_1.EnableDefaultToolsAction.create();
                if (action) {
                    this.actionDispatcher.dispatchAll([defaultAction, action]);
                }
                else {
                    this.actionDispatcher.dispatchAll([defaultAction]);
                }
                this.changeActiveButton(button);
                button.focus();
            }
        };
    }
    createSearchButton() {
        const searchIcon = (0, tool_palette_1.createIcon)(SEARCH_ICON_ID);
        searchIcon.onclick = _ev => {
            const searchField = document.getElementById(this.containerElement.id + '_search_field');
            if (searchField) {
                if (searchField.style.display === 'none') {
                    searchField.style.display = '';
                    searchField.focus();
                }
                else {
                    searchField.style.display = 'none';
                }
            }
        };
        searchIcon.classList.add('search-icon');
        searchIcon.title = messages_1.messages.tool_palette.search_button;
        searchIcon.appendChild(this.createKeyboardShotcut(SEARCH_TOOL_KEY[0]));
        return searchIcon;
    }
    createHeaderSearchField() {
        const searchField = document.createElement('input');
        searchField.classList.add('search-input');
        searchField.tabIndex = 21;
        searchField.id = this.containerElement.id + '_search_field';
        searchField.type = 'text';
        searchField.placeholder = messages_1.messages.tool_palette.search_placeholder;
        searchField.style.display = 'none';
        searchField.onkeyup = ev => {
            this.requestFilterUpdate(this.searchField.value);
            ev.stopPropagation();
            if (searchField.value === '') {
                this.focusToolPaletteOnEscape(ev);
            }
            else {
                this.clearOnEscape(ev);
            }
        };
        return searchField;
    }
    focusToolPaletteOnEscape(event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Escape')) {
            this.containerElement.focus();
        }
    }
    createKeyboardShotcut(keyShortcut) {
        const hint = document.createElement('div');
        hint.classList.add('key-shortcut');
        let keyShortcutValue = keyShortcut.toString();
        if (keyShortcut.includes('Key')) {
            keyShortcutValue = keyShortcut.toString().substring(3);
        }
        else if (keyShortcut.includes('Digit')) {
            keyShortcutValue = keyShortcut.toString().substring(5);
        }
        hint.innerHTML = keyShortcutValue;
        return hint;
    }
    createKeyboardToolButton(item, tabIndex, buttonIndex) {
        const button = document.createElement('div');
        // add keyboard index
        if (buttonIndex < AVAILABLE_KEYS.length) {
            button.appendChild(this.createKeyboardShotcut(AVAILABLE_KEYS[buttonIndex]));
        }
        button.tabIndex = tabIndex;
        button.classList.add('tool-button');
        if (item.icon) {
            button.appendChild((0, tool_palette_1.createIcon)(item.icon));
        }
        button.insertAdjacentText('beforeend', item.label);
        button.onclick = this.onClickCreateToolButton(button, item);
        button.onkeydown = ev => {
            this.clickToolOnEnter(ev, button, item);
            this.clearToolOnEscape(ev);
            if ((0, sprotty_1.matchesKeystroke)(ev, 'ArrowDown')) {
                if (buttonIndex + 1 > this.keyboardIndexButtonMapping.size - 1) {
                    this.selectItemViaArrowKey(this.keyboardIndexButtonMapping.get(0));
                }
                else {
                    this.selectItemViaArrowKey(this.keyboardIndexButtonMapping.get(buttonIndex + 1));
                }
            }
            else if ((0, sprotty_1.matchesKeystroke)(ev, 'ArrowUp')) {
                if (buttonIndex - 1 < 0) {
                    this.selectItemViaArrowKey(this.keyboardIndexButtonMapping.get(this.keyboardIndexButtonMapping.size - 1));
                }
                else {
                    this.selectItemViaArrowKey(this.keyboardIndexButtonMapping.get(buttonIndex - 1));
                }
            }
        };
        return button;
    }
    clickToolOnEnter(event, button, item) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Enter')) {
            if (!this.editorContext.isReadonly) {
                this.actionDispatcher.dispatchAll(item.actions);
                this.changeActiveButton(button);
                this.selectItemOnCharacter(event);
            }
        }
    }
    selectItemOnCharacter(event) {
        var _a;
        let index = undefined;
        const items = this.interactablePaletteItems;
        const itemsCount = items.length < AVAILABLE_KEYS.length ? items.length : AVAILABLE_KEYS.length;
        for (let i = 0; i < itemsCount; i++) {
            const keycode = AVAILABLE_KEYS[i];
            if ((0, sprotty_1.matchesKeystroke)(event, keycode)) {
                index = i;
                break;
            }
        }
        if (index !== undefined) {
            if (items[index].actions.some(a => a.kind === sprotty_1.TriggerNodeCreationAction.KIND)) {
                this.actionDispatcher.dispatchAll([
                    ...items[index].actions,
                    sprotty_1.SetUIExtensionVisibilityAction.create({
                        extensionId: constants_1.KeyboardNodeGridMetadata.ID,
                        visible: true,
                        contextElementsId: []
                    })
                ]);
            }
            else {
                this.actionDispatcher.dispatchAll([
                    ...items[index].actions,
                    sprotty_1.SetUIExtensionVisibilityAction.create({
                        extensionId: edge_autocomplete_palette_1.EdgeAutocompletePaletteMetadata.ID,
                        visible: true,
                        contextElementsId: []
                    })
                ]);
            }
            this.changeActiveButton(this.keyboardIndexButtonMapping.get(index));
            (_a = this.keyboardIndexButtonMapping.get(index)) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }
    triggerHeaderToolsByKey(event) {
        var _a;
        let index = undefined;
        for (let i = 0; i < HEADER_TOOL_KEYS.length; i++) {
            for (let j = 0; j < HEADER_TOOL_KEYS[i].length; j++) {
                const keycode = HEADER_TOOL_KEYS[i][j];
                if ((0, sprotty_1.matchesKeystroke)(event, keycode)) {
                    event.stopPropagation();
                    event.preventDefault();
                    index = i;
                    break;
                }
            }
        }
        if (index !== undefined) {
            (_a = this.headerToolsButtonMapping.get(index)) === null || _a === void 0 ? void 0 : _a.click();
        }
    }
    selectItemViaArrowKey(currentButton) {
        if (currentButton !== undefined) {
            this.changeActiveButton(currentButton);
            currentButton === null || currentButton === void 0 ? void 0 : currentButton.focus();
        }
    }
    clearToolOnEscape(event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Escape')) {
            if (event.target instanceof HTMLElement) {
                event.target.blur();
            }
            this.actionDispatcher.dispatch(tool_1.EnableDefaultToolsAction.create());
        }
    }
    toggleShortcutVisibility() {
        if (this.isShortcutsVisible()) {
            this.hideShortcuts();
        }
        else {
            this.showShortcuts();
        }
    }
    isShortcutsVisible() {
        return this.containerElement.classList.contains(SHOW_SHORTCUTS_CLASS);
    }
    showShortcuts() {
        this.containerElement.classList.add(SHOW_SHORTCUTS_CLASS);
    }
    hideShortcuts() {
        this.containerElement.classList.remove(SHOW_SHORTCUTS_CLASS);
    }
};
exports.KeyboardToolPalette = KeyboardToolPalette;
exports.KeyboardToolPalette = KeyboardToolPalette = __decorate([
    (0, inversify_1.injectable)()
], KeyboardToolPalette);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette-module.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette-module.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.searchPaletteModule = void 0;
exports.configureSearchPaletteModule = configureSearchPaletteModule;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../../css/search.css */ "../node_modules/@eclipse-glsp/client/css/search.css");
const search_palette_1 = __webpack_require__(/*! ./search-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette.js");
const search_tool_1 = __webpack_require__(/*! ./search-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-tool.js");
exports.searchPaletteModule = new sprotty_1.FeatureModule((bind, _unbind, isBound, rebind) => {
    const context = { bind, isBound, rebind };
    configureSearchPaletteModule(context);
}, { featureId: Symbol('searchPalette') });
function configureSearchPaletteModule(context) {
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, search_palette_1.SearchAutocompletePalette);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, search_tool_1.SearchAutocompletePaletteTool);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SearchAutocompletePalette_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchAutocompletePalette = exports.RevealEdgeElementAutocompleteSuggestionProvider = exports.RevealNodesWithoutNameAutocompleteSuggestionProvider = exports.RevealNamedElementAutocompleteSuggestionProvider = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const lodash_1 = __webpack_require__(/*! lodash */ "../node_modules/lodash/lodash.js");
const base_autocomplete_palette_1 = __webpack_require__(/*! ../../../base/auto-complete/base-autocomplete-palette */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/base-autocomplete-palette.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const reposition_1 = __webpack_require__(/*! ../../../features/viewport/reposition */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/reposition.js");
const model_1 = __webpack_require__(/*! ../../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const CSS_SEARCH_HIDDEN = 'search-hidden';
const CSS_SEARCH_HIGHLIGHTED = 'search-highlighted';
class RevealNamedElementAutocompleteSuggestionProvider {
    async retrieveSuggestions(root, text) {
        const nameables = (0, sprotty_1.toArray)(root.index.all().filter(element => (0, sprotty_1.isNameable)(element)));
        return nameables.map(nameable => {
            var _a;
            return ({
                element: nameable,
                action: {
                    label: `[${nameable.type}] ${(_a = (0, sprotty_1.name)(nameable)) !== null && _a !== void 0 ? _a : '<no-name>'}`,
                    actions: this.getActions(nameable),
                    icon: (0, sprotty_1.codiconCSSString)('eye')
                }
            });
        });
    }
    getActions(nameable) {
        return [sprotty_1.SelectAction.create({ selectedElementsIDs: [nameable.id] }), sprotty_1.CenterAction.create([nameable.id], { retainZoom: true })];
    }
}
exports.RevealNamedElementAutocompleteSuggestionProvider = RevealNamedElementAutocompleteSuggestionProvider;
class RevealNodesWithoutNameAutocompleteSuggestionProvider {
    async retrieveSuggestions(root, text) {
        const nodes = (0, sprotty_1.toArray)(root.index.all().filter(element => !(0, sprotty_1.isNameable)(element) && element instanceof sprotty_1.GNode));
        return nodes.map(node => ({
            element: node,
            action: {
                label: `[${node.type}]`,
                actions: this.getActions(node),
                icon: (0, sprotty_1.codiconCSSString)('symbol-namespace')
            }
        }));
    }
    getActions(nameable) {
        return [sprotty_1.SelectAction.create({ selectedElementsIDs: [nameable.id] }), sprotty_1.CenterAction.create([nameable.id], { retainZoom: true })];
    }
}
exports.RevealNodesWithoutNameAutocompleteSuggestionProvider = RevealNodesWithoutNameAutocompleteSuggestionProvider;
class RevealEdgeElementAutocompleteSuggestionProvider {
    async retrieveSuggestions(root, text) {
        const edges = (0, sprotty_1.toArray)(root.index.all().filter(element => element instanceof model_1.GEdge));
        return edges.map(edge => ({
            element: edge,
            action: {
                label: `[${edge.type}]  ${this.getEdgeLabel(root, edge)}`,
                actions: this.getActions(edge),
                icon: (0, sprotty_1.codiconCSSString)('arrow-both')
            }
        }));
    }
    getActions(edge) {
        return [sprotty_1.SelectAction.create({ selectedElementsIDs: [edge.id] }), sprotty_1.CenterAction.create([edge.sourceId, edge.targetId])];
    }
    getEdgeLabel(root, edge) {
        var _a, _b;
        let sourceName = '';
        let targetName = '';
        const sourceNode = root.index.getById(edge.sourceId);
        const targetNode = root.index.getById(edge.targetId);
        if (sourceNode !== undefined) {
            sourceName = (_a = (0, sprotty_1.name)(sourceNode)) !== null && _a !== void 0 ? _a : sourceNode.type;
        }
        if (targetNode !== undefined) {
            targetName = (_b = (0, sprotty_1.name)(targetNode)) !== null && _b !== void 0 ? _b : targetNode.type;
        }
        return sourceName + ' -> ' + targetName;
    }
}
exports.RevealEdgeElementAutocompleteSuggestionProvider = RevealEdgeElementAutocompleteSuggestionProvider;
let SearchAutocompletePalette = SearchAutocompletePalette_1 = class SearchAutocompletePalette extends base_autocomplete_palette_1.BaseAutocompletePalette {
    constructor() {
        super(...arguments);
        this.cachedSuggestions = [];
    }
    id() {
        return SearchAutocompletePalette_1.ID;
    }
    initializeContents(containerElement) {
        super.initializeContents(containerElement);
        this.autocompleteWidget.inputField.placeholder = messages_1.messages.search.placeholder;
        containerElement.setAttribute('aria-label', messages_1.messages.search.label);
    }
    getSuggestionProviders(root, input) {
        return [
            new RevealNamedElementAutocompleteSuggestionProvider(),
            new RevealEdgeElementAutocompleteSuggestionProvider(),
            new RevealNodesWithoutNameAutocompleteSuggestionProvider()
        ];
    }
    async retrieveSuggestions(root, input) {
        const providers = this.getSuggestionProviders(root, input);
        const suggestions = (await Promise.all(providers.map(provider => provider.retrieveSuggestions(root, input)))).flat(1);
        this.cachedSuggestions = suggestions;
        return suggestions.map(s => s.action);
    }
    async visibleSuggestionsChanged(root, labeledActions) {
        await this.applyCSS(this.getHiddenElements(root, this.getSuggestionsFromLabeledActions(labeledActions)), CSS_SEARCH_HIDDEN);
        await this.deleteCSS(this.getSuggestionsFromLabeledActions(labeledActions).map(s => s.element), CSS_SEARCH_HIDDEN);
    }
    async selectedSuggestionChanged(root, labeledAction) {
        await this.deleteAllCSS(root, CSS_SEARCH_HIGHLIGHTED);
        if (labeledAction !== undefined) {
            const suggestions = this.getSuggestionsFromLabeledActions([labeledAction]);
            const actions = [];
            suggestions.map(currElem => actions.push(reposition_1.RepositionAction.create([currElem.element.id])));
            this.actionDispatcher.dispatchAll(actions);
            await this.applyCSS(suggestions.map(s => s.element), CSS_SEARCH_HIGHLIGHTED);
        }
    }
    show(root, ...contextElementIds) {
        this.actionDispatcher.dispatch(sprotty_1.SelectAllAction.create(false));
        super.show(root, ...contextElementIds);
    }
    hide() {
        if (this.root !== undefined) {
            this.deleteAllCSS(this.root, CSS_SEARCH_HIDDEN);
            this.deleteAllCSS(this.root, CSS_SEARCH_HIGHLIGHTED);
            this.autocompleteWidget.inputField.value = '';
        }
        super.hide();
    }
    applyCSS(elements, cssClass) {
        const actions = elements.map(element => (0, css_feedback_1.applyCssClasses)(element, cssClass));
        return this.actionDispatcher.dispatchAll(actions);
    }
    deleteCSS(elements, cssClass) {
        const actions = elements.map(element => (0, css_feedback_1.deleteCssClasses)(element, cssClass));
        return this.actionDispatcher.dispatchAll(actions);
    }
    deleteAllCSS(root, cssClass) {
        const actions = (0, sprotty_1.toArray)(root.index.all().map(element => (0, css_feedback_1.deleteCssClasses)(element, cssClass)));
        return this.actionDispatcher.dispatchAll(actions);
    }
    getSuggestionsFromLabeledActions(labeledActions) {
        return this.cachedSuggestions.filter(c => labeledActions.find(s => (0, lodash_1.isEqual)(s, c.action)));
    }
    getHiddenSuggestionsFromLabeledActions(labeledActions) {
        return this.cachedSuggestions.filter(c => !labeledActions.find(s => (0, lodash_1.isEqual)(s, c.action)));
    }
    getHiddenElements(root, suggestions) {
        return (0, sprotty_1.toArray)(root.index
            .all()
            .filter(element => element instanceof sprotty_1.GNode || element instanceof model_1.GEdge)
            .filter(element => suggestions.find(suggestion => suggestion.element.id === element.id) === undefined));
    }
};
exports.SearchAutocompletePalette = SearchAutocompletePalette;
SearchAutocompletePalette.ID = 'search-autocomplete-palette';
exports.SearchAutocompletePalette = SearchAutocompletePalette = SearchAutocompletePalette_1 = __decorate([
    (0, inversify_1.injectable)()
], SearchAutocompletePalette);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-tool.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-tool.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var SearchAutocompletePaletteTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchAutocompletePaletteKeyListener = exports.SearchAutocompletePaletteTool = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const base_tools_1 = __webpack_require__(/*! ../../tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const search_palette_1 = __webpack_require__(/*! ./search-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette.js");
let SearchAutocompletePaletteTool = SearchAutocompletePaletteTool_1 = class SearchAutocompletePaletteTool extends base_tools_1.BaseTool {
    constructor() {
        super(...arguments);
        this.keyListener = new SearchAutocompletePaletteKeyListener(this);
    }
    get id() {
        return SearchAutocompletePaletteTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.keyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(SearchAutocompletePaletteTool_1.TOKEN, [
            {
                shortcuts: ['CTRL', 'F'],
                description: messages_1.messages.search.shortcut_activate,
                group: messages_1.messages.shortcut.group_search,
                position: 0
            }
        ])));
    }
};
exports.SearchAutocompletePaletteTool = SearchAutocompletePaletteTool;
SearchAutocompletePaletteTool.ID = 'glsp.search-autocomplete-palette-tool';
SearchAutocompletePaletteTool.TOKEN = Symbol.for(SearchAutocompletePaletteTool_1.ID);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], SearchAutocompletePaletteTool.prototype, "shortcutManager", void 0);
exports.SearchAutocompletePaletteTool = SearchAutocompletePaletteTool = SearchAutocompletePaletteTool_1 = __decorate([
    (0, inversify_1.injectable)()
], SearchAutocompletePaletteTool);
class SearchAutocompletePaletteKeyListener extends sprotty_1.KeyListener {
    constructor(tool) {
        super();
        this.tool = tool;
    }
    keyDown(element, event) {
        if (this.matchesSearchActivateKeystroke(event)) {
            return [
                sprotty_1.SetUIExtensionVisibilityAction.create({
                    extensionId: search_palette_1.SearchAutocompletePalette.ID,
                    visible: true
                })
            ];
        }
        return [];
    }
    matchesSearchActivateKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyF', 'ctrl');
    }
}
exports.SearchAutocompletePaletteKeyListener = SearchAutocompletePaletteKeyListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowToastMessageAction = exports.HideToastAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var HideToastAction;
(function (HideToastAction) {
    HideToastAction.KIND = 'hideToastMessageAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, HideToastAction.KIND);
    }
    HideToastAction.is = is;
    function create(options) {
        return { kind: HideToastAction.KIND, options };
    }
    HideToastAction.create = create;
})(HideToastAction || (exports.HideToastAction = HideToastAction = {}));
var ShowToastMessageAction;
(function (ShowToastMessageAction) {
    ShowToastMessageAction.KIND = 'showToastMessageAction';
    ShowToastMessageAction.TIMEOUT = 2000;
    function is(object) {
        return sprotty_1.Action.hasKind(object, ShowToastMessageAction.KIND);
    }
    ShowToastMessageAction.is = is;
    function create(options) {
        var _a, _b;
        return { kind: ShowToastMessageAction.KIND, options: { ...options, position: (_a = options.position) !== null && _a !== void 0 ? _a : 'center', id: (_b = options.id) !== null && _b !== void 0 ? _b : Symbol('toast id') } };
    }
    ShowToastMessageAction.create = create;
    function createWithTimeout(options) {
        var _a, _b;
        return {
            kind: ShowToastMessageAction.KIND,
            options: { timeout: ShowToastMessageAction.TIMEOUT, ...options, position: (_a = options.position) !== null && _a !== void 0 ? _a : 'center', id: (_b = options.id) !== null && _b !== void 0 ? _b : Symbol('toast id') }
        };
    }
    ShowToastMessageAction.createWithTimeout = createWithTimeout;
})(ShowToastMessageAction || (exports.ShowToastMessageAction = ShowToastMessageAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-module.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-module.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.glspToastModule = exports.toastModule = void 0;
exports.configureToastTool = configureToastTool;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../../css/toast.css */ "../node_modules/@eclipse-glsp/client/css/toast.css");
const toast_handler_1 = __webpack_require__(/*! ./toast-handler */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js");
const toast_tool_1 = __webpack_require__(/*! ./toast-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-tool.js");
/**
 * Handles toast/user notification actions.
 */
exports.toastModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    configureToastTool(context);
}, { featureId: Symbol('toast') });
exports.glspToastModule = exports.toastModule;
function configureToastTool(context) {
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, toast_tool_1.Toast);
    context.bind(sprotty_1.TYPES.IDiagramStartup).toService(toast_tool_1.Toast);
    (0, sprotty_1.configureActionHandler)(context, toast_handler_1.ShowToastMessageAction.KIND, toast_tool_1.Toast);
    (0, sprotty_1.configureActionHandler)(context, toast_handler_1.HideToastAction.KIND, toast_tool_1.Toast);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-tool.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-tool.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Toast_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Toast = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const ui_extension_1 = __webpack_require__(/*! ../../../base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
const toast_handler_1 = __webpack_require__(/*! ./toast-handler */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js");
/**
 * This extension is used to create customized user notifications as toast messages.
 */
let Toast = Toast_1 = class Toast extends ui_extension_1.GLSPAbstractUIExtension {
    constructor() {
        super(...arguments);
        this.messages = {};
    }
    id() {
        return Toast_1.ID;
    }
    containerClass() {
        return Toast_1.ID;
    }
    initializeContents(_containerElement) {
        this.render();
    }
    handle(action) {
        if (toast_handler_1.ShowToastMessageAction.is(action)) {
            this.messages[action.options.id] = action.options;
            this.render();
            if (action.options.timeout) {
                setTimeout(() => {
                    this.delete(action.options.id);
                }, action.options.timeout);
            }
        }
        else if (toast_handler_1.HideToastAction.is(action)) {
            if (action.options.timeout) {
                setTimeout(() => {
                    this.delete(action.options.id);
                }, action.options.timeout);
            }
            else {
                this.delete(action.options.id);
            }
        }
    }
    render() {
        if (this.containerElement === undefined) {
            return;
        }
        this.containerElement.innerHTML = '';
        this.values(this.messages).forEach(message => {
            this.containerElement.appendChild(this.createToastMessage(message));
        });
    }
    delete(id) {
        delete this.messages[id];
        this.render();
    }
    createToastMessage(option) {
        const cell = document.createElement('div');
        cell.classList.add('toast-cell', `toast-column-${option.position}`);
        const container = document.createElement('div');
        container.classList.add('toast-container');
        const text = document.createElement('span');
        text.textContent = option.message;
        container.appendChild(text);
        cell.appendChild(container);
        return cell;
    }
    preInitialize() {
        this.actionDispatcher.dispatch(sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: Toast_1.ID, visible: true }));
    }
    values(obj) {
        return Object.getOwnPropertySymbols(obj).map(s => obj[s]);
    }
};
exports.Toast = Toast;
Toast.ID = 'toast';
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], Toast.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], Toast.prototype, "editorContext", void 0);
exports.Toast = Toast = Toast_1 = __decorate([
    (0, inversify_1.injectable)()
], Toast);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/deselect-key-tool.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/deselect-key-tool.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DeselectKeyTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeselectKeyListener = exports.DeselectKeyTool = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const edge_edit_tool_feedback_1 = __webpack_require__(/*! ../../tools/edge-edit/edge-edit-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool-feedback.js");
/**
 * Deselects currently selected elements on Escape if the default tools are currently active.
 */
let DeselectKeyTool = DeselectKeyTool_1 = class DeselectKeyTool {
    constructor() {
        this.isEditTool = true;
        this.deselectKeyListener = new DeselectKeyListener();
    }
    get id() {
        return DeselectKeyTool_1.ID;
    }
    enable() {
        this.keytool.register(this.deselectKeyListener);
    }
    disable() {
        this.keytool.deregister(this.deselectKeyListener);
    }
};
exports.DeselectKeyTool = DeselectKeyTool;
DeselectKeyTool.ID = 'glsp.deselect-key-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], DeselectKeyTool.prototype, "keytool", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IToolManager),
    __metadata("design:type", Object)
], DeselectKeyTool.prototype, "toolManager", void 0);
exports.DeselectKeyTool = DeselectKeyTool = DeselectKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], DeselectKeyTool);
class DeselectKeyListener extends sprotty_1.KeyListener {
    keyDown(target, event) {
        if (this.matchesDeselectKeystroke(event)) {
            const deselect = (0, sprotty_1.toArray)(target.root.index.all().filter(element => (0, sprotty_1.isSelectable)(element) && element.selected));
            const actions = [];
            if (deselect.length > 0) {
                actions.push(sprotty_1.SelectAction.create({ deselectedElementsIDs: deselect.map(e => e.id) }));
            }
            const routableDeselect = deselect.filter(e => e instanceof sprotty_1.GRoutableElement).map(e => e.id);
            if (routableDeselect.length > 0) {
                actions.push(edge_edit_tool_feedback_1.SwitchRoutingModeAction.create({ elementsToDeactivate: routableDeselect }));
            }
            return actions;
        }
        return [];
    }
    matchesDeselectKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Escape');
    }
}
exports.DeselectKeyListener = DeselectKeyListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/grid-cell-zoom-key-tool.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/grid-cell-zoom-key-tool.js ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GridCellZoomTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridZoomKeyListener = exports.GridCellZoomTool = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const selection_service_1 = __webpack_require__(/*! ../../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const base_tools_1 = __webpack_require__(/*! ../../tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const diagram_navigation_tool_1 = __webpack_require__(/*! ../element-navigation/diagram-navigation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/diagram-navigation-tool.js");
const action_1 = __webpack_require__(/*! ../keyboard-grid/action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/action.js");
const toast_handler_1 = __webpack_require__(/*! ../toast/toast-handler */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js");
/**
 * Zoom viewport and elements when its focused and arrow keys are hit.
 */
let GridCellZoomTool = GridCellZoomTool_1 = class GridCellZoomTool extends base_tools_1.BaseTool {
    constructor() {
        super(...arguments);
        this.zoomKeyListener = new GridZoomKeyListener(this);
    }
    get id() {
        return GridCellZoomTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.zoomKeyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(GridCellZoomTool_1.TOKEN, [
            {
                shortcuts: ['CTRL', '+'],
                description: messages_1.messages.grid.shortcut_zoom_in,
                group: messages_1.messages.shortcut.group_zoom,
                position: 0
            }
        ])));
    }
    handle(action) {
        const viewport = this.editorContext.viewport;
        if (viewport) {
            let viewportAction = undefined;
            if (action_1.KeyboardGridCellSelectedAction.is(action) && action.options.originId === GridCellZoomTool_1.ID) {
                viewportAction = this.zoomKeyListener.setNewZoomFactor(viewport, this.zoomFactors.in, (0, viewpoint_util_1.getAbsolutePositionByPoint)(this.editorContext.modelRoot, action.options.centerCellPosition));
            }
            else if (action_1.KeyboardGridKeyboardEventAction.is(action) && action.options.originId === GridCellZoomTool_1.ID) {
                if ((0, sprotty_1.matchesKeystroke)(action.options.event, 'Minus')) {
                    viewportAction = this.zoomKeyListener.setNewZoomFactor(viewport, this.zoomFactors.out);
                }
                else if ((0, sprotty_1.matchesKeystroke)(action.options.event, 'Digit0', 'ctrl')) {
                    viewportAction = sprotty_1.CenterAction.create([]);
                }
            }
            if (viewportAction) {
                this.actionDispatcher.dispatchAll([
                    viewportAction,
                    toast_handler_1.HideToastAction.create({ id: Symbol.for(diagram_navigation_tool_1.ElementNavigatorKeyListener.name) })
                ]);
            }
        }
    }
};
exports.GridCellZoomTool = GridCellZoomTool;
GridCellZoomTool.ID = 'glsp.accessibility-grid-cell-zoom-tool';
GridCellZoomTool.TOKEN = Symbol.for(GridCellZoomTool_1.name);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], GridCellZoomTool.prototype, "shortcutManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ZoomFactors),
    __metadata("design:type", Object)
], GridCellZoomTool.prototype, "zoomFactors", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], GridCellZoomTool.prototype, "selectionService", void 0);
exports.GridCellZoomTool = GridCellZoomTool = GridCellZoomTool_1 = __decorate([
    (0, inversify_1.injectable)()
], GridCellZoomTool);
class GridZoomKeyListener extends sprotty_1.KeyListener {
    constructor(tool) {
        super();
        this.tool = tool;
    }
    setNewZoomFactor(viewport, zoomFactor, point) {
        let newViewport;
        const newZoom = viewport.zoom * zoomFactor;
        if (point) {
            newViewport = {
                scroll: {
                    x: point.x - (0.5 * viewport.canvasBounds.width) / newZoom,
                    y: point.y - (0.5 * viewport.canvasBounds.height) / newZoom
                },
                zoom: newZoom
            };
        }
        else {
            newViewport = {
                scroll: viewport.scroll,
                zoom: newZoom
            };
        }
        return sprotty_1.SetViewportAction.create(viewport.id, newViewport, { animate: false });
    }
    keyDown(element, event) {
        if (this.matchesZoomViaGrid(event)) {
            return [
                action_1.EnableKeyboardGridAction.create({
                    originId: GridCellZoomTool.ID,
                    triggerActions: []
                }),
                toast_handler_1.ShowToastMessageAction.createWithTimeout({
                    id: Symbol.for(diagram_navigation_tool_1.ElementNavigatorKeyListener.name),
                    message: messages_1.messages.grid.zoom_in_grid
                })
            ];
        }
        return [];
    }
    matchesZoomViaGrid(event) {
        return event.key === '+' && event.ctrlKey;
    }
}
exports.GridZoomKeyListener = GridZoomKeyListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/view-key-tools-module.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/view-key-tools-module.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.viewKeyToolsModule = void 0;
exports.configureViewKeyTools = configureViewKeyTools;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const viewport_modules_1 = __webpack_require__(/*! ../../viewport/viewport-modules */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-modules.js");
const action_1 = __webpack_require__(/*! ../keyboard-grid/action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/action.js");
const deselect_key_tool_1 = __webpack_require__(/*! ./deselect-key-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/deselect-key-tool.js");
const grid_cell_zoom_key_tool_1 = __webpack_require__(/*! ./grid-cell-zoom-key-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/grid-cell-zoom-key-tool.js");
exports.viewKeyToolsModule = new sprotty_1.FeatureModule((bind, _unbind, isBound, rebind) => {
    const context = { bind, isBound, rebind };
    configureViewKeyTools(context);
}, {
    featureId: Symbol('viewKeyTools'),
    requires: viewport_modules_1.viewportModule
});
function configureViewKeyTools(context) {
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, grid_cell_zoom_key_tool_1.GridCellZoomTool);
    (0, sprotty_1.configureActionHandler)(context, action_1.KeyboardGridCellSelectedAction.KIND, grid_cell_zoom_key_tool_1.GridCellZoomTool);
    (0, sprotty_1.configureActionHandler)(context, action_1.KeyboardGridKeyboardEventAction.KIND, grid_cell_zoom_key_tool_1.GridCellZoomTool);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, deselect_key_tool_1.DeselectKeyTool);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/bounds-module.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/bounds-module.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.boundsModule = void 0;
/********************************************************************************
 * Copyright (c) 2022-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const move_element_action_1 = __webpack_require__(/*! ../change-bounds/move-element-action */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-action.js");
const move_element_handler_1 = __webpack_require__(/*! ../change-bounds/move-element-handler */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-handler.js");
const position_snapper_1 = __webpack_require__(/*! ../change-bounds/position-snapper */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/position-snapper.js");
const freeform_layout_1 = __webpack_require__(/*! ./freeform-layout */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/freeform-layout.js");
const glsp_hidden_bounds_updater_1 = __webpack_require__(/*! ./glsp-hidden-bounds-updater */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/glsp-hidden-bounds-updater.js");
const hbox_layout_1 = __webpack_require__(/*! ./hbox-layout */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/hbox-layout.js");
const layouter_1 = __webpack_require__(/*! ./layouter */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layouter.js");
const local_bounds_1 = __webpack_require__(/*! ./local-bounds */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/local-bounds.js");
const set_bounds_feedback_command_1 = __webpack_require__(/*! ./set-bounds-feedback-command */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/set-bounds-feedback-command.js");
const vbox_layout_1 = __webpack_require__(/*! ./vbox-layout */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/vbox-layout.js");
exports.boundsModule = new sprotty_1.FeatureModule((bind, _unbind, isBound, _rebind) => {
    const context = { bind, isBound };
    (0, sprotty_1.configureCommand)(context, sprotty_1.SetBoundsCommand);
    (0, sprotty_1.configureCommand)(context, sprotty_1.RequestBoundsCommand);
    bind(sprotty_1.HiddenBoundsUpdater).toSelf().inSingletonScope();
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.HiddenVNodePostprocessor, glsp_hidden_bounds_updater_1.GLSPHiddenBoundsUpdater);
    (0, sprotty_1.configureCommand)(context, local_bounds_1.LocalComputedBoundsCommand);
    (0, sprotty_1.configureCommand)(context, set_bounds_feedback_command_1.SetBoundsFeedbackCommand);
    bind(sprotty_1.TYPES.Layouter).to(layouter_1.LayouterExt).inSingletonScope();
    bind(sprotty_1.TYPES.LayoutRegistry).to(sprotty_1.LayoutRegistry).inSingletonScope();
    (0, sprotty_1.configureLayout)(context, sprotty_1.VBoxLayouter.KIND, vbox_layout_1.VBoxLayouterExt);
    (0, sprotty_1.configureLayout)(context, sprotty_1.HBoxLayouter.KIND, hbox_layout_1.HBoxLayouterExt);
    (0, sprotty_1.configureLayout)(context, freeform_layout_1.FreeFormLayouter.KIND, freeform_layout_1.FreeFormLayouter);
    bind(move_element_handler_1.MoveElementHandler).toSelf().inSingletonScope();
    (0, sprotty_1.configureActionHandler)(context, move_element_action_1.MoveElementRelativeAction.KIND, move_element_handler_1.MoveElementHandler);
    // backwards compatibility
    // eslint-disable-next-line deprecation/deprecation
    bind(position_snapper_1.PositionSnapper).toSelf();
}, { featureId: Symbol('bounds') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/freeform-layout.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/freeform-layout.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FreeFormLayouter = void 0;
/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const layout_data_1 = __webpack_require__(/*! ./layout-data */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js");
/**
 * Layouts children of a container with explicit X/Y positions
 */
let FreeFormLayouter = class FreeFormLayouter extends sprotty_1.AbstractLayout {
    layout(container, layouter) {
        const boundsData = layouter.getBoundsData(container);
        const options = this.getLayoutOptions(container);
        const childrenSize = this.getChildrenSize(container, options, layouter);
        // The real size of the compartment will be determined by the parent node layout;
        // we only need to compute the bounds required to layout the children.
        const maxWidth = childrenSize.width > 0 ? childrenSize.width + options.paddingLeft + options.paddingRight : 0;
        const maxHeight = childrenSize.height > 0 ? childrenSize.height + options.paddingTop + options.paddingBottom : 0;
        if (childrenSize.width > 0 && childrenSize.height > 0) {
            const offset = this.layoutChildren(container, layouter, options, maxWidth, maxHeight);
            const computed = this.getComputedContainerDimensions(options, childrenSize.width, childrenSize.height);
            layout_data_1.LayoutAware.setComputedDimensions(boundsData, computed);
            boundsData.bounds = this.getFinalContainerBounds(container, offset, options, computed.width, computed.height);
            boundsData.boundsChanged = true;
        }
        else {
            boundsData.bounds = { x: boundsData.bounds.x, y: boundsData.bounds.y, width: 0, height: 0 };
            boundsData.boundsChanged = true;
        }
    }
    getChildrenSize(container, containerOptions, layouter) {
        let maxX = 0;
        let maxY = 0;
        container.children.forEach(child => {
            const bounds = layouter.getBoundsData(child).bounds;
            if (bounds !== undefined && sprotty_1.Dimension.isValid(bounds)) {
                const childMaxX = bounds.x + bounds.width;
                const childMaxY = bounds.y + bounds.height;
                maxX = Math.max(maxX, childMaxX);
                maxY = Math.max(maxY, childMaxY);
            }
        });
        return {
            width: maxX,
            height: maxY
        };
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight) {
        boundsData.bounds = {
            x: child.bounds.x,
            y: child.bounds.y,
            width: bounds.width,
            height: bounds.height
        };
        boundsData.boundsChanged = true;
        return currentOffset;
    }
    getComputedContainerDimensions(options, maxWidth, maxHeight) {
        return {
            width: maxWidth + options.paddingLeft + options.paddingRight,
            height: maxHeight + options.paddingTop + options.paddingBottom
        };
    }
    getFinalContainerBounds(container, lastOffset, options, maxWidth, maxHeight) {
        const result = {
            x: container.bounds.x,
            y: container.bounds.y,
            width: Math.max(options.minWidth, maxWidth),
            height: Math.max(options.minHeight, maxHeight)
        };
        return result;
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 0,
            paddingBottom: 0,
            paddingLeft: 0,
            paddingRight: 0,
            paddingFactor: 1,
            minWidth: 0,
            minHeight: 0
        };
    }
    spread(a, b) {
        return { ...a, ...b };
    }
};
exports.FreeFormLayouter = FreeFormLayouter;
FreeFormLayouter.KIND = 'freeform';
exports.FreeFormLayouter = FreeFormLayouter = __decorate([
    (0, inversify_1.injectable)()
], FreeFormLayouter);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/glsp-hidden-bounds-updater.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/glsp-hidden-bounds-updater.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2022-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPHiddenBoundsUpdater = exports.BoundsDataExt = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const layout_data_1 = __webpack_require__(/*! ./layout-data */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js");
const local_bounds_1 = __webpack_require__(/*! ./local-bounds */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/local-bounds.js");
class BoundsDataExt extends sprotty_1.BoundsData {
}
exports.BoundsDataExt = BoundsDataExt;
/**
 * Grabs the bounds from hidden SVG DOM elements, applies layouts, collects routes and fires {@link ComputedBoundsAction}s.
 *
 * The actions will contain the bound, alignment, and routing points of elements.
 */
let GLSPHiddenBoundsUpdater = class GLSPHiddenBoundsUpdater extends sprotty_1.HiddenBoundsUpdater {
    constructor() {
        super(...arguments);
        this.element2route = [];
    }
    getElement2BoundsData() {
        return this['element2boundsData'];
    }
    decorate(vnode, element) {
        super.decorate(vnode, element);
        if ((0, gmodel_util_1.isRoutable)(element)) {
            this.element2route.push((0, gmodel_util_1.calcElementAndRoute)(element, this.edgeRouterRegistry));
        }
        return vnode;
    }
    postUpdate(cause) {
        if (local_bounds_1.LocalRequestBoundsAction.is(cause) && cause.elementIDs) {
            this.focusOnElements(cause.elementIDs);
        }
        // collect bounds and layout data in element2BoundsData
        this.getBoundsFromDOM();
        this.layouter.layout(this.getElement2BoundsData());
        // prepare data for action
        const resizes = [];
        const alignments = [];
        const layoutData = [];
        this.getElement2BoundsData().forEach((boundsData, element) => {
            if (boundsData.boundsChanged && boundsData.bounds !== undefined) {
                const resize = {
                    elementId: element.id,
                    newSize: {
                        width: boundsData.bounds.width,
                        height: boundsData.bounds.height
                    }
                };
                // don't copy position if the element is layouted by the server
                if (element instanceof sprotty_1.GChildElement && (0, sprotty_1.isLayoutContainer)(element.parent)) {
                    resize.newPosition = {
                        x: boundsData.bounds.x,
                        y: boundsData.bounds.y
                    };
                }
                resizes.push(resize);
            }
            if (boundsData.alignmentChanged && boundsData.alignment !== undefined) {
                alignments.push({
                    elementId: element.id,
                    newAlignment: boundsData.alignment
                });
            }
            if (layout_data_1.LayoutAware.is(boundsData)) {
                layoutData.push({ elementId: element.id, layoutData: boundsData.layoutData });
            }
        });
        const routes = this.element2route.length === 0 ? undefined : this.element2route;
        // prepare and dispatch action
        const responseId = cause.requestId;
        const revision = this.root !== undefined ? this.root.revision : undefined;
        const computedBoundsAction = sprotty_1.ComputedBoundsAction.create(resizes, { revision, alignments, layoutData, routes, responseId });
        if (local_bounds_1.LocalRequestBoundsAction.is(cause)) {
            local_bounds_1.LocalComputedBoundsAction.mark(computedBoundsAction);
        }
        this.actionDispatcher.dispatch(computedBoundsAction);
        // cleanup
        this.getElement2BoundsData().clear();
        this.element2route = [];
    }
    focusOnElements(elementIDs) {
        const data = this.getElement2BoundsData();
        if (data.size > 0) {
            // expand given IDs to their descendent element IDs as we need their bounding boxes as well
            const index = [...data.keys()][0].index;
            const relevantIds = new Set(elementIDs.flatMap(elementId => this.expandElementId(elementId, index, elementIDs)));
            // ensure we only keep the bounds of the elements we are interested in
            data.forEach((_bounds, element) => !relevantIds.has(element.id) && data.delete(element));
        }
    }
    expandElementId(id, index, elementIDs) {
        return (0, gmodel_util_1.getDescendantIds)(index.getById(id));
    }
};
exports.GLSPHiddenBoundsUpdater = GLSPHiddenBoundsUpdater;
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], GLSPHiddenBoundsUpdater.prototype, "edgeRouterRegistry", void 0);
exports.GLSPHiddenBoundsUpdater = GLSPHiddenBoundsUpdater = __decorate([
    (0, inversify_1.injectable)()
], GLSPHiddenBoundsUpdater);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/hbox-layout.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/hbox-layout.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HBoxLayouterExt = void 0;
/********************************************************************************
 * Copyright (c) 2021-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const layout_data_1 = __webpack_require__(/*! ./layout-data */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js");
/**
 * Extends HBoxLayouter to support additional layout options
 */
let HBoxLayouterExt = class HBoxLayouterExt extends sprotty_1.HBoxLayouter {
    layout(container, layouter) {
        var _a, _b;
        const boundsData = layouter.getBoundsData(container);
        const options = this.getLayoutOptions(container);
        const childrenSize = this.getChildrenSize(container, options, layouter);
        const fixedSize = this.getFixedContainerBounds(container, options, layouter);
        const currentWidth = boundsData.bounds ? ((_a = boundsData.bounds) === null || _a === void 0 ? void 0 : _a.width) - options.paddingLeft - options.paddingRight : 0;
        const currentHeight = boundsData.bounds ? ((_b = boundsData.bounds) === null || _b === void 0 ? void 0 : _b.height) - options.paddingTop - options.paddingBottom : 0;
        const maxWidth = options.paddingFactor *
            (options.resizeContainer
                ? Math.max(fixedSize.width - options.paddingLeft - options.paddingRight, childrenSize.width)
                : Math.max(0, fixedSize.width - options.paddingLeft - options.paddingRight));
        const maxHeight = options.paddingFactor *
            (options.resizeContainer
                ? Math.max(fixedSize.height - options.paddingTop - options.paddingBottom, childrenSize.height)
                : Math.max(0, fixedSize.height - options.paddingTop - options.paddingBottom));
        const width = Math.max(currentWidth, maxWidth);
        const height = Math.max(currentHeight, maxHeight);
        // Remaining size that can be grabbed by children with the hGrab option
        const grabWidth = width - childrenSize.width;
        // Number of children that request hGrab
        // FIXME: This approach works fine when only 1 child uses HGrab, but may cause rounding issues
        // when the grabHeight can't be equally shared by all children.
        const grabbingChildren = container.children
            .map(child => this.getChildLayoutOptions(child, options))
            .filter(opt => opt.hGrab).length;
        if (width > 0 && height > 0) {
            const offset = this.layoutChildren(container, layouter, options, width, height, grabWidth, grabbingChildren);
            const computed = this.getComputedContainerDimensions(options, childrenSize.width, childrenSize.height);
            layout_data_1.LayoutAware.setComputedDimensions(boundsData, computed);
            boundsData.bounds = this.getFinalContainerBounds(container, offset, options, computed.width, computed.height);
            boundsData.boundsChanged = true;
        }
    }
    getChildrenSize(container, containerOptions, layouter) {
        let maxWidth = 0;
        let maxHeight = -1;
        let isFirst = true;
        container.children.forEach(child => {
            if ((0, sprotty_1.isLayoutableChild)(child)) {
                const bounds = layouter.getBoundsData(child).bounds;
                if (bounds !== undefined && sprotty_1.Dimension.isValid(bounds)) {
                    maxWidth += bounds.width;
                    if (isFirst) {
                        isFirst = false;
                    }
                    else {
                        maxWidth += containerOptions.hGap;
                    }
                    maxHeight = Math.max(maxHeight, bounds.height);
                }
            }
        });
        const result = {
            width: maxWidth,
            height: maxHeight
        };
        return result;
    }
    layoutChildren(container, layouter, containerOptions, maxWidth, maxHeight, grabWidth, grabbingChildren) {
        let currentOffset = {
            x: containerOptions.paddingLeft + 0.5 * (maxWidth - maxWidth / containerOptions.paddingFactor),
            y: containerOptions.paddingTop + 0.5 * (maxHeight - maxHeight / containerOptions.paddingFactor)
        };
        container.children.forEach(child => {
            if ((0, sprotty_1.isLayoutableChild)(child)) {
                const boundsData = layouter.getBoundsData(child);
                const bounds = boundsData.bounds;
                const childOptions = this.getChildLayoutOptions(child, containerOptions);
                if (bounds !== undefined && sprotty_1.Dimension.isValid(bounds)) {
                    currentOffset = this.layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight, grabWidth, grabbingChildren);
                }
            }
        });
        return currentOffset;
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight, grabWidth, grabbingChildren) {
        const vAlign = childOptions.vGrab ? 'top' : childOptions.vAlign;
        const dy = this.getDy(vAlign, bounds, maxHeight);
        let offset = super.layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight);
        boundsData.bounds = {
            ...boundsData.bounds,
            x: currentOffset.x,
            y: currentOffset.y + dy
        };
        if (childOptions.vGrab) {
            boundsData.bounds = {
                x: boundsData.bounds.x,
                y: boundsData.bounds.y,
                width: boundsData.bounds.width,
                height: maxHeight
            };
            boundsData.boundsChanged = true;
        }
        if (childOptions.hGrab && grabWidth && grabbingChildren) {
            const width = boundsData.bounds.width + grabWidth / grabbingChildren;
            boundsData.bounds = {
                x: boundsData.bounds.x,
                y: boundsData.bounds.y,
                width: width,
                height: boundsData.bounds.height
            };
            boundsData.boundsChanged = true;
            offset = { x: currentOffset.x + width, y: currentOffset.y };
        }
        return offset;
    }
    getFixedContainerBounds(container, layoutOptions, layouter) {
        var _a, _b;
        const currentContainer = container;
        // eslint-disable-next-line no-constant-condition
        if ((0, sprotty_1.isBoundsAware)(currentContainer)) {
            const bounds = currentContainer.bounds;
            const elementOptions = this.getElementLayoutOptions(currentContainer);
            const width = (_a = elementOptions === null || elementOptions === void 0 ? void 0 : elementOptions.prefWidth) !== null && _a !== void 0 ? _a : 0;
            const height = (_b = elementOptions === null || elementOptions === void 0 ? void 0 : elementOptions.prefHeight) !== null && _b !== void 0 ? _b : 0;
            return { ...bounds, width, height };
        }
        return sprotty_1.Bounds.EMPTY;
    }
    getChildLayoutOptions(child, containerOptions) {
        const filteredOptions = this.filterContainerOptions(containerOptions);
        if (!(0, sprotty_1.isLayoutableChild)(child) && !(0, sprotty_1.isLayoutContainer)(child)) {
            return filteredOptions;
        }
        return super.getChildLayoutOptions(child, filteredOptions);
    }
    getLayoutOptions(element) {
        return super.getLayoutOptions(element);
    }
    getElementLayoutOptions(element) {
        return element.layoutOptions;
    }
    getComputedContainerDimensions(options, maxWidth, maxHeight) {
        return {
            width: maxWidth + options.paddingLeft + options.paddingRight,
            height: maxHeight + options.paddingTop + options.paddingBottom
        };
    }
    getFinalContainerBounds(container, lastOffset, options, computedWidth, computedHeight) {
        var _a, _b;
        const elementOptions = this.getElementLayoutOptions(container);
        const width = (_a = elementOptions === null || elementOptions === void 0 ? void 0 : elementOptions.prefWidth) !== null && _a !== void 0 ? _a : options.minWidth;
        const height = (_b = elementOptions === null || elementOptions === void 0 ? void 0 : elementOptions.prefHeight) !== null && _b !== void 0 ? _b : options.minHeight;
        const result = {
            x: container.bounds.x,
            y: container.bounds.y,
            width: Math.max(width, computedWidth),
            height: Math.max(height, computedHeight)
        };
        return result;
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 5,
            paddingBottom: 5,
            paddingLeft: 5,
            paddingRight: 5,
            paddingFactor: 1,
            hGap: 1,
            vAlign: 'center',
            minWidth: 0,
            minHeight: 0,
            hGrab: false,
            vGrab: false,
            // eslint-disable-next-line no-null/no-null
            prefHeight: null,
            // eslint-disable-next-line no-null/no-null
            prefWidth: null
        };
    }
    filterContainerOptions(containerOptions) {
        // Reset object-specific layout options to default before merging,
        // to make sure they won't be inherited (grab, prefSize)
        // eslint-disable-next-line no-null/no-null
        const localOptions = { vGrab: false, hGrab: false, prefHeight: null, prefWidth: null };
        return { ...containerOptions, ...localOptions };
    }
};
exports.HBoxLayouterExt = HBoxLayouterExt;
HBoxLayouterExt.KIND = sprotty_1.HBoxLayouter.KIND;
exports.HBoxLayouterExt = HBoxLayouterExt = __decorate([
    (0, inversify_1.injectable)()
], HBoxLayouterExt);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LayoutAware = void 0;
var LayoutAware;
(function (LayoutAware) {
    function is(element) {
        return 'layoutData' in element;
    }
    LayoutAware.is = is;
    function getLayoutData(element) {
        return is(element) ? element.layoutData : undefined;
    }
    LayoutAware.getLayoutData = getLayoutData;
    function setLayoutData(element, data) {
        element.layoutData = data;
    }
    LayoutAware.setLayoutData = setLayoutData;
    function setComputedDimensions(element, computedDimensions) {
        ensureLayoutAware(element).layoutData.computedDimensions = computedDimensions;
    }
    LayoutAware.setComputedDimensions = setComputedDimensions;
    function getComputedDimensions(element) {
        var _a;
        return (_a = getLayoutData(element)) === null || _a === void 0 ? void 0 : _a.computedDimensions;
    }
    LayoutAware.getComputedDimensions = getComputedDimensions;
    function ensureLayoutAware(element) {
        var _a;
        element.layoutData = (_a = element.layoutData) !== null && _a !== void 0 ? _a : {};
        return element;
    }
})(LayoutAware || (exports.LayoutAware = LayoutAware = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layouter.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/layouter.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StatefulLayouterExt = exports.LayouterExt = void 0;
/********************************************************************************
 * Copyright (c) 2022-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
let LayouterExt = class LayouterExt extends sprotty_1.Layouter {
    layout(element2boundsData) {
        new StatefulLayouterExt(element2boundsData, this.layoutRegistry, this.logger).layout();
    }
};
exports.LayouterExt = LayouterExt;
exports.LayouterExt = LayouterExt = __decorate([
    (0, inversify_1.injectable)()
], LayouterExt);
// 2-pass layout:
// Step 1: Find "rendered size" of each element (may take resizeContainer into account)
// Child-to-parent layout
// Step 2: Extend parents as necessary, then use the adjusted parent size to properly
// align children (center/end alignments, hGrab/vGrab)
// Parent-to-children layout
class StatefulLayouterExt extends sprotty_1.StatefulLayouter {
    /**
     *
     * @param elementToBoundsData The map of element to bounds data. Bounds Data are computed from the hidden
     * SVG rendering pass.
     * @param layoutRegistry2 The registry of available layouts.
     * @param log The log.
     */
    constructor(elementToBoundsData, layoutRegistry2, log) {
        super(elementToBoundsData, layoutRegistry2, log);
        this.elementToBoundsData = elementToBoundsData;
        this.layoutRegistry2 = layoutRegistry2;
        this.toBeLayouted2 = [];
        elementToBoundsData.forEach((data, element) => {
            if ((0, sprotty_1.isLayoutContainer)(element)) {
                this.toBeLayouted2.push(element);
            }
        });
        for (const element of this.toBeLayouted2) {
            // Clear previous layout information for dynamic-layout objects
            elementToBoundsData.delete(element);
        }
    }
    getBoundsData(element) {
        let boundsData = this.elementToBoundsData.get(element);
        let bounds = element.bounds;
        if ((0, sprotty_1.isLayoutContainer)(element) && this.toBeLayouted2.indexOf(element) >= 0) {
            bounds = this.doLayout(element);
        }
        else if ((0, sprotty_1.isLayoutContainer)(element)) {
            bounds = {
                x: 0,
                y: 0,
                width: -1,
                height: -1
            };
        }
        if (!boundsData) {
            boundsData = {
                bounds: bounds,
                boundsChanged: false,
                alignmentChanged: false
            };
            this.elementToBoundsData.set(element, boundsData);
        }
        return boundsData;
    }
    layout() {
        // First pass: apply layout with cleared container data. Will get
        // preferred size for all elements (Children first, then parents)
        while (this.toBeLayouted2.length > 0) {
            const element = this.toBeLayouted2[0];
            this.doLayout(element);
        }
        this.toBeLayouted2 = [];
        this.elementToBoundsData.forEach((data, element) => {
            if ((0, sprotty_1.isLayoutContainer)(element)) {
                this.toBeLayouted2.push(element);
            }
        });
        // Second pass: apply layout with initial size data for all
        // nodes. Update the position/size of all elements, taking
        // vGrab/hGrab into account (parent -> children).
        while (this.toBeLayouted2.length > 0) {
            const element = this.toBeLayouted2[0];
            this.doLayout(element);
        }
    }
    doLayout(element) {
        const index = this.toBeLayouted2.indexOf(element);
        if (index >= 0) {
            this.toBeLayouted2.splice(index, 1);
        }
        const layout = this.layoutRegistry2.get(element.layout);
        if (layout) {
            layout.layout(element, this);
        }
        const boundsData = this.elementToBoundsData.get(element);
        if (boundsData !== undefined && boundsData.bounds !== undefined) {
            return boundsData.bounds;
        }
        else {
            this.log.error(element, 'Layout failed');
            return sprotty_1.Bounds.EMPTY;
        }
    }
}
exports.StatefulLayouterExt = StatefulLayouterExt;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/local-bounds.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/local-bounds.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalComputedBoundsCommand = exports.LocalComputedBoundsAction = exports.LocalRequestBoundsAction = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const glsp_model_source_1 = __webpack_require__(/*! ../../base/model/glsp-model-source */ "../node_modules/@eclipse-glsp/client/lib/base/model/glsp-model-source.js");
const layout_data_1 = __webpack_require__(/*! ./layout-data */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js");
var LocalRequestBoundsAction;
(function (LocalRequestBoundsAction) {
    function is(object) {
        return sprotty_1.RequestBoundsAction.is(object) && !glsp_model_source_1.ServerAction.is(object) && (0, sprotty_1.hasArrayProp)(object, 'elementIDs', true);
    }
    LocalRequestBoundsAction.is = is;
    function create(newRoot, elementIDs) {
        return {
            ...sprotty_1.RequestBoundsAction.create(newRoot),
            elementIDs
        };
    }
    LocalRequestBoundsAction.create = create;
    function fromCommand({ root }, actionDispatcher, cause, elementIDs) {
        // do not modify the main model (modelChanged = false) but request local bounds calculation on hidden model
        actionDispatcher.dispatch(LocalRequestBoundsAction.create(root, elementIDs));
        return {
            model: root,
            modelChanged: false,
            cause
        };
    }
    LocalRequestBoundsAction.fromCommand = fromCommand;
})(LocalRequestBoundsAction || (exports.LocalRequestBoundsAction = LocalRequestBoundsAction = {}));
var LocalComputedBoundsAction;
(function (LocalComputedBoundsAction) {
    function is(object) {
        return sprotty_1.ComputedBoundsAction.is(object) && glsp_model_source_1.ServerAction.is(object);
    }
    LocalComputedBoundsAction.is = is;
    function mark(action) {
        // mimic: we mark the computed bounds action as coming from the server so it is not sent to the server and handled locally
        glsp_model_source_1.ServerAction.mark(action);
        return action;
    }
    LocalComputedBoundsAction.mark = mark;
})(LocalComputedBoundsAction || (exports.LocalComputedBoundsAction = LocalComputedBoundsAction = {}));
let LocalComputedBoundsCommand = class LocalComputedBoundsCommand extends sprotty_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        var _a, _b;
        if (LocalComputedBoundsAction.is(this.action)) {
            if (!this.viewerOptions.needsClientLayout) {
                return context.root;
            }
            // apply computed bounds from the hidden model and return updated model to render new main model
            this.computedBoundsApplicator.apply(context.root, this.action);
            (_a = this.action.layoutData) === null || _a === void 0 ? void 0 : _a.forEach(({ elementId, layoutData }) => {
                const element = context.root.index.getById(elementId);
                if (element !== undefined) {
                    layout_data_1.LayoutAware.setLayoutData(element, layoutData);
                }
            });
            return context.root;
        }
        (_b = this.action.layoutData) === null || _b === void 0 ? void 0 : _b.forEach(({ elementId, layoutData }) => {
            const element = context.root.index.getById(elementId);
            if (element !== undefined) {
                layout_data_1.LayoutAware.setLayoutData(element, layoutData);
            }
        });
        // computed bounds action from server -> we do not care and do not trigger any update of the main model
        return {
            model: context.root,
            modelChanged: false
        };
    }
    undo(context) {
        return context.root;
    }
    redo(context) {
        return context.root;
    }
};
exports.LocalComputedBoundsCommand = LocalComputedBoundsCommand;
LocalComputedBoundsCommand.KIND = sprotty_1.ComputedBoundsAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.ComputedBoundsApplicator),
    __metadata("design:type", sprotty_1.ComputedBoundsApplicator)
], LocalComputedBoundsCommand.prototype, "computedBoundsApplicator", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], LocalComputedBoundsCommand.prototype, "viewerOptions", void 0);
exports.LocalComputedBoundsCommand = LocalComputedBoundsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], LocalComputedBoundsCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/set-bounds-feedback-command.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/set-bounds-feedback-command.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetBoundsFeedbackCommand = exports.SetBoundsFeedbackAction = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ranked_1 = __webpack_require__(/*! ../../base/ranked */ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js");
const local_bounds_1 = __webpack_require__(/*! ./local-bounds */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/local-bounds.js");
var SetBoundsFeedbackAction;
(function (SetBoundsFeedbackAction) {
    SetBoundsFeedbackAction.KIND = 'setBoundsFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, SetBoundsFeedbackAction.KIND);
    }
    SetBoundsFeedbackAction.is = is;
    function create(bounds) {
        return { kind: SetBoundsFeedbackAction.KIND, bounds };
    }
    SetBoundsFeedbackAction.create = create;
})(SetBoundsFeedbackAction || (exports.SetBoundsFeedbackAction = SetBoundsFeedbackAction = {}));
let SetBoundsFeedbackCommand = class SetBoundsFeedbackCommand extends sprotty_1.SetBoundsCommand {
    constructor() {
        super(...arguments);
        this.rank = ranked_1.Ranked.DEFAULT_RANK;
    }
    execute(context) {
        super.execute(context);
        // apply set bounds as layout options so that when we calculate the bounds they are considered by the layouter
        this.action.bounds.forEach(bounds => {
            var _a;
            const element = context.root.index.getById(bounds.elementId);
            if (element && (0, sprotty_1.isLayoutContainer)(element)) {
                const options = (_a = element.layoutOptions) !== null && _a !== void 0 ? _a : {};
                options.prefHeight = bounds.newSize.height;
                options.prefWidth = bounds.newSize.width;
                element.layoutOptions = options;
            }
        });
        const elementIDs = this.action.bounds.map(bounds => bounds.elementId);
        return local_bounds_1.LocalRequestBoundsAction.fromCommand(context, this.actionDispatcher, this.action, elementIDs);
    }
};
exports.SetBoundsFeedbackCommand = SetBoundsFeedbackCommand;
SetBoundsFeedbackCommand.KIND = SetBoundsFeedbackAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], SetBoundsFeedbackCommand.prototype, "actionDispatcher", void 0);
exports.SetBoundsFeedbackCommand = SetBoundsFeedbackCommand = __decorate([
    (0, inversify_1.injectable)()
], SetBoundsFeedbackCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/bounds/vbox-layout.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/bounds/vbox-layout.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VBoxLayouterExt = void 0;
/********************************************************************************
 * Copyright (c) 2021-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const layout_data_1 = __webpack_require__(/*! ./layout-data */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js");
/**
 * Extends VBoxLayouter to support additional layout options
 */
let VBoxLayouterExt = class VBoxLayouterExt extends sprotty_1.VBoxLayouter {
    layout(container, layouter) {
        var _a, _b;
        const boundsData = layouter.getBoundsData(container);
        const options = this.getLayoutOptions(container);
        const childrenSize = this.getChildrenSize(container, options, layouter);
        const fixedSize = this.getFixedContainerBounds(container, options, layouter);
        const currentWidth = (((_a = boundsData.bounds) === null || _a === void 0 ? void 0 : _a.width) || 0) - options.paddingLeft - options.paddingRight;
        const currentHeight = (((_b = boundsData.bounds) === null || _b === void 0 ? void 0 : _b.height) || 0) - options.paddingTop - options.paddingBottom;
        const maxWidth = options.paddingFactor *
            (options.resizeContainer
                ? Math.max(fixedSize.width - options.paddingLeft - options.paddingRight, childrenSize.width)
                : Math.max(0, fixedSize.width - options.paddingLeft - options.paddingRight));
        const maxHeight = options.paddingFactor *
            (options.resizeContainer
                ? Math.max(fixedSize.height - options.paddingTop - options.paddingBottom, childrenSize.height)
                : Math.max(0, fixedSize.height - options.paddingTop - options.paddingBottom));
        const width = Math.max(currentWidth, maxWidth);
        const height = Math.max(currentHeight, maxHeight);
        // Remaining size that can be grabbed by children with the vGrab option
        const grabHeight = height - childrenSize.height;
        // Number of children that request vGrab
        // FIXME: This approach works fine when only 1 child uses VGrab, but may cause rounding issues
        // when the grabHeight can't be equally shared by all children.
        const grabbingChildren = container.children
            .map(child => this.getChildLayoutOptions(child, options))
            .filter(opt => opt.vGrab).length;
        if (maxWidth > 0 && maxHeight > 0) {
            const offset = this.layoutChildren(container, layouter, options, width, height, grabHeight, grabbingChildren);
            const computed = this.getComputedContainerDimensions(options, childrenSize.width, childrenSize.height);
            layout_data_1.LayoutAware.setComputedDimensions(boundsData, computed);
            boundsData.bounds = this.getFinalContainerBounds(container, offset, options, computed.width, computed.height);
            boundsData.boundsChanged = true;
        }
    }
    getChildrenSize(container, containerOptions, layouter) {
        let maxWidth = -1;
        let maxHeight = 0;
        let isFirst = true;
        container.children.forEach(child => {
            if ((0, sprotty_1.isLayoutableChild)(child)) {
                const bounds = layouter.getBoundsData(child).bounds;
                if (bounds !== undefined && sprotty_1.Dimension.isValid(bounds)) {
                    maxHeight += bounds.height;
                    if (isFirst) {
                        isFirst = false;
                    }
                    else {
                        maxHeight += containerOptions.vGap;
                    }
                    maxWidth = Math.max(maxWidth, bounds.width);
                }
            }
        });
        const result = {
            width: maxWidth,
            height: maxHeight
        };
        return result;
    }
    layoutChildren(container, layouter, containerOptions, maxWidth, maxHeight, grabHeight, grabbingChildren) {
        let currentOffset = {
            x: containerOptions.paddingLeft + 0.5 * (maxWidth - maxWidth / containerOptions.paddingFactor),
            y: containerOptions.paddingTop + 0.5 * (maxHeight - maxHeight / containerOptions.paddingFactor)
        };
        container.children.forEach(child => {
            if ((0, sprotty_1.isLayoutableChild)(child)) {
                const boundsData = layouter.getBoundsData(child);
                const bounds = boundsData.bounds;
                const childOptions = this.getChildLayoutOptions(child, containerOptions);
                if (bounds !== undefined && sprotty_1.Dimension.isValid(bounds)) {
                    currentOffset = this.layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight, grabHeight, grabbingChildren);
                }
            }
        });
        return currentOffset;
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight, grabHeight, grabbingChildren) {
        const hAlign = childOptions.hGrab ? 'left' : childOptions.hAlign;
        const dx = this.getDx(hAlign, bounds, maxWidth);
        let offset = super.layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight);
        boundsData.bounds = {
            ...boundsData.bounds,
            x: currentOffset.x + dx,
            y: currentOffset.y
        };
        if (childOptions.hGrab) {
            boundsData.bounds = {
                x: boundsData.bounds.x,
                y: boundsData.bounds.y,
                width: maxWidth,
                height: boundsData.bounds.height
            };
            boundsData.boundsChanged = true;
        }
        if (childOptions.vGrab && grabHeight && grabbingChildren) {
            const height = boundsData.bounds.height + grabHeight / grabbingChildren;
            boundsData.bounds = {
                x: boundsData.bounds.x,
                y: boundsData.bounds.y,
                width: boundsData.bounds.width,
                height: height
            };
            boundsData.boundsChanged = true;
            offset = { x: currentOffset.x, y: currentOffset.y + height };
        }
        return offset;
    }
    getFixedContainerBounds(container, layoutOptions, layouter) {
        var _a, _b;
        const currentContainer = container;
        // eslint-disable-next-line no-constant-condition
        if ((0, sprotty_1.isBoundsAware)(currentContainer)) {
            const bounds = currentContainer.bounds;
            const elementOptions = this.getElementLayoutOptions(currentContainer);
            const width = (_a = elementOptions === null || elementOptions === void 0 ? void 0 : elementOptions.prefWidth) !== null && _a !== void 0 ? _a : 0;
            const height = (_b = elementOptions === null || elementOptions === void 0 ? void 0 : elementOptions.prefHeight) !== null && _b !== void 0 ? _b : 0;
            return { ...bounds, width, height };
        }
        return sprotty_1.Bounds.EMPTY;
    }
    getChildLayoutOptions(child, containerOptions) {
        const filteredOptions = this.filterContainerOptions(containerOptions);
        if (!(0, sprotty_1.isLayoutableChild)(child) && !(0, sprotty_1.isLayoutContainer)(child)) {
            return filteredOptions;
        }
        return super.getChildLayoutOptions(child, filteredOptions);
    }
    getLayoutOptions(element) {
        return super.getLayoutOptions(element);
    }
    getElementLayoutOptions(element) {
        return element.layoutOptions;
    }
    getComputedContainerDimensions(options, maxWidth, maxHeight) {
        return {
            width: maxWidth + options.paddingLeft + options.paddingRight,
            height: maxHeight + options.paddingTop + options.paddingBottom
        };
    }
    getFinalContainerBounds(container, lastOffset, options, computedWidth, computedHeight) {
        var _a, _b;
        const elementOptions = this.getElementLayoutOptions(container);
        const width = (_a = elementOptions === null || elementOptions === void 0 ? void 0 : elementOptions.prefWidth) !== null && _a !== void 0 ? _a : options.minWidth;
        const height = (_b = elementOptions === null || elementOptions === void 0 ? void 0 : elementOptions.prefHeight) !== null && _b !== void 0 ? _b : options.minHeight;
        const result = {
            x: container.bounds.x,
            y: container.bounds.y,
            width: Math.max(width, computedWidth),
            height: Math.max(height, computedHeight)
        };
        return result;
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 5,
            paddingBottom: 5,
            paddingLeft: 5,
            paddingRight: 5,
            paddingFactor: 1,
            vGap: 1,
            hAlign: 'center',
            minWidth: 0,
            minHeight: 0,
            hGrab: false,
            vGrab: false,
            // eslint-disable-next-line no-null/no-null
            prefHeight: null,
            // eslint-disable-next-line no-null/no-null
            prefWidth: null
        };
    }
    filterContainerOptions(containerOptions) {
        // Reset object-specific layout options to default before merging,
        // to make sure they won't be inherited (grab, prefSize)
        // eslint-disable-next-line no-null/no-null
        const localOptions = { vGrab: false, hGrab: false, prefHeight: null, prefWidth: null };
        return { ...containerOptions, ...localOptions };
    }
};
exports.VBoxLayouterExt = VBoxLayouterExt;
VBoxLayouterExt.KIND = sprotty_1.VBoxLayouter.KIND;
exports.VBoxLayouterExt = VBoxLayouterExt = __decorate([
    (0, inversify_1.injectable)()
], VBoxLayouterExt);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SResizeHandle = exports.GResizeHandle = exports.ResizeHandleLocation = exports.resizeFeature = void 0;
exports.isResizable = isResizable;
exports.isBoundsAwareMoveable = isBoundsAwareMoveable;
exports.addResizeHandles = addResizeHandles;
exports.removeResizeHandles = removeResizeHandles;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const css_feedback_1 = __webpack_require__(/*! ../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
exports.resizeFeature = Symbol('resizeFeature');
function isResizable(element) {
    return (0, sprotty_1.isBoundsAware)(element) && (0, sprotty_1.isSelectable)(element) && element instanceof sprotty_1.GParentElement && element.hasFeature(exports.resizeFeature);
}
// eslint-disable-next-line no-shadow
var ResizeHandleLocation;
(function (ResizeHandleLocation) {
    ResizeHandleLocation["TopLeft"] = "top-left";
    ResizeHandleLocation["Top"] = "top";
    ResizeHandleLocation["TopRight"] = "top-right";
    ResizeHandleLocation["Right"] = "right";
    ResizeHandleLocation["BottomRight"] = "bottom-right";
    ResizeHandleLocation["Bottom"] = "bottom";
    ResizeHandleLocation["BottomLeft"] = "bottom-left";
    ResizeHandleLocation["Left"] = "left";
})(ResizeHandleLocation || (exports.ResizeHandleLocation = ResizeHandleLocation = {}));
(function (ResizeHandleLocation) {
    ResizeHandleLocation.CORNERS = [
        ResizeHandleLocation.TopLeft,
        ResizeHandleLocation.TopRight,
        ResizeHandleLocation.BottomRight,
        ResizeHandleLocation.BottomLeft
    ];
    ResizeHandleLocation.CROSS = [
        ResizeHandleLocation.Top,
        ResizeHandleLocation.Right,
        ResizeHandleLocation.Bottom,
        ResizeHandleLocation.Left
    ];
    ResizeHandleLocation.ALL = [...ResizeHandleLocation.CORNERS, ...ResizeHandleLocation.CROSS];
    function opposite(location) {
        switch (location) {
            case ResizeHandleLocation.TopLeft:
                return ResizeHandleLocation.BottomRight;
            case ResizeHandleLocation.Top:
                return ResizeHandleLocation.Bottom;
            case ResizeHandleLocation.TopRight:
                return ResizeHandleLocation.BottomLeft;
            case ResizeHandleLocation.Right:
                return ResizeHandleLocation.Left;
            case ResizeHandleLocation.BottomRight:
                return ResizeHandleLocation.TopLeft;
            case ResizeHandleLocation.Bottom:
                return ResizeHandleLocation.Top;
            case ResizeHandleLocation.BottomLeft:
                return ResizeHandleLocation.TopRight;
            case ResizeHandleLocation.Left:
                return ResizeHandleLocation.Right;
        }
    }
    ResizeHandleLocation.opposite = opposite;
    function direction(location) {
        switch (location) {
            case ResizeHandleLocation.TopLeft:
                return [sprotty_1.Direction.Up, sprotty_1.Direction.Left];
            case ResizeHandleLocation.Top:
                return [sprotty_1.Direction.Up];
            case ResizeHandleLocation.TopRight:
                return [sprotty_1.Direction.Up, sprotty_1.Direction.Right];
            case ResizeHandleLocation.Right:
                return [sprotty_1.Direction.Right];
            case ResizeHandleLocation.BottomRight:
                return [sprotty_1.Direction.Down, sprotty_1.Direction.Right];
            case ResizeHandleLocation.Bottom:
                return [sprotty_1.Direction.Down];
            case ResizeHandleLocation.BottomLeft:
                return [sprotty_1.Direction.Down, sprotty_1.Direction.Left];
            case ResizeHandleLocation.Left:
                return [sprotty_1.Direction.Left];
        }
    }
    ResizeHandleLocation.direction = direction;
})(ResizeHandleLocation || (exports.ResizeHandleLocation = ResizeHandleLocation = {}));
function isBoundsAwareMoveable(element) {
    return (0, sprotty_1.isMoveable)(element) && (0, sprotty_1.isBoundsAware)(element);
}
class GResizeHandle extends sprotty_1.GChildElement {
    constructor(location, type = GResizeHandle.TYPE, hoverFeedback = false) {
        super();
        this.location = location;
        this.type = type;
        this.hoverFeedback = hoverFeedback;
    }
    hasFeature(feature) {
        return feature === sprotty_1.hoverFeedbackFeature;
    }
    isNwResize() {
        return this.location === ResizeHandleLocation.TopLeft;
    }
    isNResize() {
        return this.location === ResizeHandleLocation.Top;
    }
    isNeResize() {
        return this.location === ResizeHandleLocation.TopRight;
    }
    isEResize() {
        return this.location === ResizeHandleLocation.Right;
    }
    isSeResize() {
        return this.location === ResizeHandleLocation.BottomRight;
    }
    isSResize() {
        return this.location === ResizeHandleLocation.Bottom;
    }
    isSwResize() {
        return this.location === ResizeHandleLocation.BottomLeft;
    }
    isWResize() {
        return this.location === ResizeHandleLocation.Left;
    }
    isNwSeResize() {
        return this.isNwResize() || this.isSeResize();
    }
    isNeSwResize() {
        return this.isNeResize() || this.isSwResize();
    }
    static getHandlePosition(first, second) {
        const bounds = GResizeHandle.is(first) ? first.parent.bounds : first instanceof sprotty_1.GModelElement ? first.bounds : first;
        const location = GResizeHandle.is(first) ? first.location : second;
        switch (location) {
            case ResizeHandleLocation.TopLeft:
                return sprotty_1.Bounds.topLeft(bounds);
            case ResizeHandleLocation.Top:
                return sprotty_1.Bounds.topCenter(bounds);
            case ResizeHandleLocation.TopRight:
                return sprotty_1.Bounds.topRight(bounds);
            case ResizeHandleLocation.Right:
                return sprotty_1.Bounds.middleRight(bounds);
            case ResizeHandleLocation.BottomRight:
                return sprotty_1.Bounds.bottomRight(bounds);
            case ResizeHandleLocation.Bottom:
                return sprotty_1.Bounds.bottomCenter(bounds);
            case ResizeHandleLocation.BottomLeft:
                return sprotty_1.Bounds.bottomLeft(bounds);
            case ResizeHandleLocation.Left:
                return sprotty_1.Bounds.middleLeft(bounds);
        }
    }
    static getCursorCss(handle) {
        switch (handle.location) {
            case ResizeHandleLocation.TopLeft:
                return css_feedback_1.CursorCSS.RESIZE_NW;
            case ResizeHandleLocation.Top:
                return css_feedback_1.CursorCSS.RESIZE_N;
            case ResizeHandleLocation.TopRight:
                return css_feedback_1.CursorCSS.RESIZE_NE;
            case ResizeHandleLocation.Right:
                return css_feedback_1.CursorCSS.RESIZE_E;
            case ResizeHandleLocation.BottomRight:
                return css_feedback_1.CursorCSS.RESIZE_SE;
            case ResizeHandleLocation.Bottom:
                return css_feedback_1.CursorCSS.RESIZE_S;
            case ResizeHandleLocation.BottomLeft:
                return css_feedback_1.CursorCSS.RESIZE_SW;
            case ResizeHandleLocation.Left:
                return css_feedback_1.CursorCSS.RESIZE_W;
        }
    }
    static is(handle) {
        return typeof handle === 'object' && !!handle && 'type' in handle && handle.type === GResizeHandle.TYPE;
    }
}
exports.GResizeHandle = GResizeHandle;
exports.SResizeHandle = GResizeHandle;
GResizeHandle.TYPE = 'resize-handle';
function addResizeHandles(element, locations = ResizeHandleLocation.CORNERS) {
    for (const location of ResizeHandleLocation.ALL) {
        const existing = element.children.find(child => child instanceof GResizeHandle && child.location === location);
        if (locations.includes(location) && !existing) {
            // add missing handle
            element.add(new GResizeHandle(location));
        }
        else if (!locations.includes(location) && existing) {
            // remove existing handle
            element.remove(existing);
        }
    }
}
function removeResizeHandles(element) {
    element.removeAll(child => child instanceof GResizeHandle);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-action.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-action.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MoveElementRelativeAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var MoveElementRelativeAction;
(function (MoveElementRelativeAction) {
    MoveElementRelativeAction.KIND = 'moveElementRelative';
    function is(object) {
        return sprotty_1.Action.hasKind(object, MoveElementRelativeAction.KIND);
    }
    MoveElementRelativeAction.is = is;
    function create(options) {
        return { kind: MoveElementRelativeAction.KIND, snap: true, ...options };
    }
    MoveElementRelativeAction.create = create;
})(MoveElementRelativeAction || (exports.MoveElementRelativeAction = MoveElementRelativeAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-handler.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-handler.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MoveElementHandler = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const lodash_1 = __webpack_require__(/*! lodash */ "../node_modules/lodash/lodash.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const layout_utils_1 = __webpack_require__(/*! ../../utils/layout-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/layout-utils.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const move_element_action_1 = __webpack_require__(/*! ./move-element-action */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-action.js");
/**
 * Action handler for moving elements.
 */
let MoveElementHandler = class MoveElementHandler {
    init() {
        this.moveFeedback = this.feedbackDispatcher.createEmitter();
    }
    handle(action) {
        if (move_element_action_1.MoveElementRelativeAction.is(action)) {
            this.handleMoveElement(action);
        }
    }
    handleMoveElement(action) {
        const viewport = this.editorContextService.viewport;
        if (!viewport) {
            return;
        }
        const viewportActions = [];
        const elementMoves = [];
        const elements = (0, gmodel_util_1.getElements)(viewport.index, action.elementIds, gmodel_util_1.isSelectableAndBoundsAware);
        for (const element of elements) {
            const newPosition = this.getTargetBounds(element, action);
            elementMoves.push({
                elementId: element.id,
                fromPosition: {
                    x: element.bounds.x,
                    y: element.bounds.y
                },
                toPosition: newPosition
            });
            const topLeftCorner = newPosition;
            const bottomRightCorner = sprotty_1.Point.add(newPosition, { x: element.bounds.width, y: element.bounds.height });
            if ((0, viewpoint_util_1.outsideOfViewport)(topLeftCorner, viewport) || (0, viewpoint_util_1.outsideOfViewport)(bottomRightCorner, viewport)) {
                viewportActions.push(sprotty_1.MoveViewportAction.create({ moveX: action.moveX, moveY: action.moveY }));
            }
        }
        this.dispatcher.dispatchAll(viewportActions);
        const moveAction = sprotty_1.MoveAction.create(elementMoves, { animate: false });
        this.moveFeedback.add(moveAction).submit();
        this.scheduleChangeBounds(this.toElementAndBounds(elementMoves));
    }
    getTargetBounds(element, action) {
        let position = sprotty_1.Point.add(element.bounds, { x: action.moveX, y: action.moveY });
        if (this.snapper && action.snap) {
            position = this.snapper.snap(position, element);
        }
        if (!(0, layout_utils_1.isValidMove)(element, position, this.movementRestrictor)) {
            // reset to position before the move, if not valid
            position = { x: element.bounds.x, y: element.bounds.y };
        }
        return position;
    }
    scheduleChangeBounds(elementAndBounds) {
        var _a;
        (_a = this.debouncedChangeBounds) === null || _a === void 0 ? void 0 : _a.cancel();
        this.debouncedChangeBounds = (0, lodash_1.debounce)(() => {
            this.moveFeedback.dispose();
            this.dispatcher.dispatchAll([sprotty_1.ChangeBoundsOperation.create(elementAndBounds)]);
            this.debouncedChangeBounds = undefined;
        }, 300);
        this.debouncedChangeBounds();
    }
    toElementAndBounds(elementMoves) {
        const elementBounds = [];
        for (const elementMove of elementMoves) {
            const element = this.editorContextService.modelRoot.index.getById(elementMove.elementId);
            if (element && (0, sprotty_1.isBoundsAware)(element)) {
                elementBounds.push({
                    elementId: elementMove.elementId,
                    newSize: {
                        height: element.bounds.height,
                        width: element.bounds.width
                    },
                    newPosition: {
                        x: elementMove.toPosition.x,
                        y: elementMove.toPosition.y
                    }
                });
            }
        }
        return elementBounds;
    }
};
exports.MoveElementHandler = MoveElementHandler;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], MoveElementHandler.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], MoveElementHandler.prototype, "dispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], MoveElementHandler.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ISnapper),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], MoveElementHandler.prototype, "snapper", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IMovementRestrictor),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], MoveElementHandler.prototype, "movementRestrictor", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MoveElementHandler.prototype, "init", null);
exports.MoveElementHandler = MoveElementHandler = __decorate([
    (0, inversify_1.injectable)()
], MoveElementHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-key-listener.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-key-listener.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MoveElementKeyListener = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const grid_1 = __webpack_require__(/*! ../grid/grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
const move_element_action_1 = __webpack_require__(/*! ./move-element-action */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-action.js");
class MoveElementKeyListener extends sprotty_1.KeyListener {
    constructor(selectionService, changeBoundsManager, grid = grid_1.Grid.DEFAULT) {
        super();
        this.selectionService = selectionService;
        this.changeBoundsManager = changeBoundsManager;
        this.grid = grid;
    }
    keyDown(_element, event) {
        const selectedElementIds = this.selectionService
            .getSelectedElements()
            .filter(element => (0, sprotty_1.isMoveable)(element))
            .map(element => element.id);
        const snap = this.changeBoundsManager.usePositionSnap(event);
        const offsetX = snap ? this.grid.x : 1;
        const offsetY = snap ? this.grid.y : 1;
        if (selectedElementIds.length > 0) {
            if (this.matchesMoveUpKeystroke(event)) {
                return [move_element_action_1.MoveElementRelativeAction.create({ elementIds: selectedElementIds, moveX: 0, moveY: -offsetY, snap })];
            }
            else if (this.matchesMoveDownKeystroke(event)) {
                return [move_element_action_1.MoveElementRelativeAction.create({ elementIds: selectedElementIds, moveX: 0, moveY: offsetY, snap })];
            }
            else if (this.matchesMoveRightKeystroke(event)) {
                return [move_element_action_1.MoveElementRelativeAction.create({ elementIds: selectedElementIds, moveX: offsetX, moveY: 0, snap })];
            }
            else if (this.matchesMoveLeftKeystroke(event)) {
                return [move_element_action_1.MoveElementRelativeAction.create({ elementIds: selectedElementIds, moveX: -offsetX, moveY: 0, snap })];
            }
        }
        return [];
    }
    matchesMoveUpKeystroke(event) {
        const unsnap = this.changeBoundsManager.unsnapModifier();
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp') || (!!unsnap && (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp', unsnap));
    }
    matchesMoveDownKeystroke(event) {
        const unsnap = this.changeBoundsManager.unsnapModifier();
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown') || (!!unsnap && (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown', unsnap));
    }
    matchesMoveRightKeystroke(event) {
        const unsnap = this.changeBoundsManager.unsnapModifier();
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight') || (!!unsnap && (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight', unsnap));
    }
    matchesMoveLeftKeystroke(event) {
        const unsnap = this.changeBoundsManager.unsnapModifier();
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft') || (!!unsnap && (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft', unsnap));
    }
}
exports.MoveElementKeyListener = MoveElementKeyListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/movement-restrictor.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/movement-restrictor.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NoOverlapMovementRestrictor = void 0;
exports.createMovementRestrictionFeedback = createMovementRestrictionFeedback;
exports.removeMovementRestrictionFeedback = removeMovementRestrictionFeedback;
exports.movementRestrictionFeedback = movementRestrictionFeedback;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const css_feedback_1 = __webpack_require__(/*! ../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
/**
 *  A `IMovementRestrictor` that checks for overlapping elements. Move operations
 *  are only valid if the element does not collide with another element after moving.
 */
let NoOverlapMovementRestrictor = class NoOverlapMovementRestrictor {
    constructor() {
        this.cssClasses = ['movement-not-allowed'];
    }
    validate(element, newLocation) {
        if (!(0, sprotty_1.isMoveable)(element) || !newLocation) {
            return false;
        }
        // Create ghost element at the newLocation
        const dimensions = (0, sprotty_1.isBoundsAware)(element) ? element.bounds : { width: 1, height: 1 };
        const ghostElement = Object.create(element);
        ghostElement.bounds = { ...dimensions, ...newLocation };
        ghostElement.type = 'Ghost';
        ghostElement.id = element.id;
        return !Array.from(element.root.index
            .all()
            .filter(node => node.id !== ghostElement.id && node !== ghostElement.root && node instanceof sprotty_1.GNode)
            .map(node => node)).some(e => this.areOverlapping(e, ghostElement));
    }
    isBoundsRelevant(element, ghostElement) {
        return element.id !== ghostElement.id && element !== ghostElement.root && element instanceof sprotty_1.GNode && (0, sprotty_1.isBoundsAware)(element);
    }
    areOverlapping(element1, element2) {
        return sprotty_1.Bounds.overlap((0, viewpoint_util_1.toAbsoluteBounds)(element1), (0, viewpoint_util_1.toAbsoluteBounds)(element2));
    }
};
exports.NoOverlapMovementRestrictor = NoOverlapMovementRestrictor;
exports.NoOverlapMovementRestrictor = NoOverlapMovementRestrictor = __decorate([
    (0, inversify_1.injectable)()
], NoOverlapMovementRestrictor);
/**
 * Utility function to create an action that applies the given {@link IMovementRestrictor.cssClasses} to the given element.
 * @param element The element on which the css classes should be applied.
 * @param movementRestrictor The movement restrictor whose cssClasses should be applied.
 * @returns The corresponding {@link ModifyCSSFeedbackAction}
 */
function createMovementRestrictionFeedback(element, movementRestrictor) {
    const elements = [element];
    if (element instanceof sprotty_1.GParentElement) {
        element.children.filter(child => child instanceof model_1.GResizeHandle).forEach(e => elements.push(e));
    }
    return css_feedback_1.ModifyCSSFeedbackAction.create({ elements, add: movementRestrictor.cssClasses });
}
/**
 * Utility function to create an action that removes the given {@link IMovementRestrictor.cssClasses} from the given element.
 * @param element The element from which the css classes should be removed.
 * @param movementRestrictor The movement restrictor whose cssClasses should be removed.
 * @returns The corresponding {@link ModifyCSSFeedbackAction}
 */
function removeMovementRestrictionFeedback(element, movementRestrictor) {
    const elements = [element];
    if (element instanceof sprotty_1.GParentElement) {
        element.children.filter(child => child instanceof model_1.GResizeHandle).forEach(e => elements.push(e));
    }
    return css_feedback_1.ModifyCSSFeedbackAction.create({ elements, remove: movementRestrictor.cssClasses });
}
function movementRestrictionFeedback(element, movementRestrictor, valid) {
    return valid
        ? removeMovementRestrictionFeedback(element, movementRestrictor)
        : createMovementRestrictionFeedback(element, movementRestrictor);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/point-position-updater.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/point-position-updater.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable @typescript-eslint/no-shadow */
/* eslint-disable import/no-deprecated */
/* eslint-disable deprecation/deprecation */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PointPositionUpdater = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const html_utils_1 = __webpack_require__(/*! ../../utils/html-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/html-utils.js");
const model_1 = __webpack_require__(/*! ../helper-lines/model */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/model.js");
const position_snapper_1 = __webpack_require__(/*! ./position-snapper */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/position-snapper.js");
const snap_1 = __webpack_require__(/*! ./snap */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/snap.js");
/**
 * This class can be used to calculate the current position, when an element is
 * moved. This includes node movements, node resizing (resize handle movement)
 * or edge routing-point movements.
 *
 * You can initialize a this class with a optional {@link ISnapper}. If a
 * snapper is present, the positions will be snapped to the defined grid.
 *
 * @deprecated The use of this class is discouraged. Use the {@link ChangeBoundsManager.createTracker}
 * instead which centralized a few aspects of the tracking.
 */
class PointPositionUpdater {
    constructor(first, helperLineManager) {
        this.positionDelta = { x: 0, y: 0 };
        this.positionSnapper = first instanceof position_snapper_1.PositionSnapper ? first : new position_snapper_1.PositionSnapper(first, helperLineManager);
    }
    updateLastDragPosition(first) {
        this.lastDragPosition = (0, html_utils_1.isMouseEvent)(first) ? { x: first.pageX, y: first.pageY } : first;
    }
    /**
     * Check if the mouse is currently not in a drag mode.
     * @returns true if the last drag position is undefined
     */
    isLastDragPositionUndefined() {
        return this.lastDragPosition === undefined;
    }
    /**
     * Reset the updater for new movements.
     * This method is normally called in the `mouseUp` event.
     */
    resetPosition() {
        this.lastDragPosition = undefined;
        this.positionDelta = { x: 0, y: 0 };
    }
    updatePosition(target, second, third, fourth) {
        if (!this.lastDragPosition) {
            return undefined;
        }
        const mousePosition = (0, html_utils_1.isMouseEvent)(second) ? { x: second.pageX, y: second.pageY } : second;
        const shouldSnap = typeof third === 'boolean' ? third : (0, snap_1.useSnap)(second);
        const direction = typeof third !== 'boolean' ? third : fourth;
        // calculate update to last drag position
        const deltaToLastPosition = (0, gmodel_util_1.calculateDeltaBetweenPoints)(mousePosition, this.lastDragPosition, target);
        this.lastDragPosition = mousePosition;
        if (sprotty_1.Point.equals(deltaToLastPosition, sprotty_1.Point.ORIGIN)) {
            return undefined;
        }
        // accumulate position delta with latest delta
        this.positionDelta.x += deltaToLastPosition.x;
        this.positionDelta.y += deltaToLastPosition.y;
        const directions = direction !== null && direction !== void 0 ? direction : (0, model_1.getDirectionOf)(this.positionDelta);
        // only send update if the position actually changes
        // otherwise accumulate delta until we get to an update
        const positionUpdate = this.positionSnapper.snapDelta(this.positionDelta, target, shouldSnap, directions);
        if (sprotty_1.Point.equals(positionUpdate, sprotty_1.Point.ORIGIN)) {
            return undefined;
        }
        // we update our position so we update our delta by the snapped position
        this.positionDelta.x -= positionUpdate.x;
        this.positionDelta.y -= positionUpdate.y;
        return positionUpdate;
    }
}
exports.PointPositionUpdater = PointPositionUpdater;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/position-snapper.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/position-snapper.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PositionSnapper = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ../helper-lines/model */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/model.js");
/**
 * @deprecated The use of this class is discouraged. Use the {@link ChangeBoundsManager.createTracker}
 * instead which centralized a few aspects of the tracking.
 */
let PositionSnapper = class PositionSnapper {
    constructor(snapper, helperLineManager) {
        this.snapper = snapper;
        this.helperLineManager = helperLineManager;
    }
    snapPosition(position, element, isSnap = true) {
        return isSnap && this.snapper ? this.snapper.snap(position, element) : { x: position.x, y: position.y };
    }
    snapDelta(positionDelta, element, isSnap, directions) {
        const delta = this.snapPosition(positionDelta, element, isSnap);
        const minimumDelta = this.getMinimumDelta(element, isSnap, directions);
        if (!minimumDelta) {
            return delta;
        }
        delta.x = Math.abs(delta.x) >= minimumDelta.x ? delta.x : 0;
        delta.y = Math.abs(delta.y) >= minimumDelta.y ? delta.y : 0;
        return delta;
    }
    getMinimumDelta(target, isSnap, directions) {
        return this.getHelperLineMinimum(target, isSnap, directions);
    }
    getHelperLineMinimum(target, isSnap, directions) {
        if (!this.helperLineManager) {
            return undefined;
        }
        const helperLines = target.root.children.filter(child => (0, model_1.isHelperLine)(child));
        if (helperLines.length === 0) {
            return undefined;
        }
        const minimum = { x: 0, y: 0 };
        if (directions.includes(model_1.Direction.Left) && helperLines.some(line => line.isLeft || line.isCenter)) {
            minimum.x = this.helperLineManager.getMinimumMoveDelta(target, isSnap, model_1.Direction.Left);
        }
        else if (directions.includes(model_1.Direction.Right) && helperLines.some(line => line.isRight || line.isCenter)) {
            minimum.x = this.helperLineManager.getMinimumMoveDelta(target, isSnap, model_1.Direction.Right);
        }
        if (directions.includes(model_1.Direction.Up) && helperLines.some(line => line.isTop || line.isMiddle)) {
            minimum.y = this.helperLineManager.getMinimumMoveDelta(target, isSnap, model_1.Direction.Up);
        }
        else if (directions.includes(model_1.Direction.Down) && helperLines.some(line => line.isBottom || line.isMiddle)) {
            minimum.y = this.helperLineManager.getMinimumMoveDelta(target, isSnap, model_1.Direction.Down);
        }
        return minimum;
    }
};
exports.PositionSnapper = PositionSnapper;
exports.PositionSnapper = PositionSnapper = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.optional)()),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.ISnapper)),
    __param(1, (0, inversify_1.optional)()),
    __param(1, (0, inversify_1.inject)(sprotty_1.TYPES.IHelperLineManager)),
    __metadata("design:paramtypes", [Object, Object])
], PositionSnapper);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-default-tool.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-default-tool.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DefaultResizeKeyTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultResizeKeyTool = exports.DefaultResizeKeyListener = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const selection_service_1 = __webpack_require__(/*! ../../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const base_tools_1 = __webpack_require__(/*! ../../tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const model_1 = __webpack_require__(/*! ../model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const resize_tool_1 = __webpack_require__(/*! ./resize-tool */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-tool.js");
let DefaultResizeKeyListener = class DefaultResizeKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        const selectedElementsIds = this.selectionService
            .getSelectedElements()
            .filter(model_1.isResizable)
            .map(e => e.id);
        if (selectedElementsIds.length > 0) {
            if (this.matchesActivateResizeModeKeystroke(event)) {
                return [tool_1.EnableToolsAction.create([resize_tool_1.ResizeKeyTool.ID])];
            }
        }
        return [];
    }
    matchesActivateResizeModeKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyA', 'alt');
    }
};
exports.DefaultResizeKeyListener = DefaultResizeKeyListener;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], DefaultResizeKeyListener.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], DefaultResizeKeyListener.prototype, "selectionService", void 0);
exports.DefaultResizeKeyListener = DefaultResizeKeyListener = __decorate([
    (0, inversify_1.injectable)()
], DefaultResizeKeyListener);
let DefaultResizeKeyTool = DefaultResizeKeyTool_1 = class DefaultResizeKeyTool extends base_tools_1.BaseEditTool {
    get id() {
        return DefaultResizeKeyTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.keyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(DefaultResizeKeyTool_1.TOKEN, [
            {
                shortcuts: ['ALT', 'A'],
                description: messages_1.messages.resize.shortcut_activate,
                group: messages_1.messages.shortcut.group_resize,
                position: 0
            }
        ])));
    }
};
exports.DefaultResizeKeyTool = DefaultResizeKeyTool;
DefaultResizeKeyTool.ID = 'glsp.default-resize-key-tool';
DefaultResizeKeyTool.TOKEN = Symbol.for(DefaultResizeKeyTool_1.name);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Function)
], DefaultResizeKeyTool.prototype, "shortcutManager", void 0);
__decorate([
    (0, inversify_1.inject)(DefaultResizeKeyListener),
    __metadata("design:type", DefaultResizeKeyListener)
], DefaultResizeKeyTool.prototype, "keyListener", void 0);
exports.DefaultResizeKeyTool = DefaultResizeKeyTool = DefaultResizeKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], DefaultResizeKeyTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-handler.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-handler.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResizeElementHandler = exports.ResizeElementAction = exports.ResizeType = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const lodash_1 = __webpack_require__(/*! lodash */ "../node_modules/lodash/lodash.js");
const editor_context_service_1 = __webpack_require__(/*! ../../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const layout_utils_1 = __webpack_require__(/*! ../../../utils/layout-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/layout-utils.js");
const grid_1 = __webpack_require__(/*! ../../grid/grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
var ResizeType;
(function (ResizeType) {
    ResizeType[ResizeType["Increase"] = 0] = "Increase";
    ResizeType[ResizeType["Decrease"] = 1] = "Decrease";
    ResizeType[ResizeType["MinSize"] = 2] = "MinSize";
})(ResizeType || (exports.ResizeType = ResizeType = {}));
var ResizeElementAction;
(function (ResizeElementAction) {
    ResizeElementAction.KIND = 'resizeElementAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ResizeElementAction.KIND);
    }
    ResizeElementAction.is = is;
    function create(elementIds, resizeType) {
        return { kind: ResizeElementAction.KIND, elementIds, resizeType };
    }
    ResizeElementAction.create = create;
})(ResizeElementAction || (exports.ResizeElementAction = ResizeElementAction = {}));
/*
 * The ResizeElementHandler class is an implementation of the IActionHandler interface that handles
 * resizing of elements.
 */
let ResizeElementHandler = class ResizeElementHandler {
    constructor() {
        this.grid = grid_1.Grid.DEFAULT;
    }
    init() {
        this.resizeFeedback = this.feedbackDispatcher.createEmitter();
    }
    handle(action) {
        if (ResizeElementAction.is(action)) {
            this.handleResizeElement(action);
        }
    }
    handleResizeElement(action) {
        var _a;
        const elements = (0, gmodel_util_1.getElements)(this.editorContextService.modelRoot.index, action.elementIds, gmodel_util_1.isSelectableAndBoundsAware);
        const elementAndBounds = this.computeElementAndBounds(elements, action);
        this.resizeFeedback.add(sprotty_1.SetBoundsAction.create(elementAndBounds)).submit();
        (_a = this.debouncedChangeBounds) === null || _a === void 0 ? void 0 : _a.cancel();
        this.debouncedChangeBounds = (0, lodash_1.debounce)(() => {
            this.resizeFeedback.dispose();
            this.dispatcher.dispatchAll([sprotty_1.ChangeBoundsOperation.create(elementAndBounds)]);
            this.debouncedChangeBounds = undefined;
        }, 300);
        this.debouncedChangeBounds();
    }
    computeElementAndBounds(elements, action) {
        const elementAndBounds = [];
        elements.forEach(element => {
            const { x, y, width: oldWidth, height: oldHeight } = element.bounds;
            let width = 0;
            let height = 0;
            if (action.resizeType === ResizeType.Decrease) {
                width = oldWidth - this.grid.x;
                height = oldHeight - this.grid.y;
            }
            else if (action.resizeType === ResizeType.Increase) {
                width = oldWidth + this.grid.x;
                height = oldHeight + this.grid.y;
            }
            else if (action.resizeType === ResizeType.MinSize) {
                width = (0, layout_utils_1.minWidth)(element);
                height = (0, layout_utils_1.minHeight)(element);
            }
            if (this.isValidBoundChange(element, { x, y }, { width, height })) {
                const resizeElement = { id: element.id, bounds: { x, y, width, height } };
                elementAndBounds.push((0, gmodel_util_1.toElementAndBounds)(resizeElement));
            }
        });
        return elementAndBounds;
    }
    isValidBoundChange(element, newPosition, newSize) {
        return (0, layout_utils_1.isValidSize)(element, newSize) && (0, layout_utils_1.isValidMove)(element, newPosition);
    }
};
exports.ResizeElementHandler = ResizeElementHandler;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ResizeElementHandler.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ResizeElementHandler.prototype, "dispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], ResizeElementHandler.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ResizeElementHandler.prototype, "grid", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ISnapper),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ResizeElementHandler.prototype, "snapper", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ResizeElementHandler.prototype, "init", null);
exports.ResizeElementHandler = ResizeElementHandler = __decorate([
    (0, inversify_1.injectable)()
], ResizeElementHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-module.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-module.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.standaloneResizeModule = exports.resizeModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const resize_default_tool_1 = __webpack_require__(/*! ./resize-default-tool */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-default-tool.js");
const resize_handler_1 = __webpack_require__(/*! ./resize-handler */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-handler.js");
const resize_tool_1 = __webpack_require__(/*! ./resize-tool */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-tool.js");
/**
 * Handles resize actions.
 */
exports.resizeModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.configureActionHandler)(context, resize_handler_1.ResizeElementAction.KIND, resize_handler_1.ResizeElementHandler);
}, { featureId: Symbol('resize') });
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.standaloneResizeModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, resize_default_tool_1.DefaultResizeKeyTool);
    context.bind(resize_default_tool_1.DefaultResizeKeyListener).toSelf();
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.ITool, resize_tool_1.ResizeKeyTool);
    context.bind(resize_tool_1.ResizeKeyListener).toSelf();
}, { featureId: Symbol('standaloneResize'), requires: exports.resizeModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-tool.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-tool.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ResizeKeyTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResizeKeyTool = exports.ResizeKeyListener = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../node_modules/vscode-jsonrpc/lib/browser/main.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const selection_service_1 = __webpack_require__(/*! ../../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const toast_handler_1 = __webpack_require__(/*! ../../accessibility/toast/toast-handler */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js");
const base_tools_1 = __webpack_require__(/*! ../../tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const model_1 = __webpack_require__(/*! ../model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const resize_handler_1 = __webpack_require__(/*! ./resize-handler */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-handler.js");
let ResizeKeyListener = class ResizeKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        const actions = [];
        const selectedElementsIds = this.selectionService
            .getSelectedElements()
            .filter(model_1.isResizable)
            .map(e => e.id);
        if (selectedElementsIds.length > 0) {
            if (this.matchesIncreaseSizeKeystroke(event)) {
                actions.push(resize_handler_1.ResizeElementAction.create(selectedElementsIds, resize_handler_1.ResizeType.Increase));
            }
            else if (this.matchesDecreaseSizeKeystroke(event)) {
                actions.push(resize_handler_1.ResizeElementAction.create(selectedElementsIds, resize_handler_1.ResizeType.Decrease));
            }
            else if (this.matchesMinSizeKeystroke(event)) {
                actions.push(resize_handler_1.ResizeElementAction.create(selectedElementsIds, resize_handler_1.ResizeType.MinSize));
            }
        }
        return actions;
    }
    enable() {
        return [
            toast_handler_1.ShowToastMessageAction.create({
                id: ResizeKeyTool.TOKEN,
                message: messages_1.messages.resize.resize_mode_activated
            })
        ];
    }
    disable() {
        return [
            toast_handler_1.ShowToastMessageAction.createWithTimeout({
                id: ResizeKeyTool.TOKEN,
                message: messages_1.messages.resize.resize_mode_deactivated
            })
        ];
    }
    matchesIncreaseSizeKeystroke(event) {
        /** here event.key is used for '+', as keycode 187 is already declared for 'Equals' in {@link matchesKeystroke}.*/
        return event.key === '+' || (0, sprotty_1.matchesKeystroke)(event, 'NumpadAdd');
    }
    matchesMinSizeKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Digit0', 'ctrl') || (0, sprotty_1.matchesKeystroke)(event, 'Numpad0', 'ctrl');
    }
    matchesDecreaseSizeKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Minus') || (0, sprotty_1.matchesKeystroke)(event, 'NumpadSubtract');
    }
};
exports.ResizeKeyListener = ResizeKeyListener;
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], ResizeKeyListener.prototype, "selectionService", void 0);
exports.ResizeKeyListener = ResizeKeyListener = __decorate([
    (0, inversify_1.injectable)()
], ResizeKeyListener);
let ResizeKeyTool = ResizeKeyTool_1 = class ResizeKeyTool extends base_tools_1.BaseEditTool {
    get id() {
        return ResizeKeyTool_1.ID;
    }
    enable() {
        this.dispatchActions(this.keyListener.enable());
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.keyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(ResizeKeyTool_1.TOKEN, [
            {
                shortcuts: ['Escape'],
                description: messages_1.messages.resize.shortcut_deactivate,
                group: messages_1.messages.shortcut.group_resize,
                position: 0
            },
            {
                shortcuts: ['+'],
                description: messages_1.messages.resize.shortcut_increase,
                group: messages_1.messages.shortcut.group_resize,
                position: 1
            },
            {
                shortcuts: ['-'],
                description: messages_1.messages.resize.shortcut_decrease,
                group: messages_1.messages.shortcut.group_resize,
                position: 2
            },
            {
                shortcuts: ['CTRL', '0'],
                description: messages_1.messages.resize.shortcut_reset,
                group: messages_1.messages.shortcut.group_resize,
                position: 3
            }
        ])), vscode_jsonrpc_1.Disposable.create(() => {
            this.dispatchActions(this.keyListener.disable());
        }));
    }
};
exports.ResizeKeyTool = ResizeKeyTool;
ResizeKeyTool.ID = 'glsp.resize-key-tool';
ResizeKeyTool.TOKEN = Symbol.for(ResizeKeyTool_1.name);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Function)
], ResizeKeyTool.prototype, "shortcutManager", void 0);
__decorate([
    (0, inversify_1.inject)(ResizeKeyListener),
    __metadata("design:type", ResizeKeyListener)
], ResizeKeyTool.prototype, "keyListener", void 0);
exports.ResizeKeyTool = ResizeKeyTool = ResizeKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], ResizeKeyTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/snap.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/snap.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.useSnap = useSnap;
exports.unsnapModifier = unsnapModifier;
/**
 * @deprecated Use {@link ChangeBoundsManager.useSnap} instead which may be customized.
 */
function useSnap(event) {
    return !event.shiftKey;
}
/**
 * @deprecated Use {@link ChangeBoundsManager.unsnapModifier} instead which may be customized.
 */
function unsnapModifier() {
    return 'shift';
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/tracker.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/change-bounds/tracker.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagramMovementCalculator = exports.MovementCalculator = void 0;
/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
class MovementCalculator {
    setPosition(position) {
        this.position = { ...position };
    }
    updatePosition(param) {
        var _a;
        const vector = sprotty_1.Vector.is(param) ? param : param.vector;
        this.setPosition(sprotty_1.Point.add((_a = this.position) !== null && _a !== void 0 ? _a : sprotty_1.Point.ORIGIN, vector));
    }
    get hasPosition() {
        return this.position !== undefined;
    }
    calculateMoveTo(targetPosition) {
        return !this.position ? sprotty_1.Movement.ZERO : sprotty_1.Point.move(this.position, targetPosition);
    }
    dispose() {
        this.position = undefined;
    }
}
exports.MovementCalculator = MovementCalculator;
class DiagramMovementCalculator extends MovementCalculator {
    constructor(positionTracker) {
        super();
        this.positionTracker = positionTracker;
    }
    init() {
        const position = this.positionTracker.lastPositionOnDiagram;
        if (position) {
            this.setPosition(position);
        }
    }
    calculateMoveToCurrent() {
        const targetPosition = this.positionTracker.lastPositionOnDiagram;
        return targetPosition ? this.calculateMoveTo(targetPosition) : sprotty_1.Movement.ZERO;
    }
    reset() {
        this.dispose();
    }
}
exports.DiagramMovementCalculator = DiagramMovementCalculator;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette-module.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette-module.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.commandPaletteModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../css/command-palette.css */ "../node_modules/@eclipse-glsp/client/css/command-palette.css");
const command_palette_1 = __webpack_require__(/*! ./command-palette */ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette.js");
const command_palette_tool_1 = __webpack_require__(/*! ./command-palette-tool */ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette-tool.js");
const server_command_palette_provider_1 = __webpack_require__(/*! ./server-command-palette-provider */ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/server-command-palette-provider.js");
exports.commandPaletteModule = new sprotty_1.FeatureModule(bind => {
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IUIExtension, command_palette_1.GlspCommandPalette);
    bind(sprotty_1.TYPES.ICommandPaletteActionProviderRegistry).to(sprotty_1.CommandPaletteActionProviderRegistry).inSingletonScope();
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.ICommandPaletteActionProvider, server_command_palette_provider_1.ServerCommandPaletteActionProvider);
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IDefaultTool, command_palette_tool_1.CommandPaletteTool);
}, { featureId: Symbol('commandPalette') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette-tool.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette-tool.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CommandPaletteTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandPaletteTool = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
let CommandPaletteTool = CommandPaletteTool_1 = class CommandPaletteTool {
    postConstruct() {
        this.commandPaletteKeyListener = this.createCommandPaletteKeyListener();
    }
    get id() {
        return CommandPaletteTool_1.ID;
    }
    enable() {
        this.keyTool.register(this.commandPaletteKeyListener);
    }
    disable() {
        this.keyTool.deregister(this.commandPaletteKeyListener);
    }
    createCommandPaletteKeyListener() {
        return new sprotty_1.CommandPaletteKeyListener();
    }
};
exports.CommandPaletteTool = CommandPaletteTool;
CommandPaletteTool.ID = 'glsp.command-palette-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], CommandPaletteTool.prototype, "keyTool", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CommandPaletteTool.prototype, "postConstruct", null);
exports.CommandPaletteTool = CommandPaletteTool = CommandPaletteTool_1 = __decorate([
    (0, inversify_1.injectable)()
], CommandPaletteTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlspCommandPalette = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
let GlspCommandPalette = class GlspCommandPalette extends sprotty_1.CommandPalette {
    initializeContents(containerElement) {
        super.initializeContents(containerElement);
        containerElement.classList.add(ui_extension_1.CSS_UI_EXTENSION_CLASS);
    }
    setContainerVisible(visible) {
        var _a, _b;
        if (visible) {
            (_a = this.containerElement) === null || _a === void 0 ? void 0 : _a.classList.remove(ui_extension_1.CSS_HIDDEN_EXTENSION_CLASS);
        }
        else {
            (_b = this.containerElement) === null || _b === void 0 ? void 0 : _b.classList.add(ui_extension_1.CSS_HIDDEN_EXTENSION_CLASS);
        }
    }
};
exports.GlspCommandPalette = GlspCommandPalette;
exports.GlspCommandPalette = GlspCommandPalette = __decorate([
    (0, inversify_1.injectable)()
], GlspCommandPalette);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/server-command-palette-provider.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/command-palette/server-command-palette-provider.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerCommandPaletteActionProvider = exports.ServerCommandPalette = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
var ServerCommandPalette;
(function (ServerCommandPalette) {
    ServerCommandPalette.CONTEXT_ID = 'command-palette';
    ServerCommandPalette.TEXT = 'text';
    ServerCommandPalette.INDEX = 'index';
})(ServerCommandPalette || (exports.ServerCommandPalette = ServerCommandPalette = {}));
let ServerCommandPaletteActionProvider = class ServerCommandPaletteActionProvider {
    async getActions(_root, text, _lastMousePosition, index) {
        const requestAction = sprotty_1.RequestContextActions.create({
            contextId: ServerCommandPalette.CONTEXT_ID,
            editorContext: this.editorContext.get({
                [ServerCommandPalette.TEXT]: text,
                [ServerCommandPalette.INDEX]: index ? index : 0
            })
        });
        const response = await this.actionDispatcher.requestUntil(requestAction);
        return response ? this.getPaletteActionsFromResponse(response) : [];
    }
    getPaletteActionsFromResponse(action) {
        if (sprotty_1.SetContextActions.is(action)) {
            return action.actions;
        }
        return [];
    }
};
exports.ServerCommandPaletteActionProvider = ServerCommandPaletteActionProvider;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ServerCommandPaletteActionProvider.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ServerCommandPaletteActionProvider.prototype, "editorContext", void 0);
exports.ServerCommandPaletteActionProvider = ServerCommandPaletteActionProvider = __decorate([
    (0, inversify_1.injectable)()
], ServerCommandPaletteActionProvider);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/context-menu-module.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/context-menu/context-menu-module.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contextMenuModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const glsp_context_menu_mouse_listener_1 = __webpack_require__(/*! ./glsp-context-menu-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/glsp-context-menu-mouse-listener.js");
const server_context_menu_provider_1 = __webpack_require__(/*! ./server-context-menu-provider */ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/server-context-menu-provider.js");
exports.contextMenuModule = new sprotty_1.FeatureModule(bind => {
    bind(sprotty_1.TYPES.IContextMenuServiceProvider).toProvider(ctx => async () => {
        if (ctx.container.isBound(sprotty_1.TYPES.IContextMenuService)) {
            return ctx.container.get(sprotty_1.TYPES.IContextMenuService);
        }
        console.warn("'TYPES.IContextMenuService' is not bound. Use no-op implementation instead");
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        return { show: () => { } };
    });
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.MouseListener, glsp_context_menu_mouse_listener_1.GLSPContextMenuMouseListener);
    bind(sprotty_1.TYPES.IContextMenuProviderRegistry).to(sprotty_1.ContextMenuProviderRegistry);
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IContextMenuItemProvider, server_context_menu_provider_1.ServerContextMenuItemProvider);
}, { featureId: Symbol('contextMenu') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/delete-element-context-menu.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/context-menu/delete-element-context-menu.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteElementContextMenuItemProvider = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
let DeleteElementContextMenuItemProvider = class DeleteElementContextMenuItemProvider {
    async getItems(_root, _lastMousePosition) {
        return [this.createDeleteMenuItem()];
    }
    createDeleteMenuItem() {
        return {
            id: 'delete',
            label: 'Delete',
            sortString: 'd',
            group: 'edit',
            actions: [sprotty_1.DeleteElementOperation.create(this.editorContext.selectedElements.map(e => e.id))],
            isEnabled: () => !this.editorContext.isReadonly && this.editorContext.selectedElements.length > 0
        };
    }
};
exports.DeleteElementContextMenuItemProvider = DeleteElementContextMenuItemProvider;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IEditorContextServiceProvider),
    __metadata("design:type", Function)
], DeleteElementContextMenuItemProvider.prototype, "editorContextServiceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], DeleteElementContextMenuItemProvider.prototype, "editorContext", void 0);
exports.DeleteElementContextMenuItemProvider = DeleteElementContextMenuItemProvider = __decorate([
    (0, inversify_1.injectable)()
], DeleteElementContextMenuItemProvider);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/glsp-context-menu-mouse-listener.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/context-menu/glsp-context-menu-mouse-listener.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPContextMenuMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const focus_state_change_action_1 = __webpack_require__(/*! ../../base/focus/focus-state-change-action */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js");
let GLSPContextMenuMouseListener = class GLSPContextMenuMouseListener extends sprotty_1.MouseListener {
    initialize() {
        var _a;
        (_a = this.contextMenuServiceProvider) === null || _a === void 0 ? void 0 : _a.call(this).then(menuService => (this.menuService = menuService));
    }
    /**
     * Opens the context menu.
     */
    contextMenu(target, event) {
        return this.openContextMenu(target, event);
    }
    /**
     * Opens the context menu.
     *
     *   - update selection state (if context menu target is selectable)
     *   - query the context menu service and the context menu elements
     *   - show the context menu
     *   - send a focus state change to indicate that the diagram becomes inactive, once the context menu is shown
     *
     * When the context menu is closed, we focus the diagram element again.
     */
    openContextMenu(target, event) {
        if (!this.menuService || !this.menuProvider) {
            return [];
        }
        return [this.showContextMenuItems(target, event)];
    }
    async showContextMenuItems(target, event) {
        await this.handleContextElementSelection(target, event);
        const mousePosition = { x: event.x, y: event.y };
        const menuItems = await this.menuProvider.getItems(target.root, mousePosition);
        this.menuService.show(menuItems, mousePosition, () => this.focusEventTarget(event));
        return focus_state_change_action_1.FocusStateChangedAction.create(false);
    }
    // Clear selection if the context menu target is not selectable
    // Otherwise either maintain current selection if target is already selected or single select the current target.
    async handleContextElementSelection(target, event) {
        const selectableTarget = (0, sprotty_1.findParentByFeature)(target, sprotty_1.isSelectable);
        if (!selectableTarget) {
            return this.actionDispatcher.dispatch(sprotty_1.SelectAction.setSelection([]));
        }
        if (!selectableTarget.selected) {
            return this.actionDispatcher.dispatch(sprotty_1.SelectAction.setSelection([selectableTarget.id]));
        }
        return;
    }
    focusEventTarget(event) {
        const targetElement = event.target instanceof SVGElement ? event.target : undefined;
        const svgParentElement = targetElement === null || targetElement === void 0 ? void 0 : targetElement.closest('svg');
        if (svgParentElement) {
            svgParentElement.focus();
        }
    }
};
exports.GLSPContextMenuMouseListener = GLSPContextMenuMouseListener;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IContextMenuServiceProvider),
    (0, inversify_1.optional)(),
    __metadata("design:type", Function)
], GLSPContextMenuMouseListener.prototype, "contextMenuServiceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IContextMenuProviderRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.ContextMenuProviderRegistry)
], GLSPContextMenuMouseListener.prototype, "menuProvider", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], GLSPContextMenuMouseListener.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GLSPContextMenuMouseListener.prototype, "initialize", null);
exports.GLSPContextMenuMouseListener = GLSPContextMenuMouseListener = __decorate([
    (0, inversify_1.injectable)()
], GLSPContextMenuMouseListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/server-context-menu-provider.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/context-menu/server-context-menu-provider.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerContextMenuItemProvider = exports.ServerContextMenu = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
var ServerContextMenu;
(function (ServerContextMenu) {
    ServerContextMenu.CONTEXT_ID = 'context-menu';
})(ServerContextMenu || (exports.ServerContextMenu = ServerContextMenu = {}));
let ServerContextMenuItemProvider = class ServerContextMenuItemProvider {
    async getItems(root, _lastMousePosition) {
        const selectedElementIds = Array.from(root.index
            .all()
            .filter(sprotty_1.isSelected)
            .map(e => e.id));
        const editorContext = this.editorContext.getWithSelection(selectedElementIds);
        const requestAction = sprotty_1.RequestContextActions.create({ contextId: ServerContextMenu.CONTEXT_ID, editorContext });
        const response = await this.actionDispatcher.requestUntil(requestAction);
        return response ? this.getContextActionsFromResponse(response) : [];
    }
    getContextActionsFromResponse(action) {
        if (sprotty_1.SetContextActions.is(action)) {
            return action.actions;
        }
        return [];
    }
};
exports.ServerContextMenuItemProvider = ServerContextMenuItemProvider;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ServerContextMenuItemProvider.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ServerContextMenuItemProvider.prototype, "editorContext", void 0);
exports.ServerContextMenuItemProvider = ServerContextMenuItemProvider = __decorate([
    (0, inversify_1.injectable)()
], ServerContextMenuItemProvider);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-context-menu.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-context-menu.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CopyPasteContextMenuItemProvider = exports.InvokeCopyPasteActionHandler = exports.InvokeCopyPasteAction = void 0;
exports.supportsCopy = supportsCopy;
exports.supportsCut = supportsCut;
exports.supportsPaste = supportsPaste;
exports.isNative = isNative;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable deprecation/deprecation */
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var InvokeCopyPasteAction;
(function (InvokeCopyPasteAction) {
    InvokeCopyPasteAction.KIND = 'invokeCopyPaste';
    function is(object) {
        return sprotty_1.Action.hasKind(object, InvokeCopyPasteAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'command');
    }
    InvokeCopyPasteAction.is = is;
    function create(command) {
        return { kind: InvokeCopyPasteAction.KIND, command };
    }
    InvokeCopyPasteAction.create = create;
})(InvokeCopyPasteAction || (exports.InvokeCopyPasteAction = InvokeCopyPasteAction = {}));
let InvokeCopyPasteActionHandler = class InvokeCopyPasteActionHandler {
    handle(action) {
        switch (action.command) {
            case 'copy':
                if (supportsCopy()) {
                    document.execCommand('copy');
                }
                else {
                    this.notifyUserToUseShortcut('copy');
                }
                break;
            case 'paste':
                if (supportsPaste()) {
                    document.execCommand('paste');
                }
                else {
                    this.notifyUserToUseShortcut('paste');
                }
                break;
            case 'cut':
                if (supportsCut()) {
                    document.execCommand('cut');
                }
                else {
                    this.notifyUserToUseShortcut('cut');
                }
                break;
        }
    }
    notifyUserToUseShortcut(operation) {
        const message = `Please use the browser's ${operation} command or shortcut.`;
        const timeout = 10000;
        const severity = 'WARNING';
        this.dispatcher.dispatchAll([sprotty_1.StatusAction.create(message, { severity, timeout }), sprotty_1.MessageAction.create(message, { severity })]);
    }
};
exports.InvokeCopyPasteActionHandler = InvokeCopyPasteActionHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], InvokeCopyPasteActionHandler.prototype, "dispatcher", void 0);
exports.InvokeCopyPasteActionHandler = InvokeCopyPasteActionHandler = __decorate([
    (0, inversify_1.injectable)()
], InvokeCopyPasteActionHandler);
let CopyPasteContextMenuItemProvider = class CopyPasteContextMenuItemProvider {
    getItems(root, _lastMousePosition) {
        const hasSelectedElements = Array.from(root.index.all().filter(sprotty_1.isSelected)).length > 0;
        return Promise.resolve([
            this.createCopyMenuItem(hasSelectedElements),
            this.createCutMenuItem(hasSelectedElements),
            this.createPasteMenuItem()
        ]);
    }
    createPasteMenuItem() {
        return {
            id: 'paste',
            label: 'Paste',
            group: 'copy-paste',
            actions: [InvokeCopyPasteAction.create('paste')],
            isEnabled: () => true
        };
    }
    createCutMenuItem(hasSelectedElements) {
        return {
            id: 'cut',
            label: 'Cut',
            group: 'copy-paste',
            actions: [InvokeCopyPasteAction.create('cut')],
            isEnabled: () => hasSelectedElements
        };
    }
    createCopyMenuItem(hasSelectedElements) {
        return {
            id: 'copy',
            label: 'Copy',
            group: 'copy-paste',
            actions: [InvokeCopyPasteAction.create('copy')],
            isEnabled: () => hasSelectedElements
        };
    }
};
exports.CopyPasteContextMenuItemProvider = CopyPasteContextMenuItemProvider;
exports.CopyPasteContextMenuItemProvider = CopyPasteContextMenuItemProvider = __decorate([
    (0, inversify_1.injectable)()
], CopyPasteContextMenuItemProvider);
function supportsCopy() {
    return isNative() || document.queryCommandSupported('copy');
}
function supportsCut() {
    return isNative() || document.queryCommandSupported('cut');
}
function supportsPaste() {
    const isChrome = userAgent().indexOf('Chrome') >= 0;
    return isNative() || (!isChrome && document.queryCommandSupported('paste'));
}
function isNative() {
    return typeof window.process !== 'undefined';
}
function userAgent() {
    return typeof navigator !== 'undefined' ? navigator.userAgent : '';
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-handler.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-handler.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerCopyPasteHandler = exports.LocalClipboardService = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const uuid_1 = __webpack_require__(/*! uuid */ "../node_modules/uuid/dist/commonjs-browser/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
/**
 * A local implementation of the async clipboard interface.
 *
 * This implementation just stores the clipboard data in memory, but not in the clipboard.
 * This implementation can be used if you don't need to support cross-widget/browser/application
 * data transfer and you would like to avoid to require the permission of the user for accessing the
 * system clipboard asynchronously.
 *
 * In order to detect whether the user copied something else since we recorded the clipboard data
 * we put a uuid into the system clipboard synchronously. If on paste this ID has changed or is not
 * available anymore, we know that the user copied in another application or context, so we shouldn't
 * paste what we have stored locally and just return undefined.
 *
 * Real async clipboard service implementations can just ignore the ID that is passed and rely on the
 * system clipboard's content instead.
 */
let LocalClipboardService = class LocalClipboardService {
    clear() {
        this.currentId = undefined;
        this.data = undefined;
    }
    put(data, id) {
        this.currentId = id;
        this.data = data;
    }
    get(id) {
        if (id !== this.currentId) {
            return undefined;
        }
        return this.data;
    }
};
exports.LocalClipboardService = LocalClipboardService;
exports.LocalClipboardService = LocalClipboardService = __decorate([
    (0, inversify_1.injectable)()
], LocalClipboardService);
function toClipboardId(clipboardId) {
    return JSON.stringify({ clipboardId });
}
function isClipboardId(jsonData) {
    return jsonData !== undefined && 'clipboardId' in jsonData;
}
function getClipboardIdFromDataTransfer(dataTransfer) {
    const jsonString = dataTransfer.getData(CLIPBOARD_DATA_FORMAT);
    const jsonObject = jsonString ? JSON.parse(jsonString) : undefined;
    return isClipboardId(jsonObject) ? jsonObject.clipboardId : undefined;
}
const CLIPBOARD_DATA_FORMAT = 'text/plain';
let ServerCopyPasteHandler = class ServerCopyPasteHandler {
    handleCopy(event) {
        if (event.clipboardData && this.shouldCopy(event)) {
            const clipboardId = (0, uuid_1.v4)();
            event.clipboardData.setData(CLIPBOARD_DATA_FORMAT, toClipboardId(clipboardId));
            this.actionDispatcher
                .request(sprotty_1.RequestClipboardDataAction.create(this.editorContext.get()))
                .then(action => this.clipboardService.put(action.clipboardData, clipboardId));
            event.preventDefault();
        }
        else {
            if (event.clipboardData) {
                event.clipboardData.clearData();
            }
            this.clipboardService.clear();
        }
    }
    handleCut(event) {
        if (event.clipboardData && this.shouldCopy(event)) {
            this.handleCopy(event);
            this.actionDispatcher.dispatch(sprotty_1.CutOperation.create(this.editorContext.get()));
            event.preventDefault();
        }
    }
    handlePaste(event) {
        if (event.clipboardData && this.shouldPaste(event)) {
            const clipboardId = getClipboardIdFromDataTransfer(event.clipboardData);
            const clipboardData = this.clipboardService.get(clipboardId);
            if (clipboardData) {
                this.actionDispatcher.dispatch(sprotty_1.PasteOperation.create({ clipboardData, editorContext: this.editorContext.get() }));
            }
            event.preventDefault();
        }
    }
    shouldCopy(_event) {
        return this.editorContext.get().selectedElementIds.length > 0 && this.isDiagramActive();
    }
    shouldPaste(_event) {
        return this.isDiagramActive();
    }
    isDiagramActive() {
        var _a, _b;
        return ((_b = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.id) === this.viewerOptions.baseDiv;
    }
};
exports.ServerCopyPasteHandler = ServerCopyPasteHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ServerCopyPasteHandler.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ServerCopyPasteHandler.prototype, "viewerOptions", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IAsyncClipboardService),
    __metadata("design:type", Object)
], ServerCopyPasteHandler.prototype, "clipboardService", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ServerCopyPasteHandler.prototype, "editorContext", void 0);
exports.ServerCopyPasteHandler = ServerCopyPasteHandler = __decorate([
    (0, inversify_1.injectable)()
], ServerCopyPasteHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-modules.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-modules.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.standaloneCopyPasteModule = exports.copyPasteModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const copy_paste_handler_1 = __webpack_require__(/*! ./copy-paste-handler */ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-handler.js");
const copy_paste_standalone_1 = __webpack_require__(/*! ./copy-paste-standalone */ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-standalone.js");
exports.copyPasteModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    bind(sprotty_1.TYPES.ICopyPasteHandler).to(copy_paste_handler_1.ServerCopyPasteHandler);
    bind(sprotty_1.TYPES.IAsyncClipboardService).to(copy_paste_handler_1.LocalClipboardService).inSingletonScope();
}, { featureId: Symbol('copyPaste') });
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.standaloneCopyPasteModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IDiagramStartup, copy_paste_standalone_1.CopyPasteStartup);
    bind(sprotty_1.TYPES.IGModelRootListener).toService(copy_paste_standalone_1.CopyPasteStartup);
}, {
    featureId: Symbol('standaloneCopyPaste'),
    requires: exports.copyPasteModule
});


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-standalone.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-standalone.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CopyPasteStartup = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
/**
 * Startup service to hook up the copy&paste event handler
 */
let CopyPasteStartup = class CopyPasteStartup {
    constructor() {
        this.toDispose = new sprotty_1.DisposableCollection();
    }
    modelRootChanged(root) {
        if (root.id !== sprotty_1.EMPTY_ROOT.id) {
            this.graphElementId = this.domHelper.createUniqueDOMElementId(root);
        }
    }
    postModelInitialization() {
        if (!this.copyPasteHandler) {
            return;
        }
        const copyListener = (e) => {
            var _a, _b;
            if (this.graphElementId && ((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.id) === this.graphElementId) {
                (_b = this.copyPasteHandler) === null || _b === void 0 ? void 0 : _b.handleCopy(e);
            }
        };
        const cutListener = (e) => {
            var _a, _b;
            if (this.graphElementId && ((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.id) === this.graphElementId) {
                (_b = this.copyPasteHandler) === null || _b === void 0 ? void 0 : _b.handleCut(e);
            }
        };
        const pasteListener = (e) => {
            var _a, _b;
            if (this.graphElementId && ((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.id) === this.graphElementId) {
                (_b = this.copyPasteHandler) === null || _b === void 0 ? void 0 : _b.handlePaste(e);
            }
        };
        window.addEventListener('copy', copyListener);
        window.addEventListener('cut', cutListener);
        window.addEventListener('paste', pasteListener);
        this.toDispose.push(sprotty_1.Disposable.create(() => {
            window.removeEventListener('copy', copyListener);
            window.removeEventListener('cut', cutListener);
            window.removeEventListener('paste', pasteListener);
        }));
    }
    dispose() {
        this.toDispose.dispose();
    }
};
exports.CopyPasteStartup = CopyPasteStartup;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ICopyPasteHandler),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], CopyPasteStartup.prototype, "copyPasteHandler", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.DOMHelper),
    __metadata("design:type", sprotty_1.DOMHelper)
], CopyPasteStartup.prototype, "domHelper", void 0);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CopyPasteStartup.prototype, "dispose", null);
exports.CopyPasteStartup = CopyPasteStartup = __decorate([
    (0, inversify_1.injectable)()
], CopyPasteStartup);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-bounds-decorator.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/debug/debug-bounds-decorator.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugBoundsDecorator = exports.CSS_DEBUG_BOUNDS = void 0;
/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable max-len */
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
exports.CSS_DEBUG_BOUNDS = 'debug-bounds';
let DebugBoundsDecorator = class DebugBoundsDecorator {
    decorate(vnode, element) {
        var _a;
        if (!((_a = this.debugManager) === null || _a === void 0 ? void 0 : _a.isDebugEnabled)) {
            return vnode;
        }
        if ((0, sprotty_1.isSizeable)(element) && this.shouldDecorateSizeable(element)) {
            this.decorateSizeable(vnode, element);
        }
        if (element instanceof model_1.GGraph && this.shouldDecorateGraph(element)) {
            this.decorateGraph(vnode, element);
        }
        return vnode;
    }
    postUpdate() { }
    get decorationSize() {
        return 5;
    }
    shouldDecorateGraph(graph) {
        return true;
    }
    decorateGraph(vnode, graph) {
        var _a, _b, _c;
        (0, sprotty_1.setClass)(vnode, exports.CSS_DEBUG_BOUNDS, true);
        const svgChild = (_a = vnode.children) === null || _a === void 0 ? void 0 : _a.find(child => typeof child !== 'string' && child.sel === 'svg');
        const group = (_b = svgChild === null || svgChild === void 0 ? void 0 : svgChild.children) === null || _b === void 0 ? void 0 : _b.find(child => typeof child !== 'string' && child.sel === 'g');
        (_c = group === null || group === void 0 ? void 0 : group.children) === null || _c === void 0 ? void 0 : _c.push(this.renderOrigin(graph));
    }
    renderOrigin(graph) {
        return ((0, sprotty_1.svg)("polyline", { "class-debug-bounds-decoration": true, "class-debug-bounds-origin": true, points: `0,${this.decorationSize} 0,0  ${this.decorationSize},0` },
            (0, sprotty_1.svg)("title", null, "Origin = x: 0, y: 0")));
    }
    shouldDecorateSizeable(element) {
        return !(0, sprotty_1.isDecoration)(element);
    }
    decorateSizeable(vnode, element) {
        var _a, _b, _c, _d, _e;
        (0, sprotty_1.setClass)(vnode, exports.CSS_DEBUG_BOUNDS, true);
        (_a = vnode.children) === null || _a === void 0 ? void 0 : _a.push(this.renderTopLeftCorner(element));
        (_b = vnode.children) === null || _b === void 0 ? void 0 : _b.push(this.renderTopRightCorner(element));
        (_c = vnode.children) === null || _c === void 0 ? void 0 : _c.push(this.renderBottomLeftCorner(element));
        (_d = vnode.children) === null || _d === void 0 ? void 0 : _d.push(this.renderBottomRightCorner(element));
        (_e = vnode.children) === null || _e === void 0 ? void 0 : _e.push(this.renderCenter(element));
    }
    renderTopLeftCorner(element) {
        const position = sprotty_1.Bounds.position(element.bounds);
        const topLeft = sprotty_1.Bounds.topLeft(element.bounds);
        const corner = sprotty_1.Point.subtract(topLeft, position);
        return ((0, sprotty_1.svg)("polyline", { "class-debug-bounds-decoration": true, "class-debug-bounds-top-left": true, points: `${corner.x},${corner.y + this.decorationSize} ${corner.x},${corner.y} ${corner.x + this.decorationSize},${corner.y}` },
            (0, sprotty_1.svg)("title", null,
                "Top Left = x: ",
                topLeft.x,
                ", y: ",
                topLeft.y)));
    }
    renderTopRightCorner(element) {
        const position = sprotty_1.Bounds.position(element.bounds);
        const topRight = sprotty_1.Bounds.topRight(element.bounds);
        const corner = sprotty_1.Point.subtract(topRight, position);
        return ((0, sprotty_1.svg)("polyline", { "class-debug-bounds-decoration": true, "class-debug-bounds-top-right": true, points: `${corner.x - this.decorationSize},${corner.y} ${corner.x},${corner.y} ${corner.x},${corner.y + this.decorationSize}` },
            (0, sprotty_1.svg)("title", null,
                "Top Right = x: ",
                topRight.x,
                ", y: ",
                topRight.y)));
    }
    renderBottomLeftCorner(element) {
        const position = sprotty_1.Bounds.position(element.bounds);
        const bottomLeft = sprotty_1.Bounds.bottomLeft(element.bounds);
        const corner = sprotty_1.Point.subtract(bottomLeft, position);
        return ((0, sprotty_1.svg)("polyline", { "class-debug-bounds-decoration": true, "class-debug-bounds-bottom-left": true, points: `${corner.x},${corner.y - this.decorationSize} ${corner.x},${corner.y} ${corner.x + this.decorationSize},${corner.y}` },
            (0, sprotty_1.svg)("title", null,
                "Bottom Left = x: ",
                bottomLeft.x,
                ", y: ",
                bottomLeft.y)));
    }
    renderBottomRightCorner(element) {
        const position = sprotty_1.Bounds.position(element.bounds);
        const bottomRight = sprotty_1.Bounds.bottomRight(element.bounds);
        const corner = sprotty_1.Point.subtract(bottomRight, position);
        return ((0, sprotty_1.svg)("polyline", { "class-debug-bounds-decoration": true, "class-debug-bounds-bottom-right": true, points: `${corner.x - this.decorationSize},${corner.y} ${corner.x},${corner.y} ${corner.x},${corner.y - this.decorationSize}` },
            (0, sprotty_1.svg)("title", null,
                "Bottom Right = x: ",
                bottomRight.x,
                ", y: ",
                bottomRight.y)));
    }
    renderCenter(element) {
        const bounds = element.bounds;
        const position = sprotty_1.Bounds.position(bounds);
        const center = sprotty_1.Bounds.center(bounds);
        const corner = sprotty_1.Point.subtract(center, position);
        return ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("title", null,
                "Center = x: ",
                center.x,
                ", y: ",
                center.y,
                "\rBounds = x: ",
                bounds.x,
                ", y: ",
                bounds.y,
                ", width: ",
                bounds.width,
                ", height: ",
                bounds.height),
            (0, sprotty_1.svg)("polyline", { "class-debug-bounds-decoration": true, "class-debug-bounds-center": true, points: `${corner.x - this.decorationSize / 2},${corner.y - this.decorationSize / 2} ${corner.x + this.decorationSize / 2},${corner.y + this.decorationSize / 2}` }),
            (0, sprotty_1.svg)("polyline", { "class-debug-bounds-decoration": true, "class-debug-bounds-center": true, points: `${corner.x + this.decorationSize / 2},${corner.y - this.decorationSize / 2} ${corner.x - this.decorationSize / 2},${corner.y + this.decorationSize / 2}` })));
    }
};
exports.DebugBoundsDecorator = DebugBoundsDecorator;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IDebugManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], DebugBoundsDecorator.prototype, "debugManager", void 0);
exports.DebugBoundsDecorator = DebugBoundsDecorator = __decorate([
    (0, inversify_1.injectable)()
], DebugBoundsDecorator);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-manager.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/debug/debug-manager.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugManager = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const debug_model_1 = __webpack_require__(/*! ./debug-model */ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-model.js");
/**
 * The default {@link IDebugManager} implementation.
 * This class manages the debug mode and provides functionality to enable or disable it.
 */
let DebugManager = class DebugManager {
    constructor() {
        this._debugEnabled = false;
    }
    get isDebugEnabled() {
        return this._debugEnabled;
    }
    init() {
        this.debugFeedback = this.feedbackDispatcher.createEmitter();
    }
    handle(action) {
        this.setDebugEnabled(action.enable);
    }
    setDebugEnabled(enabled) {
        if (this._debugEnabled && !enabled) {
            this._debugEnabled = false;
            this.debugFeedback.dispose();
        }
        else if (!this._debugEnabled && enabled) {
            this._debugEnabled = true;
            this.debugFeedback
                .add(debug_model_1.EnableDebugModeAction.create({ enable: true }), debug_model_1.EnableDebugModeAction.create({ enable: false }))
                .submit();
        }
    }
    toggleDebugEnabled() {
        this.setDebugEnabled(!this._debugEnabled);
    }
};
exports.DebugManager = DebugManager;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], DebugManager.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DebugManager.prototype, "init", null);
exports.DebugManager = DebugManager = __decorate([
    (0, inversify_1.injectable)()
], DebugManager);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-model.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/debug/debug-model.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnableDebugModeCommand = exports.EnableDebugModeAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const feedback_command_1 = __webpack_require__(/*! ../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
var EnableDebugModeAction;
(function (EnableDebugModeAction) {
    EnableDebugModeAction.KIND = 'enableDebugMode';
    EnableDebugModeAction.CSS_ROOT_CLASS = 'debug-mode';
    function is(object) {
        return sprotty_1.Action.hasKind(object, EnableDebugModeAction.KIND) && (0, sprotty_1.hasBooleanProp)(object, 'enable');
    }
    EnableDebugModeAction.is = is;
    function create(options) {
        return {
            kind: EnableDebugModeAction.KIND,
            ...options
        };
    }
    EnableDebugModeAction.create = create;
})(EnableDebugModeAction || (exports.EnableDebugModeAction = EnableDebugModeAction = {}));
let EnableDebugModeCommand = class EnableDebugModeCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        return this.setDebugMode(context.root, this.action.enable);
    }
    setDebugMode(root, show) {
        if (show) {
            (0, gmodel_util_1.addCssClasses)(root, [EnableDebugModeAction.CSS_ROOT_CLASS]);
        }
        else {
            (0, gmodel_util_1.removeCssClasses)(root, [EnableDebugModeAction.CSS_ROOT_CLASS]);
        }
        return root;
    }
};
exports.EnableDebugModeCommand = EnableDebugModeCommand;
EnableDebugModeCommand.KIND = EnableDebugModeAction.KIND;
exports.EnableDebugModeCommand = EnableDebugModeCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], EnableDebugModeCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-module.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/debug/debug-module.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.debugModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../css/debug.css */ "../node_modules/@eclipse-glsp/client/css/debug.css");
const debug_bounds_decorator_1 = __webpack_require__(/*! ./debug-bounds-decorator */ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-bounds-decorator.js");
const debug_manager_1 = __webpack_require__(/*! ./debug-manager */ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-manager.js");
const debug_model_1 = __webpack_require__(/*! ./debug-model */ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-model.js");
exports.debugModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.configureCommand)(context, debug_model_1.EnableDebugModeCommand);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDebugManager, debug_manager_1.DebugManager);
    (0, sprotty_1.configureActionHandler)(context, debug_model_1.EnableDebugModeAction.KIND, debug_manager_1.DebugManager);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IVNodePostprocessor, debug_bounds_decorator_1.DebugBoundsDecorator);
}, { featureId: Symbol('debug') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/decoration/decoration-module.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/decoration/decoration-module.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.decorationModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../css/decoration.css */ "../node_modules/@eclipse-glsp/client/css/decoration.css");
const decoration_placer_1 = __webpack_require__(/*! ./decoration-placer */ "../node_modules/@eclipse-glsp/client/lib/features/decoration/decoration-placer.js");
exports.decorationModule = new sprotty_1.FeatureModule(bind => {
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IVNodePostprocessor, decoration_placer_1.GlspDecorationPlacer);
}, { featureId: Symbol('decoration') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/decoration/decoration-placer.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/decoration/decoration-placer.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var GlspDecorationPlacer_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlspDecorationPlacer = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let GlspDecorationPlacer = GlspDecorationPlacer_1 = class GlspDecorationPlacer extends sprotty_1.DecorationPlacer {
    getPosition(element) {
        if (element instanceof sprotty_1.GChildElement && element.parent instanceof sprotty_1.GRoutableElement) {
            return super.getPosition(element);
        }
        if ((0, sprotty_1.isSizeable)(element)) {
            return {
                x: -GlspDecorationPlacer_1.DECORATION_OFFSET.x,
                y: -GlspDecorationPlacer_1.DECORATION_OFFSET.y
            };
        }
        return sprotty_1.Point.ORIGIN;
    }
};
exports.GlspDecorationPlacer = GlspDecorationPlacer;
GlspDecorationPlacer.DECORATION_OFFSET = { x: 12, y: 10 };
exports.GlspDecorationPlacer = GlspDecorationPlacer = GlspDecorationPlacer_1 = __decorate([
    (0, inversify_1.injectable)()
], GlspDecorationPlacer);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/element-template/add-template-element.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/element-template/add-template-element.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddTemplateElementsFeedbackCommand = exports.AddTemplateElementsAction = void 0;
exports.getTemplateElementId = getTemplateElementId;
exports.templateToSchema = templateToSchema;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const feedback_command_1 = __webpack_require__(/*! ../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const local_bounds_1 = __webpack_require__(/*! ../bounds/local-bounds */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/local-bounds.js");
var AddTemplateElementsAction;
(function (AddTemplateElementsAction) {
    AddTemplateElementsAction.KIND = 'addTemplateElements';
    function create(options) {
        return {
            kind: AddTemplateElementsAction.KIND,
            ...options
        };
    }
    AddTemplateElementsAction.create = create;
})(AddTemplateElementsAction || (exports.AddTemplateElementsAction = AddTemplateElementsAction = {}));
function getTemplateElementId(template) {
    return typeof template === 'string' ? `${template}_feedback` : template.id;
}
let AddTemplateElementsFeedbackCommand = class AddTemplateElementsFeedbackCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const templateElements = this.action.templates
            .map(template => templateToSchema(template, context))
            .filter(gmodel_util_1.isNotUndefined)
            .map(schema => context.modelFactory.createElement(schema))
            .map(element => this.applyRootCssClasses(element, this.action.addClasses, this.action.removeClasses));
        templateElements.forEach(templateElement => context.root.add(templateElement));
        const templateElementIDs = templateElements.map(element => element.id);
        return local_bounds_1.LocalRequestBoundsAction.fromCommand(context, this.actionDispatcher, this.action, templateElementIDs);
    }
    applyRootCssClasses(element, addClasses, removeClasses) {
        element.cssClasses = modifyCssClasses(element.cssClasses, addClasses, removeClasses);
        return element;
    }
};
exports.AddTemplateElementsFeedbackCommand = AddTemplateElementsFeedbackCommand;
AddTemplateElementsFeedbackCommand.KIND = AddTemplateElementsAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], AddTemplateElementsFeedbackCommand.prototype, "actionDispatcher", void 0);
exports.AddTemplateElementsFeedbackCommand = AddTemplateElementsFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], AddTemplateElementsFeedbackCommand);
function templateToSchema(template, context) {
    if (typeof template === 'string') {
        const element = context.root.index.getById(template);
        const schema = element ? context.modelFactory.createSchema(element) : undefined;
        if (schema) {
            adaptSchemaIds(schema);
        }
        return schema;
    }
    return template;
}
function adaptSchemaIds(schema) {
    var _a;
    schema.id = getTemplateElementId(schema.id);
    (_a = schema.children) === null || _a === void 0 ? void 0 : _a.forEach(child => adaptSchemaIds(child));
    return schema;
}
function modifyCssClasses(source, toAdd, toRemove) {
    const classes = source !== null && source !== void 0 ? source : [];
    if (toAdd) {
        (0, sprotty_1.distinctAdd)(classes, ...toAdd);
    }
    if (toRemove) {
        (0, sprotty_1.remove)(classes, ...toRemove);
    }
    return classes;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/element-template/element-template-module.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/element-template/element-template-module.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.elementTemplateModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const add_template_element_1 = __webpack_require__(/*! ./add-template-element */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/add-template-element.js");
const remove_template_element_1 = __webpack_require__(/*! ./remove-template-element */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/remove-template-element.js");
exports.elementTemplateModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.configureCommand)(context, add_template_element_1.AddTemplateElementsFeedbackCommand);
    (0, sprotty_1.configureCommand)(context, remove_template_element_1.RemoveTemplateElementsFeedbackCommand);
}, { featureId: Symbol('elementTemplate') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/element-template/mouse-tracking-element-position-listener.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/element-template/mouse-tracking-element-position-listener.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MouseTrackingElementPositionListener = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const drag_aware_mouse_listener_1 = __webpack_require__(/*! ../../base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js");
const css_feedback_1 = __webpack_require__(/*! ../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const change_bounds_tool_feedback_1 = __webpack_require__(/*! ../tools/change-bounds/change-bounds-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js");
class MouseTrackingElementPositionListener extends drag_aware_mouse_listener_1.DragAwareMouseListener {
    constructor(elementId, tool, cursorPosition = 'top-left', editorContext) {
        super();
        this.elementId = elementId;
        this.tool = tool;
        this.cursorPosition = cursorPosition;
        this.editorContext = editorContext;
        this.toDispose = new sprotty_1.DisposableCollection();
        this.tracker = this.tool.changeBoundsManager.createTracker();
        this.moveGhostFeedback = this.tool.createFeedbackEmitter();
        this.toDispose.push(this.moveGhostFeedback);
        const modelRootChangedListener = editorContext === null || editorContext === void 0 ? void 0 : editorContext.onModelRootChanged(newRoot => this.modelRootChanged(newRoot));
        if (modelRootChangedListener) {
            this.toDispose.push(modelRootChangedListener);
        }
    }
    getTrackedElement(target, event) {
        const element = target.root.index.getById(this.elementId);
        return !element || !(0, sprotty_1.isMoveable)(element) ? undefined : element;
    }
    mouseMove(ctx, event) {
        super.mouseMove(ctx, event);
        const element = this.getTrackedElement(ctx, event);
        if (!element) {
            return [];
        }
        const isInitializing = !this.tracker.isTracking();
        if (isInitializing) {
            this.initialize(element, ctx, event);
        }
        const move = this.tracker.moveElements([element], { snap: event, restrict: event, skipStatic: !isInitializing });
        const elementMove = move.elementMoves[0];
        if (!elementMove) {
            return [];
        }
        // since we are moving a ghost element that is feedback-only and will be removed anyway,
        // we just send a MoveFinishedEventAction instead of reseting the position with a MoveAction and the finished flag set to true.
        this.moveGhostFeedback.add(sprotty_1.MoveAction.create([{ elementId: this.elementId, toPosition: elementMove.toPosition }], { animate: false }), change_bounds_tool_feedback_1.MoveFinishedEventAction.create());
        this.addMoveFeedback(move, ctx, event);
        this.moveGhostFeedback.submit();
        this.tracker.updateTrackingPosition(elementMove.moveVector);
        return [];
    }
    initialize(element, target, event) {
        this.tracker.startTracking();
        element.position = this.initializeElementPosition(element, target, event);
    }
    initializeElementPosition(element, target, event) {
        const mousePosition = (0, viewpoint_util_1.getAbsolutePosition)(target, event);
        return this.cursorPosition === 'middle' && (0, sprotty_1.isBoundsAware)(element)
            ? sprotty_1.Point.subtract(mousePosition, sprotty_1.Dimension.center(element.bounds))
            : mousePosition;
    }
    addMoveFeedback(move, ctx, event) {
        this.moveGhostFeedback.add(css_feedback_1.ModifyCSSFeedbackAction.create({ elements: [this.elementId], remove: [css_feedback_1.CSS_HIDDEN] }));
        this.tool.changeBoundsManager.addMoveFeedback(this.moveGhostFeedback, move, ctx, event);
    }
    modelRootChanged(root) {
        // stop the tracking once we receive a new model root and ensure proper alignment with next next mouse move
        this.tracker.stopTracking();
    }
    dispose() {
        this.toDispose.dispose();
        super.dispose();
    }
}
exports.MouseTrackingElementPositionListener = MouseTrackingElementPositionListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/element-template/remove-template-element.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/element-template/remove-template-element.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveTemplateElementsFeedbackCommand = exports.RemoveTemplateElementsAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const feedback_command_1 = __webpack_require__(/*! ../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const add_template_element_1 = __webpack_require__(/*! ./add-template-element */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/add-template-element.js");
var RemoveTemplateElementsAction;
(function (RemoveTemplateElementsAction) {
    RemoveTemplateElementsAction.KIND = 'removeTemplateElements';
    function create(options) {
        return {
            kind: RemoveTemplateElementsAction.KIND,
            ...options
        };
    }
    RemoveTemplateElementsAction.create = create;
})(RemoveTemplateElementsAction || (exports.RemoveTemplateElementsAction = RemoveTemplateElementsAction = {}));
let RemoveTemplateElementsFeedbackCommand = class RemoveTemplateElementsFeedbackCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const index = context.root.index;
        for (const template of this.action.templates) {
            const element = index.getById((0, add_template_element_1.getTemplateElementId)(template));
            if (element && element instanceof sprotty_1.GChildElement) {
                element.parent.remove(element);
            }
        }
        return context.root;
    }
};
exports.RemoveTemplateElementsFeedbackCommand = RemoveTemplateElementsFeedbackCommand;
RemoveTemplateElementsFeedbackCommand.KIND = RemoveTemplateElementsAction.KIND;
exports.RemoveTemplateElementsFeedbackCommand = RemoveTemplateElementsFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], RemoveTemplateElementsFeedbackCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/export/export-modules.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/export/export-modules.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.standaloneExportModule = exports.exportModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const export_svg_action_handler_1 = __webpack_require__(/*! ./export-svg-action-handler */ "../node_modules/@eclipse-glsp/client/lib/features/export/export-svg-action-handler.js");
const glsp_svg_exporter_1 = __webpack_require__(/*! ./glsp-svg-exporter */ "../node_modules/@eclipse-glsp/client/lib/features/export/glsp-svg-exporter.js");
exports.exportModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.HiddenVNodePostprocessor, sprotty_1.ExportSvgPostprocessor);
    (0, sprotty_1.configureCommand)(context, sprotty_1.ExportSvgCommand);
    bind(sprotty_1.TYPES.SvgExporter).to(glsp_svg_exporter_1.GLSPSvgExporter).inSingletonScope();
}, { featureId: Symbol('export') });
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.standaloneExportModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.KeyListener, sprotty_1.ExportSvgKeyListener);
    bind(export_svg_action_handler_1.ExportSvgActionHandler).toSelf().inSingletonScope();
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.ExportSvgAction.KIND, export_svg_action_handler_1.ExportSvgActionHandler);
}, { featureId: Symbol('standaloneExport'), requires: exports.exportModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/export/export-svg-action-handler.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/export/export-svg-action-handler.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExportSvgActionHandler = void 0;
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const file_saver_1 = __webpack_require__(/*! file-saver */ "../node_modules/file-saver/dist/FileSaver.min.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
/**
 * The default handler for {@link ExportSvgAction}s. This generic handler can be used in
 * any GLSP project independent of the target platform. However, platform integration modules typically
 *  * this handler is rebound to an application specific handler in platform integration modules
 * (e.g. the Theia integration)
 */
let ExportSvgActionHandler = class ExportSvgActionHandler {
    handle(action) {
        const blob = new Blob([action.svg], { type: 'text/plain;charset=utf-8' });
        (0, file_saver_1.saveAs)(blob, 'diagram.svg');
    }
};
exports.ExportSvgActionHandler = ExportSvgActionHandler;
exports.ExportSvgActionHandler = ExportSvgActionHandler = __decorate([
    (0, inversify_1.injectable)()
], ExportSvgActionHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/export/glsp-svg-exporter.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/export/glsp-svg-exporter.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPSvgExporter = void 0;
/********************************************************************************
 * Copyright (c) 2022-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const uuid_1 = __webpack_require__(/*! uuid */ "../node_modules/uuid/dist/commonjs-browser/index.js");
let GLSPSvgExporter = class GLSPSvgExporter extends sprotty_1.SvgExporter {
    export(root, request) {
        var _a;
        if (typeof document !== 'undefined') {
            let svgElement = this.findSvgElement();
            if (svgElement) {
                svgElement = this.prepareSvgElement(svgElement, root, request);
                const serializedSvg = this.createSvg(svgElement, root, (_a = request === null || request === void 0 ? void 0 : request.options) !== null && _a !== void 0 ? _a : {}, request);
                const svgExport = this.getSvgExport(serializedSvg, svgElement, root, request);
                // do not give request/response id here as otherwise the action is treated as an unrequested response
                this.actionDispatcher.dispatch(sprotty_1.ExportSvgAction.create(svgExport, { responseId: request === null || request === void 0 ? void 0 : request.requestId, options: request === null || request === void 0 ? void 0 : request.options }));
            }
        }
    }
    createSvg(svgElement, root, options, cause) {
        // createSvg requires the svg to have a non-empty id, so we generate one if necessary
        const originalId = svgElement.id;
        try {
            svgElement.id = originalId || (0, uuid_1.v4)();
            return super.createSvg(svgElement, root, options, cause);
        }
        finally {
            svgElement.id = originalId;
        }
    }
    findSvgElement() {
        const div = document.getElementById(this.options.hiddenDiv);
        // search for first svg element as hierarchy within Sprotty might change
        return div && div.querySelector('svg');
    }
    prepareSvgElement(svgElement, root, request) {
        return svgElement;
    }
    copyStyles(source, target, skippedProperties) {
        this.copyStyle(source, target, skippedProperties);
        // IE doesn't retrun anything on source.children
        for (let i = 0; i < source.childNodes.length; ++i) {
            const sourceChild = source.childNodes[i];
            const targetChild = target.childNodes[i];
            if (sourceChild instanceof Element) {
                this.copyStyles(sourceChild, targetChild, []);
            }
        }
    }
    copyStyle(source, target, skippedProperties) {
        const sourceStyle = getComputedStyle(source);
        const targetStyle = getComputedStyle(target);
        let style = '';
        for (let i = 0; i < sourceStyle.length; i++) {
            const propertyName = sourceStyle[i];
            if (!skippedProperties.includes(propertyName)) {
                const propertyValue = sourceStyle.getPropertyValue(propertyName);
                const propertyPriority = sourceStyle.getPropertyPriority(propertyName);
                if (targetStyle.getPropertyValue(propertyName) !== propertyValue) {
                    if (this.shouldUpdateStyle(target)) {
                        // rather set the property directly on the element to keep other values intact
                        target.style.setProperty(propertyName, propertyValue);
                    }
                    else {
                        // collect all properties to set them at once
                        style += `${propertyName}: ${propertyValue}${propertyPriority ? ' !' + propertyPriority : ''}; `;
                    }
                }
            }
        }
        if (style !== '') {
            target.setAttribute('style', style.trim());
        }
    }
    shouldUpdateStyle(element) {
        // we want to simply update the style of elements and keep other values intact if they have a style property
        return 'tagName' in element && 'style' in element;
    }
    getSvgExport(serializedSvgElement, svgElement, root, request) {
        const svgExportStyle = this.getSvgExportStyle(svgElement, root, request);
        return svgExportStyle ? serializedSvgElement.replace('style="', `style="${svgExportStyle}`) : serializedSvgElement;
    }
    getSvgExportStyle(svgElement, root, request) {
        // provide generated svg code with respective sizing for proper viewing in browser and remove undesired border
        const bounds = this.getBounds(root, document);
        return (`width: ${bounds.width}px !important;` +
            `height: ${bounds.height}px !important;` +
            'border: none !important;' +
            'cursor: default !important;');
    }
};
exports.GLSPSvgExporter = GLSPSvgExporter;
exports.GLSPSvgExporter = GLSPSvgExporter = __decorate([
    (0, inversify_1.injectable)()
], GLSPSvgExporter);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-manager.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/grid/grid-manager.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridManager = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const grid_1 = __webpack_require__(/*! ./grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
const grid_model_1 = __webpack_require__(/*! ./grid-model */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-model.js");
/**
 * The default {@link IGridManager} implementation.
 * This class manages the visibility and behavior of a grid in the application.
 */
let GridManager = class GridManager {
    constructor() {
        this._gridVisible = false;
    }
    get isGridVisible() {
        return this._gridVisible;
    }
    init() {
        this.gridFeedback = this.feedbackDispatcher.createEmitter();
    }
    handle(action) {
        this.setGridVisible(action.show);
    }
    setGridVisible(visible) {
        if (this._gridVisible && !visible) {
            this._gridVisible = false;
            this.gridFeedback.dispose();
        }
        else if (!this._gridVisible && visible) {
            this._gridVisible = true;
            this.gridFeedback.add(grid_model_1.ShowGridAction.create({ show: true }), grid_model_1.ShowGridAction.create({ show: false })).submit();
        }
    }
    toggleGridVisible() {
        this.setGridVisible(!this._gridVisible);
    }
};
exports.GridManager = GridManager;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], GridManager.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    __metadata("design:type", Object)
], GridManager.prototype, "grid", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GridManager.prototype, "init", null);
exports.GridManager = GridManager = __decorate([
    (0, inversify_1.injectable)()
], GridManager);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-model.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/grid/grid-model.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowGridCommand = exports.ShowGridAction = void 0;
/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const feedback_command_1 = __webpack_require__(/*! ../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
var ShowGridAction;
(function (ShowGridAction) {
    ShowGridAction.KIND = 'showGrid';
    ShowGridAction.CSS_ROOT_CLASS = 'grid-background';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ShowGridAction.KIND) && (0, sprotty_1.hasBooleanProp)(object, 'show');
    }
    ShowGridAction.is = is;
    function create(options) {
        return {
            kind: ShowGridCommand.KIND,
            ...options
        };
    }
    ShowGridAction.create = create;
})(ShowGridAction || (exports.ShowGridAction = ShowGridAction = {}));
let ShowGridCommand = class ShowGridCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        return this.setGrid(context.root, this.action.show);
    }
    setGrid(root, show) {
        if (show) {
            (0, gmodel_util_1.addCssClasses)(root, [ShowGridAction.CSS_ROOT_CLASS]);
        }
        else {
            (0, gmodel_util_1.removeCssClasses)(root, [ShowGridAction.CSS_ROOT_CLASS]);
        }
        return root;
    }
};
exports.ShowGridCommand = ShowGridCommand;
ShowGridCommand.KIND = ShowGridAction.KIND;
exports.ShowGridCommand = ShowGridCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ShowGridCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-module.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/grid/grid-module.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gridModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../css/grid.css */ "../node_modules/@eclipse-glsp/client/css/grid.css");
const grid_1 = __webpack_require__(/*! ./grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
const grid_manager_1 = __webpack_require__(/*! ./grid-manager */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-manager.js");
const grid_model_1 = __webpack_require__(/*! ./grid-model */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-model.js");
const grid_snapper_1 = __webpack_require__(/*! ./grid-snapper */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-snapper.js");
exports.gridModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    bind(sprotty_1.TYPES.Grid).toConstantValue(grid_1.Grid.DEFAULT);
    (0, sprotty_1.configureCommand)(context, grid_model_1.ShowGridCommand);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IGridManager, grid_manager_1.GridManager);
    (0, sprotty_1.configureActionHandler)(context, grid_model_1.ShowGridAction.KIND, grid_manager_1.GridManager);
    bind(sprotty_1.TYPES.ISnapper).to(grid_snapper_1.GridSnapper);
}, { featureId: Symbol('grid') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-snapper.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/grid/grid-snapper.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPCenterGridSnapper = exports.GridSnapper = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const grid_1 = __webpack_require__(/*! ./grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
/**
 * A {@link ISnapper} implementation that snaps all elements onto a fixed gride size.
 * The default grid size is 10x10 pixel.
 * To configure a custom grid size  bind the `TYPES.ISnapper` service identifier
 * to constant value, e.g:
 *
 * ```ts
 * bind(TYPES.ISnapper).toConstantValue(new GridSnapper({ x: 25, y: 25 }));
 * ```
 *
 * or use the `Grid` to define the grid size more generically:
 * ```ts
 * bind(TYPES.Grid).toConstantValue({ x: 25, y: 25 });
 * bind(TYPES.ISnapper).to(GridSnapper);
 * ```
 */
let GridSnapper = class GridSnapper {
    constructor(grid = grid_1.Grid.DEFAULT) {
        this.grid = grid;
    }
    snap(position, element) {
        return sprotty_1.Point.snapToGrid(position, this.grid);
    }
};
exports.GridSnapper = GridSnapper;
exports.GridSnapper = GridSnapper = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.optional)()),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Grid)),
    __metadata("design:paramtypes", [Object])
], GridSnapper);
let GLSPCenterGridSnapper = class GLSPCenterGridSnapper extends sprotty_1.CenterGridSnapper {
    constructor(grid = grid_1.Grid.DEFAULT) {
        super();
        this.grid = grid;
    }
    get gridX() {
        return this.grid.x;
    }
    get gridY() {
        return this.grid.y;
    }
};
exports.GLSPCenterGridSnapper = GLSPCenterGridSnapper;
exports.GLSPCenterGridSnapper = GLSPCenterGridSnapper = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.optional)()),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Grid)),
    __metadata("design:paramtypes", [Object])
], GLSPCenterGridSnapper);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-style.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/grid/grid-style.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GridProperty = void 0;
var GridProperty;
(function (GridProperty) {
    GridProperty.GRID_BACKGROUND_X = '--grid-background-x';
    GridProperty.GRID_BACKGROUND_Y = '--grid-background-y';
    GridProperty.GRID_BACKGROUND_WIDTH = '--grid-background-width';
    GridProperty.GRID_BACKGROUND_HEIGHT = '--grid-background-height';
    GridProperty.GRID_BACKGROUND_ZOOM = '--grid-background-zoom';
    GridProperty.GRID_COLOR = '--grid-color';
})(GridProperty || (exports.GridProperty = GridProperty = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Grid = void 0;
var Grid;
(function (Grid) {
    Grid.DEFAULT = { x: 10, y: 10 };
})(Grid || (exports.Grid = Grid = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-feedback.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-feedback.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoveHelperLinesFeedbackCommand = exports.RemoveHelperLinesFeedbackAction = exports.DrawHelperLinesFeedbackCommand = exports.DrawHelperLinesFeedbackAction = exports.DEFAULT_DEBUG = exports.DEFAULT_ALIGNABLE_ELEMENT_FILTER = exports.DEFAULT_EPSILON = exports.DEFAULT_VIEWPORT_LINES = exports.DEFAULT_ELEMENT_LINES = exports.ALL_VIEWPORT_LINE_TYPES = exports.ALL_ELEMENT_LINE_TYPES = exports.isTopLevelBoundsAwareElement = void 0;
exports.removeHelperLines = removeHelperLines;
exports.removeSelectionBounds = removeSelectionBounds;
exports.boundsInViewport = boundsInViewport;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const lodash_1 = __webpack_require__(/*! lodash */ "../node_modules/lodash/lodash.js");
__webpack_require__(/*! ../../../css/helper-lines.css */ "../node_modules/@eclipse-glsp/client/css/helper-lines.css");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const feedback_command_1 = __webpack_require__(/*! ../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const dangling_edge_feedback_1 = __webpack_require__(/*! ../tools/edge-creation/dangling-edge-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/model.js");
const isTopLevelBoundsAwareElement = element => (0, gmodel_util_1.findTopLevelElementByFeature)(element, sprotty_1.isBoundsAware, sprotty_1.isViewport) === element;
exports.isTopLevelBoundsAwareElement = isTopLevelBoundsAwareElement;
exports.ALL_ELEMENT_LINE_TYPES = Object.values(model_1.HelperLineType);
exports.ALL_VIEWPORT_LINE_TYPES = [model_1.HelperLineType.Center, model_1.HelperLineType.Middle];
exports.DEFAULT_ELEMENT_LINES = exports.ALL_ELEMENT_LINE_TYPES;
exports.DEFAULT_VIEWPORT_LINES = exports.ALL_VIEWPORT_LINE_TYPES;
exports.DEFAULT_EPSILON = 1;
const DEFAULT_ALIGNABLE_ELEMENT_FILTER = (element) => (0, gmodel_util_1.isVisibleOnCanvas)(element) &&
    !(0, gmodel_util_1.isRoutable)(element) &&
    !(element instanceof sprotty_1.GLabel) &&
    !(element.id === (0, dangling_edge_feedback_1.feedbackEdgeId)(element.root)) &&
    !(element.id === (0, dangling_edge_feedback_1.feedbackEdgeEndId)(element.root)) &&
    !(0, sprotty_1.isDecoration)(element);
exports.DEFAULT_ALIGNABLE_ELEMENT_FILTER = DEFAULT_ALIGNABLE_ELEMENT_FILTER;
exports.DEFAULT_DEBUG = false;
var DrawHelperLinesFeedbackAction;
(function (DrawHelperLinesFeedbackAction) {
    DrawHelperLinesFeedbackAction.KIND = 'drawHelperLines';
    function create(options) {
        return {
            kind: DrawHelperLinesFeedbackAction.KIND,
            ...options
        };
    }
    DrawHelperLinesFeedbackAction.create = create;
})(DrawHelperLinesFeedbackAction || (exports.DrawHelperLinesFeedbackAction = DrawHelperLinesFeedbackAction = {}));
let DrawHelperLinesFeedbackCommand = class DrawHelperLinesFeedbackCommand extends feedback_command_1.FeedbackCommand {
    constructor(action, logger) {
        var _a, _b, _c, _d, _e;
        super();
        this.logger = logger;
        this.elementIds = action.elementIds;
        this.elementLines = (_a = action.elementLines) !== null && _a !== void 0 ? _a : exports.DEFAULT_ELEMENT_LINES;
        this.viewportLines = (_b = action.viewportLines) !== null && _b !== void 0 ? _b : exports.DEFAULT_VIEWPORT_LINES;
        this.alignmentEpsilon = (_c = action.alignmentEpsilon) !== null && _c !== void 0 ? _c : exports.DEFAULT_EPSILON;
        this.alignableElementFilter = (_d = action.alignmentElementFilter) !== null && _d !== void 0 ? _d : exports.DEFAULT_ALIGNABLE_ELEMENT_FILTER;
        this.isAlignableElementPredicate = this.isAlignableElement.bind(this);
        this.debug = (_e = action.debug) !== null && _e !== void 0 ? _e : exports.DEFAULT_DEBUG;
    }
    execute(context) {
        removeHelperLines(context.root);
        removeSelectionBounds(context.root);
        const alignableElements = (0, gmodel_util_1.getMatchingElements)(context.root.index, this.isAlignableElementPredicate);
        this.log('All alignable elements: ', alignableElements);
        const [referenceElements, elements] = (0, lodash_1.partition)(alignableElements, element => this.elementIds.includes(element.id));
        this.log('Split alignable elements into reference elements and other elements: ', referenceElements, elements);
        if (referenceElements.length === 0) {
            this.log('--> No helper lines as we do not have any reference elements.');
            return context.root;
        }
        const referenceBounds = this.calcReferenceBounds(referenceElements);
        this.log('Bounds encompasing all reference elements: ', referenceBounds);
        const helperLines = this.calcHelperLines(elements, referenceBounds, context);
        if (referenceElements.length > 1) {
            context.root.add(new model_1.SelectionBounds(referenceBounds));
            this.log('Render selection bounds for more than one reference element:', referenceBounds);
        }
        helperLines.forEach(helperLine => context.root.add(helperLine));
        if (helperLines.length > 0) {
            this.log(`--> Add ${helperLines.length} helper lines to root:`, helperLines);
        }
        else {
            this.log('--> Add no helper lines to root.');
        }
        return context.root;
    }
    isAlignableElement(element) {
        return (0, sprotty_1.isBoundsAware)(element) && this.alignableElementFilter(element, this.elementIds);
    }
    calcReferenceBounds(referenceElements) {
        return referenceElements.map(element => this.calcBounds(element)).reduce(sprotty_1.Bounds.combine, sprotty_1.Bounds.EMPTY);
    }
    calcBounds(element) {
        return (0, viewpoint_util_1.toAbsoluteBounds)(element);
    }
    calcHelperLines(elements, bounds, context) {
        const helperLines = [];
        const viewport = this.editorContext.viewport;
        if (viewport) {
            helperLines.push(...this.calcHelperLinesForViewport(viewport, bounds, this.viewportLines));
        }
        elements
            .flatMap(element => this.calcHelperLinesForElement(element, bounds, this.elementLines))
            .forEach(line => helperLines.push(line));
        return helperLines;
    }
    calcHelperLinesForViewport(root, bounds, lineTypes) {
        const helperLines = [];
        this.log('Find helperlines for viewport:', root);
        const viewportBounds = (0, viewpoint_util_1.getViewportBounds)(root, root.canvasBounds);
        if (lineTypes.includes(model_1.HelperLineType.Center) && this.isAligned(sprotty_1.Bounds.centerX, viewportBounds, bounds, 2)) {
            helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.topCenter(viewportBounds), sprotty_1.Bounds.bottomCenter(viewportBounds), model_1.HelperLineType.Center));
            this.log('- Reference bounds center align with viewport.', viewportBounds);
        }
        if (lineTypes.includes(model_1.HelperLineType.Middle) && this.isAligned(sprotty_1.Bounds.middle, viewportBounds, bounds, 2)) {
            helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.middleLeft(viewportBounds), sprotty_1.Bounds.middleRight(viewportBounds), model_1.HelperLineType.Middle));
            this.log('- Reference bounds middle align with viewport.', viewportBounds);
        }
        if (helperLines.length > 0) {
            this.log(`--> Add ${helperLines.length} helperlines for viewport:`, helperLines);
        }
        return helperLines;
    }
    calcHelperLinesForElement(element, bounds, lineTypes) {
        this.log('Find helperlines for element:', element);
        return this.calcHelperLinesForBounds(this.calcBounds(element), bounds, lineTypes);
    }
    calcHelperLinesForBounds(elementBounds, bounds, lineTypes) {
        const helperLines = [];
        if (lineTypes.includes(model_1.HelperLineType.Left) && this.isAligned(sprotty_1.Bounds.left, elementBounds, bounds, this.alignmentEpsilon)) {
            const [above, below] = sprotty_1.Bounds.sortBy(sprotty_1.Bounds.top, elementBounds, bounds); // higher top-value ==> lower
            helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.bottomLeft(below), sprotty_1.Bounds.topLeft(above), model_1.HelperLineType.Left));
            this.log('- Reference bounds left align with element', elementBounds);
        }
        if (lineTypes.includes(model_1.HelperLineType.Center) && this.isAligned(sprotty_1.Bounds.centerX, elementBounds, bounds, this.alignmentEpsilon)) {
            const [above, below] = sprotty_1.Bounds.sortBy(sprotty_1.Bounds.top, elementBounds, bounds); // higher top-value ==> lower
            helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.topCenter(above), sprotty_1.Bounds.bottomCenter(below), model_1.HelperLineType.Center));
            this.log('- Reference bounds center align with element', elementBounds);
        }
        if (lineTypes.includes(model_1.HelperLineType.Right) && this.isAligned(sprotty_1.Bounds.right, elementBounds, bounds, this.alignmentEpsilon)) {
            const [above, below] = sprotty_1.Bounds.sortBy(sprotty_1.Bounds.top, elementBounds, bounds); // higher top-value ==> lower
            helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.bottomRight(below), sprotty_1.Bounds.topRight(above), model_1.HelperLineType.Right));
            this.log('- Reference bounds right align with element', elementBounds);
        }
        if (lineTypes.includes(model_1.HelperLineType.Bottom) && this.isAligned(sprotty_1.Bounds.bottom, elementBounds, bounds, this.alignmentEpsilon)) {
            const [before, after] = sprotty_1.Bounds.sortBy(sprotty_1.Bounds.left, elementBounds, bounds); // higher left-value ==> more to the right
            helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.bottomLeft(before), sprotty_1.Bounds.bottomRight(after), model_1.HelperLineType.Bottom));
            this.log('- Reference bounds bottom align with element', elementBounds);
        }
        if (lineTypes.includes(model_1.HelperLineType.Middle) && this.isAligned(sprotty_1.Bounds.centerY, elementBounds, bounds, this.alignmentEpsilon)) {
            const [before, after] = sprotty_1.Bounds.sortBy(sprotty_1.Bounds.left, elementBounds, bounds); // higher left-value ==> more to the right
            helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.middleLeft(before), sprotty_1.Bounds.middleRight(after), model_1.HelperLineType.Middle));
            this.log('- Reference bounds middle align with element', elementBounds);
        }
        if (lineTypes.includes(model_1.HelperLineType.Top) && this.isAligned(sprotty_1.Bounds.top, elementBounds, bounds, this.alignmentEpsilon)) {
            const [before, after] = sprotty_1.Bounds.sortBy(sprotty_1.Bounds.left, elementBounds, bounds); // higher left-value ==> more to the right
            helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.topLeft(before), sprotty_1.Bounds.topRight(after), model_1.HelperLineType.Top));
            this.log('- Reference bounds top align with element', elementBounds);
        }
        if (lineTypes.includes(model_1.HelperLineType.LeftRight) &&
            this.isMatch(sprotty_1.Bounds.left(elementBounds), sprotty_1.Bounds.right(bounds), this.alignmentEpsilon)) {
            if (sprotty_1.Bounds.isAbove(bounds, elementBounds)) {
                helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.bottomLeft(elementBounds), sprotty_1.Bounds.topRight(bounds), model_1.HelperLineType.RightLeft));
                this.log('- Reference bounds right aligns with element left', elementBounds);
            }
            else {
                helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.topLeft(elementBounds), sprotty_1.Bounds.bottomRight(bounds), model_1.HelperLineType.RightLeft));
                this.log('- Reference bounds right aligns with element left', elementBounds);
            }
        }
        if (lineTypes.includes(model_1.HelperLineType.LeftRight) &&
            this.isMatch(sprotty_1.Bounds.right(elementBounds), sprotty_1.Bounds.left(bounds), this.alignmentEpsilon)) {
            if (sprotty_1.Bounds.isAbove(bounds, elementBounds)) {
                helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.bottomRight(elementBounds), sprotty_1.Bounds.topLeft(bounds), model_1.HelperLineType.LeftRight));
                this.log('- Reference bounds left aligns with element right', elementBounds);
            }
            else {
                helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.topRight(elementBounds), sprotty_1.Bounds.bottomLeft(bounds), model_1.HelperLineType.LeftRight));
                this.log('- Reference bounds left aligns with element right', elementBounds);
            }
        }
        if (lineTypes.includes(model_1.HelperLineType.TopBottom) &&
            this.isMatch(sprotty_1.Bounds.top(elementBounds), sprotty_1.Bounds.bottom(bounds), this.alignmentEpsilon)) {
            if (sprotty_1.Bounds.isBefore(bounds, elementBounds)) {
                helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.topRight(elementBounds), sprotty_1.Bounds.bottomLeft(bounds), model_1.HelperLineType.BottomTop));
                this.log('- Reference bounds bottom aligns with element top', elementBounds);
            }
            else {
                helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.topLeft(elementBounds), sprotty_1.Bounds.bottomRight(bounds), model_1.HelperLineType.BottomTop));
                this.log('- Reference bounds bottom aligns with element top', elementBounds);
            }
        }
        if (lineTypes.includes(model_1.HelperLineType.TopBottom) &&
            this.isMatch(sprotty_1.Bounds.bottom(elementBounds), sprotty_1.Bounds.top(bounds), this.alignmentEpsilon)) {
            if (sprotty_1.Bounds.isBefore(bounds, elementBounds)) {
                helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.bottomRight(elementBounds), sprotty_1.Bounds.topLeft(bounds), model_1.HelperLineType.TopBottom));
                this.log('- Reference bounds top aligns with element bottom', elementBounds);
            }
            else {
                helperLines.push(new model_1.HelperLine(sprotty_1.Bounds.bottomLeft(elementBounds), sprotty_1.Bounds.topRight(bounds), model_1.HelperLineType.TopBottom));
                this.log('- Reference bounds top aligns with element bottom', elementBounds);
            }
        }
        if (helperLines.length > 0) {
            this.log(`--> Add ${helperLines.length} helperlines for element:`, helperLines);
        }
        return helperLines;
    }
    isAligned(coordinate, leftBounds, rightBounds, epsilon) {
        return this.isMatch(coordinate(leftBounds), coordinate(rightBounds), epsilon);
    }
    isMatch(leftCoordinate, rightCoordinate, epsilon) {
        return (0, sprotty_1.equalUpTo)(leftCoordinate, rightCoordinate, epsilon);
    }
    log(message, ...params) {
        if (this.debug) {
            this.logger.log(this, message, params);
        }
    }
};
exports.DrawHelperLinesFeedbackCommand = DrawHelperLinesFeedbackCommand;
DrawHelperLinesFeedbackCommand.KIND = DrawHelperLinesFeedbackAction.KIND;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], DrawHelperLinesFeedbackCommand.prototype, "editorContext", void 0);
exports.DrawHelperLinesFeedbackCommand = DrawHelperLinesFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __param(1, (0, inversify_1.inject)(sprotty_1.TYPES.ILogger)),
    __metadata("design:paramtypes", [Object, Object])
], DrawHelperLinesFeedbackCommand);
var RemoveHelperLinesFeedbackAction;
(function (RemoveHelperLinesFeedbackAction) {
    RemoveHelperLinesFeedbackAction.KIND = 'removeHelperLines';
    function create(options = {}) {
        return {
            kind: RemoveHelperLinesFeedbackAction.KIND,
            ...options
        };
    }
    RemoveHelperLinesFeedbackAction.create = create;
})(RemoveHelperLinesFeedbackAction || (exports.RemoveHelperLinesFeedbackAction = RemoveHelperLinesFeedbackAction = {}));
let RemoveHelperLinesFeedbackCommand = class RemoveHelperLinesFeedbackCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        removeHelperLines(context.root);
        removeSelectionBounds(context.root);
        return context.root;
    }
};
exports.RemoveHelperLinesFeedbackCommand = RemoveHelperLinesFeedbackCommand;
RemoveHelperLinesFeedbackCommand.KIND = RemoveHelperLinesFeedbackAction.KIND;
exports.RemoveHelperLinesFeedbackCommand = RemoveHelperLinesFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], RemoveHelperLinesFeedbackCommand);
function removeHelperLines(root) {
    (0, gmodel_util_1.forEachElement)(root.index, model_1.isHelperLine, line => root.remove(line));
}
function removeSelectionBounds(root) {
    (0, gmodel_util_1.forEachElement)(root.index, model_1.isSelectionBounds, line => root.remove(line));
}
function boundsInViewport(element, bounds) {
    if (element instanceof sprotty_1.GChildElement && !(0, sprotty_1.isViewport)(element.parent)) {
        return boundsInViewport(element.parent, element.parent.localToParent(bounds));
    }
    else {
        return bounds;
    }
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-manager.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-manager.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HelperLineManager = exports.DEFAULT_HELPER_LINE_OPTIONS = exports.DEFAULT_MOVE_DELTA = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const selection_service_1 = __webpack_require__(/*! ../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const set_bounds_feedback_command_1 = __webpack_require__(/*! ../bounds/set-bounds-feedback-command */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/set-bounds-feedback-command.js");
const model_1 = __webpack_require__(/*! ../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const grid_1 = __webpack_require__(/*! ../grid/grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
const change_bounds_tool_feedback_1 = __webpack_require__(/*! ../tools/change-bounds/change-bounds-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js");
const helper_line_feedback_1 = __webpack_require__(/*! ./helper-line-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-feedback.js");
const model_2 = __webpack_require__(/*! ./model */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/model.js");
exports.DEFAULT_MOVE_DELTA = { x: 1, y: 1 };
exports.DEFAULT_HELPER_LINE_OPTIONS = {
    elementLines: helper_line_feedback_1.DEFAULT_ELEMENT_LINES,
    viewportLines: helper_line_feedback_1.DEFAULT_VIEWPORT_LINES,
    alignmentEpsilon: helper_line_feedback_1.DEFAULT_EPSILON,
    alignmentElementFilter: helper_line_feedback_1.DEFAULT_ALIGNABLE_ELEMENT_FILTER,
    minimumMoveDelta: exports.DEFAULT_MOVE_DELTA,
    debug: helper_line_feedback_1.DEFAULT_DEBUG
};
let HelperLineManager = class HelperLineManager {
    init() {
        this.feedback = this.feedbackDispatcher.createEmitter();
        const dynamicOptions = {};
        if (this.grid) {
            dynamicOptions.alignmentEpsilon = 0;
            dynamicOptions.minimumMoveDelta = sprotty_1.Point.multiplyScalar(this.grid, 2);
        }
        this.options = { ...exports.DEFAULT_HELPER_LINE_OPTIONS, ...dynamicOptions, ...this.userOptions };
        this.selectionService.addListener(this);
    }
    handle(action) {
        if (change_bounds_tool_feedback_1.MoveInitializedEventAction.is(action)) {
            this.handleMoveInitializedAction(action);
        }
        else if (sprotty_1.MoveAction.is(action)) {
            this.handleMoveAction(action);
        }
        else if (change_bounds_tool_feedback_1.MoveFinishedEventAction.is(action)) {
            this.handleMoveFinishedAction(action);
        }
        else if (sprotty_1.SetBoundsAction.is(action) || set_bounds_feedback_command_1.SetBoundsFeedbackAction.is(action)) {
            this.handleSetBoundsAction(action);
        }
    }
    handleMoveInitializedAction(_action) {
        this.submitHelperLineFeedback();
    }
    handleMoveFinishedAction(_action) {
        this.feedback.dispose();
    }
    handleMoveAction(action) {
        if (!action.finished) {
            this.submitHelperLineFeedback(action.moves.map(move => move.elementId));
        }
        else {
            this.feedback.dispose();
        }
    }
    submitHelperLineFeedback(elementIds = this.selectionService.getSelectedElementIDs()) {
        const feedback = this.createHelperLineFeedback(elementIds);
        this.feedback.add(feedback, [helper_line_feedback_1.RemoveHelperLinesFeedbackAction.create()]).submit();
    }
    createHelperLineFeedback(elementIds) {
        return helper_line_feedback_1.DrawHelperLinesFeedbackAction.create({ elementIds, ...this.options });
    }
    handleSetBoundsAction(action) {
        this.submitHelperLineFeedback(action.bounds.map(bound => bound.elementId));
    }
    selectionChanged(root, selectedElements, deselectedElements) {
        this.feedback.dispose();
    }
    getMinimumMoveDelta(element, isSnap, direction) {
        if (!isSnap) {
            return 0;
        }
        const minimumMoveDelta = this.options.minimumMoveDelta;
        return direction === model_2.Direction.Left || direction === model_2.Direction.Right ? minimumMoveDelta.x : minimumMoveDelta.y;
    }
    getMinimumMoveVector(element, isSnap, move) {
        if (!isSnap) {
            return undefined;
        }
        const state = this.getHelperLineState(element);
        if (state.helperLines.length === 0) {
            return undefined;
        }
        const minimum = { ...sprotty_1.Vector.ZERO };
        const resize = element instanceof model_1.GResizeHandle
            ? model_1.ResizeHandleLocation.direction(element.location)
            : [model_2.Direction.Left, model_2.Direction.Right, model_2.Direction.Up, model_2.Direction.Down];
        if ((state.types.left || state.types.center) && move.includes(model_2.Direction.Left) && resize.includes(model_2.Direction.Left)) {
            minimum.x = this.getMinimumMoveDelta(element, isSnap, model_2.Direction.Left);
        }
        else if ((state.types.right || state.types.center) && move.includes(model_2.Direction.Right) && resize.includes(model_2.Direction.Right)) {
            minimum.x = this.getMinimumMoveDelta(element, isSnap, model_2.Direction.Right);
        }
        if ((state.types.top || state.types.middle) && move.includes(model_2.Direction.Up) && resize.includes(model_2.Direction.Up)) {
            minimum.y = this.getMinimumMoveDelta(element, isSnap, model_2.Direction.Up);
        }
        else if ((state.types.bottom || state.types.middle) && move.includes(model_2.Direction.Down) && resize.includes(model_2.Direction.Down)) {
            minimum.y = this.getMinimumMoveDelta(element, isSnap, model_2.Direction.Down);
        }
        return sprotty_1.Vector.isZero(minimum) ? undefined : minimum;
    }
    getHelperLineState(element) {
        const helperLines = element.root.children.filter(model_2.isHelperLine) || [];
        const types = {
            left: false,
            right: false,
            top: false,
            bottom: false,
            center: false,
            middle: false
        };
        for (const line of helperLines) {
            switch (line.lineType) {
                case model_2.HelperLineType.Left:
                case model_2.HelperLineType.LeftRight:
                    types.left = true;
                    break;
                case model_2.HelperLineType.Right:
                case model_2.HelperLineType.RightLeft:
                    types.right = true;
                    break;
                case model_2.HelperLineType.Top:
                case model_2.HelperLineType.TopBottom:
                    types.top = true;
                    break;
                case model_2.HelperLineType.Bottom:
                case model_2.HelperLineType.BottomTop:
                    types.bottom = true;
                    break;
                case model_2.HelperLineType.Center:
                    types.center = true;
                    break;
                case model_2.HelperLineType.Middle:
                    types.middle = true;
                    break;
            }
        }
        return { helperLines, types };
    }
};
exports.HelperLineManager = HelperLineManager;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], HelperLineManager.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], HelperLineManager.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.inject)(sprotty_1.TYPES.IHelperLineOptions),
    __metadata("design:type", Object)
], HelperLineManager.prototype, "userOptions", void 0);
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    __metadata("design:type", Object)
], HelperLineManager.prototype, "grid", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HelperLineManager.prototype, "init", null);
exports.HelperLineManager = HelperLineManager = __decorate([
    (0, inversify_1.injectable)()
], HelperLineManager);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-module.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-module.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.helperLineModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const set_bounds_feedback_command_1 = __webpack_require__(/*! ../bounds/set-bounds-feedback-command */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/set-bounds-feedback-command.js");
const change_bounds_tool_feedback_1 = __webpack_require__(/*! ../tools/change-bounds/change-bounds-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js");
const helper_line_feedback_1 = __webpack_require__(/*! ./helper-line-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-feedback.js");
const helper_line_manager_1 = __webpack_require__(/*! ./helper-line-manager */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-manager.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/model.js");
const view_1 = __webpack_require__(/*! ./view */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/view.js");
exports.helperLineModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.configureModelElement)(context, model_1.HELPER_LINE, model_1.HelperLine, view_1.HelperLineView);
    (0, sprotty_1.configureModelElement)(context, model_1.SELECTION_BOUNDS, model_1.SelectionBounds, view_1.SelectionBoundsView);
    (0, sprotty_1.configureCommand)(context, helper_line_feedback_1.DrawHelperLinesFeedbackCommand);
    (0, sprotty_1.configureCommand)(context, helper_line_feedback_1.RemoveHelperLinesFeedbackCommand);
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IHelperLineManager, helper_line_manager_1.HelperLineManager);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.SetBoundsAction.KIND, sprotty_1.TYPES.IHelperLineManager);
    (0, sprotty_1.configureActionHandler)(context, set_bounds_feedback_command_1.SetBoundsFeedbackAction.KIND, sprotty_1.TYPES.IHelperLineManager);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.MoveAction.KIND, sprotty_1.TYPES.IHelperLineManager);
    (0, sprotty_1.configureActionHandler)(context, change_bounds_tool_feedback_1.MoveInitializedEventAction.KIND, sprotty_1.TYPES.IHelperLineManager);
    (0, sprotty_1.configureActionHandler)(context, change_bounds_tool_feedback_1.MoveFinishedEventAction.KIND, sprotty_1.TYPES.IHelperLineManager);
}, { featureId: Symbol('helperLine') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/model.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/helper-lines/model.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Direction = exports.getDirectionOf = exports.SelectionBounds = exports.SELECTION_BOUNDS = exports.HelperLine = exports.HELPER_LINE = exports.HelperLineType = void 0;
exports.isHelperLine = isHelperLine;
exports.isSelectionBounds = isSelectionBounds;
exports.getDirectionFrom = getDirectionFrom;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const uuid_1 = __webpack_require__(/*! uuid */ "../node_modules/uuid/dist/commonjs-browser/index.js");
const model_1 = __webpack_require__(/*! ../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
exports.HelperLineType = {
    Left: 'left',
    Right: 'right',
    Center: 'center',
    Top: 'top',
    Bottom: 'bottom',
    Middle: 'middle',
    LeftRight: 'left-right',
    RightLeft: 'right-left',
    BottomTop: 'bottom-top',
    TopBottom: 'top-bottom'
};
exports.HELPER_LINE = 'helper-line';
class HelperLine extends sprotty_1.GChildElement {
    constructor(startPoint = sprotty_1.Point.ORIGIN, endPoint = sprotty_1.Point.ORIGIN, lineType = exports.HelperLineType.Left) {
        super();
        this.startPoint = startPoint;
        this.endPoint = endPoint;
        this.lineType = lineType;
        this.id = (0, uuid_1.v4)();
        this.type = exports.HELPER_LINE;
    }
    get isLeft() {
        return this.lineType === exports.HelperLineType.Left || this.lineType === exports.HelperLineType.LeftRight;
    }
    get isRight() {
        return this.lineType === exports.HelperLineType.Right || this.lineType === exports.HelperLineType.RightLeft;
    }
    get isTop() {
        return this.lineType === exports.HelperLineType.Top || this.lineType === exports.HelperLineType.TopBottom;
    }
    get isBottom() {
        return this.lineType === exports.HelperLineType.Bottom || this.lineType === exports.HelperLineType.BottomTop;
    }
    get isMiddle() {
        return this.lineType === exports.HelperLineType.Middle;
    }
    get isCenter() {
        return this.lineType === exports.HelperLineType.Center;
    }
}
exports.HelperLine = HelperLine;
function isHelperLine(element) {
    return element.type === exports.HELPER_LINE;
}
exports.SELECTION_BOUNDS = 'selection-bounds';
class SelectionBounds extends sprotty_1.GShapeElement {
    constructor(bounds) {
        super();
        this.id = (0, uuid_1.v4)();
        this.type = exports.SELECTION_BOUNDS;
        if (bounds) {
            this.bounds = bounds;
        }
    }
}
exports.SelectionBounds = SelectionBounds;
function isSelectionBounds(element) {
    return element.type === exports.SELECTION_BOUNDS;
}
// kept for backwards compatibility after moving the definition
exports.getDirectionOf = sprotty_1.Vector.direction;
function getDirectionFrom(resize) {
    if (resize === model_1.ResizeHandleLocation.TopLeft) {
        return [sprotty_1.Direction.Up, sprotty_1.Direction.Left];
    }
    if (resize === model_1.ResizeHandleLocation.TopRight) {
        return [sprotty_1.Direction.Up, sprotty_1.Direction.Right];
    }
    if (resize === model_1.ResizeHandleLocation.BottomLeft) {
        return [sprotty_1.Direction.Down, sprotty_1.Direction.Left];
    }
    if (resize === model_1.ResizeHandleLocation.BottomRight) {
        return [sprotty_1.Direction.Down, sprotty_1.Direction.Right];
    }
    return [];
}
// re-export for backwards compatibility after moving the definition
var sprotty_2 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
Object.defineProperty(exports, "Direction", ({ enumerable: true, get: function () { return sprotty_2.Direction; } }));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/view.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/helper-lines/view.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionBoundsView = exports.HelperLineView = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let HelperLineView = class HelperLineView extends sprotty_1.ShapeView {
    render(model, _context) {
        return ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("line", { "data-alignment": model.lineType, x1: model.startPoint.x, y1: model.startPoint.y, x2: model.endPoint.x, y2: model.endPoint.y, "class-helper-line": true })));
    }
};
exports.HelperLineView = HelperLineView;
exports.HelperLineView = HelperLineView = __decorate([
    (0, inversify_1.injectable)()
], HelperLineView);
let SelectionBoundsView = class SelectionBoundsView extends sprotty_1.ShapeView {
    render(model, context, args) {
        if (!this.isVisible(model, context)) {
            return undefined;
        }
        return ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("rect", { "class-selection-bounds": true, x: 0, y: 0, width: Math.max(model.size.width, 0), height: Math.max(model.size.height, 0) })));
    }
};
exports.SelectionBoundsView = SelectionBoundsView;
exports.SelectionBoundsView = SelectionBoundsView = __decorate([
    (0, inversify_1.injectable)()
], SelectionBoundsView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/hints/model.js":
/*!************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/hints/model.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reparentFeature = exports.containerFeature = void 0;
exports.isContainable = isContainable;
exports.isReparentable = isReparentable;
exports.containerFeature = Symbol('containable');
function isContainable(element) {
    return element.hasFeature(exports.containerFeature);
}
exports.reparentFeature = Symbol('reparentFeature');
function isReparentable(element) {
    return element.hasFeature(exports.reparentFeature);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/hints/type-hint-provider.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/hints/type-hint-provider.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHintProvider = exports.ApplyTypeHintsCommand = exports.ApplyTypeHintsAction = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const feedback_command_1 = __webpack_require__(/*! ../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const model_1 = __webpack_require__(/*! ../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const model_2 = __webpack_require__(/*! ../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const model_3 = __webpack_require__(/*! ../reconnect/model */ "../node_modules/@eclipse-glsp/client/lib/features/reconnect/model.js");
const model_4 = __webpack_require__(/*! ./model */ "../node_modules/@eclipse-glsp/client/lib/features/hints/model.js");
var ApplyTypeHintsAction;
(function (ApplyTypeHintsAction) {
    ApplyTypeHintsAction.KIND = 'applyTypeHints';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ApplyTypeHintsAction.KIND);
    }
    ApplyTypeHintsAction.is = is;
    function create() {
        return { kind: ApplyTypeHintsAction.KIND };
    }
    ApplyTypeHintsAction.create = create;
})(ApplyTypeHintsAction || (exports.ApplyTypeHintsAction = ApplyTypeHintsAction = {}));
/**
 * Command that processes the entire model and for each model element applies its
 * type hints i.e. translates the type hint information into corresponding model features
 * and adds/removes them from the model element.
 */
let ApplyTypeHintsCommand = class ApplyTypeHintsCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
        this.rank = -10;
    }
    execute(context) {
        context.root.index.all().forEach(element => {
            if (element instanceof sprotty_1.GShapeElement || element instanceof sprotty_1.GModelRoot) {
                return this.applyShapeTypeHint(element);
            }
            if (element instanceof model_1.GEdge) {
                this.applyEdgeTypeHint(element);
            }
        });
        return context.root;
    }
    applyEdgeTypeHint(element) {
        const hint = this.typeHintProvider.getEdgeTypeHint(element);
        if (hint && element.features instanceof Set) {
            addOrRemove(element.features, sprotty_1.deletableFeature, hint.deletable);
            addOrRemove(element.features, sprotty_1.editFeature, hint.routable);
            addOrRemove(element.features, model_3.reconnectFeature, hint.repositionable);
        }
    }
    applyShapeTypeHint(element) {
        const hint = this.typeHintProvider.getShapeTypeHint(element);
        if (hint && element.features instanceof Set) {
            addOrRemove(element.features, sprotty_1.deletableFeature, hint.deletable);
            addOrRemove(element.features, sprotty_1.moveFeature, hint.repositionable);
            addOrRemove(element.features, model_2.resizeFeature, hint.resizable);
            addOrRemove(element.features, model_4.reparentFeature, hint.reparentable);
            addOrRemove(element.features, model_4.containerFeature, true);
            if ((0, model_4.isContainable)(element)) {
                element.isContainableElement = input => this.isContainableElement(input, hint);
            }
            const fallbackCanConnect = (0, sprotty_1.isConnectable)(element) ? element.canConnect.bind(element) : undefined;
            addOrRemove(element.features, sprotty_1.connectableFeature, true);
            if ((0, sprotty_1.isConnectable)(element)) {
                element.canConnect = (routable, role) => this.canConnect(routable, role, element, fallbackCanConnect);
            }
        }
    }
    /**
     * Type hints aware wrapper function for  `Connectable.canConnect`. After type hints have been applied
     * the `canConnect` implementation of `connectable` model elements  (with a matching hint) will forward to this method.
     */
    canConnect(routable, role, element, fallbackCanConnect) {
        var _a;
        const edgeHint = this.typeHintProvider.getEdgeTypeHint(routable.type);
        if (!edgeHint) {
            return (_a = fallbackCanConnect === null || fallbackCanConnect === void 0 ? void 0 : fallbackCanConnect(routable, role)) !== null && _a !== void 0 ? _a : false;
        }
        const validElementIds = role === 'source' ? edgeHint.sourceElementTypeIds : edgeHint.targetElementTypeIds;
        // If no source/target element ids are defined in the hint all elements are considered valid
        if (!validElementIds) {
            return true;
        }
        const elementType = element.type + ':';
        return validElementIds.some(type => elementType.startsWith(type));
    }
    /**
     * Type hints aware wrapper function for  `Containable.isContainableElement`. After type hints have been applied
     * the `isContainableElement` implementation of `containable` model elements (with a matching hint) will forward to this method.
     */
    isContainableElement(input, hint) {
        var _a, _b;
        const elemenType = (0, gmodel_util_1.getElementTypeId)(input) + ':';
        return (_b = (_a = hint.containableElementTypeIds) === null || _a === void 0 ? void 0 : _a.some(type => elemenType.startsWith(type))) !== null && _b !== void 0 ? _b : false;
    }
};
exports.ApplyTypeHintsCommand = ApplyTypeHintsCommand;
ApplyTypeHintsCommand.KIND = ApplyTypeHintsAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ITypeHintProvider),
    __metadata("design:type", Object)
], ApplyTypeHintsCommand.prototype, "typeHintProvider", void 0);
exports.ApplyTypeHintsCommand = ApplyTypeHintsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ApplyTypeHintsCommand);
function addOrRemove(features, feature, add) {
    if (add && !features.has(feature)) {
        features.add(feature);
    }
    else if (!add && features.has(feature)) {
        features.delete(feature);
    }
}
let TypeHintProvider = class TypeHintProvider {
    constructor() {
        this.shapeHints = new Map();
        this.edgeHints = new Map();
    }
    init() {
        this.typeHintsFeedback = this.feedbackActionDispatcher.createEmitter();
    }
    handle(action) {
        this.shapeHints.clear();
        this.edgeHints.clear();
        action.shapeHints.forEach(hint => this.shapeHints.set(hint.elementTypeId, hint));
        action.edgeHints.forEach(hint => this.edgeHints.set(hint.elementTypeId, hint));
        this.typeHintsFeedback.add(ApplyTypeHintsAction.create()).submit();
    }
    getShapeTypeHint(input) {
        return this.getTypeHint(input, this.shapeHints);
    }
    getEdgeTypeHint(input) {
        return this.getTypeHint(input, this.edgeHints);
    }
    getTypeHint(input, hints) {
        const type = (0, gmodel_util_1.getElementTypeId)(input);
        let hint = hints.get(type);
        // Check subtypes
        if (hint === undefined) {
            const subtypes = type.split(':');
            while (hint === undefined && subtypes.length > 0) {
                subtypes.pop();
                hint = hints.get(subtypes.join(':'));
                if (hint) {
                    // add received subtype hint to map to avoid future recomputation
                    hints.set(type, hint);
                    break;
                }
            }
        }
        return hint;
    }
    async postRequestModel() {
        const setTypeHintsAction = await this.actionDispatcher.request(sprotty_1.RequestTypeHintsAction.create());
        this.handle(setTypeHintsAction);
    }
};
exports.TypeHintProvider = TypeHintProvider;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], TypeHintProvider.prototype, "feedbackActionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], TypeHintProvider.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TypeHintProvider.prototype, "init", null);
exports.TypeHintProvider = TypeHintProvider = __decorate([
    (0, inversify_1.injectable)()
], TypeHintProvider);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/hints/type-hints-module.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/hints/type-hints-module.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.typeHintsModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const type_hint_provider_1 = __webpack_require__(/*! ./type-hint-provider */ "../node_modules/@eclipse-glsp/client/lib/features/hints/type-hint-provider.js");
exports.typeHintsModule = new sprotty_1.FeatureModule((bind, unbind, isBound) => {
    const context = { bind, unbind, isBound };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.ITypeHintProvider, type_hint_provider_1.TypeHintProvider);
    bind(sprotty_1.TYPES.IDiagramStartup).toService(type_hint_provider_1.TypeHintProvider);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.SetTypeHintsAction.KIND, type_hint_provider_1.TypeHintProvider);
    (0, sprotty_1.configureCommand)(context, type_hint_provider_1.ApplyTypeHintsCommand);
}, { featureId: Symbol('typeHints') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/hover/hover-module.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/hover/hover-module.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hoverModule = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const focus_state_change_action_1 = __webpack_require__(/*! ../../base/focus/focus-state-change-action */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const hover_1 = __webpack_require__(/*! ./hover */ "../node_modules/@eclipse-glsp/client/lib/features/hover/hover.js");
exports.hoverModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.PopupVNodePostprocessor, sprotty_1.PopupPositionUpdater);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.MouseListener, hover_1.GlspHoverMouseListener);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.PopupMouseListener, sprotty_1.PopupHoverMouseListener);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.KeyListener, sprotty_1.HoverKeyListener);
    bind(sprotty_1.TYPES.HoverState).toConstantValue({
        mouseOverTimer: undefined,
        mouseOutTimer: undefined,
        popupOpen: false,
        previousPopupElement: undefined
    });
    bind(sprotty_1.ClosePopupActionHandler).toSelf().inSingletonScope();
    (0, sprotty_1.configureCommand)(context, sprotty_1.HoverFeedbackCommand);
    (0, sprotty_1.configureCommand)(context, sprotty_1.SetPopupModelCommand);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.SetPopupModelCommand.KIND, sprotty_1.ClosePopupActionHandler);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.FitToScreenCommand.KIND, sprotty_1.ClosePopupActionHandler);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.CenterCommand.KIND, sprotty_1.ClosePopupActionHandler);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.SetViewportCommand.KIND, sprotty_1.ClosePopupActionHandler);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.MoveCommand.KIND, sprotty_1.ClosePopupActionHandler);
    (0, sprotty_1.configureActionHandler)(context, focus_state_change_action_1.FocusStateChangedAction.KIND, sprotty_1.ClosePopupActionHandler);
    (0, sprotty_1.configureActionHandler)(context, tool_1.EnableToolsAction.KIND, hover_1.GlspHoverMouseListener);
    (0, sprotty_1.configureActionHandler)(context, tool_1.EnableDefaultToolsAction.KIND, hover_1.GlspHoverMouseListener);
    (0, sprotty_1.configureActionHandler)(context, focus_state_change_action_1.FocusStateChangedAction.KIND, hover_1.GlspHoverMouseListener);
}, { featureId: Symbol('hover') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/hover/hover.js":
/*!************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/hover/hover.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlspHoverMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2020-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const focus_state_change_action_1 = __webpack_require__(/*! ../../base/focus/focus-state-change-action */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js");
const messages_1 = __webpack_require__(/*! ../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const edge_creation_tool_1 = __webpack_require__(/*! ../tools/edge-creation/edge-creation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool.js");
const issue_marker_1 = __webpack_require__(/*! ../validation/issue-marker */ "../node_modules/@eclipse-glsp/client/lib/features/validation/issue-marker.js");
let GlspHoverMouseListener = class GlspHoverMouseListener extends sprotty_1.HoverMouseListener {
    constructor() {
        super(...arguments);
        this.enableHover = true;
    }
    /**
     * Stops mouse over timer and remove hover feedback, if focus is lost.
     *
     * This fixes strange effects that appear if the mouse left the element via e.g. a context menu,
     * which explicitly removes the focus of the diagram.
     * @see SelectionServiceAwareContextMenuMouseListener
     * @param action should be a `FocusStateChangedAction`
     * @returns a `HoverFeedbackAction` resetting the state, if the specified action indicates lost focus
     */
    handle(action) {
        if (focus_state_change_action_1.FocusStateChangedAction.is(action) && !action.hasFocus) {
            this.stopMouseOverTimer();
            if (this.lastHoverFeedbackElementId) {
                const previousTargetId = this.lastHoverFeedbackElementId;
                this.lastHoverFeedbackElementId = undefined;
                return sprotty_1.HoverFeedbackAction.create({ mouseoverElement: previousTargetId, mouseIsOver: false });
            }
        }
        else if (tool_1.EnableToolsAction.is(action)) {
            this.enableHover = !action.toolIds.includes(edge_creation_tool_1.EdgeCreationTool.ID);
        }
        else if (tool_1.EnableDefaultToolsAction.is(action)) {
            this.enableHover = true;
        }
    }
    mouseOver(target, event) {
        if (this.enableHover) {
            return super.mouseOver(target, event);
        }
        return [];
    }
    startMouseOverTimer(target, event) {
        this.stopMouseOverTimer();
        return new Promise(resolve => {
            this.state.mouseOverTimer = window.setTimeout(() => {
                const popupBounds = this.computePopupBounds(target, { x: event.pageX, y: event.pageY });
                if (target instanceof issue_marker_1.GIssueMarker) {
                    resolve(sprotty_1.SetPopupModelAction.create(this.createPopupModel(target, popupBounds)));
                }
                else {
                    resolve(sprotty_1.RequestPopupModelAction.create({ elementId: target.id, bounds: popupBounds }));
                }
                this.state.popupOpen = true;
                this.state.previousPopupElement = target;
            }, this.options.popupOpenDelay);
        });
    }
    createPopupModel(marker, bounds) {
        if (marker.issues !== undefined && marker.issues.length > 0) {
            return {
                type: 'html',
                id: 'sprotty-popup',
                children: [this.createMarkerIssuePopup(marker)],
                canvasBounds: this.modifyBounds(bounds)
            };
        }
        return { type: sprotty_1.EMPTY_ROOT.type, id: sprotty_1.EMPTY_ROOT.id };
    }
    createMarkerIssuePopup(marker) {
        const message = this.createIssueMessage(marker);
        return {
            type: 'pre-rendered',
            id: 'popup-title',
            code: `<div class="${(0, issue_marker_1.getSeverity)(marker)}"><div class="sprotty-popup-title">${message}</div></div>`
        };
    }
    createIssueMessage(marker) {
        return '<ul>' + marker.issues.map(i => '<li>' + this.getSeverityString(i.severity) + ': ' + i.message + '</li>').join('') + '</ul>';
    }
    getSeverityString(severity) {
        switch (severity) {
            case 'error':
                return messages_1.messages.issue_marker.severity_error;
            case 'warning':
                return messages_1.messages.issue_marker.severity_warning;
            case 'info':
                return messages_1.messages.issue_marker.severity_info;
        }
    }
    modifyBounds(bounds) {
        return bounds;
    }
};
exports.GlspHoverMouseListener = GlspHoverMouseListener;
exports.GlspHoverMouseListener = GlspHoverMouseListener = __decorate([
    (0, inversify_1.injectable)()
], GlspHoverMouseListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/label-edit-ui/label-edit-ui-module.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/label-edit-ui/label-edit-ui-module.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.labelEditUiModule = void 0;
/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const label_edit_ui_1 = __webpack_require__(/*! ./label-edit-ui */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit-ui/label-edit-ui.js");
exports.labelEditUiModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind, ...rest) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.EditLabelAction.KIND, sprotty_1.EditLabelActionHandler);
    bind(label_edit_ui_1.GlspEditLabelUI).toSelf().inSingletonScope();
    bind(sprotty_1.TYPES.IUIExtension).toService(label_edit_ui_1.GlspEditLabelUI);
}, { featureId: Symbol('labelEditUi') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/label-edit-ui/label-edit-ui.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/label-edit-ui/label-edit-ui.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlspEditLabelUI = void 0;
/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
let GlspEditLabelUI = class GlspEditLabelUI extends sprotty_1.EditLabelUI {
    initializeContents(containerElement) {
        super.initializeContents(containerElement);
        containerElement.classList.add(ui_extension_1.CSS_UI_EXTENSION_CLASS);
    }
    setContainerVisible(visible) {
        var _a, _b;
        if (visible) {
            (_a = this.containerElement) === null || _a === void 0 ? void 0 : _a.classList.remove(ui_extension_1.CSS_HIDDEN_EXTENSION_CLASS);
            this.editControl.focus();
        }
        else {
            (_b = this.containerElement) === null || _b === void 0 ? void 0 : _b.classList.add(ui_extension_1.CSS_HIDDEN_EXTENSION_CLASS);
        }
    }
};
exports.GlspEditLabelUI = GlspEditLabelUI;
exports.GlspEditLabelUI = GlspEditLabelUI = __decorate([
    (0, inversify_1.injectable)()
], GlspEditLabelUI);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/edit-label-tool.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/label-edit/edit-label-tool.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DirectLabelEditTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DirectLabelEditTool = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const base_tools_1 = __webpack_require__(/*! ../tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
let DirectLabelEditTool = DirectLabelEditTool_1 = class DirectLabelEditTool extends base_tools_1.BaseEditTool {
    get id() {
        return DirectLabelEditTool_1.ID;
    }
    createEditLabelMouseListener() {
        return new sprotty_1.EditLabelMouseListener();
    }
    createEditLabelKeyListener() {
        return new sprotty_1.EditLabelKeyListener();
    }
    enable() {
        this.toDisposeOnDisable.push(this.mouseTool.registerListener(this.createEditLabelMouseListener()), this.keyTool.registerListener(this.createEditLabelKeyListener()));
    }
};
exports.DirectLabelEditTool = DirectLabelEditTool;
DirectLabelEditTool.ID = 'glsp.direct-label-edit-tool';
exports.DirectLabelEditTool = DirectLabelEditTool = DirectLabelEditTool_1 = __decorate([
    (0, inversify_1.injectable)()
], DirectLabelEditTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/edit-label-validator.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/label-edit/edit-label-validator.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BalloonLabelValidationDecorator = exports.ServerEditLabelValidator = exports.LabelEditValidation = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
var LabelEditValidation;
(function (LabelEditValidation) {
    LabelEditValidation.CONTEXT_ID = 'label-edit';
    function toEditLabelValidationResult(status) {
        const message = status.message;
        let severity = 'ok';
        if (sprotty_1.ValidationStatus.isError(status)) {
            severity = 'error';
        }
        else if (sprotty_1.ValidationStatus.isWarning(status)) {
            severity = 'warning';
        }
        return { message, severity };
    }
    LabelEditValidation.toEditLabelValidationResult = toEditLabelValidationResult;
    function createValidationRequestAction(value, labelId) {
        return sprotty_1.RequestEditValidationAction.create({ contextId: LabelEditValidation.CONTEXT_ID, modelElementId: labelId, text: value });
    }
    LabelEditValidation.createValidationRequestAction = createValidationRequestAction;
})(LabelEditValidation || (exports.LabelEditValidation = LabelEditValidation = {}));
let ServerEditLabelValidator = class ServerEditLabelValidator {
    async validate(value, label) {
        const action = LabelEditValidation.createValidationRequestAction(value, label.id);
        const response = await this.actionDispatcher.requestUntil(action);
        return response ? this.getValidationResultFromResponse(response) : { severity: 'ok' };
    }
    getValidationResultFromResponse(action) {
        if (sprotty_1.SetEditValidationResultAction.is(action)) {
            return LabelEditValidation.toEditLabelValidationResult(action.status);
        }
        return { severity: 'ok' };
    }
};
exports.ServerEditLabelValidator = ServerEditLabelValidator;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ServerEditLabelValidator.prototype, "actionDispatcher", void 0);
exports.ServerEditLabelValidator = ServerEditLabelValidator = __decorate([
    (0, inversify_1.injectable)()
], ServerEditLabelValidator);
let BalloonLabelValidationDecorator = class BalloonLabelValidationDecorator {
    decorate(input, result) {
        const containerElement = input.parentElement;
        if (!containerElement) {
            return;
        }
        if (result.message) {
            containerElement.setAttribute('data-balloon', result.message);
            containerElement.setAttribute('data-balloon-pos', 'up-left');
            containerElement.setAttribute('data-balloon-visible', 'true');
        }
        switch (result.severity) {
            case 'ok':
                containerElement.classList.add('validation-ok');
                break;
            case 'warning':
                containerElement.classList.add('validation-warning');
                break;
            case 'error':
                containerElement.classList.add('validation-error');
                break;
        }
    }
    dispose(input) {
        const containerElement = input.parentElement;
        if (containerElement) {
            containerElement.removeAttribute('data-balloon');
            containerElement.removeAttribute('data-balloon-pos');
            containerElement.removeAttribute('data-balloon-visible');
            containerElement.classList.remove('validation-ok', 'validation-warning', 'validation-error');
        }
    }
};
exports.BalloonLabelValidationDecorator = BalloonLabelValidationDecorator;
exports.BalloonLabelValidationDecorator = BalloonLabelValidationDecorator = __decorate([
    (0, inversify_1.injectable)()
], BalloonLabelValidationDecorator);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/label-edit-module.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/label-edit/label-edit-module.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.labelEditModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const edit_label_tool_1 = __webpack_require__(/*! ./edit-label-tool */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/edit-label-tool.js");
const edit_label_validator_1 = __webpack_require__(/*! ./edit-label-validator */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/edit-label-validator.js");
exports.labelEditModule = new sprotty_1.FeatureModule((bind, _unbind, isBound, _rebind) => {
    bind(sprotty_1.TYPES.IEditLabelValidator).to(edit_label_validator_1.ServerEditLabelValidator);
    bind(sprotty_1.TYPES.IEditLabelValidationDecorator).to(edit_label_validator_1.BalloonLabelValidationDecorator);
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IDefaultTool, edit_label_tool_1.DirectLabelEditTool);
    (0, sprotty_1.configureCommand)({ bind, isBound }, sprotty_1.ApplyLabelEditCommand);
}, { featureId: Symbol('labelEdit') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/layout/layout-elements-action.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/layout/layout-elements-action.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlignElementsActionHandler = exports.AlignElementsAction = exports.SelectFunction = exports.Alignment = exports.ResizeElementsActionHandler = exports.LayoutElementsActionHandler = exports.ResizeElementsAction = exports.ReduceFunction = exports.ResizeDimension = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const selection_service_1 = __webpack_require__(/*! ../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const layout_utils_1 = __webpack_require__(/*! ../../utils/layout-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/layout-utils.js");
const model_1 = __webpack_require__(/*! ../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
/**
 * Used to specify the desired resize dimension for a {@link ResizeElementsCommand}.
 */
var ResizeDimension;
(function (ResizeDimension) {
    ResizeDimension[ResizeDimension["Width"] = 0] = "Width";
    ResizeDimension[ResizeDimension["Height"] = 1] = "Height";
    ResizeDimension[ResizeDimension["Width_And_Height"] = 2] = "Width_And_Height";
})(ResizeDimension || (exports.ResizeDimension = ResizeDimension = {}));
var ReduceFunction;
(function (ReduceFunction) {
    /**
     * Returns the minimal value of the given numbers.
     * @param values Numbers to be evaluated.
     * @returns The reduced number.
     */
    function min(...values) {
        return Math.min(...values);
    }
    ReduceFunction.min = min;
    /**
     * Returns the maximal value of the given numbers.
     * @param values Numbers to be evaluated.
     * @returns The reduced number.
     */
    function max(...values) {
        return Math.max(...values);
    }
    ReduceFunction.max = max;
    /**
     * Computes the  average of the given numbers.
     * @param values Numbers to be evaluated.
     */
    function avg(...values) {
        return values.reduce((a, b) => a + b, 0) / values.length;
    }
    ReduceFunction.avg = avg;
    /**
     *  Returns the last value of the given numbers.
     *  @param values Numbers to be evaluated.
     *  @returns The reduced number.
     */
    function first(...values) {
        return values[0];
    }
    ReduceFunction.first = first;
    /**
     *  Returns the minimal value of the given numbers.
     *  @param values Numbers  to be evaluated.
     *  @returns The reduced number.
     */
    function last(...values) {
        return values[values.length - 1];
    }
    ReduceFunction.last = last;
    /**
     * Returns the reduce function that corresponds to the given {@link ReduceFunctionType}.
     * @param type The reduce function kind.
     * @returns The corresponding reduce function.
     */
    function get(type) {
        return ReduceFunction[type];
    }
    ReduceFunction.get = get;
})(ReduceFunction || (exports.ReduceFunction = ReduceFunction = {}));
var ResizeElementsAction;
(function (ResizeElementsAction) {
    ResizeElementsAction.KIND = 'resizeElementAction';
    function is(object) {
        return (sprotty_1.Action.hasKind(object, ResizeElementsAction.KIND) &&
            (0, sprotty_1.hasArrayProp)(object, 'elementIds') &&
            (0, sprotty_1.hasNumberProp)(object, 'dimension') &&
            (0, sprotty_1.hasStringProp)(object, 'reduceFunction'));
    }
    ResizeElementsAction.is = is;
    function create(options) {
        return {
            kind: ResizeElementsAction.KIND,
            dimension: ResizeDimension.Width,
            elementIds: [],
            ...options
        };
    }
    ResizeElementsAction.create = create;
})(ResizeElementsAction || (exports.ResizeElementsAction = ResizeElementsAction = {}));
let LayoutElementsActionHandler = class LayoutElementsActionHandler {
    getSelectedElements(selection) {
        const index = this.selectionService.getModelRoot().index;
        const selectedElements = selection.elementIds.length > 0 ? selection.elementIds : this.selectionService.getSelectedElementIDs();
        return (0, gmodel_util_1.getElements)(index, selectedElements, this.isActionElement);
    }
    dispatchAction(action) {
        this.actionDispatcher.dispatch(action);
    }
    dispatchActions(actions) {
        this.actionDispatcher.dispatchAll(actions);
    }
};
exports.LayoutElementsActionHandler = LayoutElementsActionHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], LayoutElementsActionHandler.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], LayoutElementsActionHandler.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IMovementRestrictor),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], LayoutElementsActionHandler.prototype, "movementRestrictor", void 0);
exports.LayoutElementsActionHandler = LayoutElementsActionHandler = __decorate([
    (0, inversify_1.injectable)()
], LayoutElementsActionHandler);
let ResizeElementsActionHandler = class ResizeElementsActionHandler extends LayoutElementsActionHandler {
    handle(action) {
        const elements = this.getSelectedElements(action);
        if (elements.length > 1) {
            const reduceFn = ReduceFunction.get(action.reduceFunction);
            switch (action.dimension) {
                case ResizeDimension.Width:
                    return this.resizeWidth(elements, reduceFn);
                case ResizeDimension.Height:
                    return this.resizeHeight(elements, reduceFn);
                case ResizeDimension.Width_And_Height:
                    return this.resizeWidthAndHeight(elements, reduceFn);
            }
        }
    }
    resizeWidth(elements, reduceFn) {
        const targetWidth = reduceFn(...elements.map(element => element.bounds.width));
        this.dispatchResizeActions(elements, (element, bounds) => {
            // resize around center (horizontal)
            const halfDiffWidth = 0.5 * (targetWidth - element.bounds.width);
            bounds.newPosition.x = element.bounds.x - halfDiffWidth;
            bounds.newSize.width = targetWidth;
        });
    }
    resizeHeight(elements, reduceFn) {
        const targetHeight = reduceFn(...elements.map(element => element.bounds.height));
        this.dispatchResizeActions(elements, (element, bounds) => {
            // resize around middle (vertical)
            const halfDiffHeight = 0.5 * (targetHeight - element.bounds.height);
            bounds.newPosition.y = element.bounds.y - halfDiffHeight;
            bounds.newSize.height = targetHeight;
        });
    }
    resizeWidthAndHeight(elements, reduceFn) {
        const targetWidth = reduceFn(...elements.map(element => element.bounds.width));
        const targetHeight = reduceFn(...elements.map(element => element.bounds.height));
        const targetDimension = { width: targetWidth, height: targetHeight };
        this.dispatchResizeActions(elements, (element, bounds) => {
            // resize around center and middle (horizontal & vertical)
            const difference = sprotty_1.Dimension.subtract(targetDimension, element.bounds);
            const center = sprotty_1.Dimension.center(difference);
            bounds.newPosition = sprotty_1.Point.subtract(element.bounds, center);
            bounds.newSize = targetDimension;
        });
    }
    dispatchResizeActions(elements, change) {
        const elementAndBounds = []; // client- and server-side resize
        elements.forEach(element => {
            const elementChange = this.createElementAndBounds(element, change);
            if (elementChange) {
                // simply skip invalid changes
                elementAndBounds.push(elementChange);
            }
        });
        this.dispatchActions([sprotty_1.SetBoundsAction.create(elementAndBounds), sprotty_1.ChangeBoundsOperation.create(elementAndBounds)]);
    }
    createElementAndBounds(element, change) {
        const bounds = {
            elementId: element.id,
            newPosition: {
                x: element.bounds.x,
                y: element.bounds.y
            },
            newSize: {
                width: element.bounds.width,
                height: element.bounds.height
            }
        };
        change(element, bounds);
        return (0, layout_utils_1.toValidElementAndBounds)(element, bounds, this.movementRestrictor);
    }
    isActionElement(element) {
        return (0, model_1.isResizable)(element);
    }
};
exports.ResizeElementsActionHandler = ResizeElementsActionHandler;
exports.ResizeElementsActionHandler = ResizeElementsActionHandler = __decorate([
    (0, inversify_1.injectable)()
], ResizeElementsActionHandler);
var Alignment;
(function (Alignment) {
    Alignment[Alignment["Left"] = 0] = "Left";
    Alignment[Alignment["Center"] = 1] = "Center";
    Alignment[Alignment["Right"] = 2] = "Right";
    Alignment[Alignment["Top"] = 3] = "Top";
    Alignment[Alignment["Middle"] = 4] = "Middle";
    Alignment[Alignment["Bottom"] = 5] = "Bottom";
})(Alignment || (exports.Alignment = Alignment = {}));
var SelectFunction;
(function (SelectFunction) {
    /**
     * Select all elements from the given set of elements.
     * @param elements The set of elements.
     * @returns All elements.
     */
    function all(elements) {
        return elements;
    }
    SelectFunction.all = all;
    /**
     * Select the first element from a given set of elements.
     * @param elements The elements.
     * @returns An array containing the first element of the given elements.
     */
    function first(elements) {
        return [elements[0]];
    }
    SelectFunction.first = first;
    /**
     * Select the last element from a given set of elements.
     * @param elements The elements.
     * @returns An array containing the last element of the given elements.
     */
    function last(elements) {
        return [elements[elements.length - 1]];
    }
    SelectFunction.last = last;
    /**
     * Returns the select function that corresponds to the given {@link SelectFunctionType}.
     * @param type The select function type.
     * @returns The corresponding select function.
     */
    function get(kind) {
        return SelectFunction[kind];
    }
    SelectFunction.get = get;
})(SelectFunction || (exports.SelectFunction = SelectFunction = {}));
var AlignElementsAction;
(function (AlignElementsAction) {
    AlignElementsAction.KIND = 'alignElements';
    function is(object) {
        return (sprotty_1.Action.hasKind(object, AlignElementsAction.KIND) &&
            (0, sprotty_1.hasArrayProp)(object, 'elementIds') &&
            (0, sprotty_1.hasNumberProp)(object, 'alignment') &&
            (0, sprotty_1.hasStringProp)(object, 'selectFunction'));
    }
    AlignElementsAction.is = is;
    function create(options = {}) {
        return {
            kind: AlignElementsAction.KIND,
            elementIds: [],
            alignment: Alignment.Left,
            selectFunction: 'all',
            ...options
        };
    }
    AlignElementsAction.create = create;
})(AlignElementsAction || (exports.AlignElementsAction = AlignElementsAction = {}));
let AlignElementsActionHandler = class AlignElementsActionHandler extends LayoutElementsActionHandler {
    handle(action) {
        const elements = this.getSelectedElements(action);
        const selectFn = SelectFunction.get(action.selectFunction);
        const calculatedElements = selectFn(elements);
        if (elements.length > 1) {
            switch (action.alignment) {
                case Alignment.Left:
                    return this.alignLeft(calculatedElements);
                case Alignment.Center:
                    return this.alignCenter(calculatedElements);
                case Alignment.Right:
                    return this.alignRight(calculatedElements);
                case Alignment.Top:
                    return this.alignTop(calculatedElements);
                case Alignment.Middle:
                    return this.alignMiddle(calculatedElements);
                case Alignment.Bottom:
                    return this.alignBottom(calculatedElements);
            }
        }
    }
    alignLeft(elements) {
        const minX = elements.map(element => element.bounds.x).reduce((a, b) => Math.min(a, b));
        this.dispatchAlignActions(elements, (_, move) => (move.toPosition.x = minX));
    }
    alignCenter(elements) {
        const minX = elements.map(element => element.bounds.x).reduce((a, b) => Math.min(a, b));
        const maxX = elements.map(element => element.bounds.x + element.bounds.width).reduce((a, b) => Math.max(a, b));
        const diffX = maxX - minX;
        const centerX = minX + 0.5 * diffX;
        this.dispatchAlignActions(elements, (element, move) => (move.toPosition.x = centerX - 0.5 * element.bounds.width));
    }
    alignRight(elements) {
        const maxX = elements.map(element => element.bounds.x + element.bounds.width).reduce((a, b) => Math.max(a, b));
        this.dispatchAlignActions(elements, (element, move) => (move.toPosition.x = maxX - element.bounds.width));
    }
    alignTop(elements) {
        const minY = elements.map(element => element.bounds.y).reduce((a, b) => Math.min(a, b));
        this.dispatchAlignActions(elements, (_, move) => (move.toPosition.y = minY));
    }
    alignMiddle(elements) {
        const minY = elements.map(element => element.bounds.y).reduce((a, b) => Math.min(a, b));
        const maxY = elements.map(element => element.bounds.y + element.bounds.height).reduce((a, b) => Math.max(a, b));
        const diffY = maxY - minY;
        const middleY = minY + 0.5 * diffY;
        this.dispatchAlignActions(elements, (element, move) => (move.toPosition.y = middleY - 0.5 * element.bounds.height));
    }
    alignBottom(elements) {
        const maxY = elements.map(element => element.bounds.y + element.bounds.height).reduce((a, b) => Math.max(a, b));
        this.dispatchAlignActions(elements, (element, move) => (move.toPosition.y = maxY - element.bounds.height));
    }
    dispatchAlignActions(elements, change) {
        const moves = []; // client-side move
        const elementAndBounds = []; // server-side move
        elements.forEach(element => {
            const move = this.createElementMove(element, change);
            if (move) {
                // simply skip invalid changes
                moves.push(move);
                const elementAndBound = this.createElementAndBounds(element, move);
                elementAndBounds.push(elementAndBound);
            }
        });
        this.dispatchActions([sprotty_1.MoveAction.create(moves), sprotty_1.ChangeBoundsOperation.create(elementAndBounds)]);
    }
    createElementMove(element, change) {
        const move = {
            elementId: element.id,
            fromPosition: {
                x: element.bounds.x,
                y: element.bounds.y
            },
            toPosition: {
                x: element.bounds.x,
                y: element.bounds.y
            }
        };
        change(element, move);
        return (0, layout_utils_1.toValidElementMove)(element, move, this.movementRestrictor);
    }
    createElementAndBounds(element, move) {
        return {
            elementId: element.id,
            newPosition: {
                x: move.toPosition.x,
                y: move.toPosition.y
            },
            newSize: {
                width: element.bounds.width,
                height: element.bounds.height
            }
        };
    }
    isActionElement(element) {
        return (0, model_1.isBoundsAwareMoveable)(element);
    }
};
exports.AlignElementsActionHandler = AlignElementsActionHandler;
exports.AlignElementsActionHandler = AlignElementsActionHandler = __decorate([
    (0, inversify_1.injectable)()
], AlignElementsActionHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/layout/layout-module.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/layout/layout-module.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.layoutModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const layout_elements_action_1 = __webpack_require__(/*! ./layout-elements-action */ "../node_modules/@eclipse-glsp/client/lib/features/layout/layout-elements-action.js");
const trigger_layout_action_handler_1 = __webpack_require__(/*! ./trigger-layout-action-handler */ "../node_modules/@eclipse-glsp/client/lib/features/layout/trigger-layout-action-handler.js");
exports.layoutModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.configureActionHandler)(context, layout_elements_action_1.ResizeElementsAction.KIND, layout_elements_action_1.ResizeElementsActionHandler);
    (0, sprotty_1.configureActionHandler)(context, layout_elements_action_1.AlignElementsAction.KIND, layout_elements_action_1.AlignElementsActionHandler);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.TriggerLayoutAction.KIND, trigger_layout_action_handler_1.TriggerLayoutActionHandler);
}, { featureId: Symbol('layout') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/layout/trigger-layout-action-handler.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/layout/trigger-layout-action-handler.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TriggerLayoutActionHandler = void 0;
/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
/**
 * The handler for {@link TriggerLayoutAction}s.
 * This handler provides some client-level information to the layout operation.
 */
let TriggerLayoutActionHandler = class TriggerLayoutActionHandler {
    handle(action) {
        return sprotty_1.LayoutOperation.create(this.editorContext.get().selectedElementIds, {
            args: action.args,
            canvasBounds: this.editorContext.canvasBounds,
            viewport: this.editorContext.viewportData
        });
    }
};
exports.TriggerLayoutActionHandler = TriggerLayoutActionHandler;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], TriggerLayoutActionHandler.prototype, "editorContext", void 0);
exports.TriggerLayoutActionHandler = TriggerLayoutActionHandler = __decorate([
    (0, inversify_1.injectable)()
], TriggerLayoutActionHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-action-handler.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-action-handler.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigationActionHandler = exports.ProcessNavigationArgumentsAction = exports.NavigateAction = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const navigation_target_resolver_1 = __webpack_require__(/*! ./navigation-target-resolver */ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-target-resolver.js");
var NavigateAction;
(function (NavigateAction) {
    NavigateAction.KIND = 'navigate';
    function is(object) {
        return sprotty_1.Action.hasKind(object, NavigateAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'targetTypeId');
    }
    NavigateAction.is = is;
    function create(targetTypeId, options = {}) {
        return {
            kind: NavigateAction.KIND,
            targetTypeId,
            ...options
        };
    }
    NavigateAction.create = create;
})(NavigateAction || (exports.NavigateAction = NavigateAction = {}));
var ProcessNavigationArgumentsAction;
(function (ProcessNavigationArgumentsAction) {
    ProcessNavigationArgumentsAction.KIND = 'processNavigationArguments';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ProcessNavigationArgumentsAction.KIND) && (0, sprotty_1.hasObjectProp)(object, 'args');
    }
    ProcessNavigationArgumentsAction.is = is;
    function create(args) {
        return {
            kind: ProcessNavigationArgumentsAction.KIND,
            args
        };
    }
    ProcessNavigationArgumentsAction.create = create;
})(ProcessNavigationArgumentsAction || (exports.ProcessNavigationArgumentsAction = ProcessNavigationArgumentsAction = {}));
/**
 * Default handler for all actions that are related to the navigation.
 *
 * For a `NavigateAction` this handler triggers a `RequestNavigationTargetAction` to obtain the actual
 * navigation targets for the navigation type that is specified in the `NavigateAction`.
 * Once the navigation targets are available, it will trigger a `NavigateToTargetAction` to actually
 * perform the navigation.
 *
 * In other scenarios, clients may also trigger the `NavigateToTargetAction` directly, e.g. when opening
 * the diagram.
 *
 * Depending on the URI and arguments of the navigation target we may encounter three cases:
 *   *(a)* the navigation target already specifies element IDs, in which case this action handler navigates
 *         to the specified elements directly, by the selecting them and centering them in the viewport.
 *   *(b)* the arguments of the navigation targets don't contain element IDs, but other arguments, the
 *         navigation target needs to be resolved into actual element IDs by the `NavigationTargetResolver`.
 *         This can for instance be useful, if the navigation deals with queries or some other more complex
 *         logic that can't be dealt with on the client.
 *  *(c)* the target isn't resolved by the `NavigationTargetResolver`, e.g. because the `uri` doesn't match
 *        the URI of the current diagram. In this case, the navigation request is forwarded by dispatching
 *        a `NavigateToExternalTargetAction`.
 */
let NavigationActionHandler = class NavigationActionHandler {
    constructor() {
        this.notificationTimeout = 5000;
    }
    handle(action) {
        if (NavigateAction.is(action)) {
            this.handleNavigateAction(action);
        }
        else if (sprotty_1.NavigateToTargetAction.is(action)) {
            this.handleNavigateToTarget(action);
        }
        else if (ProcessNavigationArgumentsAction.is(action)) {
            this.processNavigationArguments(action.args);
        }
        else if (sprotty_1.NavigateToExternalTargetAction.is(action)) {
            this.handleNavigateToExternalTarget(action);
        }
    }
    async handleNavigateAction(action) {
        try {
            const editorContext = this.editorContext.get(action.args);
            const response = await this.dispatcher.request(sprotty_1.RequestNavigationTargetsAction.create({ targetTypeId: action.targetTypeId, editorContext }));
            if (sprotty_1.SetNavigationTargetsAction.is(response) && response.targets && response.targets.length === 1) {
                if (response.targets.length > 1) {
                    this.logger.warn(this, 'Processing of multiple targets is not supported yet. ' + 'Only the first is being processed.', response.targets);
                }
                return this.dispatcher.dispatch(sprotty_1.NavigateToTargetAction.create(response.targets[0]));
            }
            this.warnAboutFailedNavigation('No valid navigation target found');
        }
        catch (reason) {
            this.logger.error(this, 'Failed to obtain navigation target', reason, action);
        }
    }
    async handleNavigateToTarget(action) {
        try {
            const resolvedElements = await this.resolveElements(action);
            if (this.containsElementIdsOrArguments(resolvedElements)) {
                this.navigateTo(resolvedElements);
                this.handleResolutionArguments(resolvedElements);
                return;
            }
            else {
                this.navigateToExternal(action.target);
                return;
            }
        }
        catch (reason) {
            this.logger.error(this, 'Failed to navigate', reason, action);
        }
    }
    resolveElements(action) {
        return this.resolver.resolve(action.target);
    }
    containsElementIdsOrArguments(target) {
        return target !== undefined && (this.containsElementIds(target.elementIds) || this.containsArguments(target.args));
    }
    containsElementIds(elementIds) {
        return elementIds !== undefined && elementIds.length > 0;
    }
    containsArguments(args) {
        return args !== undefined && args !== undefined && Object.keys(args).length > 0;
    }
    navigateTo(target) {
        const elementIds = target.elementIds;
        if (!this.containsElementIds(elementIds)) {
            return;
        }
        this.dispatcher.dispatchAll([
            sprotty_1.SelectAllAction.create(false),
            sprotty_1.SelectAction.create({ selectedElementsIDs: elementIds }),
            sprotty_1.CenterAction.create(elementIds)
        ]);
    }
    handleResolutionArguments(target) {
        const args = target.args;
        if (!this.containsArguments(args)) {
            return;
        }
        this.dispatcher.dispatch(ProcessNavigationArgumentsAction.create(args));
    }
    navigateToExternal(target) {
        return this.dispatcher.dispatch(sprotty_1.NavigateToExternalTargetAction.create(target));
    }
    processNavigationArguments(args) {
        if (args.info && args.info.toString().length > 0) {
            this.notify('INFO', args.info.toString());
        }
        if (args.warning && args.warning.toString().length > 0) {
            this.notify('WARNING', args.warning.toString());
        }
        if (args.error && args.error.toString().length > 0) {
            this.notify('ERROR', args.error.toString());
        }
    }
    async handleNavigateToExternalTarget(action) {
        const handlers = this.actionHandlerRegistry.get(sprotty_1.NavigateToExternalTargetAction.KIND);
        if (handlers.length === 1) {
            // we are the only handler so we know nobody took care of it
            this.warnAboutFailedNavigation('Could not resolve or navigate to target', action.target);
        }
    }
    warnAboutFailedNavigation(msg, target) {
        const message = `${msg}` + (target ? `: '${target.uri}' (arguments: ${JSON.stringify(target.args)})` : '');
        this.logger.warn(this, msg, target);
        this.notify('WARNING', message);
    }
    notify(severity, message) {
        const timeout = this.notificationTimeout;
        this.dispatcher.dispatchAll([sprotty_1.StatusAction.create(message, { severity, timeout }), sprotty_1.MessageAction.create(message, { severity })]);
    }
};
exports.NavigationActionHandler = NavigationActionHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], NavigationActionHandler.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], NavigationActionHandler.prototype, "dispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ActionHandlerRegistryProvider),
    __metadata("design:type", Function)
], NavigationActionHandler.prototype, "actionHandlerRegistryProvider", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IEditorContextServiceProvider),
    __metadata("design:type", Function)
], NavigationActionHandler.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.ActionHandlerRegistry),
    __metadata("design:type", sprotty_1.ActionHandlerRegistry)
], NavigationActionHandler.prototype, "actionHandlerRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(navigation_target_resolver_1.NavigationTargetResolver),
    __metadata("design:type", navigation_target_resolver_1.NavigationTargetResolver)
], NavigationActionHandler.prototype, "resolver", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], NavigationActionHandler.prototype, "editorContext", void 0);
exports.NavigationActionHandler = NavigationActionHandler = __decorate([
    (0, inversify_1.injectable)()
], NavigationActionHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-module.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-module.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.navigationModule = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const navigation_action_handler_1 = __webpack_require__(/*! ./navigation-action-handler */ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-action-handler.js");
const navigation_target_resolver_1 = __webpack_require__(/*! ./navigation-target-resolver */ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-target-resolver.js");
exports.navigationModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    bind(navigation_target_resolver_1.NavigationTargetResolver).toSelf().inSingletonScope();
    bind(navigation_action_handler_1.NavigationActionHandler).toSelf().inSingletonScope();
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, navigation_action_handler_1.NavigateAction.KIND, navigation_action_handler_1.NavigationActionHandler);
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, sprotty_1.NavigateToTargetAction.KIND, navigation_action_handler_1.NavigationActionHandler);
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, navigation_action_handler_1.ProcessNavigationArgumentsAction.KIND, navigation_action_handler_1.NavigationActionHandler);
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, sprotty_1.NavigateToExternalTargetAction.KIND, navigation_action_handler_1.NavigationActionHandler);
}, { featureId: Symbol('navigation') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-target-resolver.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-target-resolver.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigationTargetResolver = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
/**
 * Resolves `NavigationTargets` to element ids.
 *
 * If the `NavigationTarget` doesn't have element ids itself, this resolver queries the server via a
 * `ResolveNavigationTargetAction` for element ids.
 */
let NavigationTargetResolver = class NavigationTargetResolver {
    async resolve(navigationTarget) {
        return this.resolveWithSourceUri(this.diagramOptions.sourceUri, navigationTarget);
    }
    async resolveWithSourceUri(sourceUri, target) {
        const targetUri = decodeURIComponent(target.uri);
        const normalizedSourceUri = sourceUri === null || sourceUri === void 0 ? void 0 : sourceUri.replace(/^file:\/\//, '');
        const normalizedTargetUri = targetUri.replace(/^file:\/\//, '');
        if (normalizedSourceUri && normalizedSourceUri !== normalizedTargetUri) {
            // different URI, so we can't resolve it locally
            this.logger.info("Source and Target URI are different. Can't resolve locally.", normalizedSourceUri, normalizedTargetUri);
            return undefined;
        }
        if (sprotty_1.NavigationTarget.getElementIds(target).length > 0) {
            return sprotty_1.SetResolvedNavigationTargetAction.create(sprotty_1.NavigationTarget.getElementIds(target));
        }
        const response = await this.requestResolution(target);
        if (sprotty_1.SetResolvedNavigationTargetAction.is(response)) {
            return response;
        }
        return undefined;
    }
    requestResolution(target) {
        return this.dispatcher.request(sprotty_1.ResolveNavigationTargetAction.create(target));
    }
};
exports.NavigationTargetResolver = NavigationTargetResolver;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], NavigationTargetResolver.prototype, "dispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], NavigationTargetResolver.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IDiagramOptions),
    __metadata("design:type", Object)
], NavigationTargetResolver.prototype, "diagramOptions", void 0);
exports.NavigationTargetResolver = NavigationTargetResolver = __decorate([
    (0, inversify_1.injectable)()
], NavigationTargetResolver);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/reconnect/model.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/reconnect/model.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GReconnectHandle = exports.reconnectFeature = void 0;
exports.isReconnectable = isReconnectable;
exports.isReconnectHandle = isReconnectHandle;
exports.addReconnectHandles = addReconnectHandles;
exports.removeReconnectHandles = removeReconnectHandles;
exports.isSourceRoutingHandle = isSourceRoutingHandle;
exports.isTargetRoutingHandle = isTargetRoutingHandle;
exports.createReconnectHandle = createReconnectHandle;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
exports.reconnectFeature = Symbol('reconnectFeature');
function isReconnectable(element) {
    return element instanceof sprotty_1.GRoutableElement && element.hasFeature(exports.reconnectFeature);
}
const ROUTING_HANDLE_SOURCE_INDEX = -2;
function isReconnectHandle(element) {
    return element !== undefined && element instanceof GReconnectHandle;
}
function addReconnectHandles(element) {
    removeReconnectHandles(element);
    createReconnectHandle(element, 'source', ROUTING_HANDLE_SOURCE_INDEX);
    createReconnectHandle(element, 'target', element.routingPoints.length);
}
function removeReconnectHandles(element) {
    element.removeAll(child => child instanceof GReconnectHandle);
}
function isSourceRoutingHandle(edge, routingHandle) {
    return routingHandle.pointIndex === ROUTING_HANDLE_SOURCE_INDEX;
}
function isTargetRoutingHandle(edge, routingHandle) {
    return routingHandle.pointIndex === edge.routingPoints.length;
}
function createReconnectHandle(edge, kind, routingPointIndex) {
    const handle = new GReconnectHandle();
    handle.kind = kind;
    handle.pointIndex = routingPointIndex;
    handle.type = 'routing-point';
    if (kind === 'target' && edge.id === sprotty_1.edgeInProgressID) {
        handle.id = sprotty_1.edgeInProgressTargetHandleID;
    }
    edge.add(handle);
    return handle;
}
class GReconnectHandle extends sprotty_1.GRoutingHandle {
    hasFeature(feature) {
        return feature !== sprotty_1.selectFeature && super.hasFeature(feature);
    }
}
exports.GReconnectHandle = GReconnectHandle;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/routing/edge-router.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/routing/edge-router.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPBezierEdgeRouter = exports.GLSPManhattanEdgeRouter = exports.GLSPPolylineEdgeRouter = exports.GLSPAbstractEdgeRouter = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let GLSPAbstractEdgeRouter = class GLSPAbstractEdgeRouter extends sprotty_1.AbstractEdgeRouter {
    getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection) {
        // users may define all kinds of anchors and anchor computers, we want to make sure we return a valid one in any case
        const anchor = super.getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection);
        return sprotty_1.Point.isValid(anchor) ? anchor : refPoint;
    }
    cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints) {
        // sometimes it might happen that the source or target has the bounds not properly set when using the feedback edge
        if (ensureBounds(edge.source) && ensureBounds(edge.target)) {
            super.cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints);
        }
    }
};
exports.GLSPAbstractEdgeRouter = GLSPAbstractEdgeRouter;
exports.GLSPAbstractEdgeRouter = GLSPAbstractEdgeRouter = __decorate([
    (0, inversify_1.injectable)()
], GLSPAbstractEdgeRouter);
let GLSPPolylineEdgeRouter = class GLSPPolylineEdgeRouter extends sprotty_1.PolylineEdgeRouter {
    getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection) {
        // users may define all kinds of anchors and anchor computers, we want to make sure we return a valid one in any case
        const anchor = super.getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection);
        return sprotty_1.Point.isValid(anchor) ? anchor : refPoint;
    }
    cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints) {
        // sometimes it might happen that the source or target has the bounds not properly set when using the feedback edge
        if (ensureBounds(edge.source) && ensureBounds(edge.target)) {
            super.cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints);
        }
    }
};
exports.GLSPPolylineEdgeRouter = GLSPPolylineEdgeRouter;
exports.GLSPPolylineEdgeRouter = GLSPPolylineEdgeRouter = __decorate([
    (0, inversify_1.injectable)()
], GLSPPolylineEdgeRouter);
let GLSPManhattanEdgeRouter = class GLSPManhattanEdgeRouter extends sprotty_1.ManhattanEdgeRouter {
    getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection) {
        // users may define all kinds of anchors and anchor computers, we want to make sure we return a valid one in any case
        const anchor = super.getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection);
        return sprotty_1.Point.isValid(anchor) ? anchor : refPoint;
    }
    cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints) {
        // sometimes it might happen that the source or target has the bounds not properly set when using the feedback edge
        if (ensureBounds(edge.source) && ensureBounds(edge.target)) {
            super.cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints);
        }
    }
};
exports.GLSPManhattanEdgeRouter = GLSPManhattanEdgeRouter;
exports.GLSPManhattanEdgeRouter = GLSPManhattanEdgeRouter = __decorate([
    (0, inversify_1.injectable)()
], GLSPManhattanEdgeRouter);
let GLSPBezierEdgeRouter = class GLSPBezierEdgeRouter extends sprotty_1.BezierEdgeRouter {
    getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection) {
        // users may define all kinds of anchors and anchor computers, we want to make sure we return a valid one in any case
        const anchor = super.getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection);
        return sprotty_1.Point.isValid(anchor) ? anchor : refPoint;
    }
    cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints) {
        // sometimes it might happen that the source or target has the bounds not properly set when using the feedback edge
        if (ensureBounds(edge.source) && ensureBounds(edge.target)) {
            super.cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints);
        }
    }
};
exports.GLSPBezierEdgeRouter = GLSPBezierEdgeRouter;
exports.GLSPBezierEdgeRouter = GLSPBezierEdgeRouter = __decorate([
    (0, inversify_1.injectable)()
], GLSPBezierEdgeRouter);
function ensureBounds(element) {
    if (!element) {
        return false;
    }
    if (element.bounds) {
        return true;
    }
    if (element.position && element.size) {
        element.bounds = { ...element.position, ...element.size };
        return true;
    }
    return false;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/routing/routing-module.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/routing/routing-module.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.routingModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const edge_router_1 = __webpack_require__(/*! ./edge-router */ "../node_modules/@eclipse-glsp/client/lib/features/routing/edge-router.js");
exports.routingModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    bind(sprotty_1.EdgeRouterRegistry).toSelf().inSingletonScope();
    bind(sprotty_1.AnchorComputerRegistry).toSelf().inSingletonScope();
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IEdgeRouter, edge_router_1.GLSPManhattanEdgeRouter);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.ManhattanEllipticAnchor);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.ManhattanRectangularAnchor);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.ManhattanDiamondAnchor);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IEdgeRouter, edge_router_1.GLSPPolylineEdgeRouter);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.EllipseAnchor);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.RectangleAnchor);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.DiamondAnchor);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IEdgeRouter, edge_router_1.GLSPBezierEdgeRouter);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.BezierEllipseAnchor);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.BezierRectangleAnchor);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IAnchorComputer, sprotty_1.BezierDiamondAnchor);
    (0, sprotty_1.configureCommand)({ bind, isBound }, sprotty_1.AddRemoveBezierSegmentCommand);
}, { featureId: Symbol('routing') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/save/save-keylistener.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/save/save-keylistener.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SaveModelKeyboardListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
class SaveModelKeyboardListener extends sprotty_1.KeyListener {
    keyDown(_element, event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'KeyS', 'ctrlCmd')) {
            return [sprotty_1.SaveModelAction.create()];
        }
        return [];
    }
}
exports.SaveModelKeyboardListener = SaveModelKeyboardListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/save/save-module.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/save/save-module.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.saveModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const save_keylistener_1 = __webpack_require__(/*! ./save-keylistener */ "../node_modules/@eclipse-glsp/client/lib/features/save/save-keylistener.js");
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.saveModule = new sprotty_1.FeatureModule(bind => {
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.KeyListener, save_keylistener_1.SaveModelKeyboardListener);
}, { featureId: Symbol('save') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/select/select-feedback-command.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/select/select-feedback-command.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectFeedbackCommand = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const selection_service_1 = __webpack_require__(/*! ../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
let SelectFeedbackCommand = class SelectFeedbackCommand extends sprotty_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.sprottySelectCommand = new sprotty_1.SprottySelectCommand({ ...action, kind: sprotty_1.SelectAction.KIND });
    }
    execute(context) {
        return this.sprottySelectCommand.execute(context);
    }
    undo(context) {
        return this.sprottySelectCommand.undo(context);
    }
    redo(context) {
        return this.sprottySelectCommand.redo(context);
    }
};
exports.SelectFeedbackCommand = SelectFeedbackCommand;
SelectFeedbackCommand.KIND = selection_service_1.SelectFeedbackAction.KIND;
exports.SelectFeedbackCommand = SelectFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SelectFeedbackCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/select/select-module.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/select/select-module.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.standaloneSelectModule = exports.selectModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const selection_service_1 = __webpack_require__(/*! ../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const select_feedback_command_1 = __webpack_require__(/*! ./select-feedback-command */ "../node_modules/@eclipse-glsp/client/lib/features/select/select-feedback-command.js");
const select_mouse_listener_1 = __webpack_require__(/*! ./select-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/features/select/select-mouse-listener.js");
exports.selectModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.configureCommand)(context, selection_service_1.SelectCommand);
    (0, sprotty_1.configureCommand)(context, selection_service_1.SelectAllCommand);
    (0, sprotty_1.configureCommand)(context, select_feedback_command_1.SelectFeedbackCommand);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.MouseListener, select_mouse_listener_1.RankedSelectMouseListener);
}, { featureId: Symbol('select') });
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.standaloneSelectModule = new sprotty_1.FeatureModule(bind => {
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.KeyListener, sprotty_1.SelectKeyboardListener);
}, { featureId: Symbol('standaloneSelect'), requires: exports.selectModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/select/select-mouse-listener.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/select/select-mouse-listener.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RankedSelectMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ranked_1 = __webpack_require__(/*! ../../base/ranked */ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js");
const model_1 = __webpack_require__(/*! ../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
/**
 * Ranked select mouse listener that is executed before default mouse listeners when using the RankedMouseTool.
 * This ensures that default mouse listeners are working on a model that has selection changes already applied.
 */
let RankedSelectMouseListener = class RankedSelectMouseListener extends sprotty_1.SelectMouseListener {
    constructor() {
        super(...arguments);
        this.rank = ranked_1.Ranked.DEFAULT_RANK - 100; /* we want to be executed before all default mouse listeners */
    }
    handleSelectTarget(selectableTarget, deselectedElements, event) {
        const result = [];
        result.push(sprotty_1.SelectAction.create({
            selectedElementsIDs: [selectableTarget.id],
            deselectedElementsIDs: deselectedElements.map(e => e.id)
        }));
        result.push(sprotty_1.BringToFrontAction.create([selectableTarget.id]));
        return result;
    }
    handleDeselectTarget(selectableTarget, event) {
        const result = [];
        result.push(sprotty_1.SelectAction.create({ selectedElementsIDs: [], deselectedElementsIDs: [selectableTarget.id] }));
        return result;
    }
    handleDeselectAll(deselectedElements, event) {
        const result = [];
        result.push(sprotty_1.SelectAction.create({ selectedElementsIDs: [], deselectedElementsIDs: deselectedElements.map(e => e.id) }));
        return result;
    }
    handleButton(target, event) {
        var _a;
        if (target instanceof model_1.GResizeHandle && ((_a = this.changeBoundsManager) === null || _a === void 0 ? void 0 : _a.useSymmetricResize(event))) {
            // avoid de-selecting elements when resizing with a modifier key
            return [];
        }
        return super.handleButton(target, event);
    }
};
exports.RankedSelectMouseListener = RankedSelectMouseListener;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], RankedSelectMouseListener.prototype, "changeBoundsManager", void 0);
exports.RankedSelectMouseListener = RankedSelectMouseListener = __decorate([
    (0, inversify_1.injectable)()
], RankedSelectMouseListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/source-model-watcher/source-model-changed-action-handler.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/source-model-watcher/source-model-changed-action-handler.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SourceModelChangedActionHandler = exports.ExternalSourceModelChangedHandler = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
/**
 * An external handler of the source model change event.
 *
 * This allows external applications to react specifically to this event, e.g. by bringing up the diagram,
 * check their dirty state, show a dialog, etc.
 */
let ExternalSourceModelChangedHandler = class ExternalSourceModelChangedHandler {
};
exports.ExternalSourceModelChangedHandler = ExternalSourceModelChangedHandler;
exports.ExternalSourceModelChangedHandler = ExternalSourceModelChangedHandler = __decorate([
    (0, inversify_1.injectable)()
], ExternalSourceModelChangedHandler);
let SourceModelChangedActionHandler = class SourceModelChangedActionHandler {
    handle(action) {
        if (sprotty_1.SourceModelChangedAction.is(action)) {
            if (this.externalModelSourceChangedHandler) {
                this.externalModelSourceChangedHandler
                    .notifySourceModelChange(action.sourceModelName, this.options)
                    .then(actions => this.dispatcher.dispatchAll(actions));
                return;
            }
            this.showSimpleNotification(action);
        }
    }
    showSimpleNotification(action) {
        const message = `The source model ${action.sourceModelName} has changed. You might want to consider reloading.`;
        const timeout = 0;
        const severity = 'WARNING';
        this.dispatcher.dispatchAll([sprotty_1.StatusAction.create(message, { severity, timeout }), sprotty_1.MessageAction.create(message, { severity })]);
    }
};
exports.SourceModelChangedActionHandler = SourceModelChangedActionHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], SourceModelChangedActionHandler.prototype, "dispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], SourceModelChangedActionHandler.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(ExternalSourceModelChangedHandler),
    (0, inversify_1.optional)(),
    __metadata("design:type", ExternalSourceModelChangedHandler)
], SourceModelChangedActionHandler.prototype, "externalModelSourceChangedHandler", void 0);
exports.SourceModelChangedActionHandler = SourceModelChangedActionHandler = __decorate([
    (0, inversify_1.injectable)()
], SourceModelChangedActionHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/source-model-watcher/source-model-watcher-module.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/source-model-watcher/source-model-watcher-module.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sourceModelWatcherModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const source_model_changed_action_handler_1 = __webpack_require__(/*! ./source-model-changed-action-handler */ "../node_modules/@eclipse-glsp/client/lib/features/source-model-watcher/source-model-changed-action-handler.js");
exports.sourceModelWatcherModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, sprotty_1.SourceModelChangedAction.KIND, source_model_changed_action_handler_1.SourceModelChangedActionHandler);
}, { featureId: Symbol('sourceModelWatcher') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/status/status-module.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/status/status-module.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.statusModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../css/status-overlay.css */ "../node_modules/@eclipse-glsp/client/css/status-overlay.css");
const status_overlay_1 = __webpack_require__(/*! ./status-overlay */ "../node_modules/@eclipse-glsp/client/lib/features/status/status-overlay.js");
exports.statusModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, status_overlay_1.StatusOverlay);
    bind(sprotty_1.TYPES.IDiagramStartup).toService(status_overlay_1.StatusOverlay);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.StatusAction.KIND, status_overlay_1.StatusOverlay);
}, { featureId: Symbol('status') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/status/status-overlay.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/status/status-overlay.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var StatusOverlay_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StatusOverlay = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
/**
 * A reusable status overlay for rendering (icon + message) and handling of {@link StatusAction}'s.
 */
let StatusOverlay = StatusOverlay_1 = class StatusOverlay extends ui_extension_1.GLSPAbstractUIExtension {
    id() {
        return StatusOverlay_1.ID;
    }
    containerClass() {
        return 'sprotty-status';
    }
    initializeContents(containerElement) {
        this.statusIconDiv = document.createElement('div');
        containerElement.appendChild(this.statusIconDiv);
        this.statusMessageDiv = document.createElement('div');
        this.statusMessageDiv.classList.add('sprotty-status-message');
        containerElement.appendChild(this.statusMessageDiv);
    }
    setStatus(status) {
        if (this.statusMessageDiv) {
            this.statusMessageDiv.textContent = status.message;
            this.removeClasses(this.statusMessageDiv, 1);
            this.statusMessageDiv.classList.add(status.severity.toLowerCase());
        }
        if (this.statusIconDiv) {
            this.removeClasses(this.statusIconDiv, 0);
            const classes = this.statusIconDiv.classList;
            classes.add(status.severity.toLowerCase());
            switch (status.severity) {
                case 'FATAL':
                    classes.add(...(0, sprotty_1.codiconCSSClasses)('error'));
                    break;
                case 'ERROR':
                    classes.add(...(0, sprotty_1.codiconCSSClasses)('warning'));
                    break;
                case 'WARNING':
                    classes.add(...(0, sprotty_1.codiconCSSClasses)('warning'));
                    break;
                case 'INFO':
                    classes.add(...(0, sprotty_1.codiconCSSClasses)('info'));
                    break;
            }
        }
    }
    clearStatus() {
        this.setStatus(sprotty_1.StatusAction.create('', { severity: 'NONE' }));
    }
    clearTimeout() {
        if (this.pendingTimeout) {
            window.clearTimeout(this.pendingTimeout);
            this.pendingTimeout = undefined;
        }
    }
    removeClasses(element, keep) {
        const classes = element.classList;
        while (classes.length > keep) {
            const item = classes.item(classes.length - 1);
            if (item) {
                classes.remove(item);
            }
        }
    }
    handle(action) {
        var _a;
        this.clearTimeout();
        if (action.severity === 'NONE') {
            this.clearStatus();
            return;
        }
        this.setStatus(action);
        // Check for timeout
        const statusTimeout = (_a = action.timeout) !== null && _a !== void 0 ? _a : -1;
        if (statusTimeout > 0) {
            this.pendingTimeout = window.setTimeout(() => this.clearStatus(), statusTimeout);
        }
    }
    preInitialize() {
        return this.actionDispatcher.dispatch(sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: this.id(), visible: true }));
    }
};
exports.StatusOverlay = StatusOverlay;
StatusOverlay.ID = 'glsp.server.status.overlay';
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], StatusOverlay.prototype, "actionDispatcher", void 0);
exports.StatusOverlay = StatusOverlay = StatusOverlay_1 = __decorate([
    (0, inversify_1.injectable)()
], StatusOverlay);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/svg-metadata/metadata-placer.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/svg-metadata/metadata-placer.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MetadataPlacer = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
let MetadataPlacer = class MetadataPlacer {
    decorate(vnode, element) {
        if (element instanceof sprotty_1.GModelRoot) {
            (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-api', true);
        }
        (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-type', element.type);
        if (element instanceof sprotty_1.GChildElement) {
            (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-parent-id', this.domHelper.createUniqueDOMElementId(element.parent));
        }
        if (element instanceof model_1.GEdge) {
            if (element.source !== undefined) {
                (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-edge-source-id', this.domHelper.createUniqueDOMElementId(element.source));
            }
            if (element.target !== undefined) {
                (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-edge-target-id', this.domHelper.createUniqueDOMElementId(element.target));
            }
        }
        return vnode;
    }
    postUpdate() {
        // empty
    }
};
exports.MetadataPlacer = MetadataPlacer;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.DOMHelper),
    __metadata("design:type", sprotty_1.DOMHelper)
], MetadataPlacer.prototype, "domHelper", void 0);
exports.MetadataPlacer = MetadataPlacer = __decorate([
    (0, inversify_1.injectable)()
], MetadataPlacer);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/svg-metadata/svg-metadata-module.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/svg-metadata/svg-metadata-module.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.svgMetadataModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const metadata_placer_1 = __webpack_require__(/*! ./metadata-placer */ "../node_modules/@eclipse-glsp/client/lib/features/svg-metadata/metadata-placer.js");
exports.svgMetadataModule = new sprotty_1.FeatureModule(bind => {
    bind(metadata_placer_1.MetadataPlacer).toSelf().inSingletonScope();
    bind(sprotty_1.TYPES.IVNodePostprocessor).toService(metadata_placer_1.MetadataPlacer);
}, { featureId: Symbol('svgMetadata') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette-module.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette-module.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toolPaletteModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../css/tool-palette.css */ "../node_modules/@eclipse-glsp/client/css/tool-palette.css");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const tool_palette_1 = __webpack_require__(/*! ./tool-palette */ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette.js");
exports.toolPaletteModule = new sprotty_1.FeatureModule((bind, _unbind, isBound, _rebind) => {
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IUIExtension, tool_palette_1.ToolPalette);
    bind(sprotty_1.TYPES.IDiagramStartup).toService(tool_palette_1.ToolPalette);
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, tool_1.EnableDefaultToolsAction.KIND, tool_palette_1.ToolPalette);
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, sprotty_1.UpdateModelAction.KIND, tool_palette_1.ToolPalette);
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, sprotty_1.SetModelAction.KIND, tool_palette_1.ToolPalette);
}, { featureId: Symbol('toolPalette') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ToolPalette_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ToolPalette = exports.EnableToolPaletteAction = void 0;
exports.compare = compare;
exports.createIcon = createIcon;
exports.createToolGroup = createToolGroup;
exports.changeCSSClass = changeCSSClass;
exports.changeCodiconClass = changeCodiconClass;
/********************************************************************************
 * Copyright (c) 2019-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const focus_tracker_1 = __webpack_require__(/*! ../../base/focus/focus-tracker */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-tracker.js");
const messages_1 = __webpack_require__(/*! ../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js");
const delete_tool_1 = __webpack_require__(/*! ../tools/deletion/delete-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/delete-tool.js");
const marquee_mouse_tool_1 = __webpack_require__(/*! ../tools/marquee-selection/marquee-mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-mouse-tool.js");
const origin_viewport_1 = __webpack_require__(/*! ../viewport/origin-viewport */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/origin-viewport.js");
const CLICKED_CSS_CLASS = 'clicked';
const SEARCH_ICON_ID = 'search';
const PALETTE_ICON_ID = 'tools';
const CHEVRON_DOWN_ICON_ID = 'chevron-right';
const PALETTE_HEIGHT = '500px';
var EnableToolPaletteAction;
(function (EnableToolPaletteAction) {
    EnableToolPaletteAction.KIND = 'enableToolPalette';
    function is(object) {
        return sprotty_1.Action.hasKind(object, EnableToolPaletteAction.KIND);
    }
    EnableToolPaletteAction.is = is;
    function create() {
        return { kind: EnableToolPaletteAction.KIND };
    }
    EnableToolPaletteAction.create = create;
})(EnableToolPaletteAction || (exports.EnableToolPaletteAction = EnableToolPaletteAction = {}));
let ToolPalette = ToolPalette_1 = class ToolPalette extends ui_extension_1.GLSPAbstractUIExtension {
    constructor() {
        super(...arguments);
        this.paletteItemsCopy = [];
        this.dynamic = false;
    }
    id() {
        return ToolPalette_1.ID;
    }
    containerClass() {
        return ToolPalette_1.ID;
    }
    postConstruct() {
        this.editorContext.onEditModeChanged(change => this.editModeChanged(change.newValue, change.oldValue));
        (0, messages_1.repeatOnMessagesUpdated)(() => {
            this.createHeader();
            this.addMinimizePaletteButton();
        }, { initial: false });
    }
    initialize() {
        if (!this.paletteItems) {
            return false;
        }
        return super.initialize();
    }
    initializeContents(containerElement) {
        this.addMinimizePaletteButton();
        this.createHeader();
        this.createBody();
        this.lastActiveButton = this.defaultToolsButton;
        containerElement.setAttribute('aria-label', messages_1.messages.tool_palette.label);
    }
    onBeforeShow(_containerElement, root) {
        this.modelRootId = root.id;
        this.containerElement.style.maxHeight = PALETTE_HEIGHT;
    }
    addMinimizePaletteButton() {
        const baseDiv = document.getElementById(this.options.baseDiv);
        if (!baseDiv) {
            return;
        }
        const toggleButton = document.createElement('div');
        toggleButton.classList.add('minimize-palette-button');
        this.containerElement.classList.add('collapsible-palette');
        const minimizeIcon = createIcon(CHEVRON_DOWN_ICON_ID);
        this.updateMinimizePaletteButtonTooltip(toggleButton);
        minimizeIcon.onclick = _event => {
            if (this.isPaletteMaximized()) {
                this.containerElement.style.maxHeight = '0px';
            }
            else {
                this.containerElement.style.maxHeight = PALETTE_HEIGHT;
            }
            this.updateMinimizePaletteButtonTooltip(toggleButton);
            changeCodiconClass(minimizeIcon, PALETTE_ICON_ID);
            changeCodiconClass(minimizeIcon, CHEVRON_DOWN_ICON_ID);
        };
        toggleButton.appendChild(minimizeIcon);
        // Replace existing header to refresh
        if (this.toggleButton) {
            this.toggleButton.replaceWith(toggleButton);
        }
        else {
            baseDiv.insertBefore(toggleButton, baseDiv.firstChild);
        }
        this.toggleButton = toggleButton;
    }
    updateMinimizePaletteButtonTooltip(button) {
        if (this.isPaletteMaximized()) {
            button.title = messages_1.messages.tool_palette.minimize;
        }
        else {
            button.title = messages_1.messages.tool_palette.maximize;
        }
    }
    isPaletteMaximized() {
        return this.containerElement && this.containerElement.style.maxHeight !== '0px';
    }
    createBody() {
        const bodyDiv = document.createElement('div');
        bodyDiv.classList.add('palette-body');
        let tabIndex = 0;
        this.paletteItems.sort(compare).forEach(item => {
            if (item.children) {
                const group = createToolGroup(item);
                item.children.sort(compare).forEach(child => group.appendChild(this.createToolButton(child, tabIndex++)));
                bodyDiv.appendChild(group);
            }
            else {
                bodyDiv.appendChild(this.createToolButton(item, tabIndex++));
            }
        });
        if (this.paletteItems.length === 0) {
            const noResultsDiv = document.createElement('div');
            noResultsDiv.innerText = messages_1.messages.tool_palette.no_items;
            noResultsDiv.classList.add('tool-button');
            bodyDiv.appendChild(noResultsDiv);
        }
        // Remove existing body to refresh filtered entries
        if (this.bodyDiv) {
            this.bodyDiv.replaceWith(bodyDiv);
        }
        else {
            this.containerElement.appendChild(bodyDiv);
        }
        this.bodyDiv = bodyDiv;
    }
    createHeader() {
        const headerCompartment = document.createElement('div');
        headerCompartment.classList.add('palette-header');
        headerCompartment.append(this.createHeaderTitle());
        headerCompartment.appendChild(this.createHeaderTools());
        headerCompartment.appendChild((this.searchField = this.createHeaderSearchField()));
        // Replace existing header to refresh
        if (this.headerDiv) {
            this.headerDiv.replaceWith(headerCompartment);
        }
        else {
            this.containerElement.appendChild(headerCompartment);
        }
        this.headerDiv = headerCompartment;
    }
    createHeaderTools() {
        const headerTools = document.createElement('div');
        headerTools.classList.add('header-tools');
        this.defaultToolsButton = this.createDefaultToolButton();
        headerTools.appendChild(this.defaultToolsButton);
        const deleteToolButton = this.createMouseDeleteToolButton();
        headerTools.appendChild(deleteToolButton);
        const marqueeToolButton = this.createMarqueeToolButton();
        headerTools.appendChild(marqueeToolButton);
        const validateActionButton = this.createValidateButton();
        headerTools.appendChild(validateActionButton);
        const resetViewportButton = this.createResetViewportButton();
        headerTools.appendChild(resetViewportButton);
        if (this.gridManager) {
            const toggleGridButton = this.createToggleGridButton();
            headerTools.appendChild(toggleGridButton);
        }
        if (this.debugManager) {
            const toggleDebugButton = this.createToggleDebugButton();
            headerTools.appendChild(toggleDebugButton);
        }
        // Create button for Search
        const searchIcon = this.createSearchButton();
        headerTools.appendChild(searchIcon);
        return headerTools;
    }
    createDefaultToolButton() {
        const button = createIcon('inspect');
        button.id = 'btn_default_tools';
        button.title = messages_1.messages.tool_palette.selection_button;
        button.onclick = this.onClickStaticToolButton(button);
        button.ariaLabel = button.title;
        button.tabIndex = 1;
        return button;
    }
    createMouseDeleteToolButton() {
        const deleteToolButton = createIcon('chrome-close');
        deleteToolButton.title = messages_1.messages.tool_palette.delete_button;
        deleteToolButton.onclick = this.onClickStaticToolButton(deleteToolButton, delete_tool_1.MouseDeleteTool.ID);
        deleteToolButton.ariaLabel = deleteToolButton.title;
        deleteToolButton.tabIndex = 1;
        return deleteToolButton;
    }
    createMarqueeToolButton() {
        const marqueeToolButton = createIcon('screen-full');
        marqueeToolButton.title = messages_1.messages.tool_palette.marquee_button;
        marqueeToolButton.onclick = this.onClickStaticToolButton(marqueeToolButton, marquee_mouse_tool_1.MarqueeMouseTool.ID);
        marqueeToolButton.ariaLabel = marqueeToolButton.title;
        marqueeToolButton.tabIndex = 1;
        return marqueeToolButton;
    }
    createValidateButton() {
        const validateActionButton = createIcon('pass');
        validateActionButton.title = messages_1.messages.tool_palette.validate_button;
        validateActionButton.onclick = _event => {
            const modelIds = [this.modelRootId];
            this.actionDispatcher.dispatch(sprotty_1.RequestMarkersAction.create(modelIds, { reason: sprotty_1.MarkersReason.BATCH }));
            validateActionButton.focus();
        };
        validateActionButton.ariaLabel = validateActionButton.title;
        validateActionButton.tabIndex = 1;
        return validateActionButton;
    }
    createResetViewportButton() {
        const resetViewportButton = createIcon('screen-normal');
        resetViewportButton.title = messages_1.messages.tool_palette.reset_viewport_button;
        resetViewportButton.onclick = _event => {
            this.actionDispatcher.dispatch(origin_viewport_1.OriginViewportAction.create());
            resetViewportButton.focus();
        };
        resetViewportButton.ariaLabel = resetViewportButton.title;
        resetViewportButton.tabIndex = 1;
        return resetViewportButton;
    }
    createToggleGridButton() {
        var _a;
        const toggleGridButton = createIcon('symbol-numeric');
        toggleGridButton.title = messages_1.messages.tool_palette.toggle_grid_button;
        toggleGridButton.onclick = () => {
            var _a, _b, _c;
            if ((_a = this.gridManager) === null || _a === void 0 ? void 0 : _a.isGridVisible) {
                toggleGridButton.classList.remove(CLICKED_CSS_CLASS);
                (_b = this.gridManager) === null || _b === void 0 ? void 0 : _b.setGridVisible(false);
            }
            else {
                toggleGridButton.classList.add(CLICKED_CSS_CLASS);
                (_c = this.gridManager) === null || _c === void 0 ? void 0 : _c.setGridVisible(true);
            }
        };
        if ((_a = this.gridManager) === null || _a === void 0 ? void 0 : _a.isGridVisible) {
            toggleGridButton.classList.add(CLICKED_CSS_CLASS);
        }
        toggleGridButton.ariaLabel = toggleGridButton.title;
        toggleGridButton.tabIndex = 1;
        return toggleGridButton;
    }
    createToggleDebugButton() {
        var _a;
        const toggleDebugButton = createIcon('debug');
        toggleDebugButton.title = messages_1.messages.tool_palette.debug_mode_button;
        toggleDebugButton.onclick = () => {
            var _a, _b, _c;
            if ((_a = this.debugManager) === null || _a === void 0 ? void 0 : _a.isDebugEnabled) {
                toggleDebugButton.classList.remove(CLICKED_CSS_CLASS);
                (_b = this.debugManager) === null || _b === void 0 ? void 0 : _b.setDebugEnabled(false);
            }
            else {
                toggleDebugButton.classList.add(CLICKED_CSS_CLASS);
                (_c = this.debugManager) === null || _c === void 0 ? void 0 : _c.setDebugEnabled(true);
            }
        };
        if ((_a = this.debugManager) === null || _a === void 0 ? void 0 : _a.isDebugEnabled) {
            toggleDebugButton.classList.add(CLICKED_CSS_CLASS);
        }
        toggleDebugButton.ariaLabel = toggleDebugButton.title;
        toggleDebugButton.tabIndex = 1;
        return toggleDebugButton;
    }
    createSearchButton() {
        const searchIcon = createIcon(SEARCH_ICON_ID);
        searchIcon.onclick = _ev => {
            const searchField = document.getElementById(this.containerElement.id + '_search_field');
            if (searchField) {
                if (searchField.style.display === 'none') {
                    searchField.style.display = '';
                    searchField.focus();
                }
                else {
                    searchField.style.display = 'none';
                }
            }
        };
        searchIcon.classList.add('search-icon');
        searchIcon.title = messages_1.messages.tool_palette.search_button;
        searchIcon.ariaLabel = searchIcon.title;
        searchIcon.tabIndex = 1;
        return searchIcon;
    }
    createHeaderSearchField() {
        const searchField = document.createElement('input');
        searchField.classList.add('search-input');
        searchField.id = this.containerElement.id + '_search_field';
        searchField.type = 'text';
        searchField.placeholder = messages_1.messages.tool_palette.search_placeholder;
        searchField.style.display = 'none';
        searchField.onkeyup = () => this.requestFilterUpdate(this.searchField.value);
        searchField.onkeydown = ev => this.clearOnEscape(ev);
        return searchField;
    }
    createHeaderTitle() {
        const header = document.createElement('div');
        header.classList.add('header-icon');
        header.appendChild(createIcon(PALETTE_ICON_ID));
        header.insertAdjacentText('beforeend', 'Palette');
        return header;
    }
    createToolButton(item, index) {
        const button = document.createElement('div');
        button.tabIndex = index;
        button.classList.add('tool-button');
        if (item.icon) {
            button.appendChild(createIcon(item.icon));
        }
        button.insertAdjacentText('beforeend', item.label);
        button.onclick = this.onClickCreateToolButton(button, item);
        button.onkeydown = ev => this.clearToolOnEscape(ev);
        return button;
    }
    onClickCreateToolButton(button, item) {
        return (_ev) => {
            if (!this.editorContext.isReadonly) {
                this.actionDispatcher.dispatchAll(item.actions);
                this.changeActiveButton(button);
                button.focus();
            }
        };
    }
    onClickStaticToolButton(button, toolId) {
        return (_ev) => {
            if (!this.editorContext.isReadonly) {
                const action = toolId ? tool_1.EnableToolsAction.create([toolId]) : tool_1.EnableDefaultToolsAction.create();
                this.actionDispatcher.dispatch(action);
                this.changeActiveButton(button);
                button.focus();
            }
        };
    }
    changeActiveButton(button) {
        if (this.lastActiveButton) {
            this.lastActiveButton.classList.remove(CLICKED_CSS_CLASS);
        }
        if (button) {
            button.classList.add(CLICKED_CSS_CLASS);
            this.lastActiveButton = button;
        }
        else if (this.defaultToolsButton) {
            this.defaultToolsButton.classList.add(CLICKED_CSS_CLASS);
            this.lastActiveButton = this.defaultToolsButton;
        }
    }
    handle(action) {
        var _a;
        this.changeActiveButton();
        if (sprotty_1.UpdateModelAction.is(action) || sprotty_1.SetModelAction.is(action)) {
            this.reloadPaletteBody();
        }
        else if (tool_1.EnableDefaultToolsAction.is(action)) {
            if (this.focusTracker.hasFocus) {
                // if focus was deliberately taken do not restore focus to the palette
                (_a = this.focusTracker.diagramElement) === null || _a === void 0 ? void 0 : _a.focus();
            }
        }
    }
    editModeChanged(_newValue, _oldValue) {
        this.actionDispatcher.dispatch(sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: ToolPalette_1.ID, visible: !this.editorContext.isReadonly }));
    }
    clearOnEscape(event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Escape')) {
            this.searchField.value = '';
            this.requestFilterUpdate('');
        }
    }
    clearToolOnEscape(event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Escape')) {
            this.actionDispatcher.dispatch(tool_1.EnableDefaultToolsAction.create());
        }
    }
    requestFilterUpdate(filter) {
        // Initialize the copy if it's empty
        if (this.paletteItemsCopy.length === 0) {
            // Creating deep copy
            this.paletteItemsCopy = JSON.parse(JSON.stringify(this.paletteItems));
        }
        // Reset the paletteItems before searching
        this.paletteItems = JSON.parse(JSON.stringify(this.paletteItemsCopy));
        // Filter the entries
        const filteredPaletteItems = [];
        for (const itemGroup of this.paletteItems) {
            if (itemGroup.children) {
                // Fetch the labels according to the filter
                const matchingChildren = itemGroup.children.filter(child => child.label.toLowerCase().includes(filter.toLowerCase()));
                // Add the itemgroup containing the correct entries
                if (matchingChildren.length > 0) {
                    // Clear existing children
                    itemGroup.children.splice(0, itemGroup.children.length);
                    // Push the matching children
                    matchingChildren.forEach(child => itemGroup.children.push(child));
                    filteredPaletteItems.push(itemGroup);
                }
            }
        }
        this.paletteItems = filteredPaletteItems;
        this.createBody();
    }
    /**
     *  @deprecated This hook is no longer used by the ToolPalette.
     *              It is kept for compatibility reasons and will be removed in the future.
     *              Move initialization logic to the `postRequestModel` method.
     *              This ensures that tool palette initialization does not block the diagram loading process.
     */
    async preRequestModel() { }
    async postRequestModel() {
        await this.setPaletteItems();
        if (!this.editorContext.isReadonly) {
            this.show(this.editorContext.modelRoot);
        }
    }
    async setPaletteItems() {
        const requestAction = sprotty_1.RequestContextActions.create({
            contextId: ToolPalette_1.ID,
            editorContext: {
                selectedElementIds: []
            }
        });
        const response = await this.actionDispatcher.request(requestAction);
        this.paletteItems = response.actions.map(action => action);
        this.dynamic = this.paletteItems.some(item => this.hasDynamicAction(item));
    }
    hasDynamicAction(item) {
        var _a;
        const dynamic = !!item.actions.find(action => { var _a; return sprotty_1.TriggerNodeCreationAction.is(action) && ((_a = action.ghostElement) === null || _a === void 0 ? void 0 : _a.dynamic); });
        if (dynamic) {
            return dynamic;
        }
        return ((_a = item.children) === null || _a === void 0 ? void 0 : _a.some(child => this.hasDynamicAction(child))) || false;
    }
    async reloadPaletteBody() {
        if (!this.editorContext.isReadonly && this.dynamic) {
            await this.setPaletteItems();
            this.paletteItemsCopy = [];
            this.requestFilterUpdate(this.searchField.value);
        }
    }
};
exports.ToolPalette = ToolPalette;
ToolPalette.ID = 'tool-palette';
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ToolPalette.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ToolPalette.prototype, "editorContext", void 0);
__decorate([
    (0, inversify_1.inject)(focus_tracker_1.FocusTracker),
    __metadata("design:type", focus_tracker_1.FocusTracker)
], ToolPalette.prototype, "focusTracker", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IGridManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ToolPalette.prototype, "gridManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IDebugManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ToolPalette.prototype, "debugManager", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ToolPalette.prototype, "postConstruct", null);
exports.ToolPalette = ToolPalette = ToolPalette_1 = __decorate([
    (0, inversify_1.injectable)()
], ToolPalette);
function compare(a, b) {
    const sortStringBased = a.sortString.localeCompare(b.sortString);
    if (sortStringBased !== 0) {
        return sortStringBased;
    }
    return a.label.localeCompare(b.label);
}
function createIcon(codiconId) {
    const icon = document.createElement('i');
    icon.classList.add(...(0, sprotty_1.codiconCSSClasses)(codiconId));
    return icon;
}
function createToolGroup(item) {
    const group = document.createElement('div');
    group.classList.add('tool-group');
    group.id = item.id;
    const header = document.createElement('div');
    header.classList.add('group-header');
    if (item.icon) {
        header.appendChild(createIcon(item.icon));
    }
    header.insertAdjacentText('beforeend', item.label);
    header.ondblclick = _ev => {
        const css = 'collapsed';
        changeCSSClass(group, css);
        Array.from(group.children).forEach(child => changeCSSClass(child, css));
        window.getSelection().removeAllRanges();
    };
    group.appendChild(header);
    return group;
}
function changeCSSClass(element, css) {
    // eslint-disable-next-line chai-friendly/no-unused-expressions
    element.classList.contains(css) ? element.classList.remove(css) : element.classList.add(css);
}
function changeCodiconClass(element, codiconId) {
    // eslint-disable-next-line chai-friendly/no-unused-expressions
    element.classList.contains((0, sprotty_1.codiconCSSClasses)(codiconId)[1])
        ? element.classList.remove((0, sprotty_1.codiconCSSClasses)(codiconId)[1])
        : element.classList.add((0, sprotty_1.codiconCSSClasses)(codiconId)[1]);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseCreationTool = exports.BaseEditTool = exports.BaseTool = void 0;
/********************************************************************************
 * Copyright (c) 2020-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const key_tool_1 = __webpack_require__(/*! ../../base/view/key-tool */ "../node_modules/@eclipse-glsp/client/lib/base/view/key-tool.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/view/mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/base/view/mouse-tool.js");
/**
 * A reusable base implementation for {@link Tool}s.
 */
let BaseTool = class BaseTool {
    constructor() {
        this.toDisposeOnDisable = new sprotty_1.DisposableCollection();
    }
    disable() {
        this.toDisposeOnDisable.dispose();
    }
    dispatchActions(actions) {
        return this.actionDispatcher.dispatchAll(actions);
    }
    createFeedbackEmitter() {
        return this.feedbackDispatcher.createEmitter();
    }
    registerFeedback(feedbackActions, feedbackEmitter = this, cleanupActions) {
        return this.feedbackDispatcher.registerFeedback(feedbackEmitter, feedbackActions, cleanupActions);
    }
    deregisterFeedback(feedbackEmitter = this, cleanupActions) {
        this.feedbackDispatcher.deregisterFeedback(feedbackEmitter, cleanupActions);
    }
};
exports.BaseTool = BaseTool;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], BaseTool.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], BaseTool.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(mouse_tool_1.GLSPMouseTool),
    __metadata("design:type", mouse_tool_1.GLSPMouseTool)
], BaseTool.prototype, "mouseTool", void 0);
__decorate([
    (0, inversify_1.inject)(key_tool_1.GLSPKeyTool),
    __metadata("design:type", key_tool_1.GLSPKeyTool)
], BaseTool.prototype, "keyTool", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], BaseTool.prototype, "editorContext", void 0);
exports.BaseTool = BaseTool = __decorate([
    (0, inversify_1.injectable)()
], BaseTool);
/**
 * A reusable base implementation for edit {@link Tool}s.
 */
let BaseEditTool = class BaseEditTool extends BaseTool {
    get isEditTool() {
        return true;
    }
};
exports.BaseEditTool = BaseEditTool;
exports.BaseEditTool = BaseEditTool = __decorate([
    (0, inversify_1.injectable)()
], BaseEditTool);
let BaseCreationTool = class BaseCreationTool extends BaseEditTool {
    handle(action) {
        if (this.isTriggerAction(action)) {
            this.triggerAction = action;
            return tool_1.EnableToolsAction.create([this.id]);
        }
    }
    enable() {
        if (this.triggerAction === undefined) {
            throw new TypeError(`Could not enable tool ${this.id}. The triggerAction cannot be undefined.`);
        }
        this.doEnable();
    }
};
exports.BaseCreationTool = BaseCreationTool;
exports.BaseCreationTool = BaseCreationTool = __decorate([
    (0, inversify_1.injectable)()
], BaseCreationTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-manager.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-manager.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChangeBoundsManager = exports.CSS_ACTIVE_HANDLE = exports.CSS_RESTRICTED_RESIZE = exports.CSS_RESIZE_MODE = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const layout_utils_1 = __webpack_require__(/*! ../../../utils/layout-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/layout-utils.js");
const layout_data_1 = __webpack_require__(/*! ../../bounds/layout-data */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js");
const model_1 = __webpack_require__(/*! ../../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const movement_restrictor_1 = __webpack_require__(/*! ../../change-bounds/movement-restrictor */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/movement-restrictor.js");
const insert_indicator_1 = __webpack_require__(/*! ../node-creation/insert-indicator */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/insert-indicator.js");
const change_bounds_tracker_1 = __webpack_require__(/*! ./change-bounds-tracker */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tracker.js");
exports.CSS_RESIZE_MODE = 'resize-mode';
exports.CSS_RESTRICTED_RESIZE = 'resize-not-allowed';
exports.CSS_ACTIVE_HANDLE = 'active';
/**
 * The default {@link IChangeBoundsManager} implementation. It is responsible for managing
 * the change of bounds for {@link GModelElement}s.
 */
let ChangeBoundsManager = class ChangeBoundsManager {
    constructor(positionTracker, movementRestrictor, snapper, helperLineManager, gridManager) {
        this.positionTracker = positionTracker;
        this.movementRestrictor = movementRestrictor;
        this.snapper = snapper;
        this.helperLineManager = helperLineManager;
        this.gridManager = gridManager;
    }
    unsnapModifier() {
        return 'shift';
    }
    usePositionSnap(arg) {
        return typeof arg === 'boolean' ? arg : !arg.shiftKey;
    }
    snapPosition(element, position) {
        var _a, _b;
        return (_b = (_a = this.snapper) === null || _a === void 0 ? void 0 : _a.snap(position, element)) !== null && _b !== void 0 ? _b : position;
    }
    isValid(element) {
        return this.hasValidPosition(element) && this.hasValidSize(element);
    }
    hasValidPosition(element, position) {
        return !(0, sprotty_1.isLocateable)(element) || (0, layout_utils_1.isValidMove)(element, position !== null && position !== void 0 ? position : element.position, this.movementRestrictor);
    }
    hasValidSize(element, size) {
        if (!(0, sprotty_1.isBoundsAware)(element)) {
            return true;
        }
        const dimension = size !== null && size !== void 0 ? size : element.bounds;
        const minimum = this.getMinimumSize(element);
        if (dimension.width < minimum.width || dimension.height < minimum.height) {
            return false;
        }
        return true;
    }
    getMinimumSize(element) {
        if (!(0, sprotty_1.isBoundsAware)(element)) {
            return sprotty_1.Dimension.EMPTY;
        }
        const definedMinimum = (0, layout_utils_1.minDimensions)(element);
        const computedMinimum = layout_data_1.LayoutAware.getComputedDimensions(element);
        return computedMinimum
            ? {
                width: Math.max(definedMinimum.width, computedMinimum.width),
                height: Math.max(definedMinimum.height, computedMinimum.height)
            }
            : definedMinimum;
    }
    useMovementRestriction(arg) {
        return this.usePositionSnap(arg);
    }
    restrictMovement(element, movement) {
        const minimumMovement = this.getMinimumMovement(element, movement);
        if (!minimumMovement) {
            return movement;
        }
        // minimum is given in absolute coordinates
        // if minimum is not reached, reset to original position for that coordinate
        const absVector = sprotty_1.Vector.abs(movement.vector);
        const targetPosition = {
            x: absVector.x < minimumMovement.x ? movement.from.x : movement.to.x,
            y: absVector.y < minimumMovement.y ? movement.from.y : movement.to.y
        };
        return sprotty_1.Point.move(movement.from, targetPosition);
    }
    getMinimumMovement(element, movement) {
        var _a;
        return element instanceof insert_indicator_1.InsertIndicator && this.gridManager
            ? this.gridManager.grid
            : (_a = this.helperLineManager) === null || _a === void 0 ? void 0 : _a.getMinimumMoveVector(element, true, movement.direction);
    }
    addMoveFeedback(feedback, trackedMove, ctx, event) {
        // cursor feedback on graph
        feedback.add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.MOVE), (0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.DEFAULT));
        // restriction feedback on each element
        trackedMove.elementMoves.forEach(move => this.addMoveRestrictionFeedback(feedback, move, ctx, event));
        return feedback;
    }
    addResizeFeedback(feedback, resize, ctx, event) {
        // graph feedback
        feedback.add(css_feedback_1.ModifyCSSFeedbackAction.create({ add: [exports.CSS_RESIZE_MODE] }), css_feedback_1.ModifyCSSFeedbackAction.create({ remove: [exports.CSS_RESIZE_MODE] }));
        // cursor feedback on graph
        const cursorClass = model_1.GResizeHandle.getCursorCss(resize.handleMove.element);
        feedback.add((0, css_feedback_1.cursorFeedbackAction)(cursorClass), (0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.DEFAULT));
        // handle feedback
        const handle = resize.handleMove.element;
        feedback.add((0, css_feedback_1.applyCssClasses)(handle, exports.CSS_ACTIVE_HANDLE), (0, css_feedback_1.deleteCssClasses)(handle, exports.CSS_ACTIVE_HANDLE));
        feedback.add((0, css_feedback_1.toggleCssClasses)(handle, !resize.valid.size, exports.CSS_RESTRICTED_RESIZE), (0, css_feedback_1.deleteCssClasses)(handle, exports.CSS_RESTRICTED_RESIZE));
        // restriction feedback on each element
        resize.elementResizes.forEach(elementResize => {
            this.addMoveRestrictionFeedback(feedback, elementResize, ctx, event);
            feedback.add((0, css_feedback_1.toggleCssClasses)(elementResize.element, !elementResize.valid.size, exports.CSS_RESTRICTED_RESIZE), (0, css_feedback_1.deleteCssClasses)(elementResize.element, exports.CSS_RESTRICTED_RESIZE));
        });
        return feedback;
    }
    addMoveRestrictionFeedback(feedback, change, ctx, event) {
        if (this.movementRestrictor) {
            const valid = change_bounds_tracker_1.TrackedElementMove.is(change) ? change.valid : change.valid.move;
            feedback.add((0, movement_restrictor_1.movementRestrictionFeedback)(change.element, this.movementRestrictor, valid), (0, movement_restrictor_1.removeMovementRestrictionFeedback)(change.element, this.movementRestrictor));
        }
        return feedback;
    }
    defaultResizeLocations() {
        return model_1.ResizeHandleLocation.CORNERS;
    }
    useSymmetricResize(arg) {
        return typeof arg === 'boolean' ? arg : arg.ctrlKey;
    }
    createTracker() {
        return new change_bounds_tracker_1.ChangeBoundsTracker(this);
    }
};
exports.ChangeBoundsManager = ChangeBoundsManager;
exports.ChangeBoundsManager = ChangeBoundsManager = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.MousePositionTracker)),
    __param(1, (0, inversify_1.optional)()),
    __param(1, (0, inversify_1.inject)(sprotty_1.TYPES.IMovementRestrictor)),
    __param(2, (0, inversify_1.optional)()),
    __param(2, (0, inversify_1.inject)(sprotty_1.TYPES.ISnapper)),
    __param(3, (0, inversify_1.optional)()),
    __param(3, (0, inversify_1.inject)(sprotty_1.TYPES.IHelperLineManager)),
    __param(4, (0, inversify_1.optional)()),
    __param(4, (0, inversify_1.inject)(sprotty_1.TYPES.IGridManager)),
    __metadata("design:paramtypes", [sprotty_1.MousePositionTracker, Object, Object, Object, Object])
], ChangeBoundsManager);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MoveFinishedEventAction = exports.MoveInitializedEventAction = exports.HideChangeBoundsToolResizeFeedbackCommand = exports.ShowChangeBoundsToolResizeFeedbackCommand = exports.HideChangeBoundsToolResizeFeedbackAction = exports.ShowChangeBoundsToolResizeFeedbackAction = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const feedback_command_1 = __webpack_require__(/*! ../../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const glsp_model_source_1 = __webpack_require__(/*! ../../../base/model/glsp-model-source */ "../node_modules/@eclipse-glsp/client/lib/base/model/glsp-model-source.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const model_1 = __webpack_require__(/*! ../../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
var ShowChangeBoundsToolResizeFeedbackAction;
(function (ShowChangeBoundsToolResizeFeedbackAction) {
    ShowChangeBoundsToolResizeFeedbackAction.KIND = 'showChangeBoundsToolResizeFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ShowChangeBoundsToolResizeFeedbackAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'elementId');
    }
    ShowChangeBoundsToolResizeFeedbackAction.is = is;
    function create(options) {
        const opts = typeof options === 'string' ? { elementId: options } : options;
        return {
            kind: ShowChangeBoundsToolResizeFeedbackAction.KIND,
            ...opts
        };
    }
    ShowChangeBoundsToolResizeFeedbackAction.create = create;
})(ShowChangeBoundsToolResizeFeedbackAction || (exports.ShowChangeBoundsToolResizeFeedbackAction = ShowChangeBoundsToolResizeFeedbackAction = {}));
var HideChangeBoundsToolResizeFeedbackAction;
(function (HideChangeBoundsToolResizeFeedbackAction) {
    HideChangeBoundsToolResizeFeedbackAction.KIND = 'hideChangeBoundsToolResizeFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, HideChangeBoundsToolResizeFeedbackAction.KIND);
    }
    HideChangeBoundsToolResizeFeedbackAction.is = is;
    function create() {
        return { kind: HideChangeBoundsToolResizeFeedbackAction.KIND };
    }
    HideChangeBoundsToolResizeFeedbackAction.create = create;
})(HideChangeBoundsToolResizeFeedbackAction || (exports.HideChangeBoundsToolResizeFeedbackAction = HideChangeBoundsToolResizeFeedbackAction = {}));
let ShowChangeBoundsToolResizeFeedbackCommand = class ShowChangeBoundsToolResizeFeedbackCommand extends feedback_command_1.FeedbackCommand {
    execute(context) {
        var _a, _b;
        const index = context.root.index;
        (0, gmodel_util_1.forEachElement)(index, model_1.isResizable, element => element.id !== this.action.elementId && (0, model_1.removeResizeHandles)(element));
        if (this.action.elementId) {
            const resizeElement = index.getById(this.action.elementId);
            if (resizeElement && (0, model_1.isResizable)(resizeElement)) {
                (0, model_1.addResizeHandles)(resizeElement, (_b = (_a = this.action.resizeLocations) !== null && _a !== void 0 ? _a : resizeElement.resizeLocations) !== null && _b !== void 0 ? _b : this.changeBoundsManager.defaultResizeLocations());
            }
        }
        return context.root;
    }
};
exports.ShowChangeBoundsToolResizeFeedbackCommand = ShowChangeBoundsToolResizeFeedbackCommand;
ShowChangeBoundsToolResizeFeedbackCommand.KIND = ShowChangeBoundsToolResizeFeedbackAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Action),
    __metadata("design:type", Object)
], ShowChangeBoundsToolResizeFeedbackCommand.prototype, "action", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    __metadata("design:type", Object)
], ShowChangeBoundsToolResizeFeedbackCommand.prototype, "changeBoundsManager", void 0);
exports.ShowChangeBoundsToolResizeFeedbackCommand = ShowChangeBoundsToolResizeFeedbackCommand = __decorate([
    (0, inversify_1.injectable)()
], ShowChangeBoundsToolResizeFeedbackCommand);
let HideChangeBoundsToolResizeFeedbackCommand = class HideChangeBoundsToolResizeFeedbackCommand extends feedback_command_1.FeedbackCommand {
    execute(context) {
        const index = context.root.index;
        (0, gmodel_util_1.forEachElement)(index, model_1.isResizable, model_1.removeResizeHandles);
        return context.root;
    }
};
exports.HideChangeBoundsToolResizeFeedbackCommand = HideChangeBoundsToolResizeFeedbackCommand;
HideChangeBoundsToolResizeFeedbackCommand.KIND = HideChangeBoundsToolResizeFeedbackAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Action),
    __metadata("design:type", Object)
], HideChangeBoundsToolResizeFeedbackCommand.prototype, "action", void 0);
exports.HideChangeBoundsToolResizeFeedbackCommand = HideChangeBoundsToolResizeFeedbackCommand = __decorate([
    (0, inversify_1.injectable)()
], HideChangeBoundsToolResizeFeedbackCommand);
var MoveInitializedEventAction;
(function (MoveInitializedEventAction) {
    MoveInitializedEventAction.KIND = 'move-initialized-event';
    function is(object) {
        return sprotty_1.Action.hasKind(object, MoveInitializedEventAction.KIND);
    }
    MoveInitializedEventAction.is = is;
    function create() {
        return glsp_model_source_1.OptionalAction.mark({ kind: MoveInitializedEventAction.KIND });
    }
    MoveInitializedEventAction.create = create;
})(MoveInitializedEventAction || (exports.MoveInitializedEventAction = MoveInitializedEventAction = {}));
var MoveFinishedEventAction;
(function (MoveFinishedEventAction) {
    MoveFinishedEventAction.KIND = 'move-finished-event';
    function is(object) {
        return sprotty_1.Action.hasKind(object, MoveFinishedEventAction.KIND);
    }
    MoveFinishedEventAction.is = is;
    function create() {
        return glsp_model_source_1.OptionalAction.mark({ kind: MoveFinishedEventAction.KIND });
    }
    MoveFinishedEventAction.create = create;
})(MoveFinishedEventAction || (exports.MoveFinishedEventAction = MoveFinishedEventAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-module.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-module.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.changeBoundsToolModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
__webpack_require__(/*! ../../../../css/change-bounds.css */ "../node_modules/@eclipse-glsp/client/css/change-bounds.css");
const model_1 = __webpack_require__(/*! ../../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const change_bounds_manager_1 = __webpack_require__(/*! ./change-bounds-manager */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-manager.js");
const change_bounds_tool_1 = __webpack_require__(/*! ./change-bounds-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool.js");
const change_bounds_tool_feedback_1 = __webpack_require__(/*! ./change-bounds-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js");
const view_1 = __webpack_require__(/*! ./view */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/view.js");
exports.changeBoundsToolModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IChangeBoundsManager, change_bounds_manager_1.ChangeBoundsManager);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, change_bounds_tool_1.ChangeBoundsTool);
    (0, sprotty_1.configureCommand)(context, change_bounds_tool_feedback_1.ShowChangeBoundsToolResizeFeedbackCommand);
    (0, sprotty_1.configureCommand)(context, change_bounds_tool_feedback_1.HideChangeBoundsToolResizeFeedbackCommand);
    (0, sprotty_1.configureView)(context, model_1.GResizeHandle.TYPE, view_1.GResizeHandleView);
}, { featureId: Symbol('changeBoundsTool') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-move-feedback.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-move-feedback.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackMoveMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const lodash_1 = __webpack_require__(/*! lodash */ "../node_modules/lodash/lodash.js");
const drag_aware_mouse_listener_1 = __webpack_require__(/*! ../../../base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const model_1 = __webpack_require__(/*! ../../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const change_bounds_tool_feedback_1 = __webpack_require__(/*! ./change-bounds-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js");
/**
 * This mouse listener provides visual feedback for moving by sending client-side
 * `MoveAction`s while elements are selected and dragged. This will also update
 * their bounds, which is important, as it is not only required for rendering
 * the visual feedback but also the basis for sending the change to the server
 * (see also `tools/MoveTool`).
 */
class FeedbackMoveMouseListener extends drag_aware_mouse_listener_1.DragAwareMouseListener {
    constructor(tool) {
        super();
        this.tool = tool;
        this.elementId2startPos = new Map();
        this.tracker = tool.createChangeBoundsTracker();
        this.moveInitializedFeedback = tool.createFeedbackEmitter();
        this.moveFeedback = tool.createFeedbackEmitter();
    }
    mouseDown(target, event) {
        super.mouseDown(target, event);
        if (event.button === 0) {
            if (this.tracker.isTracking()) {
                // we have a move in progress that was not resolved yet (e.g., user may have triggered a mouse up outside the window)
                this.draggingMouseUp(target, event);
                return [];
            }
            this.initializeMove(target, event);
            return [];
        }
        this.tracker.stopTracking();
        return [];
    }
    initializeMove(target, event) {
        if (target instanceof model_1.GResizeHandle) {
            // avoid conflict with resize tool
            return;
        }
        const moveable = (0, sprotty_1.findParentByFeature)(target, this.isValidMoveable);
        if (moveable !== undefined) {
            this.tracker.startTracking();
            this.scheduleMoveInitialized();
        }
        else {
            this.tracker.stopTracking();
        }
    }
    scheduleMoveInitialized() {
        var _a;
        (_a = this.pendingMoveInitialized) === null || _a === void 0 ? void 0 : _a.cancel();
        this.pendingMoveInitialized = (0, lodash_1.debounce)(() => {
            this.moveInitialized();
            this.pendingMoveInitialized = undefined;
        }, 750);
        this.pendingMoveInitialized();
    }
    moveInitializationTimeout() {
        return 750;
    }
    moveInitialized() {
        if (this.isMouseDown) {
            this.moveInitializedFeedback
                .add(change_bounds_tool_feedback_1.MoveInitializedEventAction.create(), change_bounds_tool_feedback_1.MoveFinishedEventAction.create())
                .add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.MOVE), (0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.DEFAULT))
                .submit();
        }
    }
    isValidMoveable(element) {
        return !!element && (0, gmodel_util_1.isNonRoutableSelectedMovableBoundsAware)(element) && !(element instanceof model_1.GResizeHandle);
    }
    isValidRevertable(element) {
        return !!element && (0, gmodel_util_1.isNonRoutableMovableBoundsAware)(element) && !(element instanceof model_1.GResizeHandle);
    }
    nonDraggingMouseUp(element, event) {
        // should reset everything that may have happend on mouse down
        this.moveInitializedFeedback.dispose();
        this.tracker.stopTracking();
        return [];
    }
    draggingMouseMove(target, event) {
        super.draggingMouseMove(target, event);
        if (this.tracker.isTracking()) {
            return this.moveElements(target, event);
        }
        return [];
    }
    moveElements(target, event) {
        var _a;
        if (this.elementId2startPos.size === 0) {
            this.initializeElementsToMove(target.root);
        }
        const elementsToMove = this.getElementsToMove(target);
        const move = this.tracker.moveElements(elementsToMove, { snap: event, restrict: event });
        if (move.elementMoves.length === 0) {
            return [];
        }
        // cancel any pending move
        (_a = this.pendingMoveInitialized) === null || _a === void 0 ? void 0 : _a.cancel();
        this.moveFeedback.add(this.createMoveAction(move), () => this.resetElementPositions(target));
        this.addMoveFeedback(move, target, event);
        this.tracker.updateTrackingPosition(move);
        this.moveFeedback.submit();
        return [];
    }
    createMoveAction(trackedMove) {
        // we never want to animate the move action as this interferes with the move feedback
        return sprotty_1.MoveAction.create(trackedMove.elementMoves.map(move => ({ elementId: move.element.id, toPosition: move.toPosition })), { animate: false });
    }
    addMoveFeedback(trackedMove, ctx, event) {
        this.tool.changeBoundsManager.addMoveFeedback(this.moveFeedback, trackedMove, ctx, event);
    }
    initializeElementsToMove(root) {
        const elementsToMove = this.collectElementsToMove(root);
        elementsToMove.forEach(element => this.elementId2startPos.set(element.id, element.position));
    }
    collectElementsToMove(root) {
        const moveableElements = (0, gmodel_util_1.filter)(root.index, this.isValidMoveable);
        const topLevelElements = (0, gmodel_util_1.removeDescendants)(moveableElements);
        return Array.from(topLevelElements);
    }
    getElementsToMove(context, moveable = this.isValidMoveable) {
        return (0, gmodel_util_1.getElements)(context.root.index, Array.from(this.elementId2startPos.keys()), moveable);
    }
    resetElementPositions(context) {
        const elementMoves = this.revertElementMoves(context);
        return sprotty_1.MoveAction.create(elementMoves, { animate: false, finished: true });
    }
    revertElementMoves(context) {
        var _a;
        const elementMoves = [];
        if ((_a = context === null || context === void 0 ? void 0 : context.root) === null || _a === void 0 ? void 0 : _a.index) {
            const movableElements = this.getElementsToMove(context, this.isValidRevertable);
            movableElements.forEach(element => elementMoves.push({ elementId: element.id, toPosition: this.elementId2startPos.get(element.id) }));
        }
        return elementMoves;
    }
    draggingMouseUp(target, event) {
        if (!this.tracker.isTracking()) {
            return [];
        }
        const elementsToMove = this.getElementsToMove(target);
        if (!this.tool.movementOptions.allElementsNeedToBeValid) {
            // only reset the move of invalid elements, the others will be handled by the change bounds tool itself
            elementsToMove
                .filter(element => this.tool.changeBoundsManager.isValid(element))
                .forEach(element => this.elementId2startPos.delete(element.id));
        }
        else {
            if (elementsToMove.length > 0 && elementsToMove.every(element => this.tool.changeBoundsManager.isValid(element))) {
                // do not reset any element as all are valid
                this.elementId2startPos.clear();
            }
        }
        this.dispose();
        return [];
    }
    selectionChanged(root, selectedElements, deselectedElements) {
        this.dispose();
    }
    dispose() {
        var _a;
        (_a = this.pendingMoveInitialized) === null || _a === void 0 ? void 0 : _a.cancel();
        this.moveInitializedFeedback.dispose();
        this.moveFeedback.dispose();
        this.tracker.dispose();
        this.elementId2startPos.clear();
        super.dispose();
    }
}
exports.FeedbackMoveMouseListener = FeedbackMoveMouseListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ChangeBoundsTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChangeBoundsListener = exports.ChangeBoundsTool = void 0;
/********************************************************************************
 * Copyright (c) 2019-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const drag_aware_mouse_listener_1 = __webpack_require__(/*! ../../../base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js");
const messages_1 = __webpack_require__(/*! ../../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const selection_service_1 = __webpack_require__(/*! ../../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const local_bounds_1 = __webpack_require__(/*! ../../bounds/local-bounds */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/local-bounds.js");
const set_bounds_feedback_command_1 = __webpack_require__(/*! ../../bounds/set-bounds-feedback-command */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/set-bounds-feedback-command.js");
const model_1 = __webpack_require__(/*! ../../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const move_element_key_listener_1 = __webpack_require__(/*! ../../change-bounds/move-element-key-listener */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-key-listener.js");
const grid_1 = __webpack_require__(/*! ../../grid/grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
const base_tools_1 = __webpack_require__(/*! ../base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const change_bounds_manager_1 = __webpack_require__(/*! ./change-bounds-manager */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-manager.js");
const change_bounds_tool_feedback_1 = __webpack_require__(/*! ./change-bounds-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js");
const change_bounds_tool_move_feedback_1 = __webpack_require__(/*! ./change-bounds-tool-move-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-move-feedback.js");
/**
 * The change bounds tool has the license to move multiple elements or resize a single element by implementing the ChangeBounds operation.
 * In contrast to Sprotty's implementation this tool only sends a `ChangeBoundsOperationAction` when an operation has finished and does not
 * provide client-side live updates to improve performance.
 *
 * | Operation | Client Update    | Server Update
 * +-----------+------------------+----------------------------
 * | Move      | MoveAction       | ChangeBoundsOperationAction
 * | Resize    | SetBoundsAction  | ChangeBoundsOperationAction
 *
 * To provide a visual client updates during move we install the `FeedbackMoveMouseListener` and to provide visual client updates during
 * resize and send the server updates we install the `ChangeBoundsListener`.
 */
let ChangeBoundsTool = ChangeBoundsTool_1 = class ChangeBoundsTool extends base_tools_1.BaseEditTool {
    constructor() {
        super(...arguments);
        this.movementOptions = { allElementsNeedToBeValid: true };
    }
    get id() {
        return ChangeBoundsTool_1.ID;
    }
    enable() {
        // install feedback move mouse listener for client-side move updates
        const feedbackMoveMouseListener = this.createMoveMouseListener();
        this.toDisposeOnDisable.push(this.mouseTool.registerListener(feedbackMoveMouseListener));
        if (sprotty_1.Disposable.is(feedbackMoveMouseListener)) {
            this.toDisposeOnDisable.push(feedbackMoveMouseListener);
        }
        if (selection_service_1.ISelectionListener.is(feedbackMoveMouseListener)) {
            this.toDisposeOnDisable.push(this.selectionService.addListener(feedbackMoveMouseListener));
        }
        // install move key listener for client-side move updates
        const createMoveKeyListener = this.createMoveKeyListener();
        this.toDisposeOnDisable.push(this.keyTool.registerListener(createMoveKeyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(ChangeBoundsTool_1.TOKEN, [
            {
                shortcuts: ['⬅ ⬆ ➡ ⬇'],
                description: messages_1.messages.move.shortcut_move,
                group: messages_1.messages.shortcut.group_move,
                position: 0
            }
        ])));
        if (sprotty_1.Disposable.is(createMoveKeyListener)) {
            this.toDisposeOnDisable.push(createMoveKeyListener);
        }
        // install change bounds listener for client-side resize updates and server-side updates
        const changeBoundsListener = this.createChangeBoundsListener();
        this.toDisposeOnDisable.push(this.mouseTool.registerListener(changeBoundsListener));
        if (sprotty_1.Disposable.is(changeBoundsListener)) {
            this.toDisposeOnDisable.push(changeBoundsListener);
        }
        if (selection_service_1.ISelectionListener.is(changeBoundsListener)) {
            this.toDisposeOnDisable.push(this.selectionService.addListener(changeBoundsListener));
        }
    }
    createChangeBoundsTracker() {
        return this.changeBoundsManager.createTracker();
    }
    createMoveMouseListener() {
        return new change_bounds_tool_move_feedback_1.FeedbackMoveMouseListener(this);
    }
    createMoveKeyListener() {
        return new move_element_key_listener_1.MoveElementKeyListener(this.selectionService, this.changeBoundsManager, this.grid);
    }
    createChangeBoundsListener() {
        return new ChangeBoundsListener(this);
    }
};
exports.ChangeBoundsTool = ChangeBoundsTool;
ChangeBoundsTool.ID = 'glsp.change-bounds-tool';
ChangeBoundsTool.TOKEN = Symbol.for(ChangeBoundsTool_1.ID);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], ChangeBoundsTool.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], ChangeBoundsTool.prototype, "edgeRouterRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IMovementRestrictor),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ChangeBoundsTool.prototype, "movementRestrictor", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    __metadata("design:type", Object)
], ChangeBoundsTool.prototype, "changeBoundsManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IMovementOptions),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ChangeBoundsTool.prototype, "movementOptions", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ChangeBoundsTool.prototype, "grid", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], ChangeBoundsTool.prototype, "shortcutManager", void 0);
exports.ChangeBoundsTool = ChangeBoundsTool = ChangeBoundsTool_1 = __decorate([
    (0, inversify_1.injectable)()
], ChangeBoundsTool);
class ChangeBoundsListener extends drag_aware_mouse_listener_1.DragAwareMouseListener {
    constructor(tool) {
        super();
        this.tool = tool;
        this.tracker = tool.createChangeBoundsTracker();
        this.handleFeedback = tool.createFeedbackEmitter();
        this.resizeFeedback = tool.createFeedbackEmitter();
    }
    mouseDown(target, event) {
        super.mouseDown(target, event);
        // If another button than the left mouse button was clicked or we are
        // still on the root element we don't need to execute the tool behavior
        if (event.button !== 0 || target instanceof sprotty_1.GModelRoot) {
            return [];
        }
        // check if we have a resize handle (only single-selection)
        this.updateResizeElement(target, event);
        return [];
    }
    updateResizeElement(target, event) {
        var _a, _b;
        this.activeResizeHandle = target instanceof model_1.GResizeHandle ? target : undefined;
        this.activeResizeElement = (_b = (_a = this.activeResizeHandle) === null || _a === void 0 ? void 0 : _a.parent) !== null && _b !== void 0 ? _b : this.findResizeElement(target);
        if (this.activeResizeElement) {
            if (event) {
                this.tracker.startTracking();
            }
            this.initialBounds = {
                newSize: this.activeResizeElement.bounds,
                newPosition: this.activeResizeElement.bounds,
                elementId: this.activeResizeElement.id
            };
            // we trigger the local bounds calculation once to get the correct layout information for reszing
            // for any sub-sequent calls the layout information will be updated automatically
            this.tool
                .createFeedbackEmitter()
                .add(local_bounds_1.LocalRequestBoundsAction.create(target.root, [this.activeResizeElement.id]))
                .submit()
                .dispose();
            this.handleFeedback.add(change_bounds_tool_feedback_1.ShowChangeBoundsToolResizeFeedbackAction.create({ elementId: this.activeResizeElement.id }), change_bounds_tool_feedback_1.HideChangeBoundsToolResizeFeedbackAction.create());
            this.handleFeedback.submit();
            return true;
        }
        else {
            this.disposeResize();
            return false;
        }
    }
    findResizeElement(target) {
        // check if we have a selected, moveable element (multi-selection allowed)
        // but only allow one element to have the element resize handles
        return (0, sprotty_1.findParentByFeature)(target, model_1.isResizable);
    }
    draggingMouseMove(target, event) {
        // rely on the FeedbackMoveMouseListener to update the element bounds of selected elements
        // consider resize handles ourselves
        if (this.activeResizeHandle && this.tracker.isTracking()) {
            const resize = this.tracker.resizeElements(this.activeResizeHandle, { snap: event, symmetric: event, restrict: event });
            const resizeAction = this.resizeBoundsAction(resize);
            if (resizeAction.bounds.length > 0) {
                this.resizeFeedback.add(resizeAction, () => this.resetBounds());
                this.tracker.updateTrackingPosition(resize.handleMove.moveVector);
                this.addResizeFeedback(resize, target, event);
                this.resizeFeedback.submit();
            }
        }
        return super.draggingMouseMove(target, event);
    }
    resizeBoundsAction(resize) {
        // we do not want to resize elements beyond their valid size, not even for feedback, as the next layout cycle usually corrects this
        const elementResizes = resize.elementResizes.filter(elementResize => elementResize.valid.size);
        return set_bounds_feedback_command_1.SetBoundsFeedbackAction.create(elementResizes.map(elementResize => this.toElementAndBounds(elementResize)));
    }
    toElementAndBounds(elementResize) {
        return {
            elementId: elementResize.element.id,
            newSize: elementResize.toBounds,
            newPosition: elementResize.toBounds
        };
    }
    addResizeFeedback(resize, target, event) {
        this.tool.changeBoundsManager.addResizeFeedback(this.resizeFeedback, resize, target, event);
    }
    resetBounds() {
        // reset the bounds to the initial bounds and ensure that we do not show helper line feedback anymore (MoveFinishedEventAction)
        return this.initialBounds
            ? [set_bounds_feedback_command_1.SetBoundsFeedbackAction.create([this.initialBounds]), change_bounds_tool_feedback_1.MoveFinishedEventAction.create()]
            : [change_bounds_tool_feedback_1.MoveFinishedEventAction.create()];
    }
    draggingMouseUp(target, event) {
        const actions = [];
        if (this.activeResizeHandle) {
            actions.push(...this.handleResizeOnServer(this.activeResizeHandle));
        }
        else {
            // since the move feedback is handled by another class we just see whether there is something to move
            actions.push(...this.handleMoveOnServer(target));
        }
        this.disposeResize({ keepHandles: true });
        return actions;
    }
    nonDraggingMouseUp(element, event) {
        this.disposeResize({ keepHandles: true });
        return super.nonDraggingMouseUp(element, event);
    }
    handleMoveOnServer(target) {
        const operations = [];
        const elementToMove = this.getElementsToMove(target);
        operations.push(...this.handleMoveElementsOnServer(elementToMove));
        operations.push(...this.handleMoveRoutingPointsOnServer(elementToMove));
        return operations.length > 0 ? [sprotty_1.CompoundOperation.create(operations)] : [];
    }
    getElementsToMove(target) {
        const selectedElements = (0, gmodel_util_1.getMatchingElements)(target.index, gmodel_util_1.isNonRoutableSelectedMovableBoundsAware);
        const selectionSet = new Set(selectedElements);
        const elementsToMove = selectedElements.filter(element => this.isValidMove(element, selectionSet));
        if (this.tool.movementOptions.allElementsNeedToBeValid && elementsToMove.length !== selectionSet.size) {
            return [];
        }
        return elementsToMove;
    }
    handleMoveElementsOnServer(elementsToMove) {
        const newBounds = elementsToMove.map(gmodel_util_1.toElementAndBounds);
        return newBounds.length > 0 ? [sprotty_1.ChangeBoundsOperation.create(newBounds)] : [];
    }
    isValidMove(element, selectedElements = new Set()) {
        return this.tool.changeBoundsManager.hasValidPosition(element) && !this.isChildOfSelected(selectedElements, element);
    }
    isChildOfSelected(selectedElements, element) {
        if (selectedElements.size === 0) {
            return false;
        }
        while (element instanceof sprotty_1.GChildElement) {
            element = element.parent;
            if (selectedElements.has(element)) {
                return true;
            }
        }
        return false;
    }
    handleMoveRoutingPointsOnServer(elementsToMove) {
        const newRoutingPoints = [];
        const routerRegistry = this.tool.edgeRouterRegistry;
        if (routerRegistry) {
            //  If client routing is enabled -> delegate routing points of connected edges to server
            elementsToMove.forEach(element => {
                if (element instanceof sprotty_1.GConnectableElement) {
                    element.incomingEdges
                        .map(connectable => (0, gmodel_util_1.calcElementAndRoutingPoints)(connectable, routerRegistry))
                        .forEach(ear => newRoutingPoints.push(ear));
                    element.outgoingEdges
                        .map(connectable => (0, gmodel_util_1.calcElementAndRoutingPoints)(connectable, routerRegistry))
                        .forEach(ear => newRoutingPoints.push(ear));
                }
            });
        }
        return newRoutingPoints.length > 0 ? [sprotty_1.ChangeRoutingPointsOperation.create(newRoutingPoints)] : [];
    }
    handleResizeOnServer(activeResizeHandle) {
        if (this.initialBounds && this.isValidResize(activeResizeHandle.parent)) {
            const elementAndBounds = (0, gmodel_util_1.toElementAndBounds)(activeResizeHandle.parent);
            if (!this.initialBounds.newPosition || !elementAndBounds.newPosition) {
                return [];
            }
            if (!sprotty_1.Point.equals(this.initialBounds.newPosition, elementAndBounds.newPosition) ||
                !sprotty_1.Dimension.equals(this.initialBounds.newSize, elementAndBounds.newSize)) {
                // UX: we do not want the element positions to be reset to their start as they will be moved to their start and
                // only afterwards moved by the move action again, leading to a ping-pong movement.
                // We therefore clear our element map so that they cannot be reset.
                this.initialBounds = undefined;
                return [sprotty_1.ChangeBoundsOperation.create([elementAndBounds])];
            }
        }
        return [];
    }
    isValidResize(element) {
        return this.tool.changeBoundsManager.isValid(element);
    }
    selectionChanged(root, selectedElements) {
        if (this.activeResizeElement && selectedElements.includes(this.activeResizeElement.id)) {
            // our active element is still selected, nothing to do
            return;
        }
        // try to find some other selected element and mark that active
        for (const elementId of selectedElements.reverse()) {
            const element = root.index.getById(elementId);
            if (element && this.updateResizeElement(element)) {
                return;
            }
        }
        this.dispose();
    }
    isActiveResizeElement(element) {
        return element !== undefined && this.activeResizeElement !== undefined && element.id === this.activeResizeElement.id;
    }
    disposeResize(opts = { keepHandles: false }) {
        if (!opts.keepHandles) {
            this.handleFeedback.dispose();
        }
        this.resizeFeedback.dispose();
        this.tracker.dispose();
        this.activeResizeElement = undefined;
        this.activeResizeHandle = undefined;
        this.initialBounds = undefined;
    }
    dispose() {
        this.disposeResize();
        super.dispose();
    }
}
exports.ChangeBoundsListener = ChangeBoundsListener;
ChangeBoundsListener.CSS_CLASS_ACTIVE = change_bounds_manager_1.CSS_ACTIVE_HANDLE;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tracker.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tracker.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MoveableRoutingHandle = exports.MoveableResizeHandle = exports.ChangeBoundsTracker = exports.TrackedElementResize = exports.DEFAULT_RESIZE_OPTIONS = exports.TrackedMove = exports.TrackedElementMove = exports.DEFAULT_MOVE_OPTIONS = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const model_1 = __webpack_require__(/*! ../../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
const tracker_1 = __webpack_require__(/*! ../../change-bounds/tracker */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/tracker.js");
exports.DEFAULT_MOVE_OPTIONS = {
    snap: true,
    restrict: true,
    validate: true,
    skipStatic: true,
    skipInvalid: false
};
var TrackedElementMove;
(function (TrackedElementMove) {
    function is(obj) {
        return ((0, sprotty_1.hasObjectProp)(obj, 'element') &&
            (0, sprotty_1.hasObjectProp)(obj, 'fromPosition') &&
            (0, sprotty_1.hasObjectProp)(obj, 'toPosition') &&
            (0, sprotty_1.hasBooleanProp)(obj, 'valid'));
    }
    TrackedElementMove.is = is;
})(TrackedElementMove || (exports.TrackedElementMove = TrackedElementMove = {}));
var TrackedMove;
(function (TrackedMove) {
    function is(obj) {
        return sprotty_1.Movement.is(obj) && (0, sprotty_1.hasBooleanProp)(obj, 'valid');
    }
    TrackedMove.is = is;
})(TrackedMove || (exports.TrackedMove = TrackedMove = {}));
exports.DEFAULT_RESIZE_OPTIONS = {
    snap: true,
    restrict: true,
    validate: true,
    symmetric: true,
    constrainResize: true,
    skipStatic: true,
    skipInvalidSize: false,
    skipInvalidMove: false
};
var TrackedElementResize;
(function (TrackedElementResize) {
    function is(obj) {
        return ((0, sprotty_1.isBoundsAware)(obj.element) && (0, sprotty_1.hasObjectProp)(obj, 'fromBounds') && (0, sprotty_1.hasObjectProp)(obj, 'toBounds') && (0, sprotty_1.hasObjectProp)(obj, 'valid'));
    }
    TrackedElementResize.is = is;
})(TrackedElementResize || (exports.TrackedElementResize = TrackedElementResize = {}));
class ChangeBoundsTracker {
    constructor(manager) {
        this.manager = manager;
        this.diagramMovement = new tracker_1.DiagramMovementCalculator(manager.positionTracker);
    }
    startTracking() {
        this.diagramMovement.init();
        return this;
    }
    updateTrackingPosition(param) {
        const update = TrackedMove.is(param) ? sprotty_1.Vector.max(...param.elementMoves.map(move => move.moveVector)) : param;
        this.diagramMovement.updatePosition(update);
    }
    isTracking() {
        return this.diagramMovement.hasPosition;
    }
    stopTracking() {
        this.diagramMovement.dispose();
        return this;
    }
    //
    // MOVE
    //
    moveElements(elements, opts) {
        const options = this.resolveMoveOptions(opts);
        const update = this.calculateDiagramMovement();
        const move = { ...update, elementMoves: [], valid: true, options };
        if (sprotty_1.Vector.isZero(update.vector) && options.skipStatic) {
            // no movement detected so elements won't be moved, exit early
            return move;
        }
        // calculate move for each element
        const elementsToMove = this.getMoveableElements(elements, options);
        for (const element of elementsToMove) {
            const elementMove = this.calculateElementMove(element, update.vector, options);
            if (!this.skipElementMove(elementMove, options)) {
                move.elementMoves.push(elementMove);
                move.valid && (move.valid = elementMove.valid);
            }
        }
        return move;
    }
    resolveMoveOptions(opts) {
        var _a, _b;
        return {
            ...exports.DEFAULT_MOVE_OPTIONS,
            ...opts,
            snap: this.manager.usePositionSnap((_a = opts === null || opts === void 0 ? void 0 : opts.snap) !== null && _a !== void 0 ? _a : exports.DEFAULT_MOVE_OPTIONS.snap),
            restrict: this.manager.useMovementRestriction((_b = opts === null || opts === void 0 ? void 0 : opts.restrict) !== null && _b !== void 0 ? _b : exports.DEFAULT_MOVE_OPTIONS.restrict)
        };
    }
    calculateDiagramMovement() {
        return this.diagramMovement.calculateMoveToCurrent();
    }
    getMoveableElements(elements, options) {
        var _a;
        return Array.isArray(elements) ? elements : (0, gmodel_util_1.getElements)(elements.ctx.index, elements.elementIDs, (_a = elements.guard) !== null && _a !== void 0 ? _a : sprotty_1.isMoveable);
    }
    skipElementMove(elementMove, options) {
        return (options.skipInvalid && !elementMove.valid) || (options.skipStatic && sprotty_1.Vector.isZero(elementMove.moveVector));
    }
    calculateElementMove(element, vector, options) {
        const fromPosition = element.position;
        const toPosition = sprotty_1.Point.add(fromPosition, vector);
        const move = { element, fromPosition, toPosition, valid: true, moveVector: vector, sourceVector: vector };
        if (options.snap) {
            move.toPosition = this.snapPosition(move, options);
        }
        if (options.restrict) {
            move.toPosition = this.restrictMovement(move, options);
        }
        if (options.validate) {
            move.valid = this.validateElementMove(move, options);
        }
        move.moveVector = sprotty_1.Point.vector(move.fromPosition, move.toPosition);
        return move;
    }
    snapPosition(elementMove, opts) {
        return this.manager.snapPosition(elementMove.element, elementMove.toPosition);
    }
    restrictMovement(elementMove, opts) {
        const movement = sprotty_1.Point.move(elementMove.fromPosition, elementMove.toPosition);
        return this.manager.restrictMovement(elementMove.element, movement).to;
    }
    validateElementMove(elementMove, opts) {
        return this.manager.hasValidPosition(elementMove.element, elementMove.toPosition);
    }
    //
    // RESIZE
    //
    resizeElements(handle, opts) {
        const options = this.resolveResizeOptions(opts);
        const update = this.calculateDiagramMovement();
        const handleMove = this.calculateHandleMove(new MoveableResizeHandle(handle), update.vector, options);
        const resize = { ...update, valid: { move: true, size: true }, options, handleMove, elementResizes: [] };
        if (sprotty_1.Vector.isZero(handleMove.moveVector) && options.skipStatic) {
            // no movement detected so elements won't be moved, exit early
            return resize;
        }
        // calculate resize for each element (typically only one element is resized at a time but customizations are possible)
        const elementsToResize = this.getResizableElements(handle, options);
        for (const element of elementsToResize) {
            const elementResize = this.calculateElementResize(element, handleMove, options);
            if (!this.skipElementResize(elementResize, options)) {
                resize.elementResizes.push(elementResize);
                resize.valid.move = resize.valid.move && elementResize.valid.move;
                resize.valid.size = resize.valid.size && elementResize.valid.size;
            }
        }
        return resize;
    }
    resolveResizeOptions(opts) {
        var _a, _b, _c;
        return {
            ...exports.DEFAULT_RESIZE_OPTIONS,
            ...opts,
            snap: this.manager.usePositionSnap((_a = opts === null || opts === void 0 ? void 0 : opts.snap) !== null && _a !== void 0 ? _a : exports.DEFAULT_RESIZE_OPTIONS.snap),
            restrict: this.manager.useMovementRestriction((_b = opts === null || opts === void 0 ? void 0 : opts.restrict) !== null && _b !== void 0 ? _b : exports.DEFAULT_RESIZE_OPTIONS.restrict),
            symmetric: this.manager.useSymmetricResize((_c = opts === null || opts === void 0 ? void 0 : opts.symmetric) !== null && _c !== void 0 ? _c : exports.DEFAULT_RESIZE_OPTIONS.symmetric)
        };
    }
    calculateHandleMove(handle, diagramMovement, opts) {
        const moveOptions = this.resolveMoveOptions({ ...opts, validate: false });
        return this.calculateElementMove(handle, diagramMovement, moveOptions);
    }
    getResizableElements(handle, options) {
        return [handle.parent];
    }
    skipElementResize(elementResize, options) {
        return ((options.skipInvalidMove && !elementResize.valid.move) ||
            (options.skipInvalidSize && !elementResize.valid.size) ||
            (options.skipStatic && sprotty_1.Dimension.equals(elementResize.fromBounds, elementResize.toBounds)));
    }
    calculateElementResize(element, handleMove, options) {
        const fromBounds = element.bounds;
        const toBounds = this.calculateElementBounds(element, handleMove, options);
        const resize = { element, fromBounds, toBounds, valid: { size: true, move: true } };
        if (options.validate) {
            resize.valid.size = this.manager.hasValidSize(resize.element, resize.toBounds);
            resize.valid.move = handleMove.valid && this.manager.hasValidPosition(resize.element, resize.toBounds);
        }
        return resize;
    }
    calculateElementBounds(element, handleMove, options) {
        let toBounds = this.calculateBounds(element.bounds, handleMove);
        if (options.symmetric) {
            const symmetricHandleMove = this.calculateSymmetricHandleMove(handleMove, options);
            toBounds = this.calculateBounds(toBounds, symmetricHandleMove);
        }
        if (!options.constrainResize || this.manager.hasValidSize(element, toBounds)) {
            return toBounds;
        }
        // we need to adjust to the minimum size but it is not enough to simply set the size
        // we need to make sure that the element is still at the expected position
        // we therefore constrain the movement vector to actually avoid going below the minimum size
        const minimum = this.manager.getMinimumSize(element);
        handleMove.moveVector = this.constrainResizeVector(element.bounds, handleMove, minimum);
        if (options.symmetric) {
            // if we have symmetric resize we want to distribute the constrained movement vector to both sides
            // but only for the dimension that was actually resized beyond the minimum
            handleMove.moveVector.x = element.bounds.width > minimum.width ? handleMove.moveVector.x / 2 : handleMove.moveVector.x;
            handleMove.moveVector.y = element.bounds.height > minimum.height ? handleMove.moveVector.y / 2 : handleMove.moveVector.y;
        }
        toBounds = this.calculateBounds(element.bounds, handleMove);
        if (options.symmetric) {
            // since we already distributed the available movement vector, we do not want to snap the symmetric handle move
            const symmetricHandleMove = this.calculateSymmetricHandleMove(handleMove, { ...options, snap: false });
            toBounds = this.calculateBounds(toBounds, symmetricHandleMove);
        }
        return toBounds;
    }
    calculateSymmetricHandleMove(handleMove, options) {
        const moveOptions = this.resolveMoveOptions({ ...options, validate: false, restrict: false });
        return this.calculateElementMove(handleMove.element.opposite(), sprotty_1.Vector.reverse(handleMove.moveVector), moveOptions);
    }
    calculateBounds(src, handleMove) {
        if (!handleMove || sprotty_1.Vector.isZero(handleMove.moveVector)) {
            return src;
        }
        return this.doCalculateBounds(src, handleMove.moveVector, handleMove.element.location);
    }
    doCalculateBounds(src, vector, location) {
        switch (location) {
            case model_1.ResizeHandleLocation.TopLeft:
                return { x: src.x + vector.x, y: src.y + vector.y, width: src.width - vector.x, height: src.height - vector.y };
            case model_1.ResizeHandleLocation.Top:
                return { ...src, y: src.y + vector.y, height: src.height - vector.y };
            case model_1.ResizeHandleLocation.TopRight:
                return { ...src, y: src.y + vector.y, width: src.width + vector.x, height: src.height - vector.y };
            case model_1.ResizeHandleLocation.Right:
                return { ...src, width: src.width + vector.x };
            case model_1.ResizeHandleLocation.BottomRight:
                return { ...src, width: src.width + vector.x, height: src.height + vector.y };
            case model_1.ResizeHandleLocation.Bottom:
                return { ...src, height: src.height + vector.y };
            case model_1.ResizeHandleLocation.BottomLeft:
                return { ...src, x: src.x + vector.x, width: src.width - vector.x, height: src.height + vector.y };
            case model_1.ResizeHandleLocation.Left:
                return { ...src, x: src.x + vector.x, width: src.width - vector.x };
        }
    }
    constrainResizeVector(src, handleMove, minimum) {
        const vector = handleMove.moveVector;
        switch (handleMove.element.location) {
            case model_1.ResizeHandleLocation.TopLeft:
                vector.x = src.width - vector.x < minimum.width ? src.width - minimum.width : vector.x;
                vector.y = src.height - vector.y < minimum.height ? src.height - minimum.height : vector.y;
                break;
            case model_1.ResizeHandleLocation.Top:
                vector.y = src.height - vector.y < minimum.height ? src.height - minimum.height : vector.y;
                break;
            case model_1.ResizeHandleLocation.TopRight:
                vector.x = src.width + vector.x < minimum.width ? minimum.width - src.width : vector.x;
                vector.y = src.height - vector.y < minimum.height ? src.height - minimum.height : vector.y;
                break;
            case model_1.ResizeHandleLocation.Right:
                vector.x = src.width + vector.x < minimum.width ? minimum.width - src.width : vector.x;
                break;
            case model_1.ResizeHandleLocation.BottomRight:
                vector.x = src.width + vector.x < minimum.width ? minimum.width - src.width : vector.x;
                vector.y = src.height + vector.y < minimum.height ? minimum.height - src.height : vector.y;
                break;
            case model_1.ResizeHandleLocation.Bottom:
                vector.y = src.height + vector.y < minimum.height ? minimum.height - src.height : vector.y;
                break;
            case model_1.ResizeHandleLocation.BottomLeft:
                vector.x = src.width - vector.x < minimum.width ? src.width - minimum.width : vector.x;
                vector.y = src.height + vector.y < minimum.height ? minimum.height - src.height : vector.y;
                break;
            case model_1.ResizeHandleLocation.Left:
                vector.x = src.width - vector.x < minimum.width ? src.width - minimum.width : vector.x;
                break;
        }
        return vector;
    }
    dispose() {
        this.stopTracking();
    }
}
exports.ChangeBoundsTracker = ChangeBoundsTracker;
class MoveableResizeHandle extends model_1.GResizeHandle {
    constructor(handle, location = handle.location, position = model_1.GResizeHandle.getHandlePosition(handle.parent, location)) {
        super(location, handle.type, handle.hoverFeedback);
        this.handle = handle;
        this.location = location;
        this.position = position;
        this.id = handle.id;
        // this only acts as a wrapper so we do not actually add this to the parent but still want the parent reference
        this.parent = handle.parent;
    }
    opposite() {
        return new MoveableResizeHandle(this.handle, model_1.ResizeHandleLocation.opposite(this.location));
    }
}
exports.MoveableResizeHandle = MoveableResizeHandle;
class MoveableRoutingHandle extends sprotty_1.GRoutingHandle {
    constructor(handle, position) {
        super();
        this.handle = handle;
        this.position = position;
        this.id = handle.id;
        // this only acts as a wrapper so we do not actually add this to the parent but still want the parent reference
        this.parent = handle.parent;
    }
}
exports.MoveableRoutingHandle = MoveableRoutingHandle;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/view.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/view.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SResizeHandleView = exports.GResizeHandleView = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ../../change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js");
let GResizeHandleView = class GResizeHandleView {
    render(handle, context) {
        if (context.targetKind === 'hidden') {
            return undefined;
        }
        const position = this.getPosition(handle);
        if (position !== undefined) {
            const node = ((0, sprotty_1.svg)("circle", { "class-sprotty-resize-handle": true, "class-mouseover": handle.hoverFeedback, cx: position.x, cy: position.y, r: this.getRadius() }));
            (0, sprotty_1.setAttr)(node, 'data-kind', handle.location);
            return node;
        }
        // Fallback: Create an empty group
        return (0, sprotty_1.svg)("g", null);
    }
    getPosition(handle) {
        return sprotty_1.Point.subtract(model_1.GResizeHandle.getHandlePosition(handle), handle.parent.bounds);
    }
    getRadius() {
        return 7;
    }
};
exports.GResizeHandleView = GResizeHandleView;
exports.SResizeHandleView = GResizeHandleView;
exports.SResizeHandleView = exports.GResizeHandleView = GResizeHandleView = __decorate([
    (0, inversify_1.injectable)()
], GResizeHandleView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/delete-tool.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/delete-tool.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DelKeyDeleteTool_1, MouseDeleteTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteToolMouseListener = exports.MouseDeleteTool = exports.DeleteKeyListener = exports.DelKeyDeleteTool = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const base_tools_1 = __webpack_require__(/*! ../base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
/**
 * Deletes selected elements when hitting the `Del` key.
 */
let DelKeyDeleteTool = DelKeyDeleteTool_1 = class DelKeyDeleteTool {
    constructor() {
        this.isEditTool = true;
        this.deleteKeyListener = new DeleteKeyListener();
    }
    get id() {
        return DelKeyDeleteTool_1.ID;
    }
    enable() {
        this.keytool.register(this.deleteKeyListener);
    }
    disable() {
        this.keytool.deregister(this.deleteKeyListener);
    }
};
exports.DelKeyDeleteTool = DelKeyDeleteTool;
DelKeyDeleteTool.ID = 'glsp.delete-keyboard';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], DelKeyDeleteTool.prototype, "keytool", void 0);
exports.DelKeyDeleteTool = DelKeyDeleteTool = DelKeyDeleteTool_1 = __decorate([
    (0, inversify_1.injectable)()
], DelKeyDeleteTool);
let DeleteKeyListener = class DeleteKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Delete')) {
            const deleteElementIds = Array.from(element.root.index
                .all()
                .filter(e => (0, sprotty_1.isDeletable)(e) && (0, sprotty_1.isSelectable)(e) && e.selected)
                .filter(e => e.id !== e.root.id)
                .map(e => e.id));
            if (deleteElementIds.length > 0) {
                return [sprotty_1.DeleteElementOperation.create(deleteElementIds)];
            }
        }
        return [];
    }
};
exports.DeleteKeyListener = DeleteKeyListener;
exports.DeleteKeyListener = DeleteKeyListener = __decorate([
    (0, inversify_1.injectable)()
], DeleteKeyListener);
/**
 * Deletes selected elements when clicking on them.
 */
let MouseDeleteTool = MouseDeleteTool_1 = class MouseDeleteTool extends base_tools_1.BaseEditTool {
    constructor() {
        super(...arguments);
        this.deleteToolMouseListener = new DeleteToolMouseListener();
    }
    get id() {
        return MouseDeleteTool_1.ID;
    }
    enable() {
        const cursorFeedback = this.createFeedbackEmitter()
            .add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.ELEMENT_DELETION), (0, css_feedback_1.cursorFeedbackAction)())
            .submit();
        this.toDisposeOnDisable.push(this.mouseTool.registerListener(this.deleteToolMouseListener), cursorFeedback);
    }
};
exports.MouseDeleteTool = MouseDeleteTool;
MouseDeleteTool.ID = 'glsp.delete-mouse';
exports.MouseDeleteTool = MouseDeleteTool = MouseDeleteTool_1 = __decorate([
    (0, inversify_1.injectable)()
], MouseDeleteTool);
let DeleteToolMouseListener = class DeleteToolMouseListener extends sprotty_1.MouseListener {
    mouseUp(target, event) {
        const deletableParent = (0, sprotty_1.findParentByFeature)(target, sprotty_1.isDeletable);
        if (deletableParent === undefined) {
            return [];
        }
        const result = [];
        result.push(sprotty_1.DeleteElementOperation.create([deletableParent.id]));
        if (!(0, sprotty_1.isCtrlOrCmd)(event)) {
            result.push(tool_1.EnableDefaultToolsAction.create());
        }
        return result;
    }
};
exports.DeleteToolMouseListener = DeleteToolMouseListener;
exports.DeleteToolMouseListener = DeleteToolMouseListener = __decorate([
    (0, inversify_1.injectable)()
], DeleteToolMouseListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/deletion-tool-module.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/deletion-tool-module.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deletionToolModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const delete_tool_1 = __webpack_require__(/*! ./delete-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/delete-tool.js");
exports.deletionToolModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, delete_tool_1.DelKeyDeleteTool);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.ITool, delete_tool_1.MouseDeleteTool);
}, { featureId: Symbol('deletionTool') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultFeedbackEdgeSchema = exports.FeedbackEdgeEnd = exports.RemoveFeedbackEdgeCommand = exports.RemoveFeedbackEdgeAction = exports.DrawFeedbackEdgeCommand = exports.DrawFeedbackEdgeAction = void 0;
exports.feedbackEdgeId = feedbackEdgeId;
exports.feedbackEdgeEndId = feedbackEdgeEndId;
exports.drawFeedbackEdge = drawFeedbackEdge;
exports.removeDanglingFeedbackEdge = removeDanglingFeedbackEdge;
exports.configureDanglingFeedbackEdge = configureDanglingFeedbackEdge;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const feedback_action_dispatcher_1 = __webpack_require__(/*! ../../../base/feedback/feedback-action-dispatcher */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-action-dispatcher.js");
const feedback_command_1 = __webpack_require__(/*! ../../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const view_1 = __webpack_require__(/*! ./view */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/view.js");
var DrawFeedbackEdgeAction;
(function (DrawFeedbackEdgeAction) {
    DrawFeedbackEdgeAction.KIND = 'drawFeedbackEdge';
    function is(object) {
        return sprotty_1.Action.hasKind(object, DrawFeedbackEdgeAction.KIND);
    }
    DrawFeedbackEdgeAction.is = is;
    function create(options) {
        return {
            kind: DrawFeedbackEdgeAction.KIND,
            ...options
        };
    }
    DrawFeedbackEdgeAction.create = create;
})(DrawFeedbackEdgeAction || (exports.DrawFeedbackEdgeAction = DrawFeedbackEdgeAction = {}));
let DrawFeedbackEdgeCommand = class DrawFeedbackEdgeCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        drawFeedbackEdge(context, this.action.sourceId, this.action.elementTypeId, this.action.edgeSchema);
        return context.root;
    }
};
exports.DrawFeedbackEdgeCommand = DrawFeedbackEdgeCommand;
DrawFeedbackEdgeCommand.KIND = DrawFeedbackEdgeAction.KIND;
exports.DrawFeedbackEdgeCommand = DrawFeedbackEdgeCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], DrawFeedbackEdgeCommand);
var RemoveFeedbackEdgeAction;
(function (RemoveFeedbackEdgeAction) {
    RemoveFeedbackEdgeAction.KIND = 'removeFeedbackEdgeCommand';
    function is(object) {
        return sprotty_1.Action.hasKind(object, RemoveFeedbackEdgeAction.KIND);
    }
    RemoveFeedbackEdgeAction.is = is;
    function create() {
        return { kind: RemoveFeedbackEdgeAction.KIND };
    }
    RemoveFeedbackEdgeAction.create = create;
})(RemoveFeedbackEdgeAction || (exports.RemoveFeedbackEdgeAction = RemoveFeedbackEdgeAction = {}));
let RemoveFeedbackEdgeCommand = class RemoveFeedbackEdgeCommand extends feedback_command_1.FeedbackCommand {
    execute(context) {
        removeDanglingFeedbackEdge(context.root);
        return context.root;
    }
};
exports.RemoveFeedbackEdgeCommand = RemoveFeedbackEdgeCommand;
RemoveFeedbackEdgeCommand.KIND = RemoveFeedbackEdgeAction.KIND;
exports.RemoveFeedbackEdgeCommand = RemoveFeedbackEdgeCommand = __decorate([
    (0, inversify_1.injectable)()
], RemoveFeedbackEdgeCommand);
class FeedbackEdgeEnd extends sprotty_1.GDanglingAnchor {
    constructor(sourceId, elementTypeId, feedbackEdge = undefined, type = FeedbackEdgeEnd.TYPE) {
        super();
        this.sourceId = sourceId;
        this.elementTypeId = elementTypeId;
        this.feedbackEdge = feedbackEdge;
        this.type = type;
    }
}
exports.FeedbackEdgeEnd = FeedbackEdgeEnd;
FeedbackEdgeEnd.DEFAULT_FEATURES = [sprotty_1.deletableFeature, feedback_action_dispatcher_1.feedbackFeature];
FeedbackEdgeEnd.TYPE = 'feedback-edge-end';
function feedbackEdgeId(root) {
    return root.id + '_feedback_edge';
}
function feedbackEdgeEndId(root) {
    return root.id + '_feedback_anchor';
}
exports.defaultFeedbackEdgeSchema = {
    cssClasses: ['feedback-edge'],
    opacity: 0.3
};
function drawFeedbackEdge(context, sourceId, elementTypeId, edgeTemplate) {
    const root = context.root;
    const sourceChild = root.index.getById(sourceId);
    if (!sourceChild) {
        return;
    }
    const source = (0, sprotty_1.findParentByFeature)(sourceChild, sprotty_1.isConnectable);
    if (!source || !(0, sprotty_1.isBoundsAware)(source)) {
        return;
    }
    const edgeEnd = new FeedbackEdgeEnd(source.id, elementTypeId);
    edgeEnd.id = feedbackEdgeEndId(root);
    edgeEnd.position = (0, viewpoint_util_1.toAbsolutePosition)(source);
    const edgeSchema = {
        id: feedbackEdgeId(root),
        type: elementTypeId,
        sourceId: source.id,
        targetId: edgeEnd.id,
        ...exports.defaultFeedbackEdgeSchema,
        ...edgeTemplate
    };
    const feedbackEdge = context.modelFactory.createElement(edgeSchema);
    if ((0, gmodel_util_1.isRoutable)(feedbackEdge)) {
        edgeEnd.feedbackEdge = feedbackEdge;
        root.add(edgeEnd);
        root.add(feedbackEdge);
    }
}
function removeDanglingFeedbackEdge(root) {
    const feedbackEdge = root.index.getById(feedbackEdgeId(root));
    const feedbackEdgeEnd = root.index.getById(feedbackEdgeEndId(root));
    if (feedbackEdge instanceof sprotty_1.GChildElement) {
        root.remove(feedbackEdge);
    }
    if (feedbackEdgeEnd instanceof sprotty_1.GChildElement) {
        root.remove(feedbackEdgeEnd);
    }
}
function configureDanglingFeedbackEdge(context) {
    if (!context.isBound(DrawFeedbackEdgeCommand) && !context.isBound(RemoveFeedbackEdgeCommand) && !context.isBound(view_1.FeedbackEdgeEndView)) {
        (0, sprotty_1.configureCommand)(context, DrawFeedbackEdgeCommand);
        (0, sprotty_1.configureCommand)(context, RemoveFeedbackEdgeCommand);
        (0, sprotty_1.configureView)(context, FeedbackEdgeEnd.TYPE, view_1.FeedbackEdgeEndView);
    }
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edege-creation-module.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edege-creation-module.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.edgeCreationToolModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const dangling_edge_feedback_1 = __webpack_require__(/*! ./dangling-edge-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js");
const edge_creation_tool_1 = __webpack_require__(/*! ./edge-creation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool.js");
exports.edgeCreationToolModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.ITool, edge_creation_tool_1.EdgeCreationTool);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.TriggerEdgeCreationAction.KIND, edge_creation_tool_1.EdgeCreationTool);
    (0, dangling_edge_feedback_1.configureDanglingFeedbackEdge)(context);
}, { featureId: Symbol('edgeCreationTool') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool-feedback.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool-feedback.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackEdgeEndMovingMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const dangling_edge_feedback_1 = __webpack_require__(/*! ./dangling-edge-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js");
class FeedbackEdgeEndMovingMouseListener extends sprotty_1.MouseListener {
    constructor(anchorRegistry, feedbackDispatcher) {
        super();
        this.anchorRegistry = anchorRegistry;
        this.feedbackDispatcher = feedbackDispatcher;
        this.feedback = feedbackDispatcher.createEmitter();
    }
    mouseMove(target, event) {
        const root = target.root;
        const edgeEnd = root.index.getById((0, dangling_edge_feedback_1.feedbackEdgeEndId)(root));
        if (!(edgeEnd instanceof dangling_edge_feedback_1.FeedbackEdgeEnd) || !edgeEnd.feedbackEdge) {
            return [];
        }
        const edge = edgeEnd.feedbackEdge;
        const position = (0, viewpoint_util_1.getAbsolutePosition)(edgeEnd, event);
        const endAtMousePosition = (0, sprotty_1.findChildrenAtPosition)(target.root, position)
            .reverse()
            .find(element => (0, sprotty_1.isConnectable)(element) && element.canConnect(edge, 'target'));
        if (endAtMousePosition instanceof sprotty_1.GConnectableElement && edge.source && (0, sprotty_1.isBoundsAware)(edge.source)) {
            const anchor = this.computeAbsoluteAnchor(endAtMousePosition, sprotty_1.Bounds.center((0, viewpoint_util_1.toAbsoluteBounds)(edge.source)));
            if (sprotty_1.Point.euclideanDistance(anchor, edgeEnd.position) > 1) {
                this.feedback.add(sprotty_1.MoveAction.create([{ elementId: edgeEnd.id, toPosition: anchor }], { animate: false })).submit();
            }
        }
        else {
            this.feedback.add(sprotty_1.MoveAction.create([{ elementId: edgeEnd.id, toPosition: position }], { animate: false })).submit();
        }
        return [];
    }
    computeAbsoluteAnchor(element, absoluteReferencePoint, offset) {
        const referencePointInParent = (0, viewpoint_util_1.absoluteToParent)(element, absoluteReferencePoint);
        const anchorComputer = this.anchorRegistry.get(sprotty_1.PolylineEdgeRouter.KIND, element.anchorKind);
        let anchor = anchorComputer.getAnchor(element, referencePointInParent, offset);
        // The anchor is computed in the local coordinate system of the element.
        // If the element is a nested child element we have to add the absolute position of its parent to the anchor.
        if (element.parent !== element.root) {
            const parent = (0, sprotty_1.findParentByFeature)(element.parent, sprotty_1.isBoundsAware);
            if (parent) {
                const absoluteParentPosition = (0, viewpoint_util_1.toAbsoluteBounds)(parent);
                anchor = sprotty_1.Point.add(absoluteParentPosition, anchor);
            }
        }
        return anchor;
    }
    dispose() {
        this.feedback.dispose();
    }
}
exports.FeedbackEdgeEndMovingMouseListener = FeedbackEdgeEndMovingMouseListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EdgeCreationTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EdgeCreationToolMouseListener = exports.EdgeCreationTool = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const drag_aware_mouse_listener_1 = __webpack_require__(/*! ../../../base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const model_1 = __webpack_require__(/*! ../../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const grid_1 = __webpack_require__(/*! ../../grid/grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
const base_tools_1 = __webpack_require__(/*! ../base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const dangling_edge_feedback_1 = __webpack_require__(/*! ./dangling-edge-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js");
const edge_creation_tool_feedback_1 = __webpack_require__(/*! ./edge-creation-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool-feedback.js");
/**
 * Tool to create connections in a Diagram, by selecting a source and target node.
 */
let EdgeCreationTool = EdgeCreationTool_1 = class EdgeCreationTool extends base_tools_1.BaseCreationTool {
    constructor() {
        super(...arguments);
        this.isTriggerAction = sprotty_1.TriggerEdgeCreationAction.is;
    }
    get id() {
        return EdgeCreationTool_1.ID;
    }
    doEnable() {
        this.toolFeedback();
        this.creationListener();
        this.trackFeedbackEdge();
    }
    toolFeedback() {
        const toolFeedback = this.createFeedbackEmitter()
            .add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.OPERATION_NOT_ALLOWED), (0, css_feedback_1.cursorFeedbackAction)())
            .submit();
        this.toDisposeOnDisable.push(toolFeedback);
    }
    creationListener() {
        const creationListener = new EdgeCreationToolMouseListener(this.triggerAction, this.actionDispatcher, this.typeHintProvider, this, this.grid ? this.grid.x / 2 : undefined);
        this.toDisposeOnDisable.push(creationListener, this.mouseTool.registerListener(creationListener));
    }
    trackFeedbackEdge() {
        const mouseMovingFeedback = new edge_creation_tool_feedback_1.FeedbackEdgeEndMovingMouseListener(this.anchorRegistry, this.feedbackDispatcher);
        this.toDisposeOnDisable.push(mouseMovingFeedback, this.mouseTool.registerListener(mouseMovingFeedback));
    }
};
exports.EdgeCreationTool = EdgeCreationTool;
EdgeCreationTool.ID = 'tool_create_edge';
__decorate([
    (0, inversify_1.inject)(sprotty_1.AnchorComputerRegistry),
    __metadata("design:type", sprotty_1.AnchorComputerRegistry)
], EdgeCreationTool.prototype, "anchorRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ITypeHintProvider),
    __metadata("design:type", Object)
], EdgeCreationTool.prototype, "typeHintProvider", void 0);
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    __metadata("design:type", Object)
], EdgeCreationTool.prototype, "grid", void 0);
exports.EdgeCreationTool = EdgeCreationTool = EdgeCreationTool_1 = __decorate([
    (0, inversify_1.injectable)()
], EdgeCreationTool);
class EdgeCreationToolMouseListener extends drag_aware_mouse_listener_1.DragAwareMouseListener {
    constructor(triggerAction, actionDispatcher, typeHintProvider, tool, dragSensitivity) {
        super(dragSensitivity);
        this.triggerAction = triggerAction;
        this.actionDispatcher = actionDispatcher;
        this.typeHintProvider = typeHintProvider;
        this.tool = tool;
        this.dragSensitivity = dragSensitivity;
        this.allowedTarget = false;
        this.pendingDynamicCheck = false;
        this.proxyEdge = new model_1.GEdge();
        this.proxyEdge.type = triggerAction.elementTypeId;
        this.cursorFeedback = tool.createFeedbackEmitter();
        this.feedbackEdgeFeedback = tool.createFeedbackEmitter();
    }
    nonDraggingMouseUp(element, event) {
        const result = [];
        if (event.button === 0) {
            if (!this.isSourceSelected()) {
                if (this.currentTarget && this.allowedTarget) {
                    this.source = this.currentTarget.id;
                    this.feedbackEdgeFeedback
                        .add(dangling_edge_feedback_1.DrawFeedbackEdgeAction.create({ elementTypeId: this.triggerAction.elementTypeId, sourceId: this.source }), dangling_edge_feedback_1.RemoveFeedbackEdgeAction.create())
                        .submit();
                }
            }
            else if (this.currentTarget && this.allowedTarget) {
                this.target = this.currentTarget.id;
            }
            if (this.source && this.target) {
                result.push(this.getCreateOperation(element, event, this.source, this.target));
                if (!this.isContinuousMode(element, event)) {
                    result.push(tool_1.EnableDefaultToolsAction.create());
                }
                else {
                    this.dispose();
                }
            }
        }
        else if (event.button === 2) {
            this.dispose();
            result.push(tool_1.EnableDefaultToolsAction.create());
        }
        return result;
    }
    /**
     * Determines wether the tool should run in continuous mode (also called stamp mode) or not.
     * If continuous mode is enabled, the tool will stay after a successful creation.
     * The user can then create more elements of the same type without having to re-trigger the tool.
     * By default, continuous mode is enabled if the user holds the CTRL key.
     * @param element the current model element
     * @param event
     */
    isContinuousMode(element, event) {
        return (0, sprotty_1.isCtrlOrCmd)(event);
    }
    getCreateOperation(element, event, sourceElementId, targetElementId) {
        return sprotty_1.CreateEdgeOperation.create({
            elementTypeId: this.triggerAction.elementTypeId,
            sourceElementId,
            targetElementId,
            args: this.getCreateEdgeOperationArgs(element, event)
        });
    }
    getCreateEdgeOperationArgs(ctx, event) {
        return { ...this.triggerAction.args };
    }
    isSourceSelected() {
        return this.source !== undefined;
    }
    isTargetSelected() {
        return this.target !== undefined;
    }
    mouseOver(target, event) {
        const newCurrentTarget = (0, sprotty_1.findParentByFeature)(target, sprotty_1.isConnectable);
        if (newCurrentTarget !== this.currentTarget) {
            this.pendingDynamicCheck = false;
            this.currentTarget = newCurrentTarget;
            if (this.currentTarget) {
                if (!this.isSourceSelected()) {
                    this.allowedTarget = this.canConnect(newCurrentTarget, 'source');
                }
                else if (!this.isTargetSelected()) {
                    this.allowedTarget = this.canConnect(newCurrentTarget, 'target');
                }
                if (this.pendingDynamicCheck) {
                    return [(0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.EDGE_CHECK_PENDING)];
                }
            }
            else {
                this.allowedTarget = false;
            }
            return [this.updateEdgeFeedback()];
        }
        return [];
    }
    updateEdgeFeedback() {
        if (this.allowedTarget) {
            const action = !this.isSourceSelected()
                ? (0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.EDGE_CREATION_SOURCE)
                : (0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.EDGE_CREATION_TARGET);
            return action;
        }
        return (0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.OPERATION_NOT_ALLOWED);
    }
    canConnect(element, role) {
        var _a;
        if (!element || !(0, sprotty_1.isConnectable)(element) || !element.canConnect(this.proxyEdge, role)) {
            return false;
        }
        if (!this.isDynamic(this.proxyEdge.type)) {
            return true;
        }
        const sourceElement = (_a = this.source) !== null && _a !== void 0 ? _a : element;
        const targetElement = this.source ? element : undefined;
        this.pendingDynamicCheck = true;
        // Request server edge check
        this.actionDispatcher
            .request(sprotty_1.RequestCheckEdgeAction.create({ sourceElement, targetElement, edgeType: this.proxyEdge.type }))
            .then(result => {
            if (this.pendingDynamicCheck) {
                this.allowedTarget = result.isValid;
                this.actionDispatcher.dispatch(this.updateEdgeFeedback());
                this.pendingDynamicCheck = false;
            }
        })
            .catch(err => console.error('Dynamic edge check failed with: ', err));
        // Temporarily mark the target as invalid while we wait for the server response,
        // so a fast-clicking user doesn't get a chance to create the edge in the meantime.
        return false;
    }
    isDynamic(edgeTypeId) {
        var _a;
        const typeHint = this.typeHintProvider.getEdgeTypeHint(edgeTypeId);
        return (_a = typeHint === null || typeHint === void 0 ? void 0 : typeHint.dynamic) !== null && _a !== void 0 ? _a : false;
    }
    dispose() {
        this.source = undefined;
        this.target = undefined;
        this.currentTarget = undefined;
        this.allowedTarget = false;
        this.feedbackEdgeFeedback.dispose();
        this.cursorFeedback.dispose();
        super.dispose();
    }
}
exports.EdgeCreationToolMouseListener = EdgeCreationToolMouseListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/view.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/view.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackEdgeEndView = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
/**
 * This view is used for the invisible end of the feedback edge.
 * A feedback edge is shown as a visual feedback when creating edges.
 */
let FeedbackEdgeEndView = class FeedbackEdgeEndView {
    render(model, context) {
        var _a;
        const position = (_a = model.position) !== null && _a !== void 0 ? _a : sprotty_1.Point.ORIGIN;
        return (0, sprotty_1.svg)("g", { x: position.x, y: position.y });
    }
};
exports.FeedbackEdgeEndView = FeedbackEdgeEndView;
exports.FeedbackEdgeEndView = FeedbackEdgeEndView = __decorate([
    (0, inversify_1.injectable)()
], FeedbackEdgeEndView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-module.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-module.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.edgeEditToolModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const dangling_edge_feedback_1 = __webpack_require__(/*! ../edge-creation/dangling-edge-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js");
const edge_edit_tool_1 = __webpack_require__(/*! ./edge-edit-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool.js");
const edge_edit_tool_feedback_1 = __webpack_require__(/*! ./edge-edit-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool-feedback.js");
exports.edgeEditToolModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, edge_edit_tool_1.EdgeEditTool);
    // reconnect edge tool feedback
    (0, sprotty_1.configureCommand)(context, edge_edit_tool_feedback_1.ShowEdgeReconnectHandlesFeedbackCommand);
    (0, sprotty_1.configureCommand)(context, edge_edit_tool_feedback_1.HideEdgeReconnectHandlesFeedbackCommand);
    (0, sprotty_1.configureCommand)(context, edge_edit_tool_feedback_1.DrawFeedbackEdgeSourceCommand);
    (0, sprotty_1.configureCommand)(context, edge_edit_tool_feedback_1.SwitchRoutingModeCommand);
    // dangling edge feedback
    (0, dangling_edge_feedback_1.configureDanglingFeedbackEdge)(context);
}, { featureId: Symbol('edgeEditTool') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool-feedback.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool-feedback.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeedbackEdgeRouteMovingMouseListener = exports.FeedbackEdgeSourceMovingMouseListener = exports.FeedbackEdgeTargetMovingMouseListener = exports.DrawFeedbackEdgeSourceCommand = exports.DrawFeedbackEdgeSourceAction = exports.SwitchRoutingModeCommand = exports.SwitchRoutingModeAction = exports.HideEdgeReconnectHandlesFeedbackCommand = exports.ShowEdgeReconnectHandlesFeedbackCommand = exports.HideEdgeReconnectHandlesFeedbackAction = exports.ShowEdgeReconnectHandlesFeedbackAction = void 0;
exports.drawFeedbackEdgeSource = drawFeedbackEdgeSource;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const drag_aware_mouse_listener_1 = __webpack_require__(/*! ../../../base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js");
const feedback_command_1 = __webpack_require__(/*! ../../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const model_1 = __webpack_require__(/*! ../../reconnect/model */ "../node_modules/@eclipse-glsp/client/lib/features/reconnect/model.js");
const change_bounds_tracker_1 = __webpack_require__(/*! ../change-bounds/change-bounds-tracker */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tracker.js");
const dangling_edge_feedback_1 = __webpack_require__(/*! ../edge-creation/dangling-edge-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js");
const edge_creation_tool_feedback_1 = __webpack_require__(/*! ../edge-creation/edge-creation-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool-feedback.js");
var ShowEdgeReconnectHandlesFeedbackAction;
(function (ShowEdgeReconnectHandlesFeedbackAction) {
    ShowEdgeReconnectHandlesFeedbackAction.KIND = 'showReconnectHandlesFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ShowEdgeReconnectHandlesFeedbackAction.KIND);
    }
    ShowEdgeReconnectHandlesFeedbackAction.is = is;
    function create(elementId) {
        return { kind: ShowEdgeReconnectHandlesFeedbackAction.KIND, elementId };
    }
    ShowEdgeReconnectHandlesFeedbackAction.create = create;
})(ShowEdgeReconnectHandlesFeedbackAction || (exports.ShowEdgeReconnectHandlesFeedbackAction = ShowEdgeReconnectHandlesFeedbackAction = {}));
var HideEdgeReconnectHandlesFeedbackAction;
(function (HideEdgeReconnectHandlesFeedbackAction) {
    HideEdgeReconnectHandlesFeedbackAction.KIND = 'hideReconnectHandlesFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, HideEdgeReconnectHandlesFeedbackAction.KIND);
    }
    HideEdgeReconnectHandlesFeedbackAction.is = is;
    function create() {
        return { kind: HideEdgeReconnectHandlesFeedbackAction.KIND };
    }
    HideEdgeReconnectHandlesFeedbackAction.create = create;
})(HideEdgeReconnectHandlesFeedbackAction || (exports.HideEdgeReconnectHandlesFeedbackAction = HideEdgeReconnectHandlesFeedbackAction = {}));
let ShowEdgeReconnectHandlesFeedbackCommand = class ShowEdgeReconnectHandlesFeedbackCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const index = context.root.index;
        (0, gmodel_util_1.forEachElement)(index, gmodel_util_1.isRoutable, model_1.removeReconnectHandles);
        const routableElement = index.getById(this.action.elementId);
        if (routableElement && (0, gmodel_util_1.isRoutable)(routableElement)) {
            (0, model_1.addReconnectHandles)(routableElement);
        }
        return context.root;
    }
};
exports.ShowEdgeReconnectHandlesFeedbackCommand = ShowEdgeReconnectHandlesFeedbackCommand;
ShowEdgeReconnectHandlesFeedbackCommand.KIND = ShowEdgeReconnectHandlesFeedbackAction.KIND;
exports.ShowEdgeReconnectHandlesFeedbackCommand = ShowEdgeReconnectHandlesFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ShowEdgeReconnectHandlesFeedbackCommand);
let HideEdgeReconnectHandlesFeedbackCommand = class HideEdgeReconnectHandlesFeedbackCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const index = context.root.index;
        (0, gmodel_util_1.forEachElement)(index, gmodel_util_1.isRoutable, model_1.removeReconnectHandles);
        return context.root;
    }
};
exports.HideEdgeReconnectHandlesFeedbackCommand = HideEdgeReconnectHandlesFeedbackCommand;
HideEdgeReconnectHandlesFeedbackCommand.KIND = HideEdgeReconnectHandlesFeedbackAction.KIND;
exports.HideEdgeReconnectHandlesFeedbackCommand = HideEdgeReconnectHandlesFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], HideEdgeReconnectHandlesFeedbackCommand);
var SwitchRoutingModeAction;
(function (SwitchRoutingModeAction) {
    SwitchRoutingModeAction.KIND = 'switchRoutingMode';
    function create(options) {
        return {
            ...sprotty_1.SwitchEditModeAction.create(options),
            kind: SwitchRoutingModeAction.KIND
        };
    }
    SwitchRoutingModeAction.create = create;
})(SwitchRoutingModeAction || (exports.SwitchRoutingModeAction = SwitchRoutingModeAction = {}));
let SwitchRoutingModeCommand = class SwitchRoutingModeCommand extends sprotty_1.SwitchEditModeCommand {
    constructor(action) {
        super({ ...action, kind: sprotty_1.SwitchEditModeAction.KIND });
    }
};
exports.SwitchRoutingModeCommand = SwitchRoutingModeCommand;
SwitchRoutingModeCommand.KIND = SwitchRoutingModeAction.KIND;
exports.SwitchRoutingModeCommand = SwitchRoutingModeCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SwitchRoutingModeCommand);
var DrawFeedbackEdgeSourceAction;
(function (DrawFeedbackEdgeSourceAction) {
    DrawFeedbackEdgeSourceAction.KIND = 'drawFeedbackEdgeSource';
    function is(object) {
        return sprotty_1.Action.hasKind(object, DrawFeedbackEdgeSourceAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'elementTypeId') && (0, sprotty_1.hasStringProp)(object, 'targetId');
    }
    DrawFeedbackEdgeSourceAction.is = is;
    function create(options) {
        return {
            kind: DrawFeedbackEdgeSourceAction.KIND,
            ...options
        };
    }
    DrawFeedbackEdgeSourceAction.create = create;
})(DrawFeedbackEdgeSourceAction || (exports.DrawFeedbackEdgeSourceAction = DrawFeedbackEdgeSourceAction = {}));
let DrawFeedbackEdgeSourceCommand = class DrawFeedbackEdgeSourceCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        drawFeedbackEdgeSource(context, this.action.targetId, this.action.elementTypeId);
        return context.root;
    }
};
exports.DrawFeedbackEdgeSourceCommand = DrawFeedbackEdgeSourceCommand;
DrawFeedbackEdgeSourceCommand.KIND = DrawFeedbackEdgeSourceAction.KIND;
exports.DrawFeedbackEdgeSourceCommand = DrawFeedbackEdgeSourceCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], DrawFeedbackEdgeSourceCommand);
/**
 * SOURCE AND TARGET MOUSE MOVE LISTENER
 */
class FeedbackEdgeTargetMovingMouseListener extends edge_creation_tool_feedback_1.FeedbackEdgeEndMovingMouseListener {
    constructor(anchorRegistry, feedbackDispatcher) {
        super(anchorRegistry, feedbackDispatcher);
    }
}
exports.FeedbackEdgeTargetMovingMouseListener = FeedbackEdgeTargetMovingMouseListener;
class FeedbackEdgeSourceMovingMouseListener extends sprotty_1.MouseListener {
    constructor(anchorRegistry, feedbackDispatcher) {
        super();
        this.anchorRegistry = anchorRegistry;
        this.feedbackDispatcher = feedbackDispatcher;
        this.feedback = feedbackDispatcher.createEmitter();
    }
    mouseMove(target, event) {
        const root = target.root;
        const edgeEnd = root.index.getById((0, dangling_edge_feedback_1.feedbackEdgeEndId)(root));
        if (!(edgeEnd instanceof dangling_edge_feedback_1.FeedbackEdgeEnd) || !edgeEnd.feedbackEdge) {
            return [];
        }
        const edge = edgeEnd.feedbackEdge;
        const position = (0, viewpoint_util_1.getAbsolutePosition)(edgeEnd, event);
        const endAtMousePosition = (0, sprotty_1.findChildrenAtPosition)(target.root, position).find(element => (0, sprotty_1.isConnectable)(element) && element.canConnect(edge, 'source'));
        if (endAtMousePosition instanceof sprotty_1.GConnectableElement && edge.target && (0, sprotty_1.isBoundsAware)(edge.target)) {
            const anchor = this.computeAbsoluteAnchor(endAtMousePosition, sprotty_1.Bounds.center(edge.target.bounds));
            if (sprotty_1.Point.euclideanDistance(anchor, edgeEnd.position) > 1) {
                this.feedback.add(sprotty_1.MoveAction.create([{ elementId: edgeEnd.id, toPosition: anchor }], { animate: false })).submit();
            }
        }
        else {
            this.feedback.add(sprotty_1.MoveAction.create([{ elementId: edgeEnd.id, toPosition: position }], { animate: false })).submit();
        }
        return [];
    }
    computeAbsoluteAnchor(element, referencePoint, offset) {
        const anchorComputer = this.anchorRegistry.get(sprotty_1.PolylineEdgeRouter.KIND, element.anchorKind);
        let anchor = anchorComputer.getAnchor(element, referencePoint, offset);
        // The anchor is computed in the local coordinate system of the element.
        // If the element is a nested child element we have to add the absolute position of its parent to the anchor.
        if (element.parent !== element.root) {
            const parent = (0, sprotty_1.findParentByFeature)(element.parent, sprotty_1.isBoundsAware);
            if (parent) {
                const absoluteParentPosition = (0, viewpoint_util_1.toAbsoluteBounds)(parent);
                anchor = sprotty_1.Point.add(absoluteParentPosition, anchor);
            }
        }
        return anchor;
    }
    dispose() {
        this.feedback.dispose();
    }
}
exports.FeedbackEdgeSourceMovingMouseListener = FeedbackEdgeSourceMovingMouseListener;
class FeedbackEdgeRouteMovingMouseListener extends drag_aware_mouse_listener_1.DragAwareMouseListener {
    constructor(changeBoundsManager, edgeRouterRegistry) {
        super();
        this.changeBoundsManager = changeBoundsManager;
        this.edgeRouterRegistry = edgeRouterRegistry;
        this.tracker = this.changeBoundsManager.createTracker();
    }
    mouseDown(target, event) {
        const result = super.mouseDown(target, event);
        if (event.button === 0) {
            const routingHandle = (0, sprotty_1.findParentByFeature)(target, gmodel_util_1.isRoutingHandle);
            if (routingHandle !== undefined) {
                result.push(SwitchRoutingModeAction.create({ elementsToActivate: [target.id] }));
                this.tracker.startTracking();
            }
            else {
                this.tracker.dispose();
            }
        }
        return result;
    }
    draggingMouseMove(target, event) {
        super.draggingMouseMove(target, event);
        if (this.tracker.isTracking()) {
            return this.moveRoutingHandles(target, event);
        }
        return [];
    }
    moveRoutingHandles(target, event) {
        const routingHandlesToMove = this.getRoutingHandlesToMove(target);
        const move = this.tracker.moveElements(routingHandlesToMove, { snap: event, restrict: event });
        if (move.elementMoves.length === 0) {
            return [];
        }
        this.tracker.updateTrackingPosition(move);
        return [
            sprotty_1.MoveAction.create(move.elementMoves.map(elementMove => ({ elementId: elementMove.element.id, toPosition: elementMove.toPosition })), { animate: false })
        ];
    }
    getRoutingHandlesToMove(context) {
        const selectedRoutingHandles = (0, gmodel_util_1.getMatchingElements)(context.root.index, (0, sprotty_1.typeGuard)(gmodel_util_1.isRoutingHandle, sprotty_1.isSelected));
        return selectedRoutingHandles
            .map(handle => {
            const position = this.getHandlePosition(handle);
            return position ? new change_bounds_tracker_1.MoveableRoutingHandle(handle, position) : undefined;
        })
            .filter((0, sprotty_1.toTypeGuard)(change_bounds_tracker_1.MoveableRoutingHandle));
    }
    getHandlePosition(handle) {
        if (this.edgeRouterRegistry) {
            const parent = handle.parent;
            if (!(0, gmodel_util_1.isRoutable)(parent)) {
                return undefined;
            }
            const router = this.edgeRouterRegistry.get(parent.routerKind);
            const route = router.route(parent);
            return router.getHandlePosition(parent, route, handle);
        }
        return undefined;
    }
    nonDraggingMouseUp(element, event) {
        // should reset everything that may have happend on mouse down
        this.tracker.stopTracking();
        return [];
    }
    draggingMouseUp(_target, _event) {
        if (!this.tracker.isTracking()) {
            return [];
        }
        this.dispose();
        return [];
    }
    dispose() {
        this.tracker.dispose();
        super.dispose();
    }
}
exports.FeedbackEdgeRouteMovingMouseListener = FeedbackEdgeRouteMovingMouseListener;
/**
 * UTILITY FUNCTIONS
 */
function drawFeedbackEdgeSource(context, targetId, elementTypeId) {
    const root = context.root;
    const targetChild = root.index.getById(targetId);
    if (!targetChild) {
        return;
    }
    const target = (0, sprotty_1.findParentByFeature)(targetChild, sprotty_1.isConnectable);
    if (!target || !(0, sprotty_1.isBoundsAware)(target)) {
        return;
    }
    const edgeEnd = new dangling_edge_feedback_1.FeedbackEdgeEnd(target.id, elementTypeId);
    edgeEnd.id = (0, dangling_edge_feedback_1.feedbackEdgeEndId)(root);
    edgeEnd.position = { x: target.bounds.x, y: target.bounds.y };
    const feedbackEdgeSchema = {
        type: 'edge',
        id: (0, dangling_edge_feedback_1.feedbackEdgeId)(root),
        sourceId: edgeEnd.id,
        targetId: target.id,
        opacity: 0.3
    };
    const feedbackEdge = context.modelFactory.createElement(feedbackEdgeSchema);
    if ((0, gmodel_util_1.isRoutable)(feedbackEdge)) {
        edgeEnd.feedbackEdge = feedbackEdge;
        root.add(edgeEnd);
        root.add(feedbackEdge);
    }
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EdgeEditTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EdgeEditListener = exports.EdgeEditTool = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const drag_aware_mouse_listener_1 = __webpack_require__(/*! ../../../base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const selection_service_1 = __webpack_require__(/*! ../../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const model_1 = __webpack_require__(/*! ../../reconnect/model */ "../node_modules/@eclipse-glsp/client/lib/features/reconnect/model.js");
const base_tools_1 = __webpack_require__(/*! ../base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const dangling_edge_feedback_1 = __webpack_require__(/*! ../edge-creation/dangling-edge-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js");
const edge_edit_tool_feedback_1 = __webpack_require__(/*! ./edge-edit-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool-feedback.js");
let EdgeEditTool = EdgeEditTool_1 = class EdgeEditTool extends base_tools_1.BaseEditTool {
    get id() {
        return EdgeEditTool_1.ID;
    }
    enable() {
        this.edgeEditListener = new EdgeEditListener(this);
        // install feedback move mouse listener for client-side move updates
        this.feedbackEdgeSourceMovingListener = new edge_edit_tool_feedback_1.FeedbackEdgeSourceMovingMouseListener(this.anchorRegistry, this.feedbackDispatcher);
        this.feedbackEdgeTargetMovingListener = new edge_edit_tool_feedback_1.FeedbackEdgeTargetMovingMouseListener(this.anchorRegistry, this.feedbackDispatcher);
        this.feedbackMovingListener = new edge_edit_tool_feedback_1.FeedbackEdgeRouteMovingMouseListener(this.changeBoundsManager, this.edgeRouterRegistry);
        this.toDisposeOnDisable.push(this.edgeEditListener, this.mouseTool.registerListener(this.edgeEditListener), this.feedbackEdgeSourceMovingListener, this.feedbackEdgeTargetMovingListener, this.feedbackMovingListener, this.selectionService.addListener(this.edgeEditListener));
    }
    registerFeedbackListeners() {
        this.mouseTool.register(this.feedbackMovingListener);
        this.mouseTool.register(this.feedbackEdgeSourceMovingListener);
        this.mouseTool.register(this.feedbackEdgeTargetMovingListener);
    }
    deregisterFeedbackListeners() {
        this.feedbackEdgeSourceMovingListener.dispose();
        this.feedbackEdgeTargetMovingListener.dispose();
        this.mouseTool.deregister(this.feedbackEdgeSourceMovingListener);
        this.mouseTool.deregister(this.feedbackEdgeTargetMovingListener);
        this.mouseTool.deregister(this.feedbackMovingListener);
    }
};
exports.EdgeEditTool = EdgeEditTool;
EdgeEditTool.ID = 'glsp.edge-edit-tool';
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], EdgeEditTool.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.AnchorComputerRegistry),
    __metadata("design:type", sprotty_1.AnchorComputerRegistry)
], EdgeEditTool.prototype, "anchorRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], EdgeEditTool.prototype, "edgeRouterRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    __metadata("design:type", Object)
], EdgeEditTool.prototype, "changeBoundsManager", void 0);
exports.EdgeEditTool = EdgeEditTool = EdgeEditTool_1 = __decorate([
    (0, inversify_1.injectable)()
], EdgeEditTool);
class EdgeEditListener extends drag_aware_mouse_listener_1.DragAwareMouseListener {
    constructor(tool) {
        super();
        this.tool = tool;
        this.cursorFeedback = this.tool.createFeedbackEmitter();
        this.editFeedback = this.tool.createFeedbackEmitter();
    }
    isValidEdge(edge) {
        return edge !== undefined && edge.id !== (0, dangling_edge_feedback_1.feedbackEdgeId)(edge.root) && (0, sprotty_1.isSelected)(edge);
    }
    setEdgeSelected(edge) {
        this.edge = edge;
        // note: order is important here as we want the reconnect handles to cover the routing handles
        if ((0, sprotty_1.canEditRouting)(edge)) {
            this.editFeedback.add(edge_edit_tool_feedback_1.SwitchRoutingModeAction.create({ elementsToActivate: [this.edge.id] }), edge_edit_tool_feedback_1.SwitchRoutingModeAction.create({ elementsToDeactivate: [this.edge.id] }));
        }
        if ((0, model_1.isReconnectable)(edge)) {
            this.editFeedback.add(edge_edit_tool_feedback_1.ShowEdgeReconnectHandlesFeedbackAction.create(this.edge.id), edge_edit_tool_feedback_1.HideEdgeReconnectHandlesFeedbackAction.create());
        }
        this.editFeedback.submit();
    }
    isEdgeSelected() {
        return this.edge !== undefined && (0, sprotty_1.isSelected)(this.edge);
    }
    setReconnectHandleSelected(edge, reconnectHandle) {
        if (this.edge && this.edge.target && this.edge.source) {
            this.editFeedback.dispose();
            if ((0, model_1.isSourceRoutingHandle)(edge, reconnectHandle)) {
                this.editFeedback
                    .add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.EDGE_RECONNECT), (0, css_feedback_1.cursorFeedbackAction)())
                    .add(edge_edit_tool_feedback_1.DrawFeedbackEdgeSourceAction.create({ elementTypeId: this.edge.type, targetId: this.edge.targetId }), dangling_edge_feedback_1.RemoveFeedbackEdgeAction.create())
                    .submit();
                this.reconnectMode = 'NEW_SOURCE';
            }
            else if ((0, model_1.isTargetRoutingHandle)(edge, reconnectHandle)) {
                this.editFeedback
                    .add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.EDGE_CREATION_TARGET), (0, css_feedback_1.cursorFeedbackAction)())
                    .add(dangling_edge_feedback_1.DrawFeedbackEdgeAction.create({ elementTypeId: this.edge.type, sourceId: this.edge.sourceId }), dangling_edge_feedback_1.RemoveFeedbackEdgeAction.create())
                    .submit();
                this.reconnectMode = 'NEW_TARGET';
            }
        }
    }
    isReconnecting() {
        return this.reconnectMode !== undefined;
    }
    isReconnectingNewSource() {
        return this.reconnectMode === 'NEW_SOURCE';
    }
    setRoutingHandleSelected(edge, routingHandle) {
        if (this.edge && this.edge.target && this.edge.source) {
            this.routingHandle = routingHandle;
        }
    }
    requiresReconnect(sourceId, targetId) {
        return this.edge !== undefined && (this.edge.sourceId !== sourceId || this.edge.targetId !== targetId);
    }
    setNewConnectable(connectable) {
        this.newConnectable = connectable;
    }
    isReadyToReconnect() {
        return this.edge && this.isReconnecting() && this.newConnectable !== undefined;
    }
    isReadyToReroute() {
        return this.routingHandle !== undefined;
    }
    mouseDown(target, event) {
        const result = super.mouseDown(target, event);
        if (event.button === 0) {
            const reconnectHandle = (0, sprotty_1.findParentByFeature)(target, model_1.isReconnectHandle);
            const routingHandle = !reconnectHandle ? (0, sprotty_1.findParentByFeature)(target, gmodel_util_1.isRoutingHandle) : undefined;
            const edge = (0, sprotty_1.findParentByFeature)(target, gmodel_util_1.isRoutable);
            if (this.isEdgeSelected() && edge && reconnectHandle) {
                // PHASE 2 Reconnect: Select reconnect handle on selected edge
                this.setReconnectHandleSelected(edge, reconnectHandle);
            }
            else if (this.isEdgeSelected() && edge && routingHandle) {
                // PHASE 2 Reroute: Select routing handle on selected edge
                this.setRoutingHandleSelected(edge, routingHandle);
            }
            else if (this.isValidEdge(edge)) {
                // PHASE 1: Select edge
                this.dispose();
                this.tool.registerFeedbackListeners();
                this.setEdgeSelected(edge);
            }
        }
        else if (event.button === 2) {
            this.dispose();
        }
        return result;
    }
    draggingMouseMove(target, event) {
        // reset any selected connectables when we are dragging, maybe the user is just panning
        this.setNewConnectable(undefined);
        return super.draggingMouseMove(target, event);
    }
    mouseUp(target, event) {
        const result = super.mouseUp(target, event);
        if (!this.isReadyToReconnect() && !this.isReadyToReroute()) {
            return result;
        }
        if (this.edge && this.newConnectable) {
            const sourceElementId = this.isReconnectingNewSource() ? this.newConnectable.id : this.edge.sourceId;
            const targetElementId = this.isReconnectingNewSource() ? this.edge.targetId : this.newConnectable.id;
            if (this.requiresReconnect(sourceElementId, targetElementId)) {
                result.push(sprotty_1.ReconnectEdgeOperation.create({ edgeElementId: this.edge.id, sourceElementId, targetElementId }));
            }
            this.dispose();
        }
        else if (this.edge && this.routingHandle) {
            // we need to re-retrieve the edge as it might have changed due to a server update since we do not reset the state between
            // reroute actions
            const latestEdge = target.index.getById(this.edge.id);
            if (latestEdge && (0, gmodel_util_1.isRoutable)(latestEdge)) {
                const newRoutingPoints = (0, gmodel_util_1.calcElementAndRoutingPoints)(latestEdge, this.tool.edgeRouterRegistry);
                result.push(sprotty_1.ChangeRoutingPointsOperation.create([newRoutingPoints]));
                this.routingHandle = undefined;
            }
        }
        return result;
    }
    mouseOver(target, _event) {
        if (this.edge && this.isReconnecting()) {
            const currentTarget = (0, sprotty_1.findParentByFeature)(target, sprotty_1.isConnectable);
            if (!this.newConnectable || currentTarget !== this.newConnectable) {
                this.setNewConnectable(currentTarget);
                if (currentTarget) {
                    if ((this.reconnectMode === 'NEW_SOURCE' && currentTarget.canConnect(this.edge, 'source')) ||
                        (this.reconnectMode === 'NEW_TARGET' && currentTarget.canConnect(this.edge, 'target'))) {
                        this.cursorFeedback.add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.EDGE_RECONNECT), (0, css_feedback_1.cursorFeedbackAction)()).submit();
                        return [];
                    }
                }
                this.cursorFeedback.add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.OPERATION_NOT_ALLOWED), (0, css_feedback_1.cursorFeedbackAction)()).submit();
            }
        }
        return [];
    }
    selectionChanged(root, selectedElements) {
        if (this.edge) {
            if (selectedElements.indexOf(this.edge.id) > -1) {
                // our active edge is still selected, nothing to do
                return;
            }
            if (this.isReconnecting()) {
                // we are reconnecting, so we may have clicked on a potential target
                return;
            }
            // try to find some other selected element and mark that active
            for (const elementId of selectedElements.reverse()) {
                const element = root.index.getById(elementId);
                if (element) {
                    const edge = (0, sprotty_1.findParentByFeature)(element, gmodel_util_1.isRoutable);
                    if (this.isValidEdge(edge)) {
                        // PHASE 1: Select edge
                        this.setEdgeSelected(edge);
                        return;
                    }
                }
            }
            this.dispose();
        }
    }
    dispose() {
        this.edge = undefined;
        this.reconnectMode = undefined;
        this.newConnectable = undefined;
        this.routingHandle = undefined;
        this.cursorFeedback.dispose();
        this.editFeedback.dispose();
        this.tool.deregisterFeedbackListeners();
        super.dispose();
    }
}
exports.EdgeEditListener = EdgeEditListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-behavior.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-behavior.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MarqueeUtil = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ../../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const marquee_tool_feedback_1 = __webpack_require__(/*! ./marquee-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool-feedback.js");
let MarqueeUtil = class MarqueeUtil {
    constructor(marqueeBehavior = { entireElement: false, entireEdge: false }, domHelper) {
        this.marqueeBehavior = marqueeBehavior;
        this.domHelper = domHelper;
    }
    isContinuousMode(element, event) {
        return event.shiftKey;
    }
    getMarkableNodes(root) {
        return (0, gmodel_util_1.getMatchingElements)(root.index, this.isMarkableNode());
    }
    isMarkableNode() {
        return (0, sprotty_1.typeGuard)((0, sprotty_1.toTypeGuard)(sprotty_1.GNode), gmodel_util_1.isSelectableAndBoundsAware);
    }
    getMarkableEdges(root) {
        return (0, gmodel_util_1.getMatchingElements)(root.index, this.isMarkableEdge());
    }
    isMarkableEdge() {
        return (0, sprotty_1.typeGuard)((0, sprotty_1.toTypeGuard)(model_1.GEdge), sprotty_1.isSelectable);
    }
    updateStartPoint(position) {
        this.startPoint = position;
    }
    updateCurrentPoint(position) {
        this.currentPoint = position;
    }
    isMarked(element) {
        return element instanceof model_1.GEdge ? this.isMarkedEdge(element) : this.isMarkedNode(element);
    }
    drawMarqueeAction() {
        return marquee_tool_feedback_1.DrawMarqueeAction.create({ startPoint: this.startPoint, endPoint: this.currentPoint });
    }
    isMarkedEdge(edge) {
        const domId = this.domHelper.createUniqueDOMElementId(edge);
        const domEdge = document.getElementById(domId);
        if (!domEdge || domEdge.getAttribute('transform') || !domEdge.children[0]) {
            return false;
        }
        const path = domEdge.children[0].getAttribute('d');
        return this.isEdgePathMarked(path);
    }
    isMarkedNode(node) {
        return this.isNodeMarked(this.getNodeBounds(node));
    }
    getNodeBounds(node) {
        return (0, viewpoint_util_1.toAbsoluteBounds)(node);
    }
    isEdgePathMarked(path) {
        if (!path) {
            return false;
        }
        const points = path
            .split(/M|L/)
            .filter(p => p)
            .map(p => {
            const coord = p.split(',');
            return { x: parseInt(coord[0], 10), y: parseInt(coord[1], 10) };
        });
        return this.isEdgeMarked(points);
    }
    isEdgeMarked(points) {
        return this.marqueeBehavior.entireEdge ? this.isEntireEdgeMarked(points) : this.isPartOfEdgeMarked(points);
    }
    isNodeMarked(elementBounds) {
        const horizontallyIn = this.startPoint.x < this.currentPoint.x
            ? this.isElementBetweenXAxis(elementBounds, this.startPoint.x, this.currentPoint.x)
            : this.isElementBetweenXAxis(elementBounds, this.currentPoint.x, this.startPoint.x);
        const verticallyIn = this.startPoint.y < this.currentPoint.y
            ? this.isElementBetweenYAxis(elementBounds, this.startPoint.y, this.currentPoint.y)
            : this.isElementBetweenYAxis(elementBounds, this.currentPoint.y, this.startPoint.y);
        return horizontallyIn && verticallyIn;
    }
    isEntireEdgeMarked(points) {
        for (let i = 0; i < points.length; i++) {
            if (!this.pointInRect(points[i])) {
                return false;
            }
        }
        return true;
    }
    isPartOfEdgeMarked(points) {
        for (let i = 0; i < points.length - 1; i++) {
            if (this.isLineMarked(points[i], points[i + 1])) {
                return true;
            }
        }
        return false;
    }
    isLineMarked(point1, point2) {
        const line = new sprotty_1.PointToPointLine(point1, point2);
        return (this.pointInRect(point1) ||
            this.pointInRect(point2) ||
            this.lineIntersect(line, this.startPoint, { x: this.startPoint.x, y: this.currentPoint.y }) ||
            this.lineIntersect(line, this.startPoint, { x: this.currentPoint.x, y: this.startPoint.y }) ||
            this.lineIntersect(line, { x: this.currentPoint.x, y: this.startPoint.y }, this.currentPoint) ||
            this.lineIntersect(line, { x: this.startPoint.x, y: this.currentPoint.y }, this.currentPoint));
    }
    lineIntersect(line, p1, p2) {
        return line.intersection(new sprotty_1.PointToPointLine(p1, p2)) !== undefined;
    }
    pointInRect(point) {
        const boolX = this.startPoint.x <= this.currentPoint.x
            ? this.isBetween(point.x, this.startPoint.x, this.currentPoint.x)
            : this.isBetween(point.x, this.currentPoint.x, this.startPoint.x);
        const boolY = this.startPoint.y <= this.currentPoint.y
            ? this.isBetween(point.y, this.startPoint.y, this.currentPoint.y)
            : this.isBetween(point.y, this.currentPoint.y, this.startPoint.y);
        return boolX && boolY;
    }
    isElementBetweenXAxis(elementBounds, marqueeLeft, marqueeRight) {
        const leftEdge = this.isBetween(elementBounds.x, marqueeLeft, marqueeRight);
        const rightEdge = this.isBetween(elementBounds.x + elementBounds.width, marqueeLeft, marqueeRight);
        if (this.marqueeBehavior.entireElement) {
            return leftEdge && rightEdge;
        }
        return (leftEdge ||
            rightEdge ||
            this.isBetween(marqueeLeft, elementBounds.x, elementBounds.x + elementBounds.width) ||
            this.isBetween(marqueeRight, elementBounds.x, elementBounds.x + elementBounds.width));
    }
    isElementBetweenYAxis(elementBounds, marqueeTop, marqueeBottom) {
        const topEdge = this.isBetween(elementBounds.y, marqueeTop, marqueeBottom);
        const bottomEdge = this.isBetween(elementBounds.y + elementBounds.height, marqueeTop, marqueeBottom);
        if (this.marqueeBehavior.entireElement) {
            return topEdge && bottomEdge;
        }
        return (topEdge ||
            bottomEdge ||
            this.isBetween(marqueeTop, elementBounds.y, elementBounds.y + elementBounds.height) ||
            this.isBetween(marqueeBottom, elementBounds.y, elementBounds.y + elementBounds.height));
    }
    isBetween(x, lower, upper) {
        return lower <= x && x <= upper;
    }
};
exports.MarqueeUtil = MarqueeUtil;
exports.MarqueeUtil = MarqueeUtil = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.IMarqueeBehavior)),
    __param(0, (0, inversify_1.optional)()),
    __param(1, (0, inversify_1.inject)(sprotty_1.TYPES.DOMHelper)),
    __metadata("design:paramtypes", [Object, sprotty_1.DOMHelper])
], MarqueeUtil);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-mouse-tool.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-mouse-tool.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MarqueeMouseTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShiftKeyListener = exports.MarqueeMouseListener = exports.MarqueeMouseTool = void 0;
/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const drag_aware_mouse_listener_1 = __webpack_require__(/*! ../../../base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const gmodel_util_1 = __webpack_require__(/*! ../../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const viewpoint_util_1 = __webpack_require__(/*! ../../../utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js");
const base_tools_1 = __webpack_require__(/*! ../base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const marquee_behavior_1 = __webpack_require__(/*! ./marquee-behavior */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-behavior.js");
const marquee_tool_feedback_1 = __webpack_require__(/*! ./marquee-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool-feedback.js");
let MarqueeMouseTool = MarqueeMouseTool_1 = class MarqueeMouseTool extends base_tools_1.BaseEditTool {
    constructor() {
        super(...arguments);
        this.shiftKeyListener = new ShiftKeyListener();
    }
    get id() {
        return MarqueeMouseTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.mouseTool.registerListener(new MarqueeMouseListener(this.editorContext.modelRoot, this.marqueeUtil)), this.keyTool.registerListener(this.shiftKeyListener), this.createFeedbackEmitter().add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.MARQUEE), (0, css_feedback_1.cursorFeedbackAction)()).submit());
    }
    get isEditTool() {
        return false;
    }
};
exports.MarqueeMouseTool = MarqueeMouseTool;
MarqueeMouseTool.ID = 'glsp.marquee-mouse-tool';
__decorate([
    (0, inversify_1.inject)(marquee_behavior_1.MarqueeUtil),
    __metadata("design:type", marquee_behavior_1.MarqueeUtil)
], MarqueeMouseTool.prototype, "marqueeUtil", void 0);
exports.MarqueeMouseTool = MarqueeMouseTool = MarqueeMouseTool_1 = __decorate([
    (0, inversify_1.injectable)()
], MarqueeMouseTool);
class MarqueeMouseListener extends drag_aware_mouse_listener_1.DragAwareMouseListener {
    constructor(root, marqueeUtil) {
        super();
        this.marqueeUtil = marqueeUtil;
        this.isActive = false;
        // pre-calculate all markable node and edges to improve performance
        this.nodes = this.marqueeUtil.getMarkableNodes(root);
        this.edges = this.marqueeUtil.getMarkableEdges(root);
    }
    mouseDown(target, event) {
        this.isActive = true;
        this.marqueeUtil.updateStartPoint((0, viewpoint_util_1.getAbsolutePosition)(target, event));
        if (event.ctrlKey) {
            this.previouslySelected = (0, gmodel_util_1.getMatchingElements)(target.index, (0, sprotty_1.typeGuard)(gmodel_util_1.isSelectableAndBoundsAware, sprotty_1.isSelected)).map(e => e.id);
        }
        return [];
    }
    mouseMove(target, event) {
        this.marqueeUtil.updateCurrentPoint((0, viewpoint_util_1.getAbsolutePosition)(target, event));
        if (this.isActive) {
            const nodeIdsSelected = this.nodes.filter(e => this.marqueeUtil.isMarked(e)).map(e => e.id);
            const edgeIdsSelected = this.edges.filter(e => this.marqueeUtil.isMarked(e)).map(e => e.id);
            const currentSelected = nodeIdsSelected.concat(edgeIdsSelected);
            const selection = currentSelected.concat(this.previouslySelected);
            return [sprotty_1.SelectAction.setSelection(selection), this.marqueeUtil.drawMarqueeAction()];
        }
        return [];
    }
    mouseUp(target, event) {
        this.isActive = false;
        return this.marqueeUtil.isContinuousMode(target, event)
            ? [marquee_tool_feedback_1.RemoveMarqueeAction.create()]
            : [marquee_tool_feedback_1.RemoveMarqueeAction.create(), tool_1.EnableDefaultToolsAction.create()];
    }
}
exports.MarqueeMouseListener = MarqueeMouseListener;
let ShiftKeyListener = class ShiftKeyListener extends sprotty_1.KeyListener {
    keyUp(element, event) {
        if (event.shiftKey) {
            return [];
        }
        return [marquee_tool_feedback_1.RemoveMarqueeAction.create(), tool_1.EnableDefaultToolsAction.create()];
    }
};
exports.ShiftKeyListener = ShiftKeyListener;
exports.ShiftKeyListener = ShiftKeyListener = __decorate([
    (0, inversify_1.injectable)()
], ShiftKeyListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-selection-module.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-selection-module.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.marqueeSelectionToolModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const marquee_mouse_tool_1 = __webpack_require__(/*! ./marquee-mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-mouse-tool.js");
const marquee_tool_1 = __webpack_require__(/*! ./marquee-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool.js");
const marquee_tool_feedback_1 = __webpack_require__(/*! ./marquee-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool-feedback.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/model.js");
const view_1 = __webpack_require__(/*! ./view */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/view.js");
const marquee_behavior_1 = __webpack_require__(/*! ./marquee-behavior */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-behavior.js");
exports.marqueeSelectionToolModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    context.bind(marquee_behavior_1.MarqueeUtil).toSelf().inSingletonScope();
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, marquee_tool_1.MarqueeTool);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.ITool, marquee_mouse_tool_1.MarqueeMouseTool);
    (0, sprotty_1.configureCommand)(context, marquee_tool_feedback_1.DrawMarqueeCommand);
    (0, sprotty_1.configureCommand)(context, marquee_tool_feedback_1.RemoveMarqueeCommand);
    (0, sprotty_1.configureModelElement)(context, marquee_tool_feedback_1.MARQUEE, model_1.MarqueeNode, view_1.MarqueeView);
}, { featureId: Symbol('marqueeSelectionTool') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool-feedback.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool-feedback.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MARQUEE = exports.MarqueeEndMovingMouseListener = exports.RemoveMarqueeCommand = exports.RemoveMarqueeAction = exports.DrawMarqueeCommand = exports.DrawMarqueeAction = void 0;
exports.marqueeId = marqueeId;
exports.drawMarquee = drawMarquee;
exports.removeMarquee = removeMarquee;
/********************************************************************************
 * Copyright (c) 2021-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const feedback_command_1 = __webpack_require__(/*! ../../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
var DrawMarqueeAction;
(function (DrawMarqueeAction) {
    DrawMarqueeAction.KIND = 'drawMarquee';
    function is(object) {
        return sprotty_1.Action.hasKind(object, DrawMarqueeAction.KIND) && (0, sprotty_1.hasObjectProp)(object, 'startPoint') && (0, sprotty_1.hasObjectProp)(object, 'endPoint');
    }
    DrawMarqueeAction.is = is;
    function create(options) {
        return {
            kind: DrawMarqueeAction.KIND,
            ...options
        };
    }
    DrawMarqueeAction.create = create;
})(DrawMarqueeAction || (exports.DrawMarqueeAction = DrawMarqueeAction = {}));
let DrawMarqueeCommand = class DrawMarqueeCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        drawMarquee(context, this.action.startPoint, this.action.endPoint);
        return context.root;
    }
};
exports.DrawMarqueeCommand = DrawMarqueeCommand;
DrawMarqueeCommand.KIND = DrawMarqueeAction.KIND;
exports.DrawMarqueeCommand = DrawMarqueeCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], DrawMarqueeCommand);
var RemoveMarqueeAction;
(function (RemoveMarqueeAction) {
    RemoveMarqueeAction.KIND = 'removeMarquee';
    function is(object) {
        return sprotty_1.Action.hasKind(object, RemoveMarqueeAction.KIND);
    }
    RemoveMarqueeAction.is = is;
    function create() {
        return { kind: RemoveMarqueeAction.KIND };
    }
    RemoveMarqueeAction.create = create;
})(RemoveMarqueeAction || (exports.RemoveMarqueeAction = RemoveMarqueeAction = {}));
let RemoveMarqueeCommand = class RemoveMarqueeCommand extends feedback_command_1.FeedbackCommand {
    execute(context) {
        removeMarquee(context.root);
        return context.root;
    }
};
exports.RemoveMarqueeCommand = RemoveMarqueeCommand;
RemoveMarqueeCommand.KIND = RemoveMarqueeAction.KIND;
exports.RemoveMarqueeCommand = RemoveMarqueeCommand = __decorate([
    (0, inversify_1.injectable)()
], RemoveMarqueeCommand);
class MarqueeEndMovingMouseListener extends sprotty_1.MouseListener {
    constructor(anchorRegistry) {
        super();
        this.anchorRegistry = anchorRegistry;
    }
    mouseMove(target, event) {
        return [];
    }
}
exports.MarqueeEndMovingMouseListener = MarqueeEndMovingMouseListener;
function marqueeId(root) {
    return root.id + '_' + exports.MARQUEE;
}
exports.MARQUEE = 'marquee';
function drawMarquee(context, startPoint, endPoint) {
    const root = context.root;
    removeMarquee(root);
    const marqueeSchema = {
        type: exports.MARQUEE,
        id: marqueeId(root),
        startPoint: startPoint,
        endPoint: endPoint
    };
    const marquee = context.modelFactory.createElement(marqueeSchema);
    root.add(marquee);
}
function removeMarquee(root) {
    const marquee = root.index.getById(marqueeId(root));
    if (marquee instanceof sprotty_1.GChildElement) {
        root.remove(marquee);
    }
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MarqueeTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MarqueeKeyListener = exports.MarqueeTool = void 0;
/********************************************************************************
 * Copyright (c) 2021-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const selection_service_1 = __webpack_require__(/*! ../../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const base_tools_1 = __webpack_require__(/*! ../base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const marquee_mouse_tool_1 = __webpack_require__(/*! ./marquee-mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-mouse-tool.js");
let MarqueeTool = MarqueeTool_1 = class MarqueeTool extends base_tools_1.BaseEditTool {
    get id() {
        return MarqueeTool_1.ID;
    }
    enable() {
        if (!this.marqueeKeyListener) {
            this.marqueeKeyListener = new MarqueeKeyListener(this.selectionService);
        }
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.marqueeKeyListener));
    }
};
exports.MarqueeTool = MarqueeTool;
MarqueeTool.ID = 'glsp.marquee-tool';
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], MarqueeTool.prototype, "selectionService", void 0);
exports.MarqueeTool = MarqueeTool = MarqueeTool_1 = __decorate([
    (0, inversify_1.injectable)()
], MarqueeTool);
let MarqueeKeyListener = class MarqueeKeyListener extends sprotty_1.KeyListener {
    constructor(selectionService) {
        super();
        this.selectionService = selectionService;
    }
    keyDown(_element, event) {
        if (event.shiftKey && !this.selectionService.hasSelectedElements()) {
            return [tool_1.EnableToolsAction.create([marquee_mouse_tool_1.MarqueeMouseTool.ID])];
        }
        return [];
    }
};
exports.MarqueeKeyListener = MarqueeKeyListener;
exports.MarqueeKeyListener = MarqueeKeyListener = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [selection_service_1.SelectionService])
], MarqueeKeyListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/model.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/model.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MarqueeNode = void 0;
/********************************************************************************
 * Copyright (c) 2021-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
class MarqueeNode extends sprotty_1.RectangularNode {
}
exports.MarqueeNode = MarqueeNode;
MarqueeNode.DEFAULT_FEATURES = [sprotty_1.boundsFeature];


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/view.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/view.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MarqueeView = void 0;
/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let MarqueeView = class MarqueeView extends sprotty_1.RectangularNodeView {
    render(node, context) {
        const graph = ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("rect", { "class-sprotty-node": true, "class-marquee": true, x: node.startPoint.x - node.endPoint.x <= 0 ? node.startPoint.x : node.endPoint.x, y: node.startPoint.y - node.endPoint.y <= 0 ? node.startPoint.y : node.endPoint.y, rx: 0, ry: 0, width: Math.abs(node.startPoint.x - node.endPoint.x), height: Math.abs(node.startPoint.y - node.endPoint.y) })));
        return graph;
    }
};
exports.MarqueeView = MarqueeView;
exports.MarqueeView = MarqueeView = __decorate([
    (0, inversify_1.injectable)()
], MarqueeView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/container-manager.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/container-manager.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContainerManager = exports.DEFAULT_INSERT_OPTIONS = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const model_1 = __webpack_require__(/*! ../../hints/model */ "../node_modules/@eclipse-glsp/client/lib/features/hints/model.js");
exports.DEFAULT_INSERT_OPTIONS = {
    validateLocationInContainer: false
};
/**
 * The default {@link IContainerManager} implementation.
 * This class class manages the insertion of elements into containers by validating their positions and types,
 * providing feedback on the insertion process, and determining the appropriate container based on the location and context.
 */
let ContainerManager = class ContainerManager {
    insert(proxy, location, elementTypeId, opts) {
        var _a;
        const options = { ...exports.DEFAULT_INSERT_OPTIONS, ...opts };
        const container = this.findContainer(location, proxy, opts === null || opts === void 0 ? void 0 : opts.evt);
        let valid = this.isCreationAllowed(container, elementTypeId, opts);
        if (valid && (!container || options.validateLocationInContainer)) {
            // we need to check whether the location is valid either because we do not have a container or the option is set
            valid = (_a = opts === null || opts === void 0 ? void 0 : opts.validLocationOverwrite) !== null && _a !== void 0 ? _a : this.changeBoundsManager.hasValidPosition(proxy, location);
        }
        return { elementTypeId, container, location, valid, options };
    }
    isCreationAllowed(container, elementTypeId, opts) {
        return !container || container.isContainableElement(elementTypeId);
    }
    findContainer(location, ctx, evt) {
        // reverse order of children to find the innermost, top-rendered containers first
        return [ctx.root, ...(0, sprotty_1.findChildrenAtPosition)(ctx.root, location)]
            .reverse()
            .find(element => { var _a; return (0, model_1.isContainable)(element) && !((_a = element.cssClasses) === null || _a === void 0 ? void 0 : _a.includes(css_feedback_1.CSS_GHOST_ELEMENT)); });
    }
    addInsertFeedback(feedback, trackedInsert, ctx, event) {
        // cursor feedback
        if (!trackedInsert.valid) {
            feedback.add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.OPERATION_NOT_ALLOWED), (0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.DEFAULT));
        }
        else {
            feedback.add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.NODE_CREATION), (0, css_feedback_1.cursorFeedbackAction)());
        }
        return feedback;
    }
};
exports.ContainerManager = ContainerManager;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    __metadata("design:type", Object)
], ContainerManager.prototype, "changeBoundsManager", void 0);
exports.ContainerManager = ContainerManager = __decorate([
    (0, inversify_1.injectable)()
], ContainerManager);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/insert-indicator.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/insert-indicator.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InsertIndicator = exports.ARG_LENGTH = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const uuid_1 = __webpack_require__(/*! uuid */ "../node_modules/uuid/dist/commonjs-browser/index.js");
const args_feature_1 = __webpack_require__(/*! ../../../base/args-feature */ "../node_modules/@eclipse-glsp/client/lib/base/args-feature.js");
exports.ARG_LENGTH = 'length';
class InsertIndicator extends sprotty_1.GNode {
    constructor(length) {
        super();
        this.id = (0, uuid_1.v4)();
        this.type = InsertIndicator.TYPE;
        this.features = (0, sprotty_1.createFeatureSet)(InsertIndicator.DEFAULT_FEATURES);
        this.cssClasses = ['insert-indicator', 'sprotty-node'];
        this.size = sprotty_1.Dimension.ZERO;
        this.args = {};
        if (length) {
            this.args = { [exports.ARG_LENGTH]: length };
        }
    }
}
exports.InsertIndicator = InsertIndicator;
InsertIndicator.DEFAULT_FEATURES = [sprotty_1.boundsFeature, sprotty_1.moveFeature, args_feature_1.argsFeature];
InsertIndicator.TYPE = 'node:insert-indicator';


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-module.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-module.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.nodeCreationToolModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const element_template_module_1 = __webpack_require__(/*! ../../element-template/element-template-module */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/element-template-module.js");
const container_manager_1 = __webpack_require__(/*! ./container-manager */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/container-manager.js");
const insert_indicator_1 = __webpack_require__(/*! ./insert-indicator */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/insert-indicator.js");
const node_creation_tool_1 = __webpack_require__(/*! ./node-creation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-tool.js");
const node_creation_views_1 = __webpack_require__(/*! ./node-creation-views */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-views.js");
exports.nodeCreationToolModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IContainerManager, container_manager_1.ContainerManager);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.ITool, node_creation_tool_1.NodeCreationTool);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.TriggerNodeCreationAction.KIND, node_creation_tool_1.NodeCreationTool);
    (0, sprotty_1.configureModelElement)(context, insert_indicator_1.InsertIndicator.TYPE, insert_indicator_1.InsertIndicator, node_creation_views_1.InsertIndicatorView);
}, {
    featureId: Symbol('nodeCreationTool'),
    requires: element_template_module_1.elementTemplateModule
});


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-tool.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-tool.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var NodeCreationTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NodeCreationToolMouseListener = exports.NodeInsertTrackingListener = exports.NodeCreationTool = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
__webpack_require__(/*! ../../../../css/ghost-element.css */ "../node_modules/@eclipse-glsp/client/css/ghost-element.css");
const drag_aware_mouse_listener_1 = __webpack_require__(/*! ../../../base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js");
const css_feedback_1 = __webpack_require__(/*! ../../../base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js");
const tool_1 = __webpack_require__(/*! ../../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const add_template_element_1 = __webpack_require__(/*! ../../element-template/add-template-element */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/add-template-element.js");
const mouse_tracking_element_position_listener_1 = __webpack_require__(/*! ../../element-template/mouse-tracking-element-position-listener */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/mouse-tracking-element-position-listener.js");
const remove_template_element_1 = __webpack_require__(/*! ../../element-template/remove-template-element */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/remove-template-element.js");
const base_tools_1 = __webpack_require__(/*! ../base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const insert_indicator_1 = __webpack_require__(/*! ./insert-indicator */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/insert-indicator.js");
let NodeCreationTool = NodeCreationTool_1 = class NodeCreationTool extends base_tools_1.BaseCreationTool {
    constructor() {
        super(...arguments);
        this.isTriggerAction = sprotty_1.TriggerNodeCreationAction.is;
    }
    get id() {
        return NodeCreationTool_1.ID;
    }
    doEnable() {
        var _a;
        const ghostElement = (_a = this.triggerAction.ghostElement) !== null && _a !== void 0 ? _a : { template: this.modelFactory.createSchema(this.createInsertIndicator()) };
        this.toDisposeOnDisable.push(this.createGhostElementTracker(ghostElement, 'middle'));
        this.toDisposeOnDisable.push(this.createNodeCreationListener(ghostElement));
        this.toDisposeOnDisable.push(this.createNodeCreationCursorFeedback().submit());
    }
    createInsertIndicator() {
        return new insert_indicator_1.InsertIndicator();
    }
    createGhostElementTracker(ghostElement, position) {
        const trackingListener = new NodeInsertTrackingListener((0, add_template_element_1.getTemplateElementId)(ghostElement.template), this.triggerAction.elementTypeId, this, position, this.editorContext);
        return new sprotty_1.DisposableCollection(trackingListener, this.mouseTool.registerListener(trackingListener));
    }
    createNodeCreationListener(ghostElement) {
        const toolListener = new NodeCreationToolMouseListener(this.triggerAction, this, ghostElement);
        return new sprotty_1.DisposableCollection(toolListener, this.mouseTool.registerListener(toolListener));
    }
    createNodeCreationCursorFeedback() {
        return this.createFeedbackEmitter().add((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.NODE_CREATION), (0, css_feedback_1.cursorFeedbackAction)());
    }
};
exports.NodeCreationTool = NodeCreationTool;
NodeCreationTool.ID = 'tool_create_node';
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    __metadata("design:type", Object)
], NodeCreationTool.prototype, "changeBoundsManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IContainerManager),
    __metadata("design:type", Object)
], NodeCreationTool.prototype, "containerManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IModelFactory),
    __metadata("design:type", Object)
], NodeCreationTool.prototype, "modelFactory", void 0);
exports.NodeCreationTool = NodeCreationTool = NodeCreationTool_1 = __decorate([
    (0, inversify_1.injectable)()
], NodeCreationTool);
class NodeInsertTrackingListener extends mouse_tracking_element_position_listener_1.MouseTrackingElementPositionListener {
    constructor(elementId, elementTypeId, tool, cursorPosition = 'top-left', editorContext) {
        super(elementId, tool, cursorPosition, editorContext);
        this.elementTypeId = elementTypeId;
        this.tool = tool;
    }
    addMoveFeedback(move, ctx, event) {
        super.addMoveFeedback(move, ctx, event);
        const element = move.elementMoves[0].element;
        const location = move.elementMoves[0].toPosition;
        const insert = this.tool.containerManager.insert(element, location, this.elementTypeId, { evt: event });
        this.tool.containerManager.addInsertFeedback(this.moveGhostFeedback, insert, ctx, event);
    }
}
exports.NodeInsertTrackingListener = NodeInsertTrackingListener;
class NodeCreationToolMouseListener extends drag_aware_mouse_listener_1.DragAwareMouseListener {
    constructor(triggerAction, tool, ghostElement) {
        super();
        this.triggerAction = triggerAction;
        this.tool = tool;
        this.ghostElement = ghostElement;
        this.cursorFeedback = tool.createFeedbackEmitter();
        this.ghostElementFeedback = tool.createFeedbackEmitter();
        this.ghostElementId = (0, add_template_element_1.getTemplateElementId)(ghostElement.template);
        this.createGhostElement(ghostElement);
    }
    get elementTypeId() {
        return this.triggerAction.elementTypeId;
    }
    nonDraggingMouseUp(ctx, event) {
        const result = [];
        const insert = this.getTrackedInsert(ctx, event);
        if (insert.valid) {
            result.push(this.getCreateOperation(ctx, event, insert));
        }
        if (this.isContinuousMode(ctx, event)) {
            // we continue in stamp mode so we keep the ghost but dispose everything else
            this.disposeAllButGhostElement();
            return result;
        }
        if (insert.valid) {
            // we keep the ghost element until the next update to avoid flickering during insert
            this.ghostElementFeedback.discard();
        }
        else {
            this.dispose();
        }
        result.push(tool_1.EnableDefaultToolsAction.create());
        return result;
    }
    /**
     * Determines wether the tool should run in continuous mode (also called stamp mode) or not.
     * If continuous mode is enabled, the tool will stay after a successful creation.
     * The user can then create more elements of the same type without having to re-trigger the tool.
     * By default, continuous mode is enabled if the user holds the CTRL key.
     * @param ctx the current model context
     * @param event
     */
    isContinuousMode(ctx, event) {
        return (0, sprotty_1.isCtrlOrCmd)(event);
    }
    getCreateOperation(ctx, event, insert) {
        var _a;
        return sprotty_1.CreateNodeOperation.create(this.elementTypeId, {
            location: insert.location,
            containerId: (_a = insert.container) === null || _a === void 0 ? void 0 : _a.id,
            args: this.getCreateNodeOperationArgs(insert, ctx, event)
        });
    }
    getCreateNodeOperationArgs(insert, ctx, event) {
        let args = { ...this.triggerAction.args };
        const ghostElement = this.getGhostElement(ctx, event);
        if (ghostElement) {
            const ghostDimensions = (0, sprotty_1.isBoundsAware)(ghostElement) ? sprotty_1.Bounds.dimension(ghostElement.bounds) : sprotty_1.Dimension.ZERO;
            args = {
                ...args,
                'ghost-x': ghostElement.position.x,
                'ghost-y': ghostElement.position.y,
                'ghost-width': ghostDimensions.width,
                'ghost-height': ghostDimensions.height
            };
        }
        return args;
    }
    createGhostElement(ghostElement) {
        const templates = [ghostElement.template];
        this.ghostElementFeedback.add(add_template_element_1.AddTemplateElementsAction.create({ templates, addClasses: [css_feedback_1.CSS_HIDDEN, css_feedback_1.CSS_GHOST_ELEMENT] }), remove_template_element_1.RemoveTemplateElementsAction.create({ templates }));
        this.ghostElementFeedback.submit();
        return (0, add_template_element_1.getTemplateElementId)(ghostElement.template);
    }
    getGhostElement(ctx, event) {
        const ghostElement = ctx.index.getById(this.ghostElementId);
        return ghostElement && (0, sprotty_1.isMoveable)(ghostElement) ? ghostElement : undefined;
    }
    getTrackedInsert(ctx, event) {
        const ghostElement = this.getGhostElement(ctx, event);
        if (!ghostElement) {
            return { elementTypeId: this.elementTypeId, location: sprotty_1.Point.ORIGIN, valid: false, options: { evt: event } };
        }
        return this.tool.containerManager.insert(ghostElement, ghostElement.position, this.elementTypeId, { evt: event });
    }
    disposeAllButGhostElement() {
        super.dispose();
    }
    dispose() {
        this.ghostElementFeedback.dispose();
        this.disposeAllButGhostElement();
    }
}
exports.NodeCreationToolMouseListener = NodeCreationToolMouseListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-views.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-views.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InsertIndicatorView = void 0;
/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const argument_utils_1 = __webpack_require__(/*! ../../../utils/argument-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/argument-utils.js");
const grid_1 = __webpack_require__(/*! ../../grid/grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
const insert_indicator_1 = __webpack_require__(/*! ./insert-indicator */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/insert-indicator.js");
let InsertIndicatorView = class InsertIndicatorView {
    render(model, context) {
        if (context.targetKind === 'hidden') {
            return undefined;
        }
        const size = this.getSize(model);
        const node = ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("polyline", { "class-sprotty-node": true, "class-insert-indicator": true, points: `0,${-size / 2} 0,${size / 2}` }),
            (0, sprotty_1.svg)("polyline", { "class-sprotty-node": true, "class-insert-indicator": true, points: `${-size / 2},0 ${size / 2},0` })));
        model.cssClasses.forEach(cl => (0, sprotty_1.setClass)(node, cl, true));
        return node;
    }
    getSize(model) {
        var _a, _b, _c;
        return (_c = (_a = argument_utils_1.GArgument.getNumber(model, insert_indicator_1.ARG_LENGTH)) !== null && _a !== void 0 ? _a : (_b = this.grid) === null || _b === void 0 ? void 0 : _b.x) !== null && _c !== void 0 ? _c : 10;
    }
};
exports.InsertIndicatorView = InsertIndicatorView;
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    __metadata("design:type", Object)
], InsertIndicatorView.prototype, "grid", void 0);
exports.InsertIndicatorView = InsertIndicatorView = __decorate([
    (0, inversify_1.injectable)()
], InsertIndicatorView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/tools/tool-focus-loss-module.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/tools/tool-focus-loss-module.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toolFocusLossModule = exports.EnableDefaultToolsOnFocusLossHandler = void 0;
/********************************************************************************
 * Copyright (c) 2022-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const focus_state_change_action_1 = __webpack_require__(/*! ../../base/focus/focus-state-change-action */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
/**
 * Action handler that enables the default tools when the diagram lost focus.
 * @see FocusStateChangedAction
 */
let EnableDefaultToolsOnFocusLossHandler = class EnableDefaultToolsOnFocusLossHandler {
    handle(action) {
        if (focus_state_change_action_1.FocusStateChangedAction.is(action) && !action.hasFocus) {
            return tool_1.EnableDefaultToolsAction.create();
        }
    }
};
exports.EnableDefaultToolsOnFocusLossHandler = EnableDefaultToolsOnFocusLossHandler;
exports.EnableDefaultToolsOnFocusLossHandler = EnableDefaultToolsOnFocusLossHandler = __decorate([
    (0, inversify_1.injectable)()
], EnableDefaultToolsOnFocusLossHandler);
/**
 * Enables the default tools in the tool manager if the diagram looses focus.
 */
exports.toolFocusLossModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, focus_state_change_action_1.FocusStateChangedAction.KIND, EnableDefaultToolsOnFocusLossHandler);
}, { featureId: Symbol('toolFocusLoss ') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/undo-redo/undo-redo-key-listener.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/undo-redo/undo-redo-key-listener.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPUndoRedoKeyListener = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
/**
 * Key listener that listens to the typical keyboard shortcuts for undo/redo and dispatches the corresponding actions.
 */
class GLSPUndoRedoKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'KeyZ', 'ctrlCmd')) {
            return [sprotty_1.UndoAction.create()];
        }
        if ((0, sprotty_1.matchesKeystroke)(event, 'KeyZ', 'ctrlCmd', 'shift') || (!(0, sprotty_1.isMac)() && (0, sprotty_1.matchesKeystroke)(event, 'KeyY', 'ctrlCmd'))) {
            return [sprotty_1.RedoAction.create()];
        }
        return [];
    }
}
exports.GLSPUndoRedoKeyListener = GLSPUndoRedoKeyListener;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/undo-redo/undo-redo-module.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/undo-redo/undo-redo-module.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.undoRedoModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const undo_redo_key_listener_1 = __webpack_require__(/*! ./undo-redo-key-listener */ "../node_modules/@eclipse-glsp/client/lib/features/undo-redo/undo-redo-key-listener.js");
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.undoRedoModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.KeyListener, undo_redo_key_listener_1.GLSPUndoRedoKeyListener);
}, { featureId: Symbol('undoRedo') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/validation/issue-marker.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/validation/issue-marker.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GIssueMarker = void 0;
exports.getOrCreateGIssueMarker = getOrCreateGIssueMarker;
exports.getGIssueMarker = getGIssueMarker;
exports.createGIssue = createGIssue;
exports.getSeverity = getSeverity;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
class GIssueMarker extends sprotty_1.SIssueMarkerImpl {
    constructor() {
        super();
        this.issues = [];
        this.type = 'marker';
        this.features = new Set(sprotty_1.GDecoration.DEFAULT_FEATURES);
    }
    computeProjectionCssClasses() {
        const severityCss = getSeverity(this);
        this.projectionCssClasses = ['sprotty-issue', 'sprotty-' + severityCss];
    }
}
exports.GIssueMarker = GIssueMarker;
/**
 * Retrieves the `GIssueMarker` contained by the provided model element as
 * direct child or a newly instantiated `GIssueMarker` if no child
 * `GIssueMarker` exists.
 * @param modelElement for which the `GIssueMarker` should be retrieved or created.
 * @returns the child `GIssueMarker` or a new `GIssueMarker` if no such child exists.
 */
function getOrCreateGIssueMarker(modelElement) {
    let issueMarker;
    issueMarker = getGIssueMarker(modelElement);
    if (issueMarker === undefined) {
        issueMarker = new GIssueMarker();
        if ((0, sprotty_1.isBoundsAware)(modelElement)) {
            issueMarker.projectedBounds = modelElement.parentToLocal(modelElement.bounds);
        }
        modelElement.add(issueMarker);
    }
    return issueMarker;
}
/**
 * Retrieves the `GIssueMarker` contained by the provided model element as
 * direct child or `undefined` if such an `GIssueMarker` does not exist.
 * @param modelElement for which the `GIssueMarker` should be retrieved.
 * @returns the child `GIssueMarker` or `undefined` if no such child exists.
 */
function getGIssueMarker(modelElement) {
    let issueMarker;
    for (const child of modelElement.children) {
        if (child instanceof GIssueMarker) {
            issueMarker = child;
        }
    }
    return issueMarker;
}
/**
 * Creates an `GIssue` with `severity` and `message` set according to
 * the `kind` and `description` of the provided `Marker`.
 * @param marker `Marker` for that an `GIssue` should be created.
 * @returns the created `GIssue`.
 */
function createGIssue(marker, parent) {
    const issue = {
        message: marker.description,
        severity: 'info'
    };
    switch (marker.kind) {
        case sprotty_1.MarkerKind.ERROR: {
            issue.severity = 'error';
            break;
        }
        case sprotty_1.MarkerKind.INFO: {
            issue.severity = 'info';
            break;
        }
        case sprotty_1.MarkerKind.WARNING: {
            issue.severity = 'warning';
            break;
        }
    }
    return issue;
}
function getSeverity(marker) {
    let currentSeverity = 'info';
    for (const severity of marker.issues.map(s => s.severity)) {
        if (severity === 'error') {
            return severity;
        }
        if (severity === 'warning' && currentSeverity === 'info') {
            currentSeverity = severity;
        }
    }
    return currentSeverity;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/validation/marker-navigator.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/validation/marker-navigator.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MarkerNavigatorKeyListener = exports.MarkerNavigatorContextMenuItemProvider = exports.NavigateToMarkerActionHandler = exports.MarkerNavigator = exports.LeftToRightTopToBottomComparator = exports.GModelElementComparator = exports.NavigateToMarkerAction = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const selection_service_1 = __webpack_require__(/*! ../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const marker_1 = __webpack_require__(/*! ../../utils/marker */ "../node_modules/@eclipse-glsp/client/lib/utils/marker.js");
var NavigateToMarkerAction;
(function (NavigateToMarkerAction) {
    NavigateToMarkerAction.KIND = 'navigateToMarker';
    function is(object) {
        return sprotty_1.Action.hasKind(object, NavigateToMarkerAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'direction') && (0, sprotty_1.hasArrayProp)(object, 'severities');
    }
    NavigateToMarkerAction.is = is;
    function create(options) {
        return {
            kind: NavigateToMarkerAction.KIND,
            direction: 'next',
            severities: MarkerNavigator.ALL_SEVERITIES,
            ...options
        };
    }
    NavigateToMarkerAction.create = create;
})(NavigateToMarkerAction || (exports.NavigateToMarkerAction = NavigateToMarkerAction = {}));
class GModelElementComparator {
    compare(_one, _other) {
        return 0;
    }
}
exports.GModelElementComparator = GModelElementComparator;
/** Specifies the order of two selectable and bounds-aware elements left-to-right and top-to-bottom. */
let LeftToRightTopToBottomComparator = class LeftToRightTopToBottomComparator {
    compare(one, other) {
        const boundsOne = (0, sprotty_1.findParentByFeature)(one, gmodel_util_1.isSelectableAndBoundsAware);
        const boundsOther = (0, sprotty_1.findParentByFeature)(other, gmodel_util_1.isSelectableAndBoundsAware);
        if (boundsOne && boundsOther) {
            if (boundsOne.bounds.y !== boundsOther.bounds.y) {
                return boundsOne.bounds.y - boundsOther.bounds.y;
            }
            if (boundsOne.bounds.x !== boundsOther.bounds.x) {
                return boundsOne.bounds.x - boundsOther.bounds.x;
            }
        }
        return 0;
    }
};
exports.LeftToRightTopToBottomComparator = LeftToRightTopToBottomComparator;
exports.LeftToRightTopToBottomComparator = LeftToRightTopToBottomComparator = __decorate([
    (0, inversify_1.injectable)()
], LeftToRightTopToBottomComparator);
/**
 * Specifies the next/previous marker in a graph model.
 *
 * This navigator uses a `MarkerComparator` to determine the order of markers. It can also return next/previous
 */
let MarkerNavigator = class MarkerNavigator {
    next(root, current, predicate = marker_1.MarkerPredicates.ALL) {
        const markers = this.getMarkers(root, predicate);
        if (current === undefined) {
            return markers.length > 0 ? markers[0] : undefined;
        }
        return markers[this.getNextIndex(current, markers) % markers.length];
    }
    previous(root, current, predicate = marker_1.MarkerPredicates.ALL) {
        const markers = this.getMarkers(root, predicate);
        if (current === undefined) {
            return markers.length > 0 ? markers[0] : undefined;
        }
        return markers[this.getPreviousIndex(current, markers) % markers.length];
    }
    getMarkers(root, predicate) {
        const markers = (0, marker_1.collectIssueMarkers)(root);
        return markers.filter(predicate).sort(this.markerComparator.compare);
    }
    getNextIndex(current, markers) {
        for (let index = 0; index < markers.length; index++) {
            if (this.markerComparator.compare(markers[index], current) > 0) {
                return index;
            }
        }
        return 0;
    }
    getPreviousIndex(current, markers) {
        for (let index = markers.length - 1; index >= 0; index--) {
            if (this.markerComparator.compare(markers[index], current) < 0) {
                return index;
            }
        }
        return markers.length - 1;
    }
};
exports.MarkerNavigator = MarkerNavigator;
MarkerNavigator.ALL_SEVERITIES = ['error', 'warning', 'info'];
__decorate([
    (0, inversify_1.inject)(GModelElementComparator),
    __metadata("design:type", GModelElementComparator)
], MarkerNavigator.prototype, "markerComparator", void 0);
exports.MarkerNavigator = MarkerNavigator = __decorate([
    (0, inversify_1.injectable)()
], MarkerNavigator);
let NavigateToMarkerActionHandler = class NavigateToMarkerActionHandler {
    handle(action) {
        const selected = this.getSelectedElements(action);
        const target = this.getTarget(action, selected);
        const selectableTarget = target ? (0, sprotty_1.findParentByFeature)(target, sprotty_1.isSelectable) : undefined;
        if (selectableTarget) {
            const deselectedElementsIDs = selected.map(e => e.id).filter(id => id !== selectableTarget.id);
            this.actionDispatcher.dispatch(sprotty_1.SelectAction.create({ selectedElementsIDs: [selectableTarget.id], deselectedElementsIDs }));
            this.actionDispatcher.dispatch(sprotty_1.CenterAction.create([selectableTarget.id]));
        }
    }
    getSelectedElements(action) {
        if (action.selectedElementIds && action.selectedElementIds.length > 0) {
            return (0, gmodel_util_1.getElements)(this.selectionService.getModelRoot().index, action.selectedElementIds, sprotty_1.isSelectable);
        }
        return this.selectionService.getSelectedElements();
    }
    getTarget(action, selected) {
        const root = this.selectionService.getModelRoot();
        const target = selected.sort(this.markerComparator.compare).find(sprotty_1.isBoundsAware);
        if (action.direction === 'previous') {
            return this.markerNavigator.previous(root, target, marker => this.matchesSeverities(action, marker));
        }
        else {
            return this.markerNavigator.next(root, target, marker => this.matchesSeverities(action, marker));
        }
    }
    matchesSeverities(action, marker) {
        return marker.issues.find(issue => action.severities.includes(issue.severity)) !== undefined;
    }
};
exports.NavigateToMarkerActionHandler = NavigateToMarkerActionHandler;
__decorate([
    (0, inversify_1.inject)(GModelElementComparator),
    __metadata("design:type", GModelElementComparator)
], NavigateToMarkerActionHandler.prototype, "markerComparator", void 0);
__decorate([
    (0, inversify_1.inject)(MarkerNavigator),
    __metadata("design:type", MarkerNavigator)
], NavigateToMarkerActionHandler.prototype, "markerNavigator", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], NavigateToMarkerActionHandler.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], NavigateToMarkerActionHandler.prototype, "actionDispatcher", void 0);
exports.NavigateToMarkerActionHandler = NavigateToMarkerActionHandler = __decorate([
    (0, inversify_1.injectable)()
], NavigateToMarkerActionHandler);
let MarkerNavigatorContextMenuItemProvider = class MarkerNavigatorContextMenuItemProvider {
    getItems(root, lastMousePosition) {
        const selectedElementIds = Array.from(this.selectionService.getSelectedElementIDs());
        const hasMarkers = (0, marker_1.collectIssueMarkers)(root).length > 0;
        return Promise.resolve([
            {
                id: 'navigate',
                label: 'Go to',
                group: 'navigate',
                actions: [],
                children: [
                    {
                        id: 'next-marker',
                        label: 'Next marker',
                        group: 'marker',
                        actions: [NavigateToMarkerAction.create({ direction: 'next', selectedElementIds })],
                        isEnabled: () => hasMarkers
                    },
                    {
                        id: 'previous-marker',
                        label: 'Previous marker',
                        group: 'marker',
                        actions: [NavigateToMarkerAction.create({ direction: 'previous', selectedElementIds })],
                        isEnabled: () => hasMarkers
                    }
                ]
            }
        ]);
    }
};
exports.MarkerNavigatorContextMenuItemProvider = MarkerNavigatorContextMenuItemProvider;
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], MarkerNavigatorContextMenuItemProvider.prototype, "selectionService", void 0);
exports.MarkerNavigatorContextMenuItemProvider = MarkerNavigatorContextMenuItemProvider = __decorate([
    (0, inversify_1.injectable)()
], MarkerNavigatorContextMenuItemProvider);
let MarkerNavigatorKeyListener = class MarkerNavigatorKeyListener extends sprotty_1.KeyListener {
    keyDown(_element, event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Period', 'ctrl')) {
            return [NavigateToMarkerAction.create({ direction: 'next' })];
        }
        else if ((0, sprotty_1.matchesKeystroke)(event, 'Comma', 'ctrl')) {
            return [NavigateToMarkerAction.create({ direction: 'previous' })];
        }
        return [];
    }
};
exports.MarkerNavigatorKeyListener = MarkerNavigatorKeyListener;
exports.MarkerNavigatorKeyListener = MarkerNavigatorKeyListener = __decorate([
    (0, inversify_1.injectable)()
], MarkerNavigatorKeyListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/validation/validate.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/validation/validate.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteMarkersCommand = exports.ApplyMarkersCommand = exports.ApplyMarkersAction = exports.SetMarkersActionHandler = exports.ExternalMarkerManager = exports.ValidationFeedbackEmitter = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const feedback_command_1 = __webpack_require__(/*! ../../base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const issue_marker_1 = __webpack_require__(/*! ./issue-marker */ "../node_modules/@eclipse-glsp/client/lib/features/validation/issue-marker.js");
/**
 * Feedback emitter sending actions for visualizing model validation feedback and
 * re-establishing this feedback visualization after the model has been updated.
 */
let ValidationFeedbackEmitter = class ValidationFeedbackEmitter {
    constructor() {
        this.registeredFeedbackByReason = new Map();
    }
    /**
     * Register the action that should be emitted for visualizing validation feedback.
     * @param action the action that should be emitted when the model is updated and that will visualize the model validation feedback.
     * @param reason the reason for this validation feedback.
     */
    registerValidationFeedbackAction(action, reason = '') {
        var _a, _b;
        // De-register feedback and clear existing markers with the same reason
        const emitter = (_b = (_a = this.registeredFeedbackByReason.get(reason)) === null || _a === void 0 ? void 0 : _a.dispose()) !== null && _b !== void 0 ? _b : this.feedbackActionDispatcher.createEmitter();
        emitter.add(action, () => sprotty_1.DeleteMarkersAction.create(action.markers)).submit();
        this.registeredFeedbackByReason.set(reason, emitter);
    }
};
exports.ValidationFeedbackEmitter = ValidationFeedbackEmitter;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], ValidationFeedbackEmitter.prototype, "feedbackActionDispatcher", void 0);
exports.ValidationFeedbackEmitter = ValidationFeedbackEmitter = __decorate([
    (0, inversify_1.injectable)()
], ValidationFeedbackEmitter);
/**
 * Manages current markers for the outside of the GLSP.
 *
 * Typically this is rebound by the surrounding tool, e.g. Theia, to be aware of
 * and propagate current markers.
 */
let ExternalMarkerManager = class ExternalMarkerManager {
    connect(actionDispatcher) {
        this.actionDispatcher = actionDispatcher;
    }
    removeMarkers(markers) {
        if (this.actionDispatcher) {
            this.actionDispatcher.dispatch(sprotty_1.DeleteMarkersAction.create(markers));
        }
    }
};
exports.ExternalMarkerManager = ExternalMarkerManager;
exports.ExternalMarkerManager = ExternalMarkerManager = __decorate([
    (0, inversify_1.injectable)()
], ExternalMarkerManager);
let SetMarkersActionHandler = class SetMarkersActionHandler {
    handle(action) {
        const markers = action.markers;
        this.setMarkers(markers, action.reason);
    }
    async setMarkers(markers, reason) {
        var _a;
        const uri = this.editorContextService.sourceUri;
        (_a = this.externalMarkerManager) === null || _a === void 0 ? void 0 : _a.setMarkers(markers, reason, uri);
        const applyMarkersAction = ApplyMarkersAction.create(markers);
        this.validationFeedbackEmitter.registerValidationFeedbackAction(applyMarkersAction, reason);
    }
};
exports.SetMarkersActionHandler = SetMarkersActionHandler;
__decorate([
    (0, inversify_1.inject)(ValidationFeedbackEmitter),
    __metadata("design:type", ValidationFeedbackEmitter)
], SetMarkersActionHandler.prototype, "validationFeedbackEmitter", void 0);
__decorate([
    (0, inversify_1.inject)(ExternalMarkerManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", ExternalMarkerManager)
], SetMarkersActionHandler.prototype, "externalMarkerManager", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], SetMarkersActionHandler.prototype, "editorContextService", void 0);
exports.SetMarkersActionHandler = SetMarkersActionHandler = __decorate([
    (0, inversify_1.injectable)()
], SetMarkersActionHandler);
var ApplyMarkersAction;
(function (ApplyMarkersAction) {
    ApplyMarkersAction.KIND = 'applyMarkers';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ApplyMarkersAction.KIND) && (0, sprotty_1.hasArrayProp)(object, 'markers');
    }
    ApplyMarkersAction.is = is;
    function create(markers) {
        return {
            kind: ApplyMarkersAction.KIND,
            markers
        };
    }
    ApplyMarkersAction.create = create;
})(ApplyMarkersAction || (exports.ApplyMarkersAction = ApplyMarkersAction = {}));
/**
 * Handles {@link ApplyMarkersAction}s by creating the corresponding {@link GIssueMarker}s and
 * adding them to the graphical model.
 */
let ApplyMarkersCommand = class ApplyMarkersCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.action.markers.forEach(marker => {
            const modelElement = context.root.index.getById(marker.elementId);
            if (modelElement instanceof sprotty_1.GParentElement) {
                const issueMarker = (0, issue_marker_1.getOrCreateGIssueMarker)(modelElement);
                const issue = (0, issue_marker_1.createGIssue)(marker);
                issueMarker.issues.push(issue);
                if (issueMarker instanceof issue_marker_1.GIssueMarker) {
                    issueMarker.computeProjectionCssClasses();
                }
                addMaxSeverityCSSClassToIssueParent(modelElement, issueMarker);
            }
        });
        return context.root;
    }
};
exports.ApplyMarkersCommand = ApplyMarkersCommand;
ApplyMarkersCommand.KIND = ApplyMarkersAction.KIND;
exports.ApplyMarkersCommand = ApplyMarkersCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ApplyMarkersCommand);
function addMaxSeverityCSSClassToIssueParent(modelElement, issueMarker) {
    const maxSeverityCSSClass = (0, issue_marker_1.getSeverity)(issueMarker);
    if (!modelElement.cssClasses) {
        modelElement.cssClasses = [maxSeverityCSSClass];
    }
    else {
        modelElement.cssClasses = modelElement.cssClasses.filter((value) => !value.match('info|warning|error'));
        modelElement.cssClasses.push(maxSeverityCSSClass);
    }
}
function removeCSSClassFromIssueParent(modelElement, issueMarker) {
    const severity = (0, issue_marker_1.getSeverity)(issueMarker);
    (0, gmodel_util_1.removeCssClasses)(modelElement, [severity]);
}
/**
 * Command for handling `DeleteMarkersAction`
 */
let DeleteMarkersCommand = class DeleteMarkersCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.action.markers.forEach(marker => {
            const modelElement = context.root.index.getById(marker.elementId);
            if (modelElement instanceof sprotty_1.GParentElement) {
                const issueMarker = (0, issue_marker_1.getGIssueMarker)(modelElement);
                if (issueMarker) {
                    removeCSSClassFromIssueParent(modelElement, issueMarker);
                    for (let index = 0; index < issueMarker.issues.length; ++index) {
                        const issue = issueMarker.issues[index];
                        if (issue.message === marker.description) {
                            issueMarker.issues.splice(index--, 1);
                        }
                    }
                    if (issueMarker.issues.length === 0) {
                        modelElement.remove(issueMarker);
                    }
                    else {
                        addMaxSeverityCSSClassToIssueParent(modelElement, issueMarker);
                    }
                }
            }
        });
        return context.root;
    }
};
exports.DeleteMarkersCommand = DeleteMarkersCommand;
DeleteMarkersCommand.KIND = sprotty_1.DeleteMarkersAction.KIND;
exports.DeleteMarkersCommand = DeleteMarkersCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], DeleteMarkersCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/validation/validation-modules.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/validation/validation-modules.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.standaloneMarkerNavigatorModule = exports.markerNavigatorModule = exports.validationModule = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const marker_navigator_1 = __webpack_require__(/*! ./marker-navigator */ "../node_modules/@eclipse-glsp/client/lib/features/validation/marker-navigator.js");
const validate_1 = __webpack_require__(/*! ./validate */ "../node_modules/@eclipse-glsp/client/lib/features/validation/validate.js");
exports.validationModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.SetMarkersAction.KIND, validate_1.SetMarkersActionHandler);
    (0, sprotty_1.configureCommand)(context, validate_1.ApplyMarkersCommand);
    (0, sprotty_1.configureCommand)(context, validate_1.DeleteMarkersCommand);
    bind(validate_1.ValidationFeedbackEmitter).toSelf().inSingletonScope();
}, { featureId: Symbol('validation') });
exports.markerNavigatorModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    bind(marker_navigator_1.GModelElementComparator).to(marker_navigator_1.LeftToRightTopToBottomComparator).inSingletonScope();
    bind(marker_navigator_1.MarkerNavigator).toSelf().inSingletonScope();
    (0, sprotty_1.configureActionHandler)({ bind, isBound }, marker_navigator_1.NavigateToMarkerAction.KIND, marker_navigator_1.NavigateToMarkerActionHandler);
}, { featureId: Symbol('markerNavigator') });
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.standaloneMarkerNavigatorModule = new sprotty_1.FeatureModule(bind => {
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.IContextMenuProvider, marker_navigator_1.MarkerNavigatorContextMenuItemProvider);
    (0, sprotty_1.bindAsService)(bind, sprotty_1.TYPES.KeyListener, marker_navigator_1.MarkerNavigatorKeyListener);
}, { featureId: Symbol('standaloneMarkerNavigator'), requires: exports.markerNavigatorModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/viewport/glsp-scroll-mouse-listener.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/viewport/glsp-scroll-mouse-listener.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPScrollMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2021-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const marquee_mouse_tool_1 = __webpack_require__(/*! ../tools/marquee-selection/marquee-mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-mouse-tool.js");
let GLSPScrollMouseListener = class GLSPScrollMouseListener extends sprotty_1.ScrollMouseListener {
    constructor() {
        super(...arguments);
        this.preventScrolling = false;
    }
    handle(action) {
        if (action.kind === tool_1.EnableToolsAction.KIND) {
            if (action.toolIds.includes(marquee_mouse_tool_1.MarqueeMouseTool.ID)) {
                this.preventScrolling = true;
            }
        }
        else if (action.kind === tool_1.EnableDefaultToolsAction.KIND) {
            this.preventScrolling = false;
        }
    }
    mouseDown(target, event) {
        if (this.preventScrolling) {
            return [];
        }
        return super.mouseDown(target, event);
    }
};
exports.GLSPScrollMouseListener = GLSPScrollMouseListener;
exports.GLSPScrollMouseListener = GLSPScrollMouseListener = __decorate([
    (0, inversify_1.injectable)()
], GLSPScrollMouseListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/viewport/origin-viewport.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/viewport/origin-viewport.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024-2025 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OriginViewportCommand = exports.OriginViewportAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
var OriginViewportAction;
(function (OriginViewportAction) {
    OriginViewportAction.KIND = 'originViewport';
    function is(object) {
        return sprotty_1.Action.hasKind(object, OriginViewportAction.KIND);
    }
    OriginViewportAction.is = is;
    function create(options = {}) {
        return {
            kind: OriginViewportAction.KIND,
            animate: true,
            ...options
        };
    }
    OriginViewportAction.create = create;
})(OriginViewportAction || (exports.OriginViewportAction = OriginViewportAction = {}));
let OriginViewportCommand = class OriginViewportCommand extends sprotty_1.BoundsAwareViewportCommand {
    constructor(action) {
        super(action.animate);
        this.action = action;
    }
    getElementIds() {
        return [];
    }
    initialize(model) {
        const viewport = this.editorContext.viewport;
        if (!viewport) {
            return;
        }
        this.oldViewport = { scroll: viewport.scroll, zoom: viewport.zoom };
        const newViewport = this.getNewViewport(sprotty_1.Bounds.EMPTY, viewport);
        if (newViewport) {
            const { zoomLimits, horizontalScrollLimits, verticalScrollLimits } = this.viewerOptions;
            this.newViewport = (0, sprotty_1.limitViewport)(newViewport, viewport.canvasBounds, horizontalScrollLimits, verticalScrollLimits, zoomLimits);
        }
    }
    getNewViewport(_bounds, _model) {
        return { zoom: 1, scroll: { x: 0, y: 0 } };
    }
};
exports.OriginViewportCommand = OriginViewportCommand;
OriginViewportCommand.KIND = OriginViewportAction.KIND;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], OriginViewportCommand.prototype, "editorContext", void 0);
exports.OriginViewportCommand = OriginViewportCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], OriginViewportCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/viewport/reposition.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/viewport/reposition.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RepositionCommand = exports.RepositionAction = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const model_1 = __webpack_require__(/*! ../../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
var RepositionAction;
(function (RepositionAction) {
    RepositionAction.KIND = 'repositionAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, RepositionAction.KIND) && (0, sprotty_1.hasArrayProp)(object, 'elementIDs');
    }
    RepositionAction.is = is;
    function create(elementIDs) {
        return {
            kind: RepositionAction.KIND,
            elementIDs
        };
    }
    RepositionAction.create = create;
})(RepositionAction || (exports.RepositionAction = RepositionAction = {}));
/**
 * Moves the viewport to an unvisible element, while maintaining the current zoom level.
 */
let RepositionCommand = class RepositionCommand extends sprotty_1.BoundsAwareViewportCommand {
    constructor(action) {
        super(true);
        this.action = action;
    }
    boundsInViewport(element, bounds, viewport) {
        var _a;
        if (element instanceof sprotty_1.GChildElement && element.parent !== viewport) {
            return this.boundsInViewport(element.parent, element.parent.localToParent(bounds), viewport);
        }
        else if (element instanceof model_1.GEdge) {
            const edgeBounds = (0, sprotty_1.getRouteBounds)((_a = (0, gmodel_util_1.calcElementAndRoute)(element).newRoutingPoints) !== null && _a !== void 0 ? _a : []);
            if (element instanceof sprotty_1.GChildElement && element.parent !== viewport) {
                return this.boundsInViewport(element.parent, element.parent.localToParent(edgeBounds), viewport);
            }
            return edgeBounds;
        }
        return bounds;
    }
    getElementIds() {
        return this.action.elementIDs;
    }
    getNewViewport(combinedElementBounds, model) {
        if (!sprotty_1.Dimension.isValid(model.canvasBounds)) {
            return undefined;
        }
        const viewport = this.editorContext.viewport;
        if (viewport) {
            if (this.isFullyVisible(combinedElementBounds, viewport)) {
                return undefined;
            }
            else {
                const zoom = viewport.zoom;
                const centerOfElements = sprotty_1.Bounds.center(combinedElementBounds);
                const canvasCenter = sprotty_1.Dimension.center(model.canvasBounds);
                const scrollCenter = sprotty_1.Point.subtract(centerOfElements, canvasCenter);
                const scroll = sprotty_1.Point.map(scrollCenter, coordinate => coordinate / zoom);
                return { scroll, zoom };
            }
        }
        return undefined;
    }
    isFullyVisible(bounds, viewport) {
        return (bounds.x >= viewport.scroll.x &&
            bounds.x + bounds.width <= viewport.scroll.x + viewport.canvasBounds.width / viewport.zoom &&
            bounds.y >= viewport.scroll.y &&
            bounds.y + bounds.height <= viewport.scroll.y + viewport.canvasBounds.height / viewport.zoom);
    }
};
exports.RepositionCommand = RepositionCommand;
RepositionCommand.KIND = RepositionAction.KIND;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], RepositionCommand.prototype, "editorContext", void 0);
exports.RepositionCommand = RepositionCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], RepositionCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-handler.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-handler.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ZoomHandler = exports.MoveViewportHandler = exports.RestoreViewportHandler = void 0;
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const editor_context_service_1 = __webpack_require__(/*! ../../base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js");
const focus_tracker_1 = __webpack_require__(/*! ../../base/focus/focus-tracker */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-tracker.js");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const gmodel_util_1 = __webpack_require__(/*! ../../utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js");
const actions_1 = __webpack_require__(/*! ../accessibility/actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/actions.js");
/**
 * Focuses the graph on different actions.
 */
let RestoreViewportHandler = class RestoreViewportHandler {
    handle(action) {
        if (tool_1.EnableDefaultToolsAction.is(action) || (actions_1.FocusDomAction.is(action) && action.id === 'graph')) {
            this.focusGraph();
        }
    }
    get graphSelector() {
        const rootId = CSS.escape(this.domHelper.createUniqueDOMElementId(this.editorContext.modelRoot));
        return `#${rootId}`;
    }
    async postRequestModel() {
        await this.waitForElement(this.graphSelector);
        this.focusGraph();
    }
    focusGraph() {
        var _a;
        if (this.focusTracker.hasFocus) {
            const container = (_a = this.focusTracker.diagramElement) === null || _a === void 0 ? void 0 : _a.querySelector(this.graphSelector);
            container === null || container === void 0 ? void 0 : container.focus();
        }
    }
    waitForElement(selector) {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }
            const observer = new MutationObserver(mutations => {
                if (document.querySelector(selector)) {
                    observer.disconnect();
                    resolve(document.querySelector(selector));
                }
            });
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }
};
exports.RestoreViewportHandler = RestoreViewportHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.DOMHelper),
    __metadata("design:type", sprotty_1.DOMHelper)
], RestoreViewportHandler.prototype, "domHelper", void 0);
__decorate([
    (0, inversify_1.inject)(focus_tracker_1.FocusTracker),
    __metadata("design:type", focus_tracker_1.FocusTracker)
], RestoreViewportHandler.prototype, "focusTracker", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], RestoreViewportHandler.prototype, "editorContext", void 0);
exports.RestoreViewportHandler = RestoreViewportHandler = __decorate([
    (0, inversify_1.injectable)()
], RestoreViewportHandler);
/**
 * Handles moving the viewport.
 */
let MoveViewportHandler = class MoveViewportHandler {
    handle(action) {
        return this.handleMoveViewport(action);
    }
    handleMoveViewport(action) {
        const viewport = (0, sprotty_1.findParentByFeature)(this.editorContextService.modelRoot, sprotty_1.isViewport);
        if (!viewport) {
            return;
        }
        const newViewport = {
            scroll: {
                x: viewport.scroll.x + action.moveX,
                y: viewport.scroll.y + action.moveY
            },
            zoom: viewport.zoom
        };
        return sprotty_1.SetViewportAction.create(viewport.id, newViewport, { animate: false });
    }
};
exports.MoveViewportHandler = MoveViewportHandler;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], MoveViewportHandler.prototype, "editorContextService", void 0);
exports.MoveViewportHandler = MoveViewportHandler = __decorate([
    (0, inversify_1.injectable)()
], MoveViewportHandler);
/*
 * Handles zooming in and out of the viewport.
 */
let ZoomHandler = class ZoomHandler {
    handle(action) {
        if (action.elementIds) {
            return this.handleZoomElement(action.elementIds, action.zoomFactor);
        }
        else {
            return this.handleZoomViewport(action.zoomFactor);
        }
    }
    handleZoomViewport(zoomFactor) {
        const viewport = this.editorContextService.viewport;
        if (!viewport) {
            return;
        }
        return sprotty_1.SetViewportAction.create(viewport.id, { scroll: viewport.scroll, zoom: viewport.zoom * zoomFactor }, { animate: false });
    }
    handleZoomElement(elementIds, zoomFactor) {
        const viewport = this.editorContextService.viewport;
        if (!viewport) {
            return;
        }
        const elements = (0, gmodel_util_1.getElements)(viewport.index, elementIds, gmodel_util_1.isSelectableAndBoundsAware);
        const center = this.getCenter(viewport, elements);
        const newZoom = viewport.zoom * zoomFactor;
        const newViewport = {
            scroll: {
                x: center.x - (0.5 * viewport.canvasBounds.width) / newZoom,
                y: center.y - (0.5 * viewport.canvasBounds.height) / newZoom
            },
            zoom: newZoom
        };
        return sprotty_1.SetViewportAction.create(viewport.id, newViewport, { animate: false });
    }
    getCenter(viewport, selectedElements) {
        // Get bounds of elements based on the viewport
        const allBounds = selectedElements.map(e => this.boundsInViewport(viewport, e, e.bounds));
        const mergedBounds = allBounds.reduce((b0, b1) => sprotty_1.Bounds.combine(b0, b1));
        return sprotty_1.Bounds.center(mergedBounds);
    }
    boundsInViewport(viewport, element, bounds) {
        if (element instanceof sprotty_1.GChildElement && element.parent !== viewport) {
            return this.boundsInViewport(viewport, element.parent, element.parent.localToParent(bounds));
        }
        else {
            return bounds;
        }
    }
};
exports.ZoomHandler = ZoomHandler;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ZoomHandler.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ZoomHandler.prototype, "actionDispatcher", void 0);
exports.ZoomHandler = ZoomHandler = __decorate([
    (0, inversify_1.injectable)()
], ZoomHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-key-listener.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-key-listener.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ZoomKeyListener = exports.MoveViewportKeyListener = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const selection_service_1 = __webpack_require__(/*! ../../base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js");
const grid_1 = __webpack_require__(/*! ../grid/grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js");
const zoom_viewport_action_1 = __webpack_require__(/*! ./zoom-viewport-action */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/zoom-viewport-action.js");
let MoveViewportKeyListener = class MoveViewportKeyListener extends sprotty_1.KeyListener {
    constructor() {
        super(...arguments);
        this.grid = grid_1.Grid.DEFAULT;
    }
    keyDown(_element, event) {
        const selectedElementIds = this.selectionService.getSelectedElementIDs();
        const snap = this.changeBoundsManager.usePositionSnap(event);
        const offsetX = snap ? this.grid.x : 1;
        const offsetY = snap ? this.grid.y : 1;
        if (selectedElementIds.length === 0) {
            if (this.matchesMoveUpKeystroke(event)) {
                return [sprotty_1.MoveViewportAction.create({ moveX: 0, moveY: -offsetY })];
            }
            else if (this.matchesMoveDownKeystroke(event)) {
                return [sprotty_1.MoveViewportAction.create({ moveX: 0, moveY: offsetY })];
            }
            else if (this.matchesMoveRightKeystroke(event)) {
                return [sprotty_1.MoveViewportAction.create({ moveX: offsetX, moveY: 0 })];
            }
            else if (this.matchesMoveLeftKeystroke(event)) {
                return [sprotty_1.MoveViewportAction.create({ moveX: -offsetX, moveY: 0 })];
            }
        }
        return [];
    }
    matchesMoveUpKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp');
    }
    matchesMoveDownKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown');
    }
    matchesMoveRightKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight');
    }
    matchesMoveLeftKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft');
    }
};
exports.MoveViewportKeyListener = MoveViewportKeyListener;
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], MoveViewportKeyListener.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    __metadata("design:type", Object)
], MoveViewportKeyListener.prototype, "changeBoundsManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], MoveViewportKeyListener.prototype, "grid", void 0);
exports.MoveViewportKeyListener = MoveViewportKeyListener = __decorate([
    (0, inversify_1.injectable)()
], MoveViewportKeyListener);
let ZoomKeyListener = class ZoomKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        const selectedElementIds = this.selectionService.getSelectedElementIDs();
        if (selectedElementIds.length === 0) {
            if (this.matchesZoomOutKeystroke(event)) {
                return [zoom_viewport_action_1.ZoomAction.create({ zoomFactor: zoom_viewport_action_1.ZoomFactors.DEFAULT.out })];
            }
            else if (this.matchesZoomInKeystroke(event)) {
                return [zoom_viewport_action_1.ZoomAction.create({ zoomFactor: zoom_viewport_action_1.ZoomFactors.DEFAULT.in })];
            }
            else if (this.matchesMinZoomLevelKeystroke(event)) {
                return [sprotty_1.CenterAction.create(selectedElementIds)];
            }
        }
        else {
            if (this.matchesZoomOutKeystroke(event)) {
                if (selectedElementIds.length > 0) {
                    return [
                        zoom_viewport_action_1.ZoomAction.create({
                            elementIds: selectedElementIds,
                            zoomFactor: zoom_viewport_action_1.ZoomFactors.DEFAULT.out
                        })
                    ];
                }
            }
            else if (this.matchesZoomInKeystroke(event)) {
                if (selectedElementIds.length > 0) {
                    return [zoom_viewport_action_1.ZoomAction.create({ elementIds: selectedElementIds, zoomFactor: zoom_viewport_action_1.ZoomFactors.DEFAULT.in })];
                }
            }
            else if (this.matchesMinZoomLevelKeystroke(event)) {
                return [sprotty_1.CenterAction.create(selectedElementIds)];
            }
        }
        return [];
    }
    matchesZoomInKeystroke(event) {
        /** here event.key is used for '+', as keycode 187 is already declared for 'Equals' in {@link matchesKeystroke}.*/
        return !event.ctrlKey && (event.key === '+' || (0, sprotty_1.matchesKeystroke)(event, 'NumpadAdd'));
    }
    matchesMinZoomLevelKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Digit0', 'ctrl') || (0, sprotty_1.matchesKeystroke)(event, 'Numpad0', 'ctrl');
    }
    matchesZoomOutKeystroke(event) {
        return !event.ctrlKey && ((0, sprotty_1.matchesKeystroke)(event, 'Minus') || (0, sprotty_1.matchesKeystroke)(event, 'NumpadSubtract'));
    }
};
exports.ZoomKeyListener = ZoomKeyListener;
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], ZoomKeyListener.prototype, "selectionService", void 0);
exports.ZoomKeyListener = ZoomKeyListener = __decorate([
    (0, inversify_1.injectable)()
], ZoomKeyListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-modules.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-modules.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.standaloneViewportModule = exports.viewportModule = void 0;
/********************************************************************************
 * Copyright (c) 2021-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const tool_1 = __webpack_require__(/*! ../../base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js");
const actions_1 = __webpack_require__(/*! ../accessibility/actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/actions.js");
const glsp_scroll_mouse_listener_1 = __webpack_require__(/*! ./glsp-scroll-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/glsp-scroll-mouse-listener.js");
const origin_viewport_1 = __webpack_require__(/*! ./origin-viewport */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/origin-viewport.js");
const reposition_1 = __webpack_require__(/*! ./reposition */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/reposition.js");
const viewport_handler_1 = __webpack_require__(/*! ./viewport-handler */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-handler.js");
const viewport_key_listener_1 = __webpack_require__(/*! ./viewport-key-listener */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-key-listener.js");
const viewport_tool_1 = __webpack_require__(/*! ./viewport-tool */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-tool.js");
const zoom_viewport_action_1 = __webpack_require__(/*! ./zoom-viewport-action */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/zoom-viewport-action.js");
exports.viewportModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.configureCommand)(context, sprotty_1.CenterCommand);
    (0, sprotty_1.configureCommand)(context, sprotty_1.FitToScreenCommand);
    (0, sprotty_1.configureCommand)(context, sprotty_1.GetViewportCommand);
    (0, sprotty_1.configureCommand)(context, sprotty_1.SetViewportCommand);
    (0, sprotty_1.configureCommand)(context, reposition_1.RepositionCommand);
    (0, sprotty_1.configureCommand)(context, origin_viewport_1.OriginViewportCommand);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.MouseListener, sprotty_1.ZoomMouseListener);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.MouseListener, glsp_scroll_mouse_listener_1.GLSPScrollMouseListener);
    (0, sprotty_1.configureActionHandler)(context, tool_1.EnableToolsAction.KIND, glsp_scroll_mouse_listener_1.GLSPScrollMouseListener);
    (0, sprotty_1.configureActionHandler)(context, tool_1.EnableDefaultToolsAction.KIND, glsp_scroll_mouse_listener_1.GLSPScrollMouseListener);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDiagramStartup, viewport_handler_1.RestoreViewportHandler);
    (0, sprotty_1.configureActionHandler)(context, tool_1.EnableDefaultToolsAction.KIND, viewport_handler_1.RestoreViewportHandler);
    (0, sprotty_1.configureActionHandler)(context, actions_1.FocusDomAction.KIND, viewport_handler_1.RestoreViewportHandler);
    bind(sprotty_1.TYPES.ZoomFactors).toConstantValue(zoom_viewport_action_1.ZoomFactors.DEFAULT);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, viewport_tool_1.ViewportKeyTool);
    bind(viewport_handler_1.MoveViewportHandler).toSelf().inSingletonScope();
    bind(viewport_key_listener_1.MoveViewportKeyListener).toSelf();
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.MoveViewportAction.KIND, viewport_handler_1.MoveViewportHandler);
    bind(viewport_handler_1.ZoomHandler).toSelf().inSingletonScope();
    bind(viewport_key_listener_1.ZoomKeyListener).toSelf();
    (0, sprotty_1.configureActionHandler)(context, zoom_viewport_action_1.ZoomAction.KIND, viewport_handler_1.ZoomHandler);
}, { featureId: Symbol('viewport') });
/**
 * Feature module that is intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 */
exports.standaloneViewportModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.KeyListener, sprotty_1.CenterKeyboardListener);
}, { featureId: Symbol('standaloneViewport'), requires: exports.viewportModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-tool.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-tool.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ViewportKeyTool_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewportKeyTool = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const messages_1 = __webpack_require__(/*! ../../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const base_tools_1 = __webpack_require__(/*! ../tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js");
const viewport_key_listener_1 = __webpack_require__(/*! ./viewport-key-listener */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-key-listener.js");
/**
 * This only handles keyboard events for the viewport.
 * Mouse specific events are handled directly by MouseListeners without any tool.
 */
let ViewportKeyTool = ViewportKeyTool_1 = class ViewportKeyTool extends base_tools_1.BaseTool {
    get id() {
        return ViewportKeyTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.moveKeyListener), this.keyTool.registerListener(this.zoomKeyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(ViewportKeyTool_1.TOKEN, [
            {
                shortcuts: ['⬅ ⬆ ➡ ⬇'],
                description: messages_1.messages.viewport.shortcut_move_viewport,
                group: messages_1.messages.shortcut.group_move,
                position: 0
            },
            {
                shortcuts: ['+ -'],
                description: messages_1.messages.viewport.shortcut_zoom_viewport,
                group: messages_1.messages.shortcut.group_zoom,
                position: 0
            },
            {
                shortcuts: ['+ -'],
                description: messages_1.messages.viewport.shortcut_zoom_element,
                group: messages_1.messages.shortcut.group_zoom,
                position: 0
            }
        ])));
    }
};
exports.ViewportKeyTool = ViewportKeyTool;
ViewportKeyTool.ID = 'glsp.viewport-key-tool';
ViewportKeyTool.TOKEN = Symbol.for(ViewportKeyTool_1.ID);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], ViewportKeyTool.prototype, "shortcutManager", void 0);
__decorate([
    (0, inversify_1.inject)(viewport_key_listener_1.ZoomKeyListener),
    __metadata("design:type", viewport_key_listener_1.ZoomKeyListener)
], ViewportKeyTool.prototype, "zoomKeyListener", void 0);
__decorate([
    (0, inversify_1.inject)(viewport_key_listener_1.MoveViewportKeyListener),
    __metadata("design:type", viewport_key_listener_1.MoveViewportKeyListener)
], ViewportKeyTool.prototype, "moveKeyListener", void 0);
exports.ViewportKeyTool = ViewportKeyTool = ViewportKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], ViewportKeyTool);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/viewport/zoom-viewport-action.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/viewport/zoom-viewport-action.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ZoomAction = exports.ZoomFactors = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
var ZoomFactors;
(function (ZoomFactors) {
    ZoomFactors.DEFAULT = { in: 1.2, out: 0.8 };
})(ZoomFactors || (exports.ZoomFactors = ZoomFactors = {}));
var ZoomAction;
(function (ZoomAction) {
    ZoomAction.KIND = 'zoom';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ZoomAction.KIND);
    }
    ZoomAction.is = is;
    function create(options) {
        return { kind: ZoomAction.KIND, ...options };
    }
    ZoomAction.create = create;
})(ZoomAction || (exports.ZoomAction = ZoomAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/zorder/bring-to-front-command.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/zorder/bring-to-front-command.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BringToFrontCommand = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let BringToFrontCommand = class BringToFrontCommand extends sprotty_1.SprottyBringToFrontCommand {
    getLayoutContainer(zorder) {
        return (0, sprotty_1.isLayoutContainer)(zorder.element.parent) ? zorder.element.parent : undefined;
    }
    shouldBringToFront(zorder) {
        var _a, _b;
        // only re-order children if the layout supports it
        const layoutContainer = this.getLayoutContainer(zorder);
        return !layoutContainer || ((_b = (_a = this.layoutRegistry.get(layoutContainer.layout)) === null || _a === void 0 ? void 0 : _a.orderAgnostic) !== null && _b !== void 0 ? _b : true);
    }
    bringToFront(zorder) {
        if (this.shouldBringToFront(zorder)) {
            super.bringToFront(zorder);
        }
    }
};
exports.BringToFrontCommand = BringToFrontCommand;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.LayoutRegistry),
    __metadata("design:type", sprotty_1.LayoutRegistry)
], BringToFrontCommand.prototype, "layoutRegistry", void 0);
exports.BringToFrontCommand = BringToFrontCommand = __decorate([
    (0, inversify_1.injectable)()
], BringToFrontCommand);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/features/zorder/zorder-module.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/features/zorder/zorder-module.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.zorderModule = void 0;
/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const bounds_module_1 = __webpack_require__(/*! ../bounds/bounds-module */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/bounds-module.js");
const bring_to_front_command_1 = __webpack_require__(/*! ./bring-to-front-command */ "../node_modules/@eclipse-glsp/client/lib/features/zorder/bring-to-front-command.js");
exports.zorderModule = new sprotty_1.FeatureModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, sprotty_1.configureCommand)(context, bring_to_front_command_1.BringToFrontCommand);
}, { featureId: Symbol('zorder'), requires: [bounds_module_1.boundsModule] });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/index.js":
/*!*********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__exportStar(__webpack_require__(/*! ./base/action-dispatcher */ "../node_modules/@eclipse-glsp/client/lib/base/action-dispatcher.js"), exports);
__exportStar(__webpack_require__(/*! ./base/action-handler-registry */ "../node_modules/@eclipse-glsp/client/lib/base/action-handler-registry.js"), exports);
__exportStar(__webpack_require__(/*! ./base/args-feature */ "../node_modules/@eclipse-glsp/client/lib/base/args-feature.js"), exports);
__exportStar(__webpack_require__(/*! ./base/auto-complete/auto-complete-actions */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-actions.js"), exports);
__exportStar(__webpack_require__(/*! ./base/auto-complete/auto-complete-widget */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/auto-complete-widget.js"), exports);
__exportStar(__webpack_require__(/*! ./base/auto-complete/autocomplete-suggestion-providers */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/autocomplete-suggestion-providers.js"), exports);
__exportStar(__webpack_require__(/*! ./base/auto-complete/base-autocomplete-palette */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/base-autocomplete-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./base/auto-complete/validation-decorator */ "../node_modules/@eclipse-glsp/client/lib/base/auto-complete/validation-decorator.js"), exports);
__exportStar(__webpack_require__(/*! ./base/command-stack */ "../node_modules/@eclipse-glsp/client/lib/base/command-stack.js"), exports);
__exportStar(__webpack_require__(/*! ./base/default.module */ "../node_modules/@eclipse-glsp/client/lib/base/default.module.js"), exports);
__exportStar(__webpack_require__(/*! ./base/drag-aware-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/drag-aware-mouse-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./base/editor-context-service */ "../node_modules/@eclipse-glsp/client/lib/base/editor-context-service.js"), exports);
__exportStar(__webpack_require__(/*! ./base/feedback/css-feedback */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/css-feedback.js"), exports);
__exportStar(__webpack_require__(/*! ./base/feedback/feedback-action-dispatcher */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-action-dispatcher.js"), exports);
__exportStar(__webpack_require__(/*! ./base/feedback/feedback-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-command.js"), exports);
__exportStar(__webpack_require__(/*! ./base/feedback/feedback-emitter */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/feedback-emitter.js"), exports);
__exportStar(__webpack_require__(/*! ./base/feedback/set-model-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/set-model-command.js"), exports);
__exportStar(__webpack_require__(/*! ./base/feedback/update-model-command */ "../node_modules/@eclipse-glsp/client/lib/base/feedback/update-model-command.js"), exports);
__exportStar(__webpack_require__(/*! ./base/focus/focus-state-change-action */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-state-change-action.js"), exports);
__exportStar(__webpack_require__(/*! ./base/focus/focus-tracker */ "../node_modules/@eclipse-glsp/client/lib/base/focus/focus-tracker.js"), exports);
__exportStar(__webpack_require__(/*! ./base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/diagram-loader */ "../node_modules/@eclipse-glsp/client/lib/base/model/diagram-loader.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/glsp-model-source */ "../node_modules/@eclipse-glsp/client/lib/base/model/glsp-model-source.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/model-change-service */ "../node_modules/@eclipse-glsp/client/lib/base/model/model-change-service.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/model-initialization-constraint */ "../node_modules/@eclipse-glsp/client/lib/base/model/model-initialization-constraint.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/model-registry */ "../node_modules/@eclipse-glsp/client/lib/base/model/model-registry.js"), exports);
__exportStar(__webpack_require__(/*! ./base/mouse-position-tracker */ "../node_modules/@eclipse-glsp/client/lib/base/mouse-position-tracker.js"), exports);
__exportStar(__webpack_require__(/*! ./base/ranked */ "../node_modules/@eclipse-glsp/client/lib/base/ranked.js"), exports);
__exportStar(__webpack_require__(/*! ./base/selection-clearing-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/base/selection-clearing-mouse-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./base/selection-service */ "../node_modules/@eclipse-glsp/client/lib/base/selection-service.js"), exports);
__exportStar(__webpack_require__(/*! ./base/shortcuts/available-shortcuts-extension */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-extension.js"), exports);
__exportStar(__webpack_require__(/*! ./base/shortcuts/available-shortcuts-tool */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/available-shortcuts-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/shortcuts/shortcuts-manager */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/shortcuts-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./base/shortcuts/shortcuts-module */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/shortcuts-module.js"), exports);
__exportStar(__webpack_require__(/*! ./base/tool-manager/tool */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/tool-manager/tool-manager */ "../node_modules/@eclipse-glsp/client/lib/base/tool-manager/tool-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./base/ui-extension/ui-extension */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension.js"), exports);
__exportStar(__webpack_require__(/*! ./base/ui-extension/ui-extension-registry */ "../node_modules/@eclipse-glsp/client/lib/base/ui-extension/ui-extension-registry.js"), exports);
__exportStar(__webpack_require__(/*! ./base/view/key-tool */ "../node_modules/@eclipse-glsp/client/lib/base/view/key-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/view/mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/base/view/mouse-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/view/view-registry */ "../node_modules/@eclipse-glsp/client/lib/base/view/view-registry.js"), exports);
__exportStar(__webpack_require__(/*! ./default-modules */ "../node_modules/@eclipse-glsp/client/lib/default-modules.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/accessibility-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/accessibility-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/actions.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/edge-autocomplete/action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/action.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/edge-autocomplete/edge-autocomplete-context */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-context.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/edge-autocomplete/edge-autocomplete-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/edge-autocomplete/edge-autocomplete-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/edge-autocomplete/edge-autocomplete-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/element-navigation/diagram-navigation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/diagram-navigation-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/element-navigation/element-navigation-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/element-navigation-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/element-navigation/element-navigator */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/element-navigator.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/element-navigation/left-right-top-bottom-navigator */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/left-right-top-bottom-navigator.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/element-navigation/local-element-navigator */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/local-element-navigator.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/element-navigation/position-navigator */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/element-navigation/position-navigator.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/focus-tracker/focus-tracker-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/focus-tracker/focus-tracker-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/focus-tracker/focus-tracker-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/focus-tracker/focus-tracker-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/global-keylistener-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/global-keylistener-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-grid/action */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/action.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-grid/constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/constants.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-grid/keyboard-grid */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-grid/keyboard-grid-search-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-grid-search-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-grid/keyboard-node-grid */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-grid/keyboard-node-grid.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-pointer/actions */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/actions.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-pointer/constants */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/constants.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-pointer/keyboard-pointer */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-pointer/keyboard-pointer-listener */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-pointer/keyboard-pointer-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-pointer/keyboard-pointer-position */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-pointer/keyboard-pointer-position.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-tool-palette/keyboard-tool-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-tool-palette/keyboard-tool-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/keyboard-tool-palette/keyboard-tool-palette-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/keyboard-tool-palette/keyboard-tool-palette-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/search/search-palette */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/search/search-palette-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-palette-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/search/search-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/search/search-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/toast/toast-handler */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/toast/toast-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/toast/toast-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/toast/toast-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/view-key-tools/deselect-key-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/deselect-key-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/view-key-tools/grid-cell-zoom-key-tool */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/grid-cell-zoom-key-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/accessibility/view-key-tools/view-key-tools-module */ "../node_modules/@eclipse-glsp/client/lib/features/accessibility/view-key-tools/view-key-tools-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/bounds-module */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/bounds-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/freeform-layout */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/freeform-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/glsp-hidden-bounds-updater */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/glsp-hidden-bounds-updater.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/hbox-layout */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/hbox-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/layout-data */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layout-data.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/layouter */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/layouter.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/local-bounds */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/local-bounds.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/set-bounds-feedback-command */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/set-bounds-feedback-command.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/vbox-layout */ "../node_modules/@eclipse-glsp/client/lib/features/bounds/vbox-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/model */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/move-element-action */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-action.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/move-element-handler */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/move-element-key-listener */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/move-element-key-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/movement-restrictor */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/movement-restrictor.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/point-position-updater */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/point-position-updater.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/position-snapper */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/position-snapper.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/resize/resize-default-tool */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-default-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/resize/resize-handler */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/resize/resize-module */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/resize/resize-tool */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/snap */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/snap.js"), exports);
__exportStar(__webpack_require__(/*! ./features/change-bounds/tracker */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/tracker.js"), exports);
__exportStar(__webpack_require__(/*! ./features/command-palette/command-palette */ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./features/command-palette/command-palette-module */ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/command-palette/command-palette-tool */ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/command-palette-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/command-palette/server-command-palette-provider */ "../node_modules/@eclipse-glsp/client/lib/features/command-palette/server-command-palette-provider.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/context-menu-module */ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/context-menu-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/delete-element-context-menu */ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/delete-element-context-menu.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/glsp-context-menu-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/glsp-context-menu-mouse-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/server-context-menu-provider */ "../node_modules/@eclipse-glsp/client/lib/features/context-menu/server-context-menu-provider.js"), exports);
__exportStar(__webpack_require__(/*! ./features/copy-paste/copy-paste-context-menu */ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-context-menu.js"), exports);
__exportStar(__webpack_require__(/*! ./features/copy-paste/copy-paste-handler */ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/copy-paste/copy-paste-modules */ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-modules.js"), exports);
__exportStar(__webpack_require__(/*! ./features/copy-paste/copy-paste-standalone */ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-standalone.js"), exports);
__exportStar(__webpack_require__(/*! ./features/debug/debug-bounds-decorator */ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-bounds-decorator.js"), exports);
__exportStar(__webpack_require__(/*! ./features/debug/debug-manager */ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./features/debug/debug-model */ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/debug/debug-module */ "../node_modules/@eclipse-glsp/client/lib/features/debug/debug-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/decoration/decoration-module */ "../node_modules/@eclipse-glsp/client/lib/features/decoration/decoration-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/decoration/decoration-placer */ "../node_modules/@eclipse-glsp/client/lib/features/decoration/decoration-placer.js"), exports);
__exportStar(__webpack_require__(/*! ./features/element-template/add-template-element */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/add-template-element.js"), exports);
__exportStar(__webpack_require__(/*! ./features/element-template/element-template-module */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/element-template-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/element-template/mouse-tracking-element-position-listener */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/mouse-tracking-element-position-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/element-template/remove-template-element */ "../node_modules/@eclipse-glsp/client/lib/features/element-template/remove-template-element.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/export-modules */ "../node_modules/@eclipse-glsp/client/lib/features/export/export-modules.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/export-svg-action-handler */ "../node_modules/@eclipse-glsp/client/lib/features/export/export-svg-action-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/glsp-svg-exporter */ "../node_modules/@eclipse-glsp/client/lib/features/export/glsp-svg-exporter.js"), exports);
__exportStar(__webpack_require__(/*! ./features/grid/grid */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid.js"), exports);
__exportStar(__webpack_require__(/*! ./features/grid/grid-manager */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./features/grid/grid-model */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/grid/grid-module */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/grid/grid-snapper */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-snapper.js"), exports);
__exportStar(__webpack_require__(/*! ./features/grid/grid-style */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-style.js"), exports);
__exportStar(__webpack_require__(/*! ./features/helper-lines/helper-line-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-feedback.js"), exports);
__exportStar(__webpack_require__(/*! ./features/helper-lines/helper-line-manager */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./features/helper-lines/helper-line-module */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/helper-line-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/helper-lines/model */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/helper-lines/view */ "../node_modules/@eclipse-glsp/client/lib/features/helper-lines/view.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hints/model */ "../node_modules/@eclipse-glsp/client/lib/features/hints/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hints/type-hint-provider */ "../node_modules/@eclipse-glsp/client/lib/features/hints/type-hint-provider.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hints/type-hints-module */ "../node_modules/@eclipse-glsp/client/lib/features/hints/type-hints-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hover/hover */ "../node_modules/@eclipse-glsp/client/lib/features/hover/hover.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hover/hover-module */ "../node_modules/@eclipse-glsp/client/lib/features/hover/hover-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/label-edit-ui/label-edit-ui */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit-ui/label-edit-ui.js"), exports);
__exportStar(__webpack_require__(/*! ./features/label-edit-ui/label-edit-ui-module */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit-ui/label-edit-ui-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/label-edit/edit-label-tool */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/edit-label-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/label-edit/edit-label-validator */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/edit-label-validator.js"), exports);
__exportStar(__webpack_require__(/*! ./features/label-edit/label-edit-module */ "../node_modules/@eclipse-glsp/client/lib/features/label-edit/label-edit-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/layout/layout-elements-action */ "../node_modules/@eclipse-glsp/client/lib/features/layout/layout-elements-action.js"), exports);
__exportStar(__webpack_require__(/*! ./features/layout/layout-module */ "../node_modules/@eclipse-glsp/client/lib/features/layout/layout-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/layout/trigger-layout-action-handler */ "../node_modules/@eclipse-glsp/client/lib/features/layout/trigger-layout-action-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/navigation/navigation-action-handler */ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-action-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/navigation/navigation-module */ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/navigation/navigation-target-resolver */ "../node_modules/@eclipse-glsp/client/lib/features/navigation/navigation-target-resolver.js"), exports);
__exportStar(__webpack_require__(/*! ./features/reconnect/model */ "../node_modules/@eclipse-glsp/client/lib/features/reconnect/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/edge-router */ "../node_modules/@eclipse-glsp/client/lib/features/routing/edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/routing-module */ "../node_modules/@eclipse-glsp/client/lib/features/routing/routing-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/save/save-keylistener */ "../node_modules/@eclipse-glsp/client/lib/features/save/save-keylistener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/save/save-module */ "../node_modules/@eclipse-glsp/client/lib/features/save/save-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/select/select-feedback-command */ "../node_modules/@eclipse-glsp/client/lib/features/select/select-feedback-command.js"), exports);
__exportStar(__webpack_require__(/*! ./features/select/select-module */ "../node_modules/@eclipse-glsp/client/lib/features/select/select-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/select/select-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/features/select/select-mouse-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/source-model-watcher/source-model-changed-action-handler */ "../node_modules/@eclipse-glsp/client/lib/features/source-model-watcher/source-model-changed-action-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/source-model-watcher/source-model-watcher-module */ "../node_modules/@eclipse-glsp/client/lib/features/source-model-watcher/source-model-watcher-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/status/status-module */ "../node_modules/@eclipse-glsp/client/lib/features/status/status-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/status/status-overlay */ "../node_modules/@eclipse-glsp/client/lib/features/status/status-overlay.js"), exports);
__exportStar(__webpack_require__(/*! ./features/svg-metadata/metadata-placer */ "../node_modules/@eclipse-glsp/client/lib/features/svg-metadata/metadata-placer.js"), exports);
__exportStar(__webpack_require__(/*! ./features/svg-metadata/svg-metadata-module */ "../node_modules/@eclipse-glsp/client/lib/features/svg-metadata/svg-metadata-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tool-palette/tool-palette */ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tool-palette/tool-palette-module */ "../node_modules/@eclipse-glsp/client/lib/features/tool-palette/tool-palette-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/base-tools */ "../node_modules/@eclipse-glsp/client/lib/features/tools/base-tools.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/change-bounds/change-bounds-manager */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/change-bounds/change-bounds-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/change-bounds/change-bounds-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-feedback.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/change-bounds/change-bounds-tool-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/change-bounds/change-bounds-tool-move-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tool-move-feedback.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/change-bounds/change-bounds-tracker */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/change-bounds-tracker.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/change-bounds/view */ "../node_modules/@eclipse-glsp/client/lib/features/tools/change-bounds/view.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/deletion/delete-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/delete-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/deletion/deletion-tool-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/deletion/deletion-tool-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/edge-creation/dangling-edge-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/dangling-edge-feedback.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/edge-creation/edege-creation-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edege-creation-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/edge-creation/edge-creation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/edge-creation/edge-creation-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/edge-creation-tool-feedback.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/edge-creation/view */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-creation/view.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/edge-edit/edge-edit-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/edge-edit/edge-edit-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/edge-edit/edge-edit-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/edge-edit/edge-edit-tool-feedback.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/marquee-selection/marquee-behavior */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-behavior.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/marquee-selection/marquee-mouse-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-mouse-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/marquee-selection/marquee-selection-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-selection-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/marquee-selection/marquee-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/marquee-selection/marquee-tool-feedback */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/marquee-tool-feedback.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/marquee-selection/model */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/marquee-selection/view */ "../node_modules/@eclipse-glsp/client/lib/features/tools/marquee-selection/view.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/node-creation/container-manager */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/container-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/node-creation/insert-indicator */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/insert-indicator.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/node-creation/node-creation-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/node-creation/node-creation-tool */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/node-creation/node-creation-views */ "../node_modules/@eclipse-glsp/client/lib/features/tools/node-creation/node-creation-views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/tools/tool-focus-loss-module */ "../node_modules/@eclipse-glsp/client/lib/features/tools/tool-focus-loss-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/undo-redo/undo-redo-key-listener */ "../node_modules/@eclipse-glsp/client/lib/features/undo-redo/undo-redo-key-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/undo-redo/undo-redo-module */ "../node_modules/@eclipse-glsp/client/lib/features/undo-redo/undo-redo-module.js"), exports);
__exportStar(__webpack_require__(/*! ./features/validation/issue-marker */ "../node_modules/@eclipse-glsp/client/lib/features/validation/issue-marker.js"), exports);
__exportStar(__webpack_require__(/*! ./features/validation/marker-navigator */ "../node_modules/@eclipse-glsp/client/lib/features/validation/marker-navigator.js"), exports);
__exportStar(__webpack_require__(/*! ./features/validation/validate */ "../node_modules/@eclipse-glsp/client/lib/features/validation/validate.js"), exports);
__exportStar(__webpack_require__(/*! ./features/validation/validation-modules */ "../node_modules/@eclipse-glsp/client/lib/features/validation/validation-modules.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/glsp-scroll-mouse-listener */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/glsp-scroll-mouse-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/origin-viewport */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/origin-viewport.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/reposition */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/reposition.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/viewport-handler */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/viewport-key-listener */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-key-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/viewport-modules */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-modules.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/viewport-tool */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/zoom-viewport-action */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/zoom-viewport-action.js"), exports);
__exportStar(__webpack_require__(/*! ./features/zorder/bring-to-front-command */ "../node_modules/@eclipse-glsp/client/lib/features/zorder/bring-to-front-command.js"), exports);
__exportStar(__webpack_require__(/*! ./features/zorder/zorder-module */ "../node_modules/@eclipse-glsp/client/lib/features/zorder/zorder-module.js"), exports);
__exportStar(__webpack_require__(/*! ./model */ "../node_modules/@eclipse-glsp/client/lib/model.js"), exports);
__exportStar(__webpack_require__(/*! ./re-exports */ "../node_modules/@eclipse-glsp/client/lib/re-exports.js"), exports);
__exportStar(__webpack_require__(/*! ./standalone-modules */ "../node_modules/@eclipse-glsp/client/lib/standalone-modules.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/argument-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/argument-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/geometry-util */ "../node_modules/@eclipse-glsp/client/lib/utils/geometry-util.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/gmodel-util */ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/html-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/html-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/layout-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/layout-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/marker */ "../node_modules/@eclipse-glsp/client/lib/utils/marker.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/viewpoint-util */ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js"), exports);
__exportStar(__webpack_require__(/*! ./views/base-view-module */ "../node_modules/@eclipse-glsp/client/lib/views/base-view-module.js"), exports);
__exportStar(__webpack_require__(/*! ./views/compartments */ "../node_modules/@eclipse-glsp/client/lib/views/compartments.js"), exports);
__exportStar(__webpack_require__(/*! ./views/gedge-view */ "../node_modules/@eclipse-glsp/client/lib/views/gedge-view.js"), exports);
__exportStar(__webpack_require__(/*! ./views/ggraph-view */ "../node_modules/@eclipse-glsp/client/lib/views/ggraph-view.js"), exports);
__exportStar(__webpack_require__(/*! ./views/glsp-projection-view */ "../node_modules/@eclipse-glsp/client/lib/views/glsp-projection-view.js"), exports);
__exportStar(__webpack_require__(/*! ./views/issue-marker-view */ "../node_modules/@eclipse-glsp/client/lib/views/issue-marker-view.js"), exports);
__exportStar(__webpack_require__(/*! ./views/rounded-corner */ "../node_modules/@eclipse-glsp/client/lib/views/rounded-corner.js"), exports);
__exportStar(__webpack_require__(/*! ./views/rounded-corner-view */ "../node_modules/@eclipse-glsp/client/lib/views/rounded-corner-view.js"), exports);
__exportStar(__webpack_require__(/*! ./views/routing-point-handle-view */ "../node_modules/@eclipse-glsp/client/lib/views/routing-point-handle-view.js"), exports);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/model.js":
/*!*********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/model.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GEdge = exports.GGraph = void 0;
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const args_feature_1 = __webpack_require__(/*! ./base/args-feature */ "../node_modules/@eclipse-glsp/client/lib/base/args-feature.js");
const model_1 = __webpack_require__(/*! ./features/hints/model */ "../node_modules/@eclipse-glsp/client/lib/features/hints/model.js");
class GGraph extends sprotty_1.SGraphImpl {
    isContainableElement(_input) {
        return true;
    }
}
exports.GGraph = GGraph;
GGraph.DEFAULT_FEATURES = [...sprotty_1.SGraphImpl.DEFAULT_FEATURES, model_1.containerFeature, args_feature_1.argsFeature];
class GEdge extends sprotty_1.SEdgeImpl {
    localToParent(point) {
        const bounds = (0, sprotty_1.getRouteBounds)(this.routingPoints);
        const result = {
            x: point.x + bounds.x,
            y: point.y + bounds.y,
            width: -1,
            height: -1
        };
        if ((0, sprotty_1.isBounds)(point)) {
            result.width = point.width;
            result.height = point.height;
        }
        return result;
    }
    parentToLocal(point) {
        const bounds = (0, sprotty_1.getRouteBounds)(this.routingPoints);
        const result = {
            x: point.x - bounds.x,
            y: point.y - bounds.y,
            width: -1,
            height: -1
        };
        if ((0, sprotty_1.isBounds)(point)) {
            result.width = point.width;
            result.height = point.height;
        }
        return result;
    }
}
exports.GEdge = GEdge;
GEdge.DEFAULT_FEATURES = [...sprotty_1.SEdgeImpl.DEFAULT_FEATURES, args_feature_1.argsFeature];


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/re-exports.js":
/*!**************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/re-exports.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__exportStar(__webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js"), exports);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/standalone-modules.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/standalone-modules.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.STANDALONE_MODULE_CONFIG = exports.STANDALONE_MODULES = exports.LayoutKeyListener = exports.FallbackActionHandler = exports.standaloneDefaultModule = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const shortcuts_module_1 = __webpack_require__(/*! ./base/shortcuts/shortcuts-module */ "../node_modules/@eclipse-glsp/client/lib/base/shortcuts/shortcuts-module.js");
const resize_module_1 = __webpack_require__(/*! ./features/change-bounds/resize/resize-module */ "../node_modules/@eclipse-glsp/client/lib/features/change-bounds/resize/resize-module.js");
const copy_paste_modules_1 = __webpack_require__(/*! ./features/copy-paste/copy-paste-modules */ "../node_modules/@eclipse-glsp/client/lib/features/copy-paste/copy-paste-modules.js");
const export_modules_1 = __webpack_require__(/*! ./features/export/export-modules */ "../node_modules/@eclipse-glsp/client/lib/features/export/export-modules.js");
const save_module_1 = __webpack_require__(/*! ./features/save/save-module */ "../node_modules/@eclipse-glsp/client/lib/features/save/save-module.js");
const select_module_1 = __webpack_require__(/*! ./features/select/select-module */ "../node_modules/@eclipse-glsp/client/lib/features/select/select-module.js");
const undo_redo_module_1 = __webpack_require__(/*! ./features/undo-redo/undo-redo-module */ "../node_modules/@eclipse-glsp/client/lib/features/undo-redo/undo-redo-module.js");
const validation_modules_1 = __webpack_require__(/*! ./features/validation/validation-modules */ "../node_modules/@eclipse-glsp/client/lib/features/validation/validation-modules.js");
const viewport_modules_1 = __webpack_require__(/*! ./features/viewport/viewport-modules */ "../node_modules/@eclipse-glsp/client/lib/features/viewport/viewport-modules.js");
exports.standaloneDefaultModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    bind(FallbackActionHandler).toSelf().inSingletonScope();
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.MessageAction.KIND, FallbackActionHandler);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.StartProgressAction.KIND, FallbackActionHandler);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.UpdateProgressAction.KIND, FallbackActionHandler);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.EndProgressAction.KIND, FallbackActionHandler);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.KeyListener, LayoutKeyListener);
}, { featureId: Symbol('standaloneDefault') });
/**
 * A fallback action handler for actions sent by features that are currently not supported by
 * default in the standalone context. Unhandled actions will be simply forwarded to the {@link ILogger}.
 */
let FallbackActionHandler = class FallbackActionHandler {
    handle(action) {
        this.logger.log(this, 'Unhandled action received:', action);
    }
};
exports.FallbackActionHandler = FallbackActionHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], FallbackActionHandler.prototype, "logger", void 0);
exports.FallbackActionHandler = FallbackActionHandler = __decorate([
    (0, inversify_1.injectable)()
], FallbackActionHandler);
let LayoutKeyListener = class LayoutKeyListener extends sprotty_1.KeyListener {
    keyDown(_element, event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'KeyL', 'ctrlCmd', 'shift')) {
            return [sprotty_1.TriggerLayoutAction.create()];
        }
        return [];
    }
};
exports.LayoutKeyListener = LayoutKeyListener;
exports.LayoutKeyListener = LayoutKeyListener = __decorate([
    (0, inversify_1.injectable)()
], LayoutKeyListener);
/**
 * Configuration of all `standalone` modules.
 *
 * Standalone modules compose additional features/services that are intended for the standalone deployment of GLSP (i.e. plain webapp)
 * When integrated into an application frame (e.g Theia/VS Code) this module is typically omitted and/or replaced
 * with an application native module.
 *
 * Typically standalone modules built on top of (i.e require ) a default module and are therefore conditionally loaded if the
 * required default modules have been loaded beforehand.
 */
exports.STANDALONE_MODULES = [
    viewport_modules_1.standaloneViewportModule,
    copy_paste_modules_1.standaloneCopyPasteModule,
    validation_modules_1.standaloneMarkerNavigatorModule,
    select_module_1.standaloneSelectModule,
    export_modules_1.standaloneExportModule,
    exports.standaloneDefaultModule,
    shortcuts_module_1.standaloneShortcutsModule,
    resize_module_1.standaloneResizeModule,
    save_module_1.saveModule,
    undo_redo_module_1.undoRedoModule
];
exports.STANDALONE_MODULE_CONFIG = {
    add: [...exports.STANDALONE_MODULES]
};


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/utils/argument-utils.js":
/*!************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/utils/argument-utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CornerRadius = exports.EdgePadding = exports.GArgument = void 0;
const args_feature_1 = __webpack_require__(/*! ../base/args-feature */ "../node_modules/@eclipse-glsp/client/lib/base/args-feature.js");
var GArgument;
(function (GArgument) {
    function asNumber(argValue) {
        return typeof argValue === 'number' ? argValue : undefined;
    }
    GArgument.asNumber = asNumber;
    function asNumbers(argValues) {
        return argValues.map(asNumber);
    }
    GArgument.asNumbers = asNumbers;
    function asString(argValue) {
        return typeof argValue === 'string' ? argValue : undefined;
    }
    GArgument.asString = asString;
    function asStrings(argValues) {
        return argValues.map(asString);
    }
    GArgument.asStrings = asStrings;
    function asBoolean(argValue) {
        return typeof argValue === 'boolean' ? argValue : undefined;
    }
    GArgument.asBoolean = asBoolean;
    function asBooleans(argValues) {
        return argValues.map(asBoolean);
    }
    GArgument.asBooleans = asBooleans;
    function getArgument(element, key) {
        return (0, args_feature_1.hasArgs)(element) ? element.args[key] : undefined;
    }
    GArgument.getArgument = getArgument;
    function getNumber(element, key) {
        return (0, args_feature_1.hasArgs)(element) ? asNumber(element.args[key]) : undefined;
    }
    GArgument.getNumber = getNumber;
    function getString(element, key) {
        return (0, args_feature_1.hasArgs)(element) ? asString(element.args[key]) : undefined;
    }
    GArgument.getString = getString;
    function getBoolean(element, key) {
        return (0, args_feature_1.hasArgs)(element) ? asBoolean(element.args[key]) : undefined;
    }
    GArgument.getBoolean = getBoolean;
    function getArguments(element, ...keys) {
        if (!(0, args_feature_1.hasArgs)(element)) {
            return undefined;
        }
        const values = [];
        for (const key of keys) {
            const value = element.args[key];
            if (value) {
                values.push(value);
            }
        }
        return values;
    }
    GArgument.getArguments = getArguments;
    function getNumbers(element, ...keys) {
        const values = getArguments(element, ...keys);
        return values ? asNumbers(values) : undefined;
    }
    GArgument.getNumbers = getNumbers;
    function getStrings(element, ...keys) {
        const values = getArguments(element, ...keys);
        return values ? asStrings(values) : undefined;
    }
    GArgument.getStrings = getStrings;
    function getBooleans(element, ...keys) {
        const values = getArguments(element, ...keys);
        return values ? asBooleans(values) : undefined;
    }
    GArgument.getBooleans = getBooleans;
    function hasNValues(values, length) {
        return values.length === length && values.filter(e => e === undefined).length === 0;
    }
    GArgument.hasNValues = hasNValues;
})(GArgument || (exports.GArgument = GArgument = {}));
var EdgePadding;
(function (EdgePadding) {
    const KEY = 'edgePadding';
    function from(element) {
        return GArgument.getNumber(element, KEY);
    }
    EdgePadding.from = from;
})(EdgePadding || (exports.EdgePadding = EdgePadding = {}));
class CornerRadius {
    constructor(topLeft = 0, topRight = topLeft, bottomRight = topLeft, bottomLeft = topRight) {
        this.topLeft = topLeft;
        this.topRight = topRight;
        this.bottomRight = bottomRight;
        this.bottomLeft = bottomLeft;
    }
    static from(element) {
        const radius = GArgument.getNumbers(element, this.KEY_RADIUS_TOP_LEFT, this.KEY_RADIUS_TOP_RIGHT, this.KEY_RADIUS_BOTTOM_RIGHT, this.KEY_RADIUS_BOTTOM_LEFT);
        if (radius === undefined || radius[0] === undefined) {
            return undefined;
        }
        return GArgument.hasNValues(radius, 4) ? new CornerRadius(radius[0], radius[1], radius[2], radius[3]) : new CornerRadius(radius[0]);
    }
}
exports.CornerRadius = CornerRadius;
CornerRadius.NO_RADIUS = new CornerRadius(0);
CornerRadius.KEY_RADIUS_TOP_LEFT = 'radiusTopLeft';
CornerRadius.KEY_RADIUS_TOP_RIGHT = 'radiusTopRight';
CornerRadius.KEY_RADIUS_BOTTOM_RIGHT = 'radiusBottomRight';
CornerRadius.KEY_RADIUS_BOTTOM_LEFT = 'radiusBottomLeft';


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/utils/geometry-util.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/utils/geometry-util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isAfter = exports.isBefore = exports.isBelow = exports.isAbove = exports.compareFunction = exports.sortBy = exports.bottomRight = exports.bottomCenter = exports.bottomLeft = exports.middleRight = exports.middleCenter = exports.middleLeft = exports.topRight = exports.topCenter = exports.topLeft = exports.bottom = exports.middle = exports.top = exports.right = exports.center = exports.left = void 0;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
/** @deprecated Use {@link Bounds.left} */
exports.left = sprotty_1.Bounds.left;
/** @deprecated Use {@link Bounds.centerX} */
exports.center = sprotty_1.Bounds.center;
/** @deprecated Use {@link Bounds.right} */
exports.right = sprotty_1.Bounds.right;
/** @deprecated Use {@link Bounds.top} */
exports.top = sprotty_1.Bounds.top;
/** @deprecated Use {@link Bounds.middle} */
exports.middle = sprotty_1.Bounds.middle;
/** @deprecated Use {@link Bounds.bottom} */
exports.bottom = sprotty_1.Bounds.bottom;
/** @deprecated Use {@link Bounds.topLeft} */
exports.topLeft = sprotty_1.Bounds.topLeft;
/** @deprecated Use {@link Bounds.topCenter} */
exports.topCenter = sprotty_1.Bounds.topCenter;
/** @deprecated Use {@link Bounds.topRight} */
exports.topRight = sprotty_1.Bounds.topRight;
/** @deprecated Use {@link Bounds.middleLeft} */
exports.middleLeft = sprotty_1.Bounds.middleLeft;
/** @deprecated Use {@link Bounds.middleCenter} */
exports.middleCenter = sprotty_1.Bounds.middleCenter;
/** @deprecated Use {@link Bounds.middleRight} */
exports.middleRight = sprotty_1.Bounds.middleRight;
/** @deprecated Use {@link Bounds.bottomLeft} */
exports.bottomLeft = sprotty_1.Bounds.bottomLeft;
/** @deprecated Use {@link Bounds.bottomCenter} */
exports.bottomCenter = sprotty_1.Bounds.bottomCenter;
/** @deprecated Use {@link Bounds.bottomRight} */
exports.bottomRight = sprotty_1.Bounds.bottomRight;
/** @deprecated Use {@link Bounds.left} */
exports.sortBy = sprotty_1.Bounds.sortBy;
const compareFunction = (rankFunc) => (x, y) => rankFunc(x) - rankFunc(y);
exports.compareFunction = compareFunction;
/** @deprecated Use {@link Bounds.isAbove} */
exports.isAbove = sprotty_1.Bounds.isAbove;
/** @deprecated Use {@link Bounds.isBelow} */
exports.isBelow = sprotty_1.Bounds.isBelow;
/** @deprecated Use {@link Bounds.isBefore} */
exports.isBefore = sprotty_1.Bounds.isBefore;
/** @deprecated Use {@link Bounds.isAfter} */
exports.isAfter = sprotty_1.Bounds.isAfter;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/utils/gmodel-util.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ROUTE_KINDS = exports.ROUTING_POINT_KINDS = exports.ALL_ROUTING_POINTS = void 0;
exports.filter = filter;
exports.forEachElement = forEachElement;
exports.getMatchingElements = getMatchingElements;
exports.getElements = getElements;
exports.getSelectedElementCount = getSelectedElementCount;
exports.hasSelectedElements = hasSelectedElements;
exports.isNotUndefined = isNotUndefined;
exports.addCssClasses = addCssClasses;
exports.removeCssClasses = removeCssClasses;
exports.addCssClassToElements = addCssClassToElements;
exports.removeCssClassOfElements = removeCssClassOfElements;
exports.toggleCssClass = toggleCssClass;
exports.isNonRoutableSelectedMovableBoundsAware = isNonRoutableSelectedMovableBoundsAware;
exports.isNonRoutableMovableBoundsAware = isNonRoutableMovableBoundsAware;
exports.isNonRoutableSelectedBoundsAware = isNonRoutableSelectedBoundsAware;
exports.isNonRoutableBoundsAware = isNonRoutableBoundsAware;
exports.isRoutable = isRoutable;
exports.isRoutingHandle = isRoutingHandle;
exports.isSelectableAndBoundsAware = isSelectableAndBoundsAware;
exports.toElementAndBounds = toElementAndBounds;
exports.toElementAndRoutingPoints = toElementAndRoutingPoints;
exports.calcElementAndRoutingPoints = calcElementAndRoutingPoints;
exports.calcElementAndRoute = calcElementAndRoute;
exports.calcRoute = calcRoute;
exports.getElementTypeId = getElementTypeId;
exports.findTopLevelElementByFeature = findTopLevelElementByFeature;
exports.calculateDeltaBetweenPoints = calculateDeltaBetweenPoints;
exports.isVisibleOnCanvas = isVisibleOnCanvas;
exports.getDescendantIds = getDescendantIds;
exports.isNotDescendantOfAnyElement = isNotDescendantOfAnyElement;
exports.removeDescendants = removeDescendants;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
/**
 * Retrieves all elements from the given {@link ModelIndexImpl} that match the given {@link ModelFilterPredicate}
 * @param index The {@link ModelIndexImpl}.
 * @param predicate The {@link ModelFilterPredicate} that should be used.
 * @returns A {@link FluentIterable} of all indexed element that match the predicate
 * (correctly casted to also include the additional type of the predicate).
 */
function filter(index, predicate) {
    return index.all().filter(predicate);
}
/**
 * Retrieves all elements from the given {@link ModelIndexImpl} that match the given {@link ModelFilterPredicate} and executes
 * the given runnable for each element of the result set.
 * @param index The {@link ModelIndexImpl}.
 * @param predicate The {@link ModelFilterPredicate} that should be used.
 * @param runnable The runnable that should be executed for each matching element.
 */
function forEachElement(index, predicate, runnable) {
    filter(index, predicate).forEach(runnable);
}
/**
 * Retrieves an array of all elements that match the given {@link ModelFilterPredicate} from the given {@link ModelIndexImpl}.
 * @param index The {@link ModelIndexImpl}.
 * @param predicate The {@link ModelFilterPredicate} that should be used.
 * @returns An array of all indexed element that match the predicate
 * (correctly casted to also include the additional type of the predicate).
 */
function getMatchingElements(index, predicate) {
    return Array.from(filter(index, predicate));
}
/**
 * Invokes the given model index to retrieve the corresponding model elements for the given set of ids. Ids that
 * have no corresponding element in the index will be ignored.
 * @param index THe model index.
 * @param elementsIDs The element ids.
 * @param guard Optional typeguard. If defined only elements that match the guard will be returned.
 * @returns An array of the model elements that correspond to the given ids and filter predicate.
 */
function getElements(index, elementsIDs, guard) {
    // Internal filter function that filters out undefined model elements and runs an optional typeguard check.
    const filterFn = (element) => {
        if (element !== undefined) {
            return guard ? guard(element) : true;
        }
        return false;
    };
    return elementsIDs.map(id => index.getById(id)).filter(filterFn);
}
/**
 * Retrieves the amount of currently selected elements in the given {@link ModelIndexImpl}.
 * @param index The {@link ModelIndexImpl}.
 * @returns The amount of selected elements.
 */
function getSelectedElementCount(index) {
    let selected = 0;
    forEachElement(index, sprotty_1.isSelected, element => selected++);
    return selected;
}
/**
 * Helper function to check wether an any element is selected in the given {@link ModelIndexImpl}.
 * @param index The {@link ModelIndexImpl}.
 * @returns `true` if at least one element is selected, `false` otherwise.
 */
function hasSelectedElements(index) {
    return getSelectedElementCount(index) > 0;
}
/**
 * Helper function to check wether an element is defined. Can be used as {@link ModelFilterPredicate}.
 * @param element The element that should be checked.
 * @returns the type predicate for `T`
 */
function isNotUndefined(element) {
    return element !== undefined;
}
function addCssClasses(element, ...cssClasses) {
    var _a;
    const classes = Array.isArray(cssClasses[0]) ? cssClasses[0] : cssClasses;
    const elementCssClasses = (_a = element.cssClasses) !== null && _a !== void 0 ? _a : [];
    (0, sprotty_1.distinctAdd)(elementCssClasses, ...classes);
    element.cssClasses = elementCssClasses;
}
function removeCssClasses(element, ...cssClasses) {
    if (!element.cssClasses || element.cssClasses.length === 0) {
        return;
    }
    const classes = Array.isArray(cssClasses[0]) ? cssClasses[0] : cssClasses;
    (0, sprotty_1.remove)(element.cssClasses, ...classes);
}
/**
 * Adds a css classs to a set of {@link GModelElement}s.
 *
 * @param elements The elements to which the css class should be added.
 * @param cssClass The css class to add.
 */
function addCssClassToElements(elements, ...cssClasses) {
    for (const element of elements) {
        addCssClasses(element, cssClasses);
    }
}
/**
 * Removes a css class from a set of {@link GModelElement}s.
 * @param elements The elements from which the css class should be removed.
 * @param cssClass The css class to remove.
 */
function removeCssClassOfElements(elements, ...cssClasses) {
    for (const element of elements) {
        removeCssClasses(element, cssClasses);
    }
}
/**
 * Toggles a css class on a {@link GModelElement} based on the given toggle flag.
 */
function toggleCssClass(element, cssClass, toggle) {
    return toggle ? addCssClasses(element, cssClass) : removeCssClasses(element, cssClass);
}
function isNonRoutableSelectedMovableBoundsAware(element) {
    return isNonRoutableSelectedBoundsAware(element) && (0, sprotty_1.isMoveable)(element);
}
function isNonRoutableMovableBoundsAware(element) {
    return isNonRoutableBoundsAware(element) && (0, sprotty_1.isMoveable)(element);
}
/**
 * A typeguard function to check wether a given {@link GModelElement} implements the {@link BoundsAware} model feature,
 * the {@link Selectable} model feature and is actually selected. In addition, the element must not be a {@link GRoutableElement}.
 * @param element The element to check.
 * @returns A type predicate indicating wether the element is of type {@link SelectableBoundsAware}.
 */
function isNonRoutableSelectedBoundsAware(element) {
    return isNonRoutableBoundsAware(element) && (0, sprotty_1.isSelected)(element);
}
/**
 * A typeguard function to check wether a given {@link GModelElement} implements the {@link BoundsAware} model feature.
 * In addition, the element must not be a {@link GRoutableElement}.
 * @param element The element to check.
 * @returns A type predicate indicating wether the element is of type {@link BoundsAwareModelElement}.
 */
function isNonRoutableBoundsAware(element) {
    return (0, sprotty_1.isBoundsAware)(element) && !isRoutable(element);
}
/**
 * A type guard function to check wether a given {@link GModelElement} is a {@link GRoutableElement}.
 * @param element The element to check.
 * @returns A type predicate indicating wether the element is a {@link GRoutableElement}.
 */
function isRoutable(element) {
    return element instanceof sprotty_1.GRoutableElement && element.routingPoints !== undefined;
}
/**
 * A typeguard function to check wether a given {@link GModelElement} is a {@link SRoutingHandle}.
 * @param element The element to check.
 * @returns A type predicate indicating wether the element is a {@link SRoutingHandle}
 */
function isRoutingHandle(element) {
    return element !== undefined && element instanceof sprotty_1.GRoutingHandle;
}
/**
 * A typeguard function to check wether a given {@link GModelElement} implements the {@link Selectable} model feature and
 * the {@link BoundsAware} model feature.
 * @returns A type predicate indicating wether the element is of type {@link SelectableBoundsAware}.
 */
function isSelectableAndBoundsAware(element) {
    return (0, sprotty_1.isSelectable)(element) && (0, sprotty_1.isBoundsAware)(element);
}
/**
 * Helper function to translate a given {@link GModelElement} into its corresponding {@link ElementAndBounds} representation.
 * @param element The element to translate.
 * @returns The corresponding {@link ElementAndBounds} for the given element.
 */
function toElementAndBounds(element) {
    return {
        elementId: element.id,
        newPosition: {
            x: element.bounds.x,
            y: element.bounds.y
        },
        newSize: {
            width: element.bounds.width,
            height: element.bounds.height
        }
    };
}
/**
 * Helper function to translate a given {@link GRoutableElement} into its corresponding
 * {@link ElementAndRoutingPoints} representation.
 * @param element The element to translate.
 * @returns The corresponding {@link ElementAndRoutingPoints} for the given element.
 */
function toElementAndRoutingPoints(element) {
    return {
        elementId: element.id,
        newRoutingPoints: element.routingPoints
    };
}
/** All routing points. */
exports.ALL_ROUTING_POINTS = undefined;
/** Pure routing point data kinds. */
exports.ROUTING_POINT_KINDS = ['linear', 'bezier-junction'];
/** Pure route data kinds. */
exports.ROUTE_KINDS = [...exports.ROUTING_POINT_KINDS, 'source', 'target'];
/**
 * Helper function to calculate the {@link ElementAndRoutingPoints} for a given {@link GRoutableElement}.
 * If client layout is activated, i.e., the edge routing registry is given and has a router for the element, then the routing
 * points from the calculated route are used, otherwise we use the already specified routing points of the {@link GRoutableElement}.
 * @param element The element to translate.
 * @param routerRegistry the edge router registry.
 * @returns The corresponding {@link ElementAndRoutingPoints} for the given element.
 */
function calcElementAndRoutingPoints(element, routerRegistry) {
    const newRoutingPoints = routerRegistry ? calcRoute(element, routerRegistry, exports.ROUTING_POINT_KINDS) : element.routingPoints;
    return { elementId: element.id, newRoutingPoints };
}
/**
 * Helper function to calculate the route for a given {@link GRoutableElement}.
 * If client layout is activated, i.e., the edge routing registry is given and has a router for the element, then the points
 * from the calculated route are used, otherwise we use the already specified routing points of the {@link GRoutableElement}.
 * @param element The element to translate.
 * @param routerRegistry the edge router registry.
 * @returns The corresponding route for the given element.
 */
function calcElementAndRoute(element, routerRegistry) {
    var _a, _b;
    let route = routerRegistry ? calcRoute(element, routerRegistry, exports.ROUTE_KINDS) : undefined;
    if (!route) {
        // add source and target to the routing points
        route = [...element.routingPoints];
        route.splice(0, 0, ((_a = element.source) === null || _a === void 0 ? void 0 : _a.position) || sprotty_1.Point.ORIGIN);
        route.push(((_b = element.target) === null || _b === void 0 ? void 0 : _b.position) || sprotty_1.Point.ORIGIN);
    }
    return { elementId: element.id, newRoutingPoints: route };
}
/**
 * Helper function to calculate the route for a given {@link GRoutableElement} by filtering duplicate points.
 * @param element The element to translate.
 * @param routerRegistry the edge router registry.
 * @param pointKinds the routing point kinds that should be considered.
 * @param tolerance the tolerance applied to a point's coordinates to determine duplicates.
 * @returns The corresponding route for the given element.
 */
function calcRoute(element, routerRegistry, pointKinds = exports.ALL_ROUTING_POINTS, tolerance = Number.EPSILON) {
    const route = routerRegistry.get(element.routerKind).route(element);
    const calculatedRoute = [];
    for (const point of route) {
        // only include points we are actually interested in
        if (pointKinds && !pointKinds.includes(point.kind)) {
            continue;
        }
        // check if we are a duplicate based on coordinates in the already calculated route
        if (exports.ROUTING_POINT_KINDS.includes(point.kind) &&
            calculatedRoute.find(calculatedPoint => sprotty_1.Point.maxDistance(point, calculatedPoint) < tolerance)) {
            continue;
        }
        calculatedRoute.push(point);
    }
    return calculatedRoute;
}
/**
 * Convenience function to retrieve the model element type from a given input. The input
 * can either be a {@link GModelElement}, {@link GModelElementSchema} or a string.
 * @param input The type input.
 * @returns The corresponding model type as string.
 */
function getElementTypeId(input) {
    if (typeof input === 'string') {
        return input;
    }
    else {
        return input.type;
    }
}
function findTopLevelElementByFeature(element, predicate, skip = _t => false) {
    let match;
    let current = element;
    while (current !== undefined) {
        if (!skip(current) && predicate(current)) {
            match = current;
        }
        if (current instanceof sprotty_1.GChildElement) {
            current = current.parent;
        }
        else {
            current = undefined;
        }
    }
    return match;
}
function calculateDeltaBetweenPoints(target, source, element) {
    const delta = sprotty_1.Point.subtract(target, source);
    const zoom = (0, sprotty_1.getZoom)(element);
    const adaptedDelta = sprotty_1.Point.divideScalar(delta, zoom);
    return adaptedDelta;
}
function isVisibleOnCanvas(model) {
    const modelBounds = (0, sprotty_1.getAbsoluteBounds)(model);
    const canvasBounds = model.root.canvasBounds;
    return (modelBounds.x <= canvasBounds.width &&
        modelBounds.x + modelBounds.width >= 0 &&
        modelBounds.y <= canvasBounds.height &&
        modelBounds.y + modelBounds.height >= 0);
}
function getDescendantIds(element, skip) {
    if (!element || (skip === null || skip === void 0 ? void 0 : skip(element))) {
        return [];
    }
    const parent = element;
    const ids = [parent.id];
    if (parent instanceof sprotty_1.GParentElement) {
        ids.push(...parent.children.flatMap(child => getDescendantIds(child, skip)));
    }
    return ids;
}
/**
 * Returns a filter function that checks if the given element is not a descendant of any of the given elements.
 *
 * @param elements  The elements that the element should not be a descendant of.
 * @returns the filter function
 */
function isNotDescendantOfAnyElement(elements) {
    const elementsSet = new Set(elements);
    return (element) => {
        let parent = element;
        while (parent instanceof sprotty_1.GChildElement) {
            parent = parent.parent;
            if (elementsSet.has(parent)) {
                return false;
            }
        }
        return true;
    };
}
/**
 * Removes any descendants of the given elements from the given elements.
 * @param elements The elements to filter.
 * @returns the filtered elements
 */
function removeDescendants(elements) {
    return elements.filter(isNotDescendantOfAnyElement(elements));
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/utils/html-utils.js":
/*!********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/utils/html-utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createElementFromHTML = createElementFromHTML;
exports.isMouseEvent = isMouseEvent;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
function createElementFromHTML(html) {
    const template = document.createElement('template');
    html = html.trim(); // Never return a text node of whitespace as the result
    template.innerHTML = html;
    const node = template.content.firstChild;
    if (node && node instanceof HTMLElement) {
        return node;
    }
    return undefined;
}
function isMouseEvent(object) {
    return sprotty_1.AnyObject.is(object) && (0, sprotty_1.hasNumberProp)(object, 'pageX') && (0, sprotty_1.hasNumberProp)(object, 'pageY');
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/utils/layout-utils.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/utils/layout-utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.minWidth = minWidth;
exports.minHeight = minHeight;
exports.minDimensions = minDimensions;
exports.getLayoutOptions = getLayoutOptions;
exports.isValidSize = isValidSize;
exports.isValidMove = isValidMove;
exports.toValidElementMove = toValidElementMove;
exports.toValidElementAndBounds = toValidElementAndBounds;
function minWidth(element) {
    const layoutOptions = getLayoutOptions(element);
    if (layoutOptions !== undefined && typeof layoutOptions.minWidth === 'number') {
        return layoutOptions.minWidth;
    }
    return 1;
}
function minHeight(element) {
    const layoutOptions = getLayoutOptions(element);
    if (layoutOptions !== undefined && typeof layoutOptions.minHeight === 'number') {
        return layoutOptions.minHeight;
    }
    return 1;
}
function minDimensions(element) {
    return { width: minWidth(element), height: minHeight(element) };
}
function getLayoutOptions(element) {
    const layoutOptions = element.layoutOptions;
    if (layoutOptions !== undefined) {
        return layoutOptions;
    }
    return undefined;
}
function isValidSize(element, size) {
    return size.width >= minWidth(element) && size.height >= minHeight(element);
}
function isValidMove(element, newPosition, movementRestrictor) {
    var _a;
    return (_a = movementRestrictor === null || movementRestrictor === void 0 ? void 0 : movementRestrictor.validate(element, newPosition)) !== null && _a !== void 0 ? _a : true;
}
function toValidElementMove(element, move, movementRestrictor) {
    if (!isValidMove(element, move.toPosition, movementRestrictor)) {
        return;
    }
    return move;
}
function toValidElementAndBounds(element, bounds, movementRestrictor) {
    if (!isValidMove(element, bounds.newPosition, movementRestrictor)) {
        return;
    }
    const elementMinWidth = minWidth(element);
    if (bounds.newSize.width < elementMinWidth) {
        bounds.newSize.width = elementMinWidth;
    }
    const elementMinHeight = minHeight(element);
    if (bounds.newSize.height < elementMinHeight) {
        bounds.newSize.height = elementMinHeight;
    }
    return bounds;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/utils/marker.js":
/*!****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/utils/marker.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MarkerPredicates = void 0;
exports.collectIssueMarkers = collectIssueMarkers;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const issue_marker_1 = __webpack_require__(/*! ../features/validation/issue-marker */ "../node_modules/@eclipse-glsp/client/lib/features/validation/issue-marker.js");
var MarkerPredicates;
(function (MarkerPredicates) {
    MarkerPredicates.ALL = () => true;
    MarkerPredicates.ERRORS = (marker) => hasIssueWithSeverity(marker, sprotty_1.MarkerKind.ERROR);
    MarkerPredicates.WARNINGS = (marker) => hasIssueWithSeverity(marker, sprotty_1.MarkerKind.WARNING);
    MarkerPredicates.INFOS = (marker) => hasIssueWithSeverity(marker, sprotty_1.MarkerKind.INFO);
    function hasIssueWithSeverity(marker, severity) {
        return marker.issues.find(issue => issue.severity === severity) !== undefined;
    }
    MarkerPredicates.hasIssueWithSeverity = hasIssueWithSeverity;
})(MarkerPredicates || (exports.MarkerPredicates = MarkerPredicates = {}));
function collectIssueMarkers(root) {
    const markers = [];
    for (const child of root.children) {
        if (child instanceof issue_marker_1.GIssueMarker) {
            markers.push(child);
        }
        markers.push(...collectIssueMarkers(child));
    }
    return markers;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js":
/*!************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/utils/viewpoint-util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAbsolutePosition = getAbsolutePosition;
exports.getAbsolutePositionByPoint = getAbsolutePositionByPoint;
exports.getViewportBounds = getViewportBounds;
exports.toAbsoluteBounds = toAbsoluteBounds;
exports.toAbsolutePosition = toAbsolutePosition;
exports.toAbsoluteSize = toAbsoluteSize;
exports.absoluteToParent = absoluteToParent;
exports.absoluteToLocal = absoluteToLocal;
exports.outsideOfViewport = outsideOfViewport;
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
/**
 * Return the position corresponding to this mouse event (Browser coordinates)
 * in the diagram coordinates system (i.e. relative to the Diagram's 0;0 point)
 *
 * This functions takes into account the following transformations:
 * - Location of the Diagram Canvas inside of the browser's page
 * - Current viewport Scroll and Zoom
 *
 * @param target
 *  An element from the diagram
 * @param mouseEvent
 *  A mouseEvent
 */
function getAbsolutePosition(target, mouseEvent) {
    return getAbsolutePositionByPoint(target, { x: mouseEvent.pageX, y: mouseEvent.pageY });
}
function getAbsolutePositionByPoint(target, point) {
    let position = sprotty_1.Point.subtract(point, target.root.canvasBounds);
    const viewport = (0, sprotty_1.findParentByFeature)(target, sprotty_1.isViewport);
    if (viewport) {
        const zoom = viewport.zoom;
        const zoomedScroll = sprotty_1.Point.multiplyScalar(viewport.scroll, zoom);
        position = sprotty_1.Point.add(position, zoomedScroll);
        position = sprotty_1.Point.divideScalar(position, zoom);
    }
    return position;
}
function getViewportBounds(target, bounds) {
    const topLeft = getAbsolutePositionByPoint(target, sprotty_1.Bounds.topLeft(bounds));
    const bottomRight = getAbsolutePositionByPoint(target, sprotty_1.Bounds.bottomRight(bounds));
    return sprotty_1.Bounds.from(topLeft, bottomRight);
}
/**
 * Translates the bounds of the diagram element (local coordinates) into the diagram coordinates system
 * (i.e. relative to the Diagram's 0;0 point)
 *
 * @param target  A bounds-aware element from the diagram
 */
function toAbsoluteBounds(element) {
    const location = (0, sprotty_1.isAlignable)(element) ? element.alignment : sprotty_1.Point.ORIGIN;
    const x = location.x;
    const y = location.y;
    const width = element.bounds.width;
    const height = element.bounds.height;
    return (0, sprotty_1.translateBounds)({ x, y, width, height }, element, element.root);
}
/**
 * Translates the position of the diagram element (local coordinates) into the diagram coordinates system
 * (i.e. relative to the Diagram's 0;0 point)
 *
 * @param target  A bounds-aware element from the diagram
 */
function toAbsolutePosition(target) {
    return toAbsoluteBounds(target);
}
/**
 * Translates the size of the diagram element (local coordinates) into the diagram coordinates system
 * (i.e. relative to the Diagram's 0;0 point)
 *
 * @param target  A bounds-aware element from the diagram
 */
function toAbsoluteSize(target) {
    return toAbsoluteBounds(target);
}
/**
 * Convert a point, specified in absolute coordinates, to a point relative
 * to the parent of the specified child element.
 *
 * @param element the child element
 * @param absolutePoint a point in absolute coordinates
 * @returns the equivalent point, relative to the element's parent coordinates
 */
function absoluteToParent(element, absolutePoint) {
    if ((0, sprotty_1.isBoundsAware)(element.parent)) {
        return absoluteToLocal(element.parent, absolutePoint);
    }
    // If the parent is not bounds-aware, assume it's at 0; 0 and proceed
    return absoluteToLocal(element, absolutePoint);
}
/**
 * Convert a point, specified in absolute coordinates, to a point relative
 * to the specified element.
 *
 * @param element the element
 * @param absolutePoint a point in absolute coordinates
 * @returns the equivalent point, relative to the element's coordinates
 */
function absoluteToLocal(element, absolutePoint) {
    const absoluteElementBounds = toAbsoluteBounds(element);
    return sprotty_1.Point.subtract(absolutePoint, absoluteElementBounds);
}
/**
 * Returns `true` if `point` is outside of the `viewport`.
 * @param point The point to check.
 * @param viewport The viewport.
 * @returns `true` if `point` is outside, `false` otherwise.
 */
function outsideOfViewport(point, viewport) {
    return (point.x < viewport.scroll.x ||
        point.x > viewport.scroll.x + viewport.canvasBounds.width / viewport.zoom ||
        point.y < viewport.scroll.y ||
        point.y > viewport.scroll.y + viewport.canvasBounds.height / viewport.zoom);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/base-view-module.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/base-view-module.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.baseViewModule = void 0;
exports.configureDefaultModelElements = configureDefaultModelElements;
/********************************************************************************
 * Copyright (c) 2021-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const issue_marker_1 = __webpack_require__(/*! ../features/validation/issue-marker */ "../node_modules/@eclipse-glsp/client/lib/features/validation/issue-marker.js");
const model_1 = __webpack_require__(/*! ../model */ "../node_modules/@eclipse-glsp/client/lib/model.js");
const gedge_view_1 = __webpack_require__(/*! ./gedge-view */ "../node_modules/@eclipse-glsp/client/lib/views/gedge-view.js");
const ggraph_view_1 = __webpack_require__(/*! ./ggraph-view */ "../node_modules/@eclipse-glsp/client/lib/views/ggraph-view.js");
const issue_marker_view_1 = __webpack_require__(/*! ./issue-marker-view */ "../node_modules/@eclipse-glsp/client/lib/views/issue-marker-view.js");
const rounded_corner_view_1 = __webpack_require__(/*! ./rounded-corner-view */ "../node_modules/@eclipse-glsp/client/lib/views/rounded-corner-view.js");
const routing_point_handle_view_1 = __webpack_require__(/*! ./routing-point-handle-view */ "../node_modules/@eclipse-glsp/client/lib/views/routing-point-handle-view.js");
exports.baseViewModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    configureDefaultModelElements(context);
}, { featureId: Symbol('baseView') });
function configureDefaultModelElements(context) {
    // HTML elements
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.HTML, sprotty_1.GHtmlRoot, sprotty_1.HtmlRootView);
    // generic elements
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.FOREIGN_OBJECT, sprotty_1.GForeignObjectElement, sprotty_1.ForeignObjectView, {
        disable: [sprotty_1.selectFeature, sprotty_1.moveFeature]
    });
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.PRE_RENDERED, sprotty_1.GPreRenderedElement, sprotty_1.PreRenderedView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.SHAPE_PRE_RENDERED, sprotty_1.GShapedPreRenderedElement, sprotty_1.PreRenderedView);
    // SVG elements
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.SVG, sprotty_1.GViewportRootElement, sprotty_1.SvgViewportView);
    // graph elements
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.GRAPH, model_1.GGraph, ggraph_view_1.GGraphView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.NODE, sprotty_1.GNode, rounded_corner_view_1.RoundedCornerNodeView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.COMPARTMENT, sprotty_1.GCompartment, sprotty_1.GCompartmentView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.COMPARTMENT_HEADER, sprotty_1.GCompartment, sprotty_1.GCompartmentView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.EDGE, model_1.GEdge, gedge_view_1.GEdgeView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.PORT, sprotty_1.GPort, sprotty_1.RectangularNodeView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.ROUTING_POINT, sprotty_1.GRoutingHandle, routing_point_handle_view_1.GRoutingHandleView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.VOLATILE_ROUTING_POINT, sprotty_1.GRoutingHandle, routing_point_handle_view_1.GRoutingHandleView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.LABEL, sprotty_1.GLabel, sprotty_1.GLabelView);
    // UI elements
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.BUTTON_EXPAND, sprotty_1.GButton, sprotty_1.ExpandButtonView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.ISSUE_MARKER, issue_marker_1.GIssueMarker, issue_marker_view_1.GIssueMarkerView);
    // shapes
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.NODE_CIRCLE, sprotty_1.CircularNode, sprotty_1.CircularNodeView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.NODE_DIAMOND, sprotty_1.DiamondNode, sprotty_1.DiamondNodeView);
    (0, sprotty_1.configureModelElement)(context, sprotty_1.DefaultTypes.NODE_RECTANGLE, sprotty_1.RectangularNode, sprotty_1.RectangularNodeView);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/compartments.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/compartments.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StructureCompartmentView = void 0;
/********************************************************************************
 * Copyright (c) 2021-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let StructureCompartmentView = class StructureCompartmentView extends sprotty_1.ShapeView {
    render(model, context) {
        if (!this.isVisible(model, context)) {
            return undefined;
        }
        const rectSize = sprotty_1.Dimension.isValid(model.size) ? model.size : sprotty_1.Dimension.ZERO;
        return ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("rect", { "class-sprotty-comp": true, x: '0', y: '0', width: rectSize.width, height: rectSize.height }),
            context.renderChildren(model)));
    }
};
exports.StructureCompartmentView = StructureCompartmentView;
exports.StructureCompartmentView = StructureCompartmentView = __decorate([
    (0, inversify_1.injectable)()
], StructureCompartmentView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/gedge-view.js":
/*!********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/gedge-view.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GEdgeView = void 0;
/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const argument_utils_1 = __webpack_require__(/*! ../utils/argument-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/argument-utils.js");
let GEdgeView = class GEdgeView extends sprotty_1.PolylineEdgeView {
    render(edge, context) {
        const router = this.edgeRouterRegistry.get(edge.routerKind);
        const route = router.route(edge);
        if (route.length === 0) {
            return this.renderDanglingEdge('Cannot compute route', edge, context);
        }
        return ((0, sprotty_1.svg)("g", { "class-sprotty-edge": true, "class-mouseover": edge.hoverFeedback, ...this.additionalClasses(edge, context) },
            this.renderLine(edge, route, context),
            this.renderAdditionals(edge, route, context),
            context.renderChildren(edge, { route })));
    }
    additionalClasses(_edge, _context) {
        return {};
    }
    renderLine(_edge, segments, _context) {
        return (0, sprotty_1.svg)("path", { d: this.createPathForSegments(segments) });
    }
    renderAdditionals(edge, segments, _context) {
        // for additional padding we draw another transparent path with larger stroke width
        const edgePadding = argument_utils_1.EdgePadding.from(edge);
        return edgePadding ? [this.renderMouseHandle(segments, edgePadding)] : [];
    }
    renderMouseHandle(segments, padding) {
        return ((0, sprotty_1.svg)("path", { "class-mouse-handle": true, d: this.createPathForSegments(segments), "style-stroke-width": padding * 2, "style-stroke": 'transparent', "style-stroke-dasharray": 'none', "style-stroke-dashoffset": '0' }));
    }
    createPathForSegments(segments) {
        const firstPoint = segments[0];
        let path = `M ${firstPoint.x},${firstPoint.y}`;
        for (let i = 1; i < segments.length; i++) {
            const p = segments[i];
            path += ` L ${p.x},${p.y}`;
        }
        return path;
    }
};
exports.GEdgeView = GEdgeView;
exports.GEdgeView = GEdgeView = __decorate([
    (0, inversify_1.injectable)()
], GEdgeView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/ggraph-view.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/ggraph-view.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GGraphView = void 0;
/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const grid_style_1 = __webpack_require__(/*! ../features/grid/grid-style */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-style.js");
let GGraphView = class GGraphView extends sprotty_1.SGraphView {
    render(model, context) {
        const graph = super.render(model, context);
        if (graph.data) {
            graph.data.style = { ...graph.data.style, ...this.getGridStyle(model, context) };
        }
        return graph;
    }
    getGridStyle(viewport, context) {
        if (context.targetKind === 'hidden' || !this.gridManager) {
            return {};
        }
        const bounds = this.getBackgroundBounds(viewport, context, this.gridManager);
        return {
            [grid_style_1.GridProperty.GRID_BACKGROUND_X]: bounds.x + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_Y]: bounds.y + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_WIDTH]: bounds.width + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_HEIGHT]: bounds.height + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_ZOOM]: viewport.zoom + ''
        };
    }
    getBackgroundBounds(viewport, context, gridManager) {
        const position = sprotty_1.Point.multiplyScalar(sprotty_1.Point.subtract(gridManager.grid, viewport.scroll), viewport.zoom);
        const size = sprotty_1.Dimension.fromPoint(sprotty_1.Point.multiplyScalar(gridManager.grid, viewport.zoom));
        return { ...position, ...size };
    }
};
exports.GGraphView = GGraphView;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IGridManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], GGraphView.prototype, "gridManager", void 0);
exports.GGraphView = GGraphView = __decorate([
    (0, inversify_1.injectable)()
], GGraphView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/glsp-projection-view.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/glsp-projection-view.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPProjectionView = void 0;
/********************************************************************************
 * Copyright (c) 2017-2025 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx html */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "../node_modules/snabbdom/build/index.js");
const messages_1 = __webpack_require__(/*! ../base/messages */ "../node_modules/@eclipse-glsp/client/lib/base/messages.js");
const grid_style_1 = __webpack_require__(/*! ../features/grid/grid-style */ "../node_modules/@eclipse-glsp/client/lib/features/grid/grid-style.js");
/**
 * Special viewport root view that renders horizontal and vertical projection bars for quick navigation.
 */
let GLSPProjectionView = class GLSPProjectionView extends sprotty_1.ProjectedViewportView {
    render(model, context, args) {
        const rootNode = ((0, sprotty_1.html)("div", { "class-sprotty-graph": false, style: { width: '100%', height: '100%' } },
            this.renderSvg(model, context, args),
            this.renderProjections(model, context, args)));
        (0, sprotty_1.setAttr)(rootNode, 'tabindex', 1);
        (0, sprotty_1.setAttr)(rootNode, 'aria-label', messages_1.messages.diagram.label);
        return rootNode;
    }
    renderSvg(model, context, args) {
        const edgeRouting = this.edgeRouterRegistry.routeAllChildren(model);
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        const ns = 'http://www.w3.org/2000/svg';
        const svg = (0, snabbdom_1.h)('svg', { ns, style: { height: '100%', ...this.getGridStyle(model, context) }, class: { 'sprotty-graph': true } }, (0, snabbdom_1.h)('g', { ns, attrs: { transform } }, context.renderChildren(model, { edgeRouting })));
        return svg;
    }
    getGridStyle(viewport, context) {
        if (context.targetKind === 'hidden' || !this.gridManager) {
            return {};
        }
        const bounds = this.getBackgroundBounds(viewport, context, this.gridManager);
        return {
            [grid_style_1.GridProperty.GRID_BACKGROUND_X]: bounds.x + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_Y]: bounds.y + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_WIDTH]: bounds.width + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_HEIGHT]: bounds.height + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_ZOOM]: viewport.zoom + ''
        };
    }
    getBackgroundBounds(viewport, context, gridManager) {
        const position = sprotty_1.Point.multiplyScalar(sprotty_1.Point.subtract(gridManager.grid, viewport.scroll), viewport.zoom);
        const size = sprotty_1.Dimension.fromPoint(sprotty_1.Point.multiplyScalar(gridManager.grid, viewport.zoom));
        return { ...position, ...size };
    }
    renderProjectionBar(projections, model, modelBounds, orientation) {
        const vnode = super.renderProjectionBar(projections, model, modelBounds, orientation);
        (0, sprotty_1.setClass)(vnode, 'bordered-projection-bar', true);
        return vnode;
    }
    renderViewport(model, params) {
        let canvasSize;
        let viewportPos;
        if (params.orientation === 'horizontal') {
            canvasSize = model.canvasBounds.width;
            viewportPos = (model.scroll.x - params.modelBounds.x) * params.factor;
        }
        else {
            canvasSize = model.canvasBounds.height;
            viewportPos = (model.scroll.y - params.modelBounds.y) * params.factor;
        }
        let viewportSize = canvasSize * params.zoomedFactor;
        if (viewportPos < 0) {
            viewportSize += viewportPos;
            viewportPos = 0;
        }
        else if (viewportPos > canvasSize) {
            viewportPos = canvasSize;
        }
        if (viewportSize < 0) {
            viewportSize = 0;
        }
        else if (viewportPos + viewportSize > canvasSize) {
            viewportSize = canvasSize - viewportPos;
        }
        if (Math.abs(viewportSize - canvasSize) < 1) {
            viewportSize = 0;
        }
        const style = params.orientation === 'horizontal'
            ? {
                left: `${viewportPos}px`,
                width: `${viewportSize}px`
            }
            : {
                top: `${viewportPos}px`,
                height: `${viewportSize}px`
            };
        return (0, sprotty_1.html)("div", { "class-sprotty-viewport": viewportSize !== 0, "class-projection-scroll-bar": true, style: style });
    }
    renderProjection(projection, model, params) {
        const vnode = super.renderProjection(projection, model, params);
        (0, sprotty_1.setClass)(vnode, 'glsp-projection', true);
        const style = vnode.data.style;
        if (style.left) {
            style.height = '60%';
        }
        else {
            style.width = '60%';
        }
        return vnode;
    }
};
exports.GLSPProjectionView = GLSPProjectionView;
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], GLSPProjectionView.prototype, "edgeRouterRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IGridManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], GLSPProjectionView.prototype, "gridManager", void 0);
exports.GLSPProjectionView = GLSPProjectionView = __decorate([
    (0, inversify_1.injectable)()
], GLSPProjectionView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/issue-marker-view.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/issue-marker-view.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GIssueMarkerView = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable max-len */
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let GIssueMarkerView = class GIssueMarkerView extends sprotty_1.IssueMarkerView {
    render(marker, _context) {
        const maxSeverity = super.getMaxSeverity(marker);
        const group = ((0, sprotty_1.svg)("g", { "class-sprotty-issue": true },
            (0, sprotty_1.svg)("g", null,
                this.getGlspIssueMarkerBackground(maxSeverity),
                (0, sprotty_1.svg)("path", { d: this.getGlspIssueMarkerPath(maxSeverity) }))));
        (0, sprotty_1.setClass)(group, 'sprotty-' + maxSeverity, true);
        return group;
    }
    getGlspIssueMarkerBackground(severity) {
        switch (severity) {
            case 'warning':
                return (0, sprotty_1.svg)("polygon", { "class-sprotty-issue-background": true, points: '8 2, 15.9 14.9, 0.2 14.9' });
            case 'error':
            case 'info':
                return (0, sprotty_1.svg)("circle", { "class-sprotty-issue-background": true, r: this.radius, cx: this.radius, cy: this.radius });
        }
    }
    get radius() {
        return 8; // var(--theia-icon-size)=16px => 16/2=8
    }
    getGlspIssueMarkerPath(severity) {
        switch (severity) {
            // paths used here are svg versions of codicons, resized to var(--theia-icon-size) 16px
            case 'error': // 'codicon-error'
                return 'm 8.8527788,0.00699568 c 1.8523692,0.115773 3.5889642,1.04195762 4.8624692,2.31546152 1.505048,1.620823 2.31546,3.5889653 2.31546,5.9044268 0,1.852369 -0.694637,3.588965 -1.852367,5.094015 -1.157733,1.389277 -2.778554,2.431235 -4.6309235,2.778554 C 7.6950478,16.446772 5.8426784,16.215226 4.2218552,15.289042 2.6010319,14.362857 1.3275281,12.97358 0.63288942,11.236984 -0.06174907,9.5003878 -0.17752216,7.5322456 0.4013433,5.7956494 0.98020876,3.9432802 2.0221665,2.4382302 3.6429898,1.3962725 5.14804,0.35431486 7.0004094,-0.10877742 8.8527788,0.00699568 Z M 9.4316445,14.941722 c 1.5050505,-0.347319 2.8943275,-1.15773 3.9362845,-2.431234 0.926185,-1.273504 1.50505,-2.778554 1.389277,-4.3993771 0,-1.8523692 -0.69464,-3.7047384 -1.968142,-4.9782422 C 11.631331,1.9751379 10.242054,1.2804995 8.6212324,1.1647264 7.1161824,1.0489533 5.4953592,1.3962725 4.2218552,2.3224572 2.9483511,3.2486418 2.0221665,4.5221456 1.5590742,6.1429686 c -0.4630923,1.50505 -0.4630923,3.1258731 0.2315462,4.6309234 0.6946384,1.50505 1.7365963,2.66278 3.1258734,3.473192 1.3892769,0.810411 3.0101002,1.041958 4.5151507,0.694638 z M 8.042367,7.5322456 10.82092,4.6379187 11.631331,5.4483302 8.8527788,8.3426571 11.631331,11.236984 10.82092,12.047395 8.042367,9.1530686 5.2638128,12.047395 4.4534013,11.236984 7.2319555,8.3426571 4.4534013,5.4483302 5.2638128,4.6379187 Z';
            case 'warning': // 'codicon-warning'
                return 'M 7.5587159,0.61312771 H 8.565869 L 16.050847,14.644601 15.54727,15.491525 H 0.55442396 L 0.05084746,14.644601 Z M 8.0622924,2.0780776 1.5157974,14.347033 H 14.585897 Z M 8.7776,13.202541 V 12.058049 H 7.3469848 v 1.144492 z M 7.3469848,10.913557 V 6.3355883 H 8.7776 v 4.5779687 z';
            case 'info': // 'codicon-info'
                return 'M 8.7624795,0.01729008 A 7.8878137,7.8878137 0 0 1 13.625085,2.3592747 8.1894066,8.1894066 0 0 1 14.158672,13.251418 7.9458123,7.9458123 0 0 1 4.2061071,15.26977 8.1198082,8.1198082 0 0 1 0.58699265,11.209866 8.259005,8.259005 0 0 1 0.32019895,5.7463948 8.1198082,8.1198082 0 0 1 3.533323,1.3500986 7.8878137,7.8878137 0 0 1 8.7624795,0.01729008 Z M 9.3099868,14.921778 A 6.8322386,6.8322386 0 0 0 13.265493,12.520635 7.0410337,7.0410337 0 0 0 12.801504,3.1712556 6.7510406,6.7510406 0 0 0 4.1829077,2.3128758 7.029434,7.029434 0 0 0 4.762894,14.248994 6.7394408,6.7394408 0 0 0 9.3099868,14.921778 Z M 7.3786322,5.7811939 H 8.8285979 V 4.6212213 H 7.3786322 Z M 8.8285979,6.9411665 V 11.581057 H 7.3786322 V 6.9411665 Z';
        }
    }
};
exports.GIssueMarkerView = GIssueMarkerView;
exports.GIssueMarkerView = GIssueMarkerView = __decorate([
    (0, inversify_1.injectable)()
], GIssueMarkerView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/rounded-corner-view.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/rounded-corner-view.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoundedCornerNodeView = void 0;
exports.toClipPathId = toClipPathId;
/********************************************************************************
 * Copyright (c) 2021-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const argument_utils_1 = __webpack_require__(/*! ../utils/argument-utils */ "../node_modules/@eclipse-glsp/client/lib/utils/argument-utils.js");
const rounded_corner_1 = __webpack_require__(/*! ./rounded-corner */ "../node_modules/@eclipse-glsp/client/lib/views/rounded-corner.js");
let RoundedCornerNodeView = class RoundedCornerNodeView extends sprotty_1.RectangularNodeView {
    render(node, context) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        const cornerRadius = argument_utils_1.CornerRadius.from(node);
        if (!cornerRadius) {
            return this.renderWithoutRadius(node, context);
        }
        const wrapper = new rounded_corner_1.RoundedCornerWrapper(node, cornerRadius);
        return ((0, sprotty_1.svg)("g", { "class-node": true },
            (0, sprotty_1.svg)("defs", null,
                (0, sprotty_1.svg)("clipPath", { id: toClipPathId(node) },
                    (0, sprotty_1.svg)("path", { d: this.renderPath(wrapper, context, this.getClipPathInsets() || 0) }))),
            this.renderPathNode(wrapper, context),
            context.renderChildren(node)));
    }
    renderWithoutRadius(node, context) {
        return super.render(node, context);
    }
    getClipPathInsets() {
        return 2;
    }
    renderPathNode(wrapper, context) {
        return ((0, sprotty_1.svg)("path", { d: this.renderPath(wrapper, context, 0), "class-sprotty-node": wrapper.element instanceof sprotty_1.GNode, "class-sprotty-port": wrapper.element instanceof sprotty_1.GPort, "class-mouseover": wrapper.element.hoverFeedback, "class-selected": wrapper.element.selected, ...this.additionalClasses(wrapper.element, context) }));
    }
    additionalClasses(_node, _context) {
        return {};
    }
    renderPath(wrapper, _context, inset) {
        // Calculate length of straight line segments
        const topLineLength = Math.max(0, wrapper.size.width - wrapper.cornerRadius.topLeft - wrapper.cornerRadius.topRight);
        const rightLineLength = Math.max(0, wrapper.size.height - wrapper.cornerRadius.topRight - wrapper.cornerRadius.bottomRight);
        const bottomLineLength = Math.max(0, wrapper.size.width - wrapper.cornerRadius.bottomLeft - wrapper.cornerRadius.bottomRight);
        const path = `M${0 + inset},${0 + wrapper.topLeftCorner.radiusY}` +
            `q${0},${-(wrapper.topLeftCorner.radiusY - inset)} ${wrapper.topLeftCorner.radiusX - inset},${-(wrapper.topLeftCorner.radiusY - inset)}` +
            `h${topLineLength}` +
            `q${wrapper.topRightCorner.radiusX - inset},0 ${wrapper.topRightCorner.radiusX - inset},${wrapper.topRightCorner.radiusY - inset}` +
            `v${rightLineLength}` +
            `q0,${wrapper.bottomRightCorner.radiusY - inset} ${-(wrapper.bottomRightCorner.radiusX - inset)},${wrapper.bottomRightCorner.radiusY - inset}` +
            `h${-bottomLineLength}` +
            `q${-(wrapper.bottomLeftCorner.radiusX - inset)},0 ${-(wrapper.bottomLeftCorner.radiusX - inset)},${-(wrapper.bottomLeftCorner.radiusY - inset)}` +
            'z ';
        return path;
    }
};
exports.RoundedCornerNodeView = RoundedCornerNodeView;
exports.RoundedCornerNodeView = RoundedCornerNodeView = __decorate([
    (0, inversify_1.injectable)()
], RoundedCornerNodeView);
function toClipPathId(node) {
    return `${node.id}_clip_path`;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/rounded-corner.js":
/*!************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/rounded-corner.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoundedCornerWrapper = void 0;
exports.scaledRadius = scaledRadius;
class RoundedCornerWrapper {
    constructor(element, cornerRadius) {
        this.element = element;
        this.cornerRadius = cornerRadius;
    }
    get size() {
        return this.element.size;
    }
    get topLeftCorner() {
        if (!this._topLeftCorner) {
            this._topLeftCorner = {
                radiusX: scaledRadius(this.cornerRadius.topLeft, this.element.size.width / 2),
                radiusY: scaledRadius(this.cornerRadius.topLeft, this.element.size.height / 2)
            };
        }
        return this._topLeftCorner;
    }
    get topRightCorner() {
        if (!this._topRightCorner) {
            this._topRightCorner = {
                radiusX: scaledRadius(this.cornerRadius.topRight, this.element.size.width / 2),
                radiusY: scaledRadius(this.cornerRadius.topRight, this.element.size.height / 2)
            };
        }
        return this._topRightCorner;
    }
    get bottomRightCorner() {
        if (!this._bottomRightCorner) {
            this._bottomRightCorner = {
                radiusX: scaledRadius(this.cornerRadius.bottomRight, this.element.size.width / 2),
                radiusY: scaledRadius(this.cornerRadius.bottomRight, this.element.size.height / 2)
            };
        }
        return this._bottomRightCorner;
    }
    get bottomLeftCorner() {
        if (!this._bottomLeftCorner) {
            this._bottomLeftCorner = {
                radiusX: scaledRadius(this.cornerRadius.bottomLeft, this.element.size.width / 2),
                radiusY: scaledRadius(this.cornerRadius.bottomLeft, this.element.size.height / 2)
            };
        }
        return this._bottomLeftCorner;
    }
}
exports.RoundedCornerWrapper = RoundedCornerWrapper;
/*
 * Scales the radius if necessary. (Percentile down scaling if the radius is bigger then the maximal allowed length)
 */
function scaledRadius(radius, maximalLength) {
    if (radius <= maximalLength) {
        return radius;
    }
    else {
        return radius * (maximalLength / radius);
    }
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/views/routing-point-handle-view.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/views/routing-point-handle-view.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GRoutingHandleView = void 0;
/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = __webpack_require__(/*! @eclipse-glsp/sprotty */ "../node_modules/@eclipse-glsp/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ../features/reconnect/model */ "../node_modules/@eclipse-glsp/client/lib/features/reconnect/model.js");
let GRoutingHandleView = class GRoutingHandleView extends sprotty_1.SRoutingHandleView {
    render(handle, context, args) {
        // We have our own handle view for the reconnect handles
        if (!(0, model_1.isReconnectHandle)(handle) && (handle.kind === 'source' || handle.kind === 'target')) {
            return undefined;
        }
        return super.render(handle, context, args);
    }
};
exports.GRoutingHandleView = GRoutingHandleView;
exports.GRoutingHandleView = GRoutingHandleView = __decorate([
    (0, inversify_1.injectable)()
], GRoutingHandleView);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompoundOperation = exports.Operation = exports.RejectAction = exports.ResponseAction = exports.RequestAction = exports.ActionMessage = exports.Action = void 0;
/********************************************************************************
 * Copyright (c) 2021-2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
var Action;
(function (Action) {
    function is(object) {
        return type_util_1.AnyObject.is(object) && (0, type_util_1.hasStringProp)(object, 'kind');
    }
    Action.is = is;
    /**
     * Typeguard function to check wether the given object is an {@link Action} with the given `kind`.
     * @param object The object to check.
     * @param kind  The expected action kind.
     * @returns A type literal indicating wether the given object is an action with the given kind.
     */
    function hasKind(object, kind) {
        return Action.is(object) && object.kind === kind;
    }
    Action.hasKind = hasKind;
})(Action || (exports.Action = Action = {}));
var ActionMessage;
(function (ActionMessage) {
    function is(object, typeguard) {
        const actionGuard = typeguard !== null && typeguard !== void 0 ? typeguard : Action.is;
        return type_util_1.AnyObject.is(object) && (0, type_util_1.hasStringProp)(object, 'clientId') && 'action' in object && actionGuard(object.action);
    }
    ActionMessage.is = is;
})(ActionMessage || (exports.ActionMessage = ActionMessage = {}));
var RequestAction;
(function (RequestAction) {
    function is(object) {
        return Action.is(object) && (0, type_util_1.hasStringProp)(object, 'requestId');
    }
    RequestAction.is = is;
    /**
     * Typeguard function to check wether the given object is an {@link RequestAction} with the given `kind`.
     * @param object The object to check.
     * @param kind  The expected action kind.
     * @returns A type literal indicating wether the given object is a request action with the given kind.
     */
    function hasKind(object, kind) {
        return RequestAction.is(object) && object.kind === kind;
    }
    RequestAction.hasKind = hasKind;
    function generateRequestId() {
        return sprotty.generateRequestId();
    }
    RequestAction.generateRequestId = generateRequestId;
})(RequestAction || (exports.RequestAction = RequestAction = {}));
var ResponseAction;
(function (ResponseAction) {
    function is(object) {
        return Action.is(object) && (0, type_util_1.hasStringProp)(object, 'responseId');
    }
    ResponseAction.is = is;
    /**
     * Typeguard function to check wether the given object is an {@link ResponseAction} with a non-empty response id.
     * @param object The object to check.
     * @returns A type literal indicating wether the given object is a response action with a non-empty response id.
     */
    function hasValidResponseId(object) {
        return ResponseAction.is(object) && object.responseId !== '';
    }
    ResponseAction.hasValidResponseId = hasValidResponseId;
})(ResponseAction || (exports.ResponseAction = ResponseAction = {}));
var RejectAction;
(function (RejectAction) {
    RejectAction.KIND = 'rejectRequest';
    function is(object) {
        return Action.hasKind(object, RejectAction.KIND) && (0, type_util_1.hasStringProp)(object, 'message');
    }
    RejectAction.is = is;
    function create(message, options = {}) {
        return {
            kind: RejectAction.KIND,
            responseId: '',
            message,
            ...options
        };
    }
    RejectAction.create = create;
})(RejectAction || (exports.RejectAction = RejectAction = {}));
var Operation;
(function (Operation) {
    function is(object) {
        return Action.is(object) && 'isOperation' in object && object.isOperation === true;
    }
    Operation.is = is;
    /**
     * Typeguard function to check wether the given object is an {@link Operation} with the given `kind`.
     * @param object The object to check.
     * @param kind  The expected operation kind.
     * @returns A type literal indicating wether the given object is an operation with the given kind.
     */
    function hasKind(object, kind) {
        return Operation.is(object) && object.kind === kind;
    }
    Operation.hasKind = hasKind;
})(Operation || (exports.Operation = Operation = {}));
var CompoundOperation;
(function (CompoundOperation) {
    CompoundOperation.KIND = 'compound';
    function is(object) {
        return Operation.hasKind(object, CompoundOperation.KIND) && (0, type_util_1.hasArrayProp)(object, 'operationList');
    }
    CompoundOperation.is = is;
    function create(operationList, options = {}) {
        return {
            kind: CompoundOperation.KIND,
            isOperation: true,
            operationList,
            ...options
        };
    }
    CompoundOperation.create = create;
})(CompoundOperation || (exports.CompoundOperation = CompoundOperation = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/client-notification.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/client-notification.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EndProgressAction = exports.UpdateProgressAction = exports.StartProgressAction = exports.MessageAction = exports.StatusAction = void 0;
/********************************************************************************
 * Copyright (c) 2021-2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var StatusAction;
(function (StatusAction) {
    StatusAction.KIND = 'status';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, StatusAction.KIND) && (0, type_util_1.hasStringProp)(object, 'severity') && (0, type_util_1.hasStringProp)(object, 'message');
    }
    StatusAction.is = is;
    function create(message, options = {}) {
        return {
            kind: StatusAction.KIND,
            severity: 'INFO',
            message,
            ...options
        };
    }
    StatusAction.create = create;
})(StatusAction || (exports.StatusAction = StatusAction = {}));
var MessageAction;
(function (MessageAction) {
    MessageAction.KIND = 'message';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, MessageAction.KIND) && (0, type_util_1.hasStringProp)(object, 'message') && (0, type_util_1.hasStringProp)(object, 'severity');
    }
    MessageAction.is = is;
    function create(message, options = {}) {
        return {
            kind: MessageAction.KIND,
            message,
            severity: 'INFO',
            ...options
        };
    }
    MessageAction.create = create;
})(MessageAction || (exports.MessageAction = MessageAction = {}));
var StartProgressAction;
(function (StartProgressAction) {
    StartProgressAction.KIND = 'startProgress';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, StartProgressAction.KIND) && (0, type_util_1.hasStringProp)(object, 'progressId') && (0, type_util_1.hasStringProp)(object, 'title');
    }
    StartProgressAction.is = is;
    function create(options) {
        return {
            kind: StartProgressAction.KIND,
            ...options
        };
    }
    StartProgressAction.create = create;
})(StartProgressAction || (exports.StartProgressAction = StartProgressAction = {}));
var UpdateProgressAction;
(function (UpdateProgressAction) {
    UpdateProgressAction.KIND = 'updateProgress';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, UpdateProgressAction.KIND) && (0, type_util_1.hasStringProp)(object, 'progressId');
    }
    UpdateProgressAction.is = is;
    function create(progressId, options = {}) {
        return {
            kind: UpdateProgressAction.KIND,
            progressId,
            ...options
        };
    }
    UpdateProgressAction.create = create;
})(UpdateProgressAction || (exports.UpdateProgressAction = UpdateProgressAction = {}));
var EndProgressAction;
(function (EndProgressAction) {
    EndProgressAction.KIND = 'endProgress';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, EndProgressAction.KIND) && (0, type_util_1.hasStringProp)(object, 'progressId');
    }
    EndProgressAction.is = is;
    function create(progressId, message) {
        return {
            kind: EndProgressAction.KIND,
            progressId,
            message
        };
    }
    EndProgressAction.create = create;
})(EndProgressAction || (exports.EndProgressAction = EndProgressAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/clipboard.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/clipboard.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PasteOperation = exports.CutOperation = exports.SetClipboardDataAction = exports.RequestClipboardDataAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var RequestClipboardDataAction;
(function (RequestClipboardDataAction) {
    RequestClipboardDataAction.KIND = 'requestClipboardData';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestClipboardDataAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'editorContext');
    }
    RequestClipboardDataAction.is = is;
    function create(editorContext, options = {}) {
        return {
            kind: RequestClipboardDataAction.KIND,
            requestId: '',
            editorContext,
            ...options
        };
    }
    RequestClipboardDataAction.create = create;
})(RequestClipboardDataAction || (exports.RequestClipboardDataAction = RequestClipboardDataAction = {}));
var SetClipboardDataAction;
(function (SetClipboardDataAction) {
    SetClipboardDataAction.KIND = 'setClipboardData';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetClipboardDataAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'clipboardData');
    }
    SetClipboardDataAction.is = is;
    function create(clipboardData, options = {}) {
        return {
            kind: SetClipboardDataAction.KIND,
            responseId: '',
            clipboardData,
            ...options
        };
    }
    SetClipboardDataAction.create = create;
})(SetClipboardDataAction || (exports.SetClipboardDataAction = SetClipboardDataAction = {}));
var CutOperation;
(function (CutOperation) {
    CutOperation.KIND = 'cut';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, CutOperation.KIND) && (0, type_util_1.hasObjectProp)(object, 'editorContext');
    }
    CutOperation.is = is;
    function create(editorContext, options = {}) {
        return {
            kind: CutOperation.KIND,
            isOperation: true,
            editorContext,
            ...options
        };
    }
    CutOperation.create = create;
})(CutOperation || (exports.CutOperation = CutOperation = {}));
var PasteOperation;
(function (PasteOperation) {
    PasteOperation.KIND = 'paste';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, PasteOperation.KIND) && (0, type_util_1.hasObjectProp)(object, 'clipboardData') && (0, type_util_1.hasObjectProp)(object, 'editorContext');
    }
    PasteOperation.is = is;
    function create(options) {
        return {
            kind: PasteOperation.KIND,
            isOperation: true,
            ...options
        };
    }
    PasteOperation.create = create;
})(PasteOperation || (exports.PasteOperation = PasteOperation = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/contexts.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/contexts.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetContextActions = exports.RequestContextActions = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var RequestContextActions;
(function (RequestContextActions) {
    RequestContextActions.KIND = 'requestContextActions';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestContextActions.KIND) && (0, type_util_1.hasStringProp)(object, 'contextId') && (0, type_util_1.hasObjectProp)(object, 'editorContext');
    }
    RequestContextActions.is = is;
    function create(options) {
        return {
            kind: RequestContextActions.KIND,
            requestId: '',
            ...options
        };
    }
    RequestContextActions.create = create;
})(RequestContextActions || (exports.RequestContextActions = RequestContextActions = {}));
var SetContextActions;
(function (SetContextActions) {
    SetContextActions.KIND = 'setContextActions';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetContextActions.KIND) && (0, type_util_1.hasArrayProp)(object, 'actions');
    }
    SetContextActions.is = is;
    function create(actions, options = {}) {
        return {
            kind: SetContextActions.KIND,
            responseId: '',
            actions,
            ...options
        };
    }
    SetContextActions.create = create;
})(SetContextActions || (exports.SetContextActions = SetContextActions = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/edge-modification.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/edge-modification.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChangeRoutingPointsOperation = exports.ReconnectEdgeOperation = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var ReconnectEdgeOperation;
(function (ReconnectEdgeOperation) {
    ReconnectEdgeOperation.KIND = 'reconnectEdge';
    function is(object) {
        return (base_protocol_1.Operation.hasKind(object, ReconnectEdgeOperation.KIND) &&
            (0, type_util_1.hasStringProp)(object, 'edgeElementId') &&
            (0, type_util_1.hasStringProp)(object, 'sourceElementId') &&
            (0, type_util_1.hasStringProp)(object, 'targetElementId'));
    }
    ReconnectEdgeOperation.is = is;
    function create(options) {
        return {
            kind: ReconnectEdgeOperation.KIND,
            isOperation: true,
            ...options
        };
    }
    ReconnectEdgeOperation.create = create;
})(ReconnectEdgeOperation || (exports.ReconnectEdgeOperation = ReconnectEdgeOperation = {}));
var ChangeRoutingPointsOperation;
(function (ChangeRoutingPointsOperation) {
    ChangeRoutingPointsOperation.KIND = 'changeRoutingPoints';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, ChangeRoutingPointsOperation.KIND) && (0, type_util_1.hasArrayProp)(object, 'newRoutingPoints');
    }
    ChangeRoutingPointsOperation.is = is;
    function create(newRoutingPoints, options = {}) {
        return {
            kind: ChangeRoutingPointsOperation.KIND,
            isOperation: true,
            newRoutingPoints,
            ...options
        };
    }
    ChangeRoutingPointsOperation.create = create;
})(ChangeRoutingPointsOperation || (exports.ChangeRoutingPointsOperation = ChangeRoutingPointsOperation = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-creation.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-creation.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteElementOperation = exports.CreateEdgeOperation = exports.CreateNodeOperation = exports.CreateOperation = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var CreateOperation;
(function (CreateOperation) {
    function is(object) {
        return base_protocol_1.Operation.is(object) && (0, type_util_1.hasStringProp)(object, 'elementTypeId');
    }
    CreateOperation.is = is;
    /**
     * Typeguard function to check wether the given object is a {@link CreateOperation} with the given `kind`.
     * @param object The object to check.
     * @param kind  The expected operation kind.
     * @returns A type literal indicating wether the given object is a create operation with the given kind.
     */
    function hasKind(object, kind) {
        return CreateOperation.is(object) && object.kind === kind;
    }
    CreateOperation.hasKind = hasKind;
})(CreateOperation || (exports.CreateOperation = CreateOperation = {}));
var CreateNodeOperation;
(function (CreateNodeOperation) {
    CreateNodeOperation.KIND = 'createNode';
    function is(object) {
        return CreateOperation.hasKind(object, CreateNodeOperation.KIND);
    }
    CreateNodeOperation.is = is;
    function create(elementTypeId, options = {}) {
        return {
            kind: CreateNodeOperation.KIND,
            isOperation: true,
            elementTypeId,
            ...options
        };
    }
    CreateNodeOperation.create = create;
})(CreateNodeOperation || (exports.CreateNodeOperation = CreateNodeOperation = {}));
var CreateEdgeOperation;
(function (CreateEdgeOperation) {
    CreateEdgeOperation.KIND = 'createEdge';
    function is(object) {
        return (CreateOperation.hasKind(object, CreateEdgeOperation.KIND) && (0, type_util_1.hasStringProp)(object, 'sourceElementId') && (0, type_util_1.hasStringProp)(object, 'targetElementId'));
    }
    CreateEdgeOperation.is = is;
    function create(options) {
        return {
            kind: CreateEdgeOperation.KIND,
            isOperation: true,
            ...options
        };
    }
    CreateEdgeOperation.create = create;
})(CreateEdgeOperation || (exports.CreateEdgeOperation = CreateEdgeOperation = {}));
var DeleteElementOperation;
(function (DeleteElementOperation) {
    DeleteElementOperation.KIND = 'deleteElement';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, DeleteElementOperation.KIND) && (0, type_util_1.hasArrayProp)(object, 'elementIds');
    }
    DeleteElementOperation.is = is;
    function create(elementIds, options = {}) {
        return {
            kind: DeleteElementOperation.KIND,
            isOperation: true,
            elementIds,
            ...options
        };
    }
    DeleteElementOperation.create = create;
})(DeleteElementOperation || (exports.DeleteElementOperation = DeleteElementOperation = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-hover.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-hover.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetPopupModelAction = exports.RequestPopupModelAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var RequestPopupModelAction;
(function (RequestPopupModelAction) {
    RequestPopupModelAction.KIND = 'requestPopupModel';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestPopupModelAction.KIND) && (0, type_util_1.hasStringProp)(object, 'elementId') && (0, type_util_1.hasObjectProp)(object, 'bounds');
    }
    RequestPopupModelAction.is = is;
    function create(options) {
        return {
            kind: RequestPopupModelAction.KIND,
            requestId: '',
            ...options
        };
    }
    RequestPopupModelAction.create = create;
})(RequestPopupModelAction || (exports.RequestPopupModelAction = RequestPopupModelAction = {}));
var SetPopupModelAction;
(function (SetPopupModelAction) {
    SetPopupModelAction.KIND = 'setPopupModel';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetPopupModelAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'newRoot');
    }
    SetPopupModelAction.is = is;
    function create(newRoot, options = {}) {
        return {
            kind: SetPopupModelAction.KIND,
            responseId: '',
            newRoot,
            ...options
        };
    }
    SetPopupModelAction.create = create;
})(SetPopupModelAction || (exports.SetPopupModelAction = SetPopupModelAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-navigation.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-navigation.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NavigateToExternalTargetAction = exports.SetResolvedNavigationTargetAction = exports.ResolveNavigationTargetAction = exports.NavigateToTargetAction = exports.SetNavigationTargetsAction = exports.RequestNavigationTargetsAction = exports.NavigationTarget = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var NavigationTarget;
(function (NavigationTarget) {
    function is(object) {
        return type_util_1.AnyObject.is(object) && (0, type_util_1.hasStringProp)(object, 'uri');
    }
    NavigationTarget.is = is;
    /**
     *  Generic key to store element ids as additional argument
     */
    NavigationTarget.ELEMENT_IDS = 'elementIds';
    /**
     * The separator that is used to store he values for the {@link ELEMENT_IDS} as a single string.
     */
    NavigationTarget.ELEMENT_IDS_SEPARATOR = '&';
    /**
     *  Generic key ot store the line property of a {@link TextPosition} as additional argument.
     */
    NavigationTarget.TEXT_LINE = 'line';
    /**
     *  Generic key ot store the character property of a {@link TextPosition} as additional argument.
     */
    NavigationTarget.TEXT_COLUMN = 'column';
    /**
     * Utility function to check wether the given {@link NavigationTarget} has additional arguments defined.
     * @param target The navigation target to check.
     * @returns `true` if the navigation target has a non-empty `args` property, `false`
     */
    function hasArguments(target) {
        return target.args !== undefined && Object.keys(target.args).length > 0;
    }
    NavigationTarget.hasArguments = hasArguments;
    /**
     * Adds a new key-value pair to the additional arguments of the given {@link NavigationTarget}.
     * @param target The navigation target.
     * @param key The key of the new argument.
     * @param value The (primitive) value of the new argument.
     */
    function addArgument(target, key, value) {
        if (!target.args) {
            target.args = {};
        }
        target.args[key] = value;
    }
    NavigationTarget.addArgument = addArgument;
    /**
     * Retrieves the element ids that have been stored with the generic {@link ELEMENT_IDS} key from the args of the
     * given target.
     * @param target The navigation target.
     * @returns An array with the parsed element ids. The array is empty if no {@link ELEMENT_IDS} key is present in the args
     * of the navigation target.
     */
    function getElementIds(target) {
        var _a;
        if (!((_a = target === null || target === void 0 ? void 0 : target.args) === null || _a === void 0 ? void 0 : _a[NavigationTarget.ELEMENT_IDS])) {
            return [];
        }
        const elementIdsValue = target.args[NavigationTarget.ELEMENT_IDS].toString();
        return elementIdsValue.split(NavigationTarget.ELEMENT_IDS_SEPARATOR);
    }
    NavigationTarget.getElementIds = getElementIds;
    /**
     * Stores the given element ids in the given {@link NavigationTarget} as additional arguments using the generic {@link ELEMENT_IDS} key.
     * @param target The navigation target.
     * @param elementIds The element ids that should be stored.
     * @returns the value of the {@link ELEMENT_IDS} key after storing the given element ids.
     */
    function setElementIds(target, ...elementIds) {
        if (target.args === undefined) {
            target.args = {};
        }
        return (target.args[NavigationTarget.ELEMENT_IDS] = elementIds.join(NavigationTarget.ELEMENT_IDS_SEPARATOR));
    }
    NavigationTarget.setElementIds = setElementIds;
    /**
     * Stores the given {@link TextPosition} in the given {@link NavigationTarget} as additional arguments using
     * the generic {@link TEXT_LINE} & {@link TEXT_COLUMN} keys.
     * @param target The navigation target.
     * @param position The text position that should be stored.
     */
    function setTextPosition(target, position) {
        if (position) {
            if (target.args === undefined) {
                target.args = {};
            }
            target.args[NavigationTarget.TEXT_LINE] = position.line;
            target.args[NavigationTarget.TEXT_COLUMN] = position.character;
        }
    }
    NavigationTarget.setTextPosition = setTextPosition;
    /**
     * Retrieves the {@link TextPosition} that have been stored with the generic {@link TEXT_LINE} & {@link TEXT_COLUMN} keys
     * from the args of the given target.
     * @param target The navigation target.
     * @returns The parsed text position or `undefined` if one of the generic text keys is not present in the args
     * of the navigation target.
     */
    function getTextPosition(target) {
        if (!target.args || !target.args[NavigationTarget.TEXT_LINE] || !target.args[NavigationTarget.TEXT_COLUMN]) {
            return undefined;
        }
        return {
            line: Number(target.args[NavigationTarget.TEXT_LINE]),
            character: Number(target.args[NavigationTarget.TEXT_COLUMN])
        };
    }
    NavigationTarget.getTextPosition = getTextPosition;
})(NavigationTarget || (exports.NavigationTarget = NavigationTarget = {}));
var RequestNavigationTargetsAction;
(function (RequestNavigationTargetsAction) {
    RequestNavigationTargetsAction.KIND = 'requestNavigationTargets';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestNavigationTargetsAction.KIND) && (0, type_util_1.hasStringProp)(object, 'targetTypeId') && (0, type_util_1.hasObjectProp)(object, 'editorContext');
    }
    RequestNavigationTargetsAction.is = is;
    function create(options) {
        return {
            kind: RequestNavigationTargetsAction.KIND,
            requestId: '',
            ...options
        };
    }
    RequestNavigationTargetsAction.create = create;
})(RequestNavigationTargetsAction || (exports.RequestNavigationTargetsAction = RequestNavigationTargetsAction = {}));
var SetNavigationTargetsAction;
(function (SetNavigationTargetsAction) {
    SetNavigationTargetsAction.KIND = 'setNavigationTargets';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetNavigationTargetsAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'targets');
    }
    SetNavigationTargetsAction.is = is;
    function create(targets, options = {}) {
        return {
            kind: SetNavigationTargetsAction.KIND,
            responseId: '',
            targets,
            ...options
        };
    }
    SetNavigationTargetsAction.create = create;
})(SetNavigationTargetsAction || (exports.SetNavigationTargetsAction = SetNavigationTargetsAction = {}));
var NavigateToTargetAction;
(function (NavigateToTargetAction) {
    NavigateToTargetAction.KIND = 'navigateToTarget';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, NavigateToTargetAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'target');
    }
    NavigateToTargetAction.is = is;
    function create(target) {
        return {
            kind: NavigateToTargetAction.KIND,
            target
        };
    }
    NavigateToTargetAction.create = create;
})(NavigateToTargetAction || (exports.NavigateToTargetAction = NavigateToTargetAction = {}));
var ResolveNavigationTargetAction;
(function (ResolveNavigationTargetAction) {
    ResolveNavigationTargetAction.KIND = 'resolveNavigationTarget';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, ResolveNavigationTargetAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'navigationTarget');
    }
    ResolveNavigationTargetAction.is = is;
    function create(navigationTarget, options = {}) {
        return {
            kind: ResolveNavigationTargetAction.KIND,
            requestId: '',
            navigationTarget,
            ...options
        };
    }
    ResolveNavigationTargetAction.create = create;
})(ResolveNavigationTargetAction || (exports.ResolveNavigationTargetAction = ResolveNavigationTargetAction = {}));
var SetResolvedNavigationTargetAction;
(function (SetResolvedNavigationTargetAction) {
    SetResolvedNavigationTargetAction.KIND = 'setResolvedNavigationTarget';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetResolvedNavigationTargetAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'elementIds');
    }
    SetResolvedNavigationTargetAction.is = is;
    function create(elementIds, options = {}) {
        return {
            kind: SetResolvedNavigationTargetAction.KIND,
            responseId: '',
            elementIds,
            ...options
        };
    }
    SetResolvedNavigationTargetAction.create = create;
})(SetResolvedNavigationTargetAction || (exports.SetResolvedNavigationTargetAction = SetResolvedNavigationTargetAction = {}));
var NavigateToExternalTargetAction;
(function (NavigateToExternalTargetAction) {
    NavigateToExternalTargetAction.KIND = 'navigateToExternalTarget';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, NavigateToExternalTargetAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'target');
    }
    NavigateToExternalTargetAction.is = is;
    function create(target) {
        return {
            kind: NavigateToExternalTargetAction.KIND,
            target
        };
    }
    NavigateToExternalTargetAction.create = create;
})(NavigateToExternalTargetAction || (exports.NavigateToExternalTargetAction = NavigateToExternalTargetAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-selection.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-selection.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectAllAction = exports.SelectAction = void 0;
const array_util_1 = __webpack_require__(/*! ../utils/array-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js");
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var SelectAction;
(function (SelectAction) {
    SelectAction.KIND = 'elementSelected';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SelectAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'selectedElementsIDs') && (0, type_util_1.hasArrayProp)(object, 'deselectedElementsIDs');
    }
    SelectAction.is = is;
    function create(options = {}) {
        var _a, _b;
        const deselectedElementsIDs = (_a = options.deselectedElementsIDs) !== null && _a !== void 0 ? _a : [];
        return {
            kind: SelectAction.KIND,
            selectedElementsIDs: (_b = options.selectedElementsIDs) !== null && _b !== void 0 ? _b : [],
            deselectedElementsIDs: (0, array_util_1.isStringArray)(deselectedElementsIDs, true) ? deselectedElementsIDs : [],
            deselectAll: typeof deselectedElementsIDs === 'boolean' ? deselectedElementsIDs : false
        };
    }
    SelectAction.create = create;
    /**
     * Creates a new {@link SelectAction} to add the given elements to the existing selection.
     * @param selectedElementsIDs The identifiers of the elements to add to the selection.
     * @returns the corresponding {@link SelectAction}
     */
    function addSelection(selectedElementsIDs) {
        return create({ selectedElementsIDs });
    }
    SelectAction.addSelection = addSelection;
    /**
     * Creates a new {@link SelectAction}
     * to remove the given elements from the existing selection.
     * @param deselectedElementsIDs The identifiers of the elements to remove from the selection.
     * @return the corresponding {@link SelectAction}
     */
    function removeSelection(deselectedElementsIDs) {
        return create({ deselectedElementsIDs });
    }
    SelectAction.removeSelection = removeSelection;
    /**
     * Creates a new {@link SelectAction}
     * to set the selection to the given elements.
     * This replaces the current selection with the given elements.
     * @param selectedElementsIDs The identifiers of the elements to select.
     * @returns the corresponding {@link SelectAction}
     */
    function setSelection(selectedElementsIDs) {
        return create({ selectedElementsIDs, deselectedElementsIDs: true });
    }
    SelectAction.setSelection = setSelection;
})(SelectAction || (exports.SelectAction = SelectAction = {}));
var SelectAllAction;
(function (SelectAllAction) {
    SelectAllAction.KIND = 'allSelected';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SelectAllAction.KIND) && (0, type_util_1.hasBooleanProp)(object, 'select');
    }
    SelectAllAction.is = is;
    function create(select = true) {
        return {
            kind: SelectAllAction.KIND,
            select
        };
    }
    SelectAllAction.create = create;
})(SelectAllAction || (exports.SelectAllAction = SelectAllAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-text-editing.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-text-editing.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidationStatus = exports.ApplyLabelEditOperation = exports.SetEditValidationResultAction = exports.RequestEditValidationAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var RequestEditValidationAction;
(function (RequestEditValidationAction) {
    RequestEditValidationAction.KIND = 'requestEditValidation';
    function is(object) {
        return (base_protocol_1.RequestAction.hasKind(object, RequestEditValidationAction.KIND) &&
            (0, type_util_1.hasStringProp)(object, 'contextId') &&
            (0, type_util_1.hasStringProp)(object, 'modelElementId') &&
            (0, type_util_1.hasStringProp)(object, 'text'));
    }
    RequestEditValidationAction.is = is;
    function create(options) {
        return {
            kind: RequestEditValidationAction.KIND,
            requestId: '',
            ...options
        };
    }
    RequestEditValidationAction.create = create;
})(RequestEditValidationAction || (exports.RequestEditValidationAction = RequestEditValidationAction = {}));
var SetEditValidationResultAction;
(function (SetEditValidationResultAction) {
    SetEditValidationResultAction.KIND = 'setEditValidationResult';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetEditValidationResultAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'status');
    }
    SetEditValidationResultAction.is = is;
    function create(status, options = {}) {
        return {
            kind: SetEditValidationResultAction.KIND,
            responseId: '',
            status,
            ...options
        };
    }
    SetEditValidationResultAction.create = create;
})(SetEditValidationResultAction || (exports.SetEditValidationResultAction = SetEditValidationResultAction = {}));
var ApplyLabelEditOperation;
(function (ApplyLabelEditOperation) {
    ApplyLabelEditOperation.KIND = 'applyLabelEdit';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, ApplyLabelEditOperation.KIND) && (0, type_util_1.hasStringProp)(object, 'labelId') && (0, type_util_1.hasStringProp)(object, 'text');
    }
    ApplyLabelEditOperation.is = is;
    function create(options) {
        return {
            kind: ApplyLabelEditOperation.KIND,
            isOperation: true,
            ...options
        };
    }
    ApplyLabelEditOperation.create = create;
})(ApplyLabelEditOperation || (exports.ApplyLabelEditOperation = ApplyLabelEditOperation = {}));
var ValidationStatus;
(function (ValidationStatus) {
    /**
     * The default {@link ValidationStatus} severity levels used in GLSP.
     */
    let Severity;
    (function (Severity) {
        Severity[Severity["FATAL"] = 0] = "FATAL";
        Severity[Severity["ERROR"] = 1] = "ERROR";
        Severity[Severity["WARNING"] = 2] = "WARNING";
        Severity[Severity["INFO"] = 3] = "INFO";
        Severity[Severity["OK"] = 4] = "OK";
        Severity[Severity["NONE"] = 5] = "NONE";
    })(Severity = ValidationStatus.Severity || (ValidationStatus.Severity = {}));
    /**
     * An empty {@link ValidationStatus}.
     */
    ValidationStatus.NONE = {
        severity: Severity.NONE,
        message: '',
        error: { code: -1, message: '', data: {} }
    };
    /**
     * Utility function to check wether the given {@link ValidationStatus} has
     * a severity that is considered to be OK.
     * @param validationStatus The validation status to check.
     * @returns `true` if the given status has a non critical severity, `false` otherwise.
     */
    function isOk(validationStatus) {
        return (validationStatus.severity === Severity.OK ||
            validationStatus.severity === Severity.INFO ||
            validationStatus.severity === Severity.NONE);
    }
    ValidationStatus.isOk = isOk;
    /**
     * Utility function to check wether the given {@link ValidationStatus} has
     * a `warning` severity.
     * @param validationStatus The validation status to check.
     * @returns `true` if the given status has a `warning` severity, `false` otherwise.
     */
    function isWarning(validationStatus) {
        return validationStatus.severity === Severity.WARNING;
    }
    ValidationStatus.isWarning = isWarning;
    /**
     * Utility function to check wether the given {@link ValidationStatus} has
     * an `error` or `fatal` severity.
     * @param validationStatus The validation status to check.
     * @returns `true` if the given status has a `error` or `fatal` severity, `false` otherwise.
     */
    function isError(validationStatus) {
        return validationStatus.severity === Severity.ERROR || validationStatus.severity === Severity.FATAL;
    }
    ValidationStatus.isError = isError;
})(ValidationStatus || (exports.ValidationStatus = ValidationStatus = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-type-hints.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-type-hints.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckEdgeResultAction = exports.RequestCheckEdgeAction = exports.SetTypeHintsAction = exports.RequestTypeHintsAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var RequestTypeHintsAction;
(function (RequestTypeHintsAction) {
    RequestTypeHintsAction.KIND = 'requestTypeHints';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestTypeHintsAction.KIND);
    }
    RequestTypeHintsAction.is = is;
    function create(options = {}) {
        return {
            kind: RequestTypeHintsAction.KIND,
            requestId: '',
            ...options
        };
    }
    RequestTypeHintsAction.create = create;
})(RequestTypeHintsAction || (exports.RequestTypeHintsAction = RequestTypeHintsAction = {}));
var SetTypeHintsAction;
(function (SetTypeHintsAction) {
    SetTypeHintsAction.KIND = 'setTypeHints';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetTypeHintsAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'shapeHints') && (0, type_util_1.hasArrayProp)(object, 'edgeHints');
    }
    SetTypeHintsAction.is = is;
    function create(options) {
        return {
            kind: SetTypeHintsAction.KIND,
            responseId: '',
            ...options
        };
    }
    SetTypeHintsAction.create = create;
})(SetTypeHintsAction || (exports.SetTypeHintsAction = SetTypeHintsAction = {}));
var RequestCheckEdgeAction;
(function (RequestCheckEdgeAction) {
    RequestCheckEdgeAction.KIND = 'requestCheckEdge';
    function is(object) {
        return (base_protocol_1.Action.hasKind(object, RequestCheckEdgeAction.KIND) &&
            (0, type_util_1.hasStringProp)(object, 'edgeType') &&
            (0, type_util_1.hasStringProp)(object, 'sourceElementId') &&
            (0, type_util_1.hasStringProp)(object, 'targetElementId', true));
    }
    RequestCheckEdgeAction.is = is;
    function create(options) {
        var _a;
        return {
            kind: RequestCheckEdgeAction.KIND,
            edgeType: options.edgeType,
            sourceElementId: getElementTypeId(options.sourceElement),
            targetElementId: options.targetElement ? getElementTypeId(options.targetElement) : undefined,
            requestId: (_a = options.requestId) !== null && _a !== void 0 ? _a : ''
        };
    }
    RequestCheckEdgeAction.create = create;
})(RequestCheckEdgeAction || (exports.RequestCheckEdgeAction = RequestCheckEdgeAction = {}));
function getElementTypeId(element) {
    if (typeof element === 'string') {
        return element;
    }
    return element.id;
}
var CheckEdgeResultAction;
(function (CheckEdgeResultAction) {
    CheckEdgeResultAction.KIND = 'checkEdgeTargetResult';
    function is(object) {
        return (base_protocol_1.Action.hasKind(object, CheckEdgeResultAction.KIND) &&
            (0, type_util_1.hasBooleanProp)(object, 'isValid') &&
            (0, type_util_1.hasStringProp)(object, 'edgeType') &&
            (0, type_util_1.hasStringProp)(object, 'sourceElementId') &&
            (0, type_util_1.hasStringProp)(object, 'targetElementId', true));
    }
    CheckEdgeResultAction.is = is;
    function create(options) {
        return {
            kind: CheckEdgeResultAction.KIND,
            responseId: '',
            ...options
        };
    }
    CheckEdgeResultAction.create = create;
})(CheckEdgeResultAction || (exports.CheckEdgeResultAction = CheckEdgeResultAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-validation.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-validation.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteMarkersAction = exports.SetMarkersAction = exports.RequestMarkersAction = exports.MarkersReason = exports.MarkerKind = void 0;
/********************************************************************************
 * Copyright (c) 2021-2025 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
/**
 * The default marker kinds used in GLSP
 */
var MarkerKind;
(function (MarkerKind) {
    MarkerKind.INFO = 'info';
    MarkerKind.WARNING = 'warning';
    MarkerKind.ERROR = 'error';
})(MarkerKind || (exports.MarkerKind = MarkerKind = {}));
exports.MarkersReason = {
    /** Markers resulting from a batch validation */
    BATCH: 'batch',
    /** Markers resulting from a live validation */
    LIVE: 'live'
};
var RequestMarkersAction;
(function (RequestMarkersAction) {
    RequestMarkersAction.KIND = 'requestMarkers';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestMarkersAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'elementsIDs');
    }
    RequestMarkersAction.is = is;
    function create(elementsIDs, options = {}) {
        return {
            kind: RequestMarkersAction.KIND,
            requestId: '',
            elementsIDs,
            reason: exports.MarkersReason.BATCH,
            ...options
        };
    }
    RequestMarkersAction.create = create;
})(RequestMarkersAction || (exports.RequestMarkersAction = RequestMarkersAction = {}));
var SetMarkersAction;
(function (SetMarkersAction) {
    SetMarkersAction.KIND = 'setMarkers';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetMarkersAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'markers');
    }
    SetMarkersAction.is = is;
    function create(markers, options = {}) {
        return {
            kind: SetMarkersAction.KIND,
            responseId: '',
            markers,
            reason: exports.MarkersReason.BATCH,
            ...options
        };
    }
    SetMarkersAction.create = create;
})(SetMarkersAction || (exports.SetMarkersAction = SetMarkersAction = {}));
var DeleteMarkersAction;
(function (DeleteMarkersAction) {
    DeleteMarkersAction.KIND = 'deleteMarkers';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, DeleteMarkersAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'markers');
    }
    DeleteMarkersAction.is = is;
    function create(markers) {
        return {
            kind: DeleteMarkersAction.KIND,
            markers
        };
    }
    DeleteMarkersAction.create = create;
})(DeleteMarkersAction || (exports.DeleteMarkersAction = DeleteMarkersAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-data.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-data.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SourceModelChangedAction = exports.UpdateModelAction = exports.SetModelAction = exports.RequestModelAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var RequestModelAction;
(function (RequestModelAction) {
    RequestModelAction.KIND = 'requestModel';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestModelAction.KIND);
    }
    RequestModelAction.is = is;
    function create(options = {}) {
        return {
            kind: RequestModelAction.KIND,
            requestId: '',
            ...options
        };
    }
    RequestModelAction.create = create;
})(RequestModelAction || (exports.RequestModelAction = RequestModelAction = {}));
var SetModelAction;
(function (SetModelAction) {
    SetModelAction.KIND = 'setModel';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetModelAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'newRoot');
    }
    SetModelAction.is = is;
    function create(newRoot, options = {}) {
        return {
            kind: SetModelAction.KIND,
            responseId: '',
            newRoot,
            ...options
        };
    }
    SetModelAction.create = create;
})(SetModelAction || (exports.SetModelAction = SetModelAction = {}));
var UpdateModelAction;
(function (UpdateModelAction) {
    UpdateModelAction.KIND = 'updateModel';
    function is(action) {
        return base_protocol_1.Action.hasKind(action, UpdateModelAction.KIND) && (0, type_util_1.hasObjectProp)(action, 'newRoot');
    }
    UpdateModelAction.is = is;
    function create(newRoot, options = {}) {
        return {
            kind: UpdateModelAction.KIND,
            newRoot,
            animate: true,
            ...options
        };
    }
    UpdateModelAction.create = create;
})(UpdateModelAction || (exports.UpdateModelAction = UpdateModelAction = {}));
var SourceModelChangedAction;
(function (SourceModelChangedAction) {
    SourceModelChangedAction.KIND = 'sourceModelChanged';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SourceModelChangedAction.KIND) && (0, type_util_1.hasStringProp)(object, 'sourceModelName');
    }
    SourceModelChangedAction.is = is;
    function create(sourceModelName) {
        return {
            kind: SourceModelChangedAction.KIND,
            sourceModelName: sourceModelName
        };
    }
    SourceModelChangedAction.create = create;
})(SourceModelChangedAction || (exports.SourceModelChangedAction = SourceModelChangedAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-edit-mode.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-edit-mode.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditMode = exports.SetEditModeAction = void 0;
/********************************************************************************
 * Copyright (c) 2020-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var SetEditModeAction;
(function (SetEditModeAction) {
    SetEditModeAction.KIND = 'setEditMode';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetEditModeAction.KIND) && (0, type_util_1.hasStringProp)(object, 'editMode');
    }
    SetEditModeAction.is = is;
    function create(editMode) {
        return {
            kind: SetEditModeAction.KIND,
            editMode
        };
    }
    SetEditModeAction.create = create;
})(SetEditModeAction || (exports.SetEditModeAction = SetEditModeAction = {}));
exports.EditMode = {
    READONLY: 'readonly',
    EDITABLE: 'editable'
};


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-layout.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-layout.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TriggerLayoutAction = exports.LayoutOperation = exports.ComputedBoundsAction = exports.RequestBoundsAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var RequestBoundsAction;
(function (RequestBoundsAction) {
    RequestBoundsAction.KIND = 'requestBounds';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestBoundsAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'newRoot');
    }
    RequestBoundsAction.is = is;
    function create(newRoot, options = {}) {
        return {
            kind: RequestBoundsAction.KIND,
            requestId: '',
            newRoot,
            ...options
        };
    }
    RequestBoundsAction.create = create;
})(RequestBoundsAction || (exports.RequestBoundsAction = RequestBoundsAction = {}));
var ComputedBoundsAction;
(function (ComputedBoundsAction) {
    ComputedBoundsAction.KIND = 'computedBounds';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, ComputedBoundsAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'bounds');
    }
    ComputedBoundsAction.is = is;
    function create(bounds, options = {}) {
        return {
            kind: ComputedBoundsAction.KIND,
            responseId: '',
            bounds,
            ...options
        };
    }
    ComputedBoundsAction.create = create;
})(ComputedBoundsAction || (exports.ComputedBoundsAction = ComputedBoundsAction = {}));
var LayoutOperation;
(function (LayoutOperation) {
    LayoutOperation.KIND = 'layout';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, LayoutOperation.KIND);
    }
    LayoutOperation.is = is;
    function create(elementIds, options = {}) {
        return {
            kind: LayoutOperation.KIND,
            isOperation: true,
            elementIds,
            ...options
        };
    }
    LayoutOperation.create = create;
})(LayoutOperation || (exports.LayoutOperation = LayoutOperation = {}));
var TriggerLayoutAction;
(function (TriggerLayoutAction) {
    TriggerLayoutAction.KIND = 'triggerLayout';
    function is(action) {
        return base_protocol_1.Action.hasKind(action, TriggerLayoutAction.KIND);
    }
    TriggerLayoutAction.is = is;
    function create(options = {}) {
        return {
            kind: TriggerLayoutAction.KIND,
            ...options
        };
    }
    TriggerLayoutAction.create = create;
})(TriggerLayoutAction || (exports.TriggerLayoutAction = TriggerLayoutAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-saving.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-saving.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExportSvgAction = exports.RequestExportSvgAction = exports.SetDirtyStateAction = exports.SaveModelAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var SaveModelAction;
(function (SaveModelAction) {
    SaveModelAction.KIND = 'saveModel';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SaveModelAction.KIND);
    }
    SaveModelAction.is = is;
    function create(options = {}) {
        return {
            kind: SaveModelAction.KIND,
            ...options
        };
    }
    SaveModelAction.create = create;
})(SaveModelAction || (exports.SaveModelAction = SaveModelAction = {}));
var SetDirtyStateAction;
(function (SetDirtyStateAction) {
    SetDirtyStateAction.KIND = 'setDirtyState';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, SetDirtyStateAction.KIND) && (0, type_util_1.hasBooleanProp)(object, 'isDirty');
    }
    SetDirtyStateAction.is = is;
    function create(isDirty, options = {}) {
        return {
            kind: SetDirtyStateAction.KIND,
            isDirty,
            ...options
        };
    }
    SetDirtyStateAction.create = create;
})(SetDirtyStateAction || (exports.SetDirtyStateAction = SetDirtyStateAction = {}));
var RequestExportSvgAction;
(function (RequestExportSvgAction) {
    RequestExportSvgAction.KIND = 'requestExportSvg';
    function is(object) {
        return base_protocol_1.RequestAction.hasKind(object, RequestExportSvgAction.KIND);
    }
    RequestExportSvgAction.is = is;
    function create(options = {}) {
        return {
            kind: RequestExportSvgAction.KIND,
            requestId: '',
            ...options
        };
    }
    RequestExportSvgAction.create = create;
})(RequestExportSvgAction || (exports.RequestExportSvgAction = RequestExportSvgAction = {}));
var ExportSvgAction;
(function (ExportSvgAction) {
    ExportSvgAction.KIND = 'exportSvg';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, ExportSvgAction.KIND) && (0, type_util_1.hasStringProp)(object, 'svg');
    }
    ExportSvgAction.is = is;
    function create(svg, options = {}) {
        return {
            kind: ExportSvgAction.KIND,
            svg,
            responseId: '',
            ...options
        };
    }
    ExportSvgAction.create = create;
})(ExportSvgAction || (exports.ExportSvgAction = ExportSvgAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/node-modification.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/node-modification.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChangeContainerOperation = exports.ChangeBoundsOperation = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var ChangeBoundsOperation;
(function (ChangeBoundsOperation) {
    ChangeBoundsOperation.KIND = 'changeBounds';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, ChangeBoundsOperation.KIND) && (0, type_util_1.hasArrayProp)(object, 'newBounds');
    }
    ChangeBoundsOperation.is = is;
    function create(newBounds) {
        return {
            kind: ChangeBoundsOperation.KIND,
            isOperation: true,
            newBounds
        };
    }
    ChangeBoundsOperation.create = create;
})(ChangeBoundsOperation || (exports.ChangeBoundsOperation = ChangeBoundsOperation = {}));
var ChangeContainerOperation;
(function (ChangeContainerOperation) {
    ChangeContainerOperation.KIND = 'changeContainer';
    function is(object) {
        return base_protocol_1.Operation.hasKind(object, ChangeContainerOperation.KIND) && (0, type_util_1.hasStringProp)(object, 'elementId') && (0, type_util_1.hasStringProp)(object, 'targetContainerId');
    }
    ChangeContainerOperation.is = is;
    function create(options) {
        return {
            kind: ChangeContainerOperation.KIND,
            isOperation: true,
            ...options
        };
    }
    ChangeContainerOperation.create = create;
})(ChangeContainerOperation || (exports.ChangeContainerOperation = ChangeContainerOperation = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/tool-palette.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/tool-palette.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TriggerEdgeCreationAction = exports.TriggerNodeCreationAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var TriggerNodeCreationAction;
(function (TriggerNodeCreationAction) {
    TriggerNodeCreationAction.KIND = 'triggerNodeCreation';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, TriggerNodeCreationAction.KIND) && (0, type_util_1.hasStringProp)(object, 'elementTypeId');
    }
    TriggerNodeCreationAction.is = is;
    function create(elementTypeId, options) {
        return {
            kind: TriggerNodeCreationAction.KIND,
            elementTypeId,
            ...options
        };
    }
    TriggerNodeCreationAction.create = create;
})(TriggerNodeCreationAction || (exports.TriggerNodeCreationAction = TriggerNodeCreationAction = {}));
var TriggerEdgeCreationAction;
(function (TriggerEdgeCreationAction) {
    TriggerEdgeCreationAction.KIND = 'triggerEdgeCreation';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, TriggerEdgeCreationAction.KIND) && (0, type_util_1.hasStringProp)(object, 'elementTypeId');
    }
    TriggerEdgeCreationAction.is = is;
    function create(elementTypeId, options = {}) {
        return {
            kind: TriggerEdgeCreationAction.KIND,
            elementTypeId,
            ...options
        };
    }
    TriggerEdgeCreationAction.create = create;
})(TriggerEdgeCreationAction || (exports.TriggerEdgeCreationAction = TriggerEdgeCreationAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/types.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/types.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MenuItem = exports.PaletteItem = exports.LabeledAction = exports.EditorContext = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const tool_palette_1 = __webpack_require__(/*! ./tool-palette */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/tool-palette.js");
var EditorContext;
(function (EditorContext) {
    function is(object) {
        return type_util_1.AnyObject.is(object) && (0, type_util_1.hasArrayProp)(object, 'selectedElementIds');
    }
    EditorContext.is = is;
})(EditorContext || (exports.EditorContext = EditorContext = {}));
var LabeledAction;
(function (LabeledAction) {
    function is(object) {
        return type_util_1.AnyObject.is(object) && (0, type_util_1.hasStringProp)(object, 'label') && (0, type_util_1.hasArrayProp)(object, 'actions');
    }
    LabeledAction.is = is;
    function toActionArray(input) {
        if (Array.isArray(input)) {
            return input;
        }
        else if (LabeledAction.is(input)) {
            return input.actions;
        }
        return [input];
    }
    LabeledAction.toActionArray = toActionArray;
})(LabeledAction || (exports.LabeledAction = LabeledAction = {}));
var PaletteItem;
(function (PaletteItem) {
    function is(object) {
        return LabeledAction.is(object) && (0, type_util_1.hasStringProp)(object, 'id') && (0, type_util_1.hasStringProp)(object, 'sortString');
    }
    PaletteItem.is = is;
    function getTriggerAction(item) {
        if (item) {
            const initialActions = item.actions
                .filter(a => isTriggerElementCreationAction(a))
                .map(action => action);
            return initialActions.length > 0 ? initialActions[0] : undefined;
        }
        return undefined;
    }
    PaletteItem.getTriggerAction = getTriggerAction;
    function isTriggerElementCreationAction(object) {
        return tool_palette_1.TriggerNodeCreationAction.is(object) || tool_palette_1.TriggerEdgeCreationAction.is(object);
    }
    PaletteItem.isTriggerElementCreationAction = isTriggerElementCreationAction;
})(PaletteItem || (exports.PaletteItem = PaletteItem = {}));
var MenuItem;
(function (MenuItem) {
    function is(object) {
        return LabeledAction.is(object) && (0, type_util_1.hasStringProp)(object, 'id');
    }
    MenuItem.is = is;
})(MenuItem || (exports.MenuItem = MenuItem = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/undo-redo.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/undo-redo.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RedoAction = exports.UndoAction = void 0;
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var UndoAction;
(function (UndoAction) {
    UndoAction.KIND = 'glspUndo';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, UndoAction.KIND);
    }
    UndoAction.is = is;
    function create() {
        return {
            kind: UndoAction.KIND
        };
    }
    UndoAction.create = create;
})(UndoAction || (exports.UndoAction = UndoAction = {}));
var RedoAction;
(function (RedoAction) {
    RedoAction.KIND = 'glspRedo';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, RedoAction.KIND);
    }
    RedoAction.is = is;
    function create() {
        return {
            kind: RedoAction.KIND
        };
    }
    RedoAction.create = create;
})(RedoAction || (exports.RedoAction = RedoAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/viewport.js":
/*!******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/action-protocol/viewport.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MoveViewportAction = exports.FitToScreenAction = exports.CenterAction = void 0;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const base_protocol_1 = __webpack_require__(/*! ./base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
var CenterAction;
(function (CenterAction) {
    CenterAction.KIND = 'center';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, CenterAction.KIND) && (0, type_util_1.hasBooleanProp)(object, 'animate') && (0, type_util_1.hasBooleanProp)(object, 'retainZoom');
    }
    CenterAction.is = is;
    function create(elementIds, options = {}) {
        return {
            kind: CenterAction.KIND,
            animate: true,
            retainZoom: false,
            elementIds,
            ...options
        };
    }
    CenterAction.create = create;
})(CenterAction || (exports.CenterAction = CenterAction = {}));
var FitToScreenAction;
(function (FitToScreenAction) {
    FitToScreenAction.KIND = 'fit';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, FitToScreenAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'elementIds') && (0, type_util_1.hasBooleanProp)(object, 'animate');
    }
    FitToScreenAction.is = is;
    function create(elementIds, options = {}) {
        return {
            kind: FitToScreenAction.KIND,
            animate: true,
            elementIds,
            ...options
        };
    }
    FitToScreenAction.create = create;
})(FitToScreenAction || (exports.FitToScreenAction = FitToScreenAction = {}));
var MoveViewportAction;
(function (MoveViewportAction) {
    MoveViewportAction.KIND = 'moveViewport';
    function is(object) {
        return base_protocol_1.Action.hasKind(object, MoveViewportAction.KIND);
    }
    MoveViewportAction.is = is;
    function create(options) {
        return { kind: MoveViewportAction.KIND, ...options };
    }
    MoveViewportAction.create = create;
})(MoveViewportAction || (exports.MoveViewportAction = MoveViewportAction = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/base-glsp-client.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/base-glsp-client.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseGLSPClient = exports.GLOBAL_HANDLER_ID = void 0;
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../node_modules/vscode-jsonrpc/lib/browser/main.js");
const array_util_1 = __webpack_require__(/*! ../utils/array-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js");
const event_1 = __webpack_require__(/*! ../utils/event */ "../node_modules/@eclipse-glsp/protocol/lib/utils/event.js");
const glsp_client_1 = __webpack_require__(/*! ./glsp-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-client.js");
exports.GLOBAL_HANDLER_ID = '*';
/**
 * A simple {@link GLSPClient} implementation for use cases where the client & server are running
 * in the same context/process without a communication layer (like json-rpc) between. The client
 * directly communicates with a given {@link GLSPServer} instance.
 */
class BaseGLSPClient {
    get onServerInitialized() {
        return this.onServerInitializedEmitter.event;
    }
    get onCurrentStateChanged() {
        return this.onCurrentStateChangedEmitter.event;
    }
    set state(state) {
        if (this._state !== state) {
            this._state = state;
            this.onCurrentStateChangedEmitter.fire(state);
        }
    }
    get state() {
        return this._state;
    }
    get checkedServer() {
        this.checkState();
        if (!this._server) {
            throw new Error(`No server is configured for GLSPClient with id '${this.id}'`);
        }
        return this._server;
    }
    get initializeResult() {
        return this._initializeResult;
    }
    constructor(options) {
        this.options = options;
        this.serverDeferred = new sprotty_protocol_1.Deferred();
        this.onStartDeferred = new sprotty_protocol_1.Deferred();
        this.onStopDeferred = new sprotty_protocol_1.Deferred();
        this.startupTimeout = 1500;
        this.actionMessageHandlers = new Map([[exports.GLOBAL_HANDLER_ID, []]]);
        this.onServerInitializedEmitter = new event_1.Emitter();
        this.onCurrentStateChangedEmitter = new event_1.Emitter();
        this.state = glsp_client_1.ClientState.Initial;
        this.proxy = this.createProxy();
    }
    createProxy() {
        return {
            process: message => {
                var _a;
                const handlers = (_a = this.actionMessageHandlers.get(message.clientId)) !== null && _a !== void 0 ? _a : this.actionMessageHandlers.get(exports.GLOBAL_HANDLER_ID);
                if (!handlers) {
                    console.warn('No ActionMessageHandler is configured- Cannot process server message', message);
                    return;
                }
                handlers.forEach(handler => handler(message));
            }
        };
    }
    configureServer(server) {
        if (this.state === glsp_client_1.ClientState.Running) {
            throw new Error('Could not configure new server. The GLSPClient is already running');
        }
        this.serverDeferred.resolve(server);
    }
    start() {
        if (this.state === glsp_client_1.ClientState.Running || this.state === glsp_client_1.ClientState.Starting) {
            return this.onStartDeferred.promise;
        }
        this.state = glsp_client_1.ClientState.Starting;
        const timeOut = new Promise((_, reject) => setTimeout(() => {
            reject(new Error('Could not start client. No server is configured'));
        }, this.startupTimeout));
        Promise.race([this.serverDeferred.promise, timeOut])
            .then(server => {
            this._server = server;
            this.state = glsp_client_1.ClientState.Running;
            this.onStartDeferred.resolve();
        })
            .catch(error => {
            this.state = glsp_client_1.ClientState.StartFailed;
            this.onStartDeferred.reject(error);
        });
        return this.onStartDeferred.promise;
    }
    async initializeServer(params) {
        if (this.initializeResult) {
            return this.initializeResult;
        }
        else if (this.pendingServerInitialize) {
            return this.pendingServerInitialize;
        }
        const initializeDeferred = new sprotty_protocol_1.Deferred();
        try {
            this.pendingServerInitialize = initializeDeferred.promise;
            this._initializeResult = await this.checkedServer.initialize(params);
            this.onServerInitializedEmitter.fire(this._initializeResult);
            initializeDeferred.resolve(this._initializeResult);
            this.pendingServerInitialize = undefined;
        }
        catch (error) {
            initializeDeferred.reject(error);
            this._initializeResult = undefined;
            this.pendingServerInitialize = undefined;
        }
        return initializeDeferred.promise;
    }
    initializeClientSession(params) {
        return this.checkedServer.initializeClientSession(params);
    }
    disposeClientSession(params) {
        return this.checkedServer.disposeClientSession(params);
    }
    shutdownServer() {
        this.checkedServer.shutdown();
    }
    async stop() {
        if (this.state === glsp_client_1.ClientState.Stopped || this.state === glsp_client_1.ClientState.Stopping) {
            return this.onStop();
        }
        this.state = glsp_client_1.ClientState.Stopping;
        try {
            if (this._server) {
                this._server.shutdown();
            }
        }
        finally {
            this.state = glsp_client_1.ClientState.Stopped;
            this.onStopDeferred.resolve();
        }
    }
    sendActionMessage(message) {
        this.checkedServer.process(message);
    }
    onActionMessage(handler, clientId) {
        if (!clientId) {
            (0, array_util_1.distinctAdd)(this.actionMessageHandlers.get(exports.GLOBAL_HANDLER_ID), handler);
            return vscode_jsonrpc_1.Disposable.create(() => (0, array_util_1.remove)(this.actionMessageHandlers.get(exports.GLOBAL_HANDLER_ID), handler));
        }
        if (!this.actionMessageHandlers.has(clientId)) {
            this.actionMessageHandlers.set(clientId, [handler]);
        }
        else {
            (0, array_util_1.distinctAdd)(this.actionMessageHandlers.get(clientId), handler);
        }
        return vscode_jsonrpc_1.Disposable.create(() => (0, array_util_1.remove)(this.actionMessageHandlers.get(clientId), handler));
    }
    get currentState() {
        return this.state;
    }
    onStart() {
        return this.onStartDeferred.promise;
    }
    onStop() {
        return this.onStopDeferred.promise;
    }
    get id() {
        return this.options.id;
    }
    checkState() {
        if (this.state !== glsp_client_1.ClientState.Running) {
            throw new Error(`Client with id '${this.id}' is not in 'Running' state`);
        }
    }
    setStartupTimeout(ms) {
        this.startupTimeout = ms;
    }
}
exports.BaseGLSPClient = BaseGLSPClient;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-client.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-client.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPClient = exports.ClientState = exports.ApplicationIdProvider = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const uuid = __webpack_require__(/*! uuid */ "../node_modules/uuid/dist/commonjs-browser/index.js");
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
class ApplicationIdProvider {
    static get() {
        if (!ApplicationIdProvider._applicationId) {
            ApplicationIdProvider._applicationId = uuid.v4();
        }
        return ApplicationIdProvider._applicationId;
    }
}
exports.ApplicationIdProvider = ApplicationIdProvider;
var ClientState;
(function (ClientState) {
    /**
     * The client has been created.
     */
    ClientState[ClientState["Initial"] = 0] = "Initial";
    /**
     * `Start` has been called on the client and the start process is still on-going.
     */
    ClientState[ClientState["Starting"] = 1] = "Starting";
    /**
     * The client failed to complete the start process.
     */
    ClientState[ClientState["StartFailed"] = 2] = "StartFailed";
    /**
     * The client was successfully started and is now running.
     */
    ClientState[ClientState["Running"] = 3] = "Running";
    /**
     * `Stop` has been called on the client and the stop process is still on-going.
     */
    ClientState[ClientState["Stopping"] = 4] = "Stopping";
    /**
     * The client stopped and disposed the server connection. Thus, action messages can no longer be sent.
     */
    ClientState[ClientState["Stopped"] = 5] = "Stopped";
    /**
     * An error was encountered while connecting to the server. No action messages can be sent.
     */
    ClientState[ClientState["ServerError"] = 6] = "ServerError";
})(ClientState || (exports.ClientState = ClientState = {}));
var GLSPClient;
(function (GLSPClient) {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function isOptions(object) {
        return type_util_1.AnyObject.is(object) && (0, type_util_1.hasStringProp)(object, 'id');
    }
    GLSPClient.isOptions = isOptions;
    GLSPClient.protocolVersion = '1.0.0';
})(GLSPClient || (exports.GLSPClient = GLSPClient = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-server.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-server.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2022-2024 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPClientProxy = exports.GLSPServerListener = exports.GLSPServer = void 0;
exports.GLSPServer = Symbol('GLSPServer');
exports.GLSPServerListener = Symbol('GLSPServerListener');
exports.GLSPClientProxy = Symbol('GLSPClientProxy');


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/base-jsonrpc-glsp-client.js":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/base-jsonrpc-glsp-client.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonrpcClientProxy = exports.BaseJsonrpcGLSPClient = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
const event_1 = __webpack_require__(/*! ../../utils/event */ "../node_modules/@eclipse-glsp/protocol/lib/utils/event.js");
const glsp_client_1 = __webpack_require__(/*! ../glsp-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-client.js");
const glsp_jsonrpc_client_1 = __webpack_require__(/*! ./glsp-jsonrpc-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/glsp-jsonrpc-client.js");
class BaseJsonrpcGLSPClient {
    get onServerInitialized() {
        return this.onServerInitializedEmitter.event;
    }
    get onActionMessageNotification() {
        return this.onActionMessageNotificationEmitter.event;
    }
    get onCurrentStateChanged() {
        return this.onCurrentStateChangedEmitter.event;
    }
    set state(state) {
        if (this._state !== state) {
            this._state = state;
            this.onCurrentStateChangedEmitter.fire(state);
        }
    }
    get state() {
        return this._state;
    }
    get initializeResult() {
        return this._initializeResult;
    }
    constructor(options) {
        this.onServerInitializedEmitter = new event_1.Emitter();
        this.onActionMessageNotificationEmitter = new event_1.Emitter();
        this.onCurrentStateChangedEmitter = new event_1.Emitter();
        this.connectionProvider = options.connectionProvider;
        this.state = glsp_client_1.ClientState.Initial;
    }
    async start() {
        if (this.state === glsp_client_1.ClientState.Running || this.state === glsp_client_1.ClientState.StartFailed) {
            return;
        }
        else if (this.state === glsp_client_1.ClientState.Starting) {
            await event_1.Event.waitUntil(this.onCurrentStateChanged, state => state === glsp_client_1.ClientState.Running || state === glsp_client_1.ClientState.StartFailed);
            return;
        }
        try {
            this.state = glsp_client_1.ClientState.Starting;
            const connection = await this.resolveConnection();
            connection.listen();
            this.resolvedConnection = connection;
            this.state = glsp_client_1.ClientState.Running;
        }
        catch (error) {
            glsp_jsonrpc_client_1.JsonrpcGLSPClient.error('Failed to start connection to server', error);
            this.state = glsp_client_1.ClientState.StartFailed;
        }
    }
    async initializeServer(params) {
        if (this.initializeResult) {
            return this.initializeResult;
        }
        else if (this.pendingServerInitialize) {
            return this.pendingServerInitialize;
        }
        const initializeDeferred = new sprotty_protocol_1.Deferred();
        try {
            this.pendingServerInitialize = initializeDeferred.promise;
            this._initializeResult = await this.checkedConnection.sendRequest(glsp_jsonrpc_client_1.JsonrpcGLSPClient.InitializeRequest, params);
            this.onServerInitializedEmitter.fire(this._initializeResult);
            initializeDeferred.resolve(this._initializeResult);
            this.pendingServerInitialize = undefined;
        }
        catch (error) {
            initializeDeferred.reject(error);
            this._initializeResult = undefined;
            this.pendingServerInitialize = undefined;
        }
        return initializeDeferred.promise;
    }
    initializeClientSession(params) {
        return this.checkedConnection.sendRequest(glsp_jsonrpc_client_1.JsonrpcGLSPClient.InitializeClientSessionRequest, params);
    }
    disposeClientSession(params) {
        return this.checkedConnection.sendRequest(glsp_jsonrpc_client_1.JsonrpcGLSPClient.DisposeClientSessionRequest, params);
    }
    onActionMessage(handler, clientId) {
        return this.onActionMessageNotification(msg => {
            if (!clientId || msg.clientId === clientId) {
                handler(msg);
            }
        });
    }
    sendActionMessage(message) {
        this.checkedConnection.sendNotification(glsp_jsonrpc_client_1.JsonrpcGLSPClient.ActionMessageNotification, message);
    }
    shutdownServer() {
        this.checkedConnection.sendNotification(glsp_jsonrpc_client_1.JsonrpcGLSPClient.ShutdownNotification);
    }
    stop() {
        if (!this.connectionPromise) {
            this.state = glsp_client_1.ClientState.Stopped;
            return Promise.resolve();
        }
        if (this.state === glsp_client_1.ClientState.Stopping && this.onStop) {
            return this.onStop;
        }
        this.state = glsp_client_1.ClientState.Stopping;
        return (this.onStop = this.resolveConnection().then(connection => {
            connection.dispose();
            this.state = glsp_client_1.ClientState.Stopped;
            this.onStop = undefined;
            this.onActionMessageNotificationEmitter.dispose();
            this.onCurrentStateChangedEmitter.dispose();
            this.connectionPromise = undefined;
            this.resolvedConnection = undefined;
        }));
    }
    get checkedConnection() {
        if (!this.isConnectionActive()) {
            throw new Error(glsp_jsonrpc_client_1.JsonrpcGLSPClient.ClientNotReadyMsg);
        }
        return this.resolvedConnection;
    }
    resolveConnection() {
        if (!this.connectionPromise) {
            this.connectionPromise = this.doCreateConnection();
        }
        return this.connectionPromise;
    }
    async doCreateConnection() {
        const connection = typeof this.connectionProvider === 'function' ? await this.connectionProvider() : this.connectionProvider;
        connection.onError(data => this.handleConnectionError(data[0], data[1], data[2]));
        connection.onClose(() => this.handleConnectionClosed());
        connection.onNotification(glsp_jsonrpc_client_1.JsonrpcGLSPClient.ActionMessageNotification, msg => this.onActionMessageNotificationEmitter.fire(msg));
        return connection;
    }
    handleConnectionError(error, message, count) {
        glsp_jsonrpc_client_1.JsonrpcGLSPClient.error('Connection to server is erroring. Shutting down server.', error);
        this.stop();
        this.state = glsp_client_1.ClientState.ServerError;
    }
    handleConnectionClosed() {
        if (this.state === glsp_client_1.ClientState.Stopping || this.state === glsp_client_1.ClientState.Stopped) {
            return;
        }
        try {
            if (this.resolvedConnection) {
                this.resolvedConnection.dispose();
                this.connectionPromise = undefined;
                this.resolvedConnection = undefined;
            }
        }
        catch (error) {
            // Disposing a connection could fail if error cases.
        }
        glsp_jsonrpc_client_1.JsonrpcGLSPClient.error('Connection to server got closed. Server will not be restarted.');
        this.state = glsp_client_1.ClientState.ServerError;
    }
    isConnectionActive() {
        return this.state === glsp_client_1.ClientState.Running && !!this.resolvedConnection;
    }
    get currentState() {
        return this.state;
    }
}
exports.BaseJsonrpcGLSPClient = BaseJsonrpcGLSPClient;
/**
 * Default {@link GLSPClientProxy} implementation for jsonrpc-based client-server communication with typescript based servers.
 */
class JsonrpcClientProxy {
    initialize(clientConnection, enableLogging = false) {
        this.clientConnection = clientConnection;
        this.enableLogging = enableLogging;
    }
    process(message) {
        var _a;
        if (this.enableLogging) {
            console.log(`Send action '${message.action.kind}' to client '${message.clientId}'`);
        }
        (_a = this.clientConnection) === null || _a === void 0 ? void 0 : _a.sendNotification(glsp_jsonrpc_client_1.JsonrpcGLSPClient.ActionMessageNotification, message);
    }
}
exports.JsonrpcClientProxy = JsonrpcClientProxy;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/glsp-jsonrpc-client.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/glsp-jsonrpc-client.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JsonrpcGLSPClient = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../node_modules/vscode-jsonrpc/lib/browser/main.js");
const glsp_client_1 = __webpack_require__(/*! ../glsp-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-client.js");
var JsonrpcGLSPClient;
(function (JsonrpcGLSPClient) {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function isOptions(object) {
        return glsp_client_1.GLSPClient.isOptions(object) && 'connectionProvider' in object;
    }
    JsonrpcGLSPClient.isOptions = isOptions;
    JsonrpcGLSPClient.ActionMessageNotification = new vscode_jsonrpc_1.NotificationType('process');
    JsonrpcGLSPClient.InitializeRequest = new vscode_jsonrpc_1.RequestType('initialize');
    JsonrpcGLSPClient.InitializeClientSessionRequest = new vscode_jsonrpc_1.RequestType('initializeClientSession');
    JsonrpcGLSPClient.DisposeClientSessionRequest = new vscode_jsonrpc_1.RequestType('disposeClientSession');
    JsonrpcGLSPClient.ShutdownNotification = new vscode_jsonrpc_1.NotificationType0('shutdown');
    JsonrpcGLSPClient.ClientNotReadyMsg = 'JsonrpcGLSPClient is not ready yet';
    function error(message, ...optionalParams) {
        console.error(`[JsonrpcGLSPClient] ${message}`, optionalParams);
    }
    JsonrpcGLSPClient.error = error;
})(JsonrpcGLSPClient || (exports.JsonrpcGLSPClient = JsonrpcGLSPClient = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/glsp-jsonrpc-server.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/glsp-jsonrpc-server.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.configureClientConnection = configureClientConnection;
const glsp_jsonrpc_client_1 = __webpack_require__(/*! ./glsp-jsonrpc-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/glsp-jsonrpc-client.js");
/**
 * Configure the given client connection to forward the requests and notifications to the given {@link GLSPServer} instance.
 * @param clientConnection JSON-RPC client connection.
 * @param glspServer The GLSP Server which should react to requests & notifications.
 */
function configureClientConnection(clientConnection, glspServer) {
    clientConnection.onRequest(glsp_jsonrpc_client_1.JsonrpcGLSPClient.InitializeRequest.method, (params) => glspServer.initialize(params));
    clientConnection.onRequest(glsp_jsonrpc_client_1.JsonrpcGLSPClient.InitializeClientSessionRequest, (params) => glspServer.initializeClientSession(params));
    clientConnection.onRequest(glsp_jsonrpc_client_1.JsonrpcGLSPClient.DisposeClientSessionRequest, (params) => glspServer.disposeClientSession(params));
    clientConnection.onNotification(glsp_jsonrpc_client_1.JsonrpcGLSPClient.ActionMessageNotification, message => glspServer.process(message));
    clientConnection.listen();
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/websocket-connection.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/websocket-connection.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebSocketMessageWriter = exports.WebSocketMessageReader = void 0;
exports.wrap = wrap;
exports.createWebSocketConnection = createWebSocketConnection;
exports.listen = listen;
// based on https://github.com/TypeFox/monaco-languageclient/blob/vwj-2.0.1/packages/vscode-ws-jsonrpc/src/socket/reader.ts
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2018-2022 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../node_modules/vscode-jsonrpc/lib/browser/main.js");
/**
 * Creates a {@link WebSocketWrapper} for the given plain WebSocket
 * @param socket The socket to wrap
 */
function wrap(socket) {
    return {
        send: content => socket.send(content),
        onMessage: cb => (socket.onmessage = event => cb(event.data)),
        onClose: cb => (socket.onclose = event => cb(event.code, event.reason)),
        onError: cb => (socket.onerror = event => {
            if ('error' in event) {
                cb(event.error);
            }
        }),
        dispose: () => socket.close()
    };
}
/**
 * A `vscode-jsonrpc` {@link MessageReader} that reads messages from an underlying {@link WebSocketWrapper}.
 */
class WebSocketMessageReader extends vscode_jsonrpc_1.AbstractMessageReader {
    constructor(socket) {
        super();
        this.socket = socket;
        this.state = 'initial';
        this.eventQueue = [];
        this.socket.onMessage(message => this.handleMessage(message));
        this.socket.onError(error => this.fireError(error));
        this.socket.onClose(() => this.fireClose());
    }
    listen(callback) {
        if (this.state === 'initial') {
            this.state = 'listening';
            this.callback = callback;
            this.eventQueue.forEach(event => {
                if (event.message) {
                    this.handleMessage(event.message);
                }
                else if (event.error) {
                    this.fireError(event.error);
                }
                else {
                    this.fireClose();
                }
            });
            this.eventQueue = [];
        }
        return vscode_jsonrpc_1.Disposable.create(() => {
            this.callback = undefined;
            this.eventQueue = [];
        });
    }
    handleMessage(message) {
        if (this.state === 'initial') {
            this.eventQueue.push({ message });
        }
        else if (this.state === 'listening') {
            const data = JSON.parse(message);
            this.callback(data);
        }
    }
    fireError(error) {
        if (this.state === 'initial') {
            this.eventQueue.push({ error });
        }
        else if (this.state === 'listening') {
            super.fireError(error);
        }
    }
    fireClose() {
        if (this.state === 'initial') {
            this.eventQueue.push({});
        }
        else if (this.state === 'listening') {
            super.fireClose();
        }
        this.state = 'closed';
    }
}
exports.WebSocketMessageReader = WebSocketMessageReader;
/**
 * A `vscode-jsonrpc` {@link MessageReader} that writes messages to an underlying {@link WebSocketWrapper}.
 */
class WebSocketMessageWriter extends vscode_jsonrpc_1.AbstractMessageWriter {
    constructor(socket) {
        super();
        this.socket = socket;
        this.errorCount = 0;
    }
    end() {
        /** no-op */
    }
    async write(msg) {
        try {
            const content = JSON.stringify(msg);
            this.socket.send(content);
        }
        catch (e) {
            this.errorCount++;
            this.fireError(e, msg, this.errorCount);
        }
    }
}
exports.WebSocketMessageWriter = WebSocketMessageWriter;
/**
 * Create a `vscode-jsonrpc` {@link MessageConnection} on top of a given {@link WebSocketWrapper}.
 */
function createWebSocketConnection(socket, logger) {
    const reader = new WebSocketMessageReader(socket);
    const writer = new WebSocketMessageWriter(socket);
    return (0, vscode_jsonrpc_1.createMessageConnection)(reader, writer, logger);
}
/**
 * Creates a new {@link MessageConnection} on top of the given websocket on open.
 * @param webSocket The target webSocket
 * @param onConnection Optional callback that is invoked after the connection has been created
 * @param logger Optional connection logger
 * @returns A promise of the created connection
 */
function listen(webSocket, onConnection, logger) {
    return new Promise(resolve => {
        webSocket.onopen = () => {
            const socket = wrap(webSocket);
            const connection = createWebSocketConnection(socket, logger);
            onConnection === null || onConnection === void 0 ? void 0 : onConnection(connection);
            resolve(connection);
        };
    });
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/worker-connection-provider.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/worker-connection-provider.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPWebWorkerProvider = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const browser_1 = __webpack_require__(/*! vscode-jsonrpc/browser */ "../node_modules/vscode-jsonrpc/browser.js");
class GLSPWebWorkerProvider {
    constructor(url) {
        this.url = url;
    }
    createWebWorker(url) {
        return new Worker(url);
    }
    listen(handler) {
        var _a, _b;
        this.worker = this.createWebWorker(this.url);
        const wwConnection = (0, browser_1.createMessageConnection)(new browser_1.BrowserMessageReader(this.worker), new browser_1.BrowserMessageWriter(this.worker));
        (_a = handler.logger) === null || _a === void 0 ? void 0 : _a.warn('GLSPWebWorkerProvider Initializing!');
        (_b = handler.onConnection) === null || _b === void 0 ? void 0 : _b.call(handler, wwConnection);
        return wwConnection;
    }
}
exports.GLSPWebWorkerProvider = GLSPWebWorkerProvider;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/ws-connection-provider.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/ws-connection-provider.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPWebSocketProvider = exports.GLSPConnectionHandler = void 0;
const websocket_connection_1 = __webpack_require__(/*! ./websocket-connection */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/websocket-connection.js");
exports.GLSPConnectionHandler = Symbol('GLSPConnectionHandler');
class GLSPWebSocketProvider {
    constructor(url, options) {
        this.url = url;
        this.reconnectAttempts = 0;
        this.options = {
            // default values
            reconnecting: true,
            reconnectAttempts: Infinity,
            reconnectDelay: 1000
        };
        this.options = Object.assign(this.options, options);
    }
    createWebSocket(url) {
        return new WebSocket(url);
    }
    listen(handler, isReconnecting = false) {
        this.webSocket = this.createWebSocket(this.url);
        this.webSocket.onerror = () => {
            var _a;
            (_a = handler.logger) === null || _a === void 0 ? void 0 : _a.error('GLSPWebSocketProvider Connection to server errored. Please make sure that the server is running!');
            clearInterval(this.reconnectTimer);
            this.webSocket.close();
        };
        return new Promise(resolve => {
            this.webSocket.onopen = () => {
                var _a, _b, _c, _d;
                clearInterval(this.reconnectTimer);
                const wrappedSocket = (0, websocket_connection_1.wrap)(this.webSocket);
                const wsConnection = (0, websocket_connection_1.createWebSocketConnection)(wrappedSocket, handler.logger);
                this.webSocket.onclose = () => {
                    var _a, _b;
                    const { reconnecting, reconnectAttempts, reconnectDelay } = this.options;
                    if (reconnecting) {
                        if (this.reconnectAttempts >= reconnectAttempts) {
                            (_a = handler.logger) === null || _a === void 0 ? void 0 : _a.error('GLSPWebSocketProvider WebSocket reconnect failed - maximum number reconnect attempts ' +
                                `(${reconnectAttempts}) was exceeded!`);
                        }
                        else {
                            this.reconnectTimer = setInterval(() => {
                                var _a;
                                (_a = handler.logger) === null || _a === void 0 ? void 0 : _a.warn('GLSPWebSocketProvider reconnecting...');
                                this.listen(handler, true);
                                this.reconnectAttempts++;
                            }, reconnectDelay);
                        }
                    }
                    else {
                        (_b = handler.logger) === null || _b === void 0 ? void 0 : _b.error('GLSPWebSocketProvider WebSocket will not reconnect - closing the connection now!');
                    }
                };
                if (isReconnecting) {
                    (_a = handler.logger) === null || _a === void 0 ? void 0 : _a.warn('GLSPWebSocketProvider Reconnecting!');
                    (_b = handler.onReconnect) === null || _b === void 0 ? void 0 : _b.call(handler, wsConnection);
                }
                else {
                    (_c = handler.logger) === null || _c === void 0 ? void 0 : _c.warn('GLSPWebSocketProvider Initializing!');
                    (_d = handler.onConnection) === null || _d === void 0 ? void 0 : _d.call(handler, wsConnection);
                }
                resolve(wsConnection);
            };
        });
    }
}
exports.GLSPWebSocketProvider = GLSPWebSocketProvider;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/types.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/types.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/di/container-configuration.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/di/container-configuration.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initializeContainer = initializeContainer;
exports.resolveContainerConfiguration = resolveContainerConfiguration;
const array_util_1 = __webpack_require__(/*! ../utils/array-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js");
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
const feature_module_1 = __webpack_require__(/*! ./feature-module */ "../node_modules/@eclipse-glsp/protocol/lib/di/feature-module.js");
/**
 * Initializes a container with the given {@link ContainerConfiguration}. The container configuration
 * consists of the set of {@link ContainerModule}s that should be loaded in the container.
 * In addition, for more fine-grained control {@link ModuleConfiguration}s can be passed as part fo the container configuration
 * Module loading is distinct,this means each module will only get loaded once even if it is configured multiple times.
  @param containerConfigurations
 *          Custom modules to be loaded in addition to the default modules and/or default modules that should be excluded.
  @returns The initialized container.
 */
function initializeContainer(container, ...containerConfigurations) {
    const modules = resolveContainerConfiguration(...containerConfigurations);
    container.load(...modules);
    return container;
}
/**
 * Processes the given container configurations and returns the corresponding set of {@link ContainerModule}s.
 * Container configurations are processed in the order they are passed. If a module is configured to be removed
 * it can be added again in a later configuration. This also means in case of `replace` configurations that affect the same feature id
 * the last configuration wins.
 * @param containerConfigurations The container configurations to resolve
 * @throws An error if featureModule ids are not unique in the resolved module array
 * @returns an Array of resolved container modules
 */
function resolveContainerConfiguration(...containerConfigurations) {
    const modules = [];
    containerConfigurations.forEach(config => {
        if (isContainerModule(config)) {
            (0, array_util_1.distinctAdd)(modules, config);
        }
        else {
            if (config.remove) {
                (0, array_util_1.remove)(modules, ...(0, array_util_1.asArray)(config.remove));
            }
            if (config.add) {
                (0, array_util_1.distinctAdd)(modules, ...(0, array_util_1.asArray)(config.add));
            }
            if (config.replace) {
                (0, array_util_1.asArray)(config.replace).forEach(replace => {
                    const existingIndex = modules.findIndex(m => m instanceof feature_module_1.FeatureModule && m.featureId === replace.featureId);
                    if (existingIndex >= 0) {
                        modules[existingIndex] = replace;
                    }
                    else {
                        console.warn(`Could not find module to replace with feature id ${replace.featureId.toString()}.` +
                            'Adding replacement module to the end of the resolved configurations.');
                        (0, array_util_1.distinctAdd)(modules, replace);
                    }
                });
            }
        }
    });
    // Check for duplicate feature ids in resolved modules
    const featureIds = new Set();
    const duplicates = [];
    modules.forEach(module => {
        if (module instanceof feature_module_1.FeatureModule) {
            if (featureIds.has(module.featureId)) {
                duplicates.push(module);
            }
            else {
                featureIds.add(module.featureId);
            }
        }
    });
    if (duplicates.length > 0) {
        const culprits = duplicates.map(m => m.featureId.toString()).join(', ');
        throw new Error(`Could not resolve container configuration. Non-unique feature ids found in container configuration: ${culprits}`);
    }
    return modules;
}
/**
 * The container modules might originate form different inversify contexts (e.g. `inversify` vs. `@theia/core/shared/inversify`).
 * If this is the case an instanceof check can return  false negative.
 * => use a simple typeguard instead.
 */
function isContainerModule(config) {
    return (0, type_util_1.hasNumberProp)(config, 'id') && (0, type_util_1.hasFunctionProp)(config, 'registry');
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/di/feature-module.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/di/feature-module.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FeatureModule = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const array_util_1 = __webpack_require__(/*! ../utils/array-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js");
/**
 * A `FeatureModule` is a specialized {@link ContainerModule} that can declare dependencies to other {@link FeatureModule}.
 * A feature module will only be loaded into a container if all of its required modules haven been loaded before. T
 * Each feature module binds its `featureId` be default. This enables querying of existing container to check wether a
 * feature module has been loaded into this container.
 */
class FeatureModule extends inversify_1.ContainerModule {
    constructor(registry, options = {}) {
        var _a;
        super((bind, unbind, isBound, ...rest) => {
            if (this.configure(bind, isBound)) {
                registry(bind, unbind, isBound, ...rest);
                this.debugLog(`Loading of feature module with id '${this.featureId.toString()}' completed`);
            }
        });
        this.featureId = (_a = options.featureId) !== null && _a !== void 0 ? _a : this.createFeatureId();
        this.requires = options.requires;
    }
    createFeatureId() {
        return Symbol(this.id);
    }
    /**
     * Configures the feature module i.e. checks if the requirements are met.
     * If this is the case the {@link FeatureModule.featureId} will be bound and the module will be loaded
     * @param bind container bind function
     * @param isBound container isBound function
     * @returns `true` if all requirements are met and the module is loaded. `false` otherwise
     */
    configure(bind, isBound) {
        this.debugLog(`Trying to load feature module with id '${this.featureId.toString()}'`);
        if (this.isLoaded({ isBound })) {
            const message = `Could not load feature module. Another module with id '${this.featureId.toString()}' is already loaded`;
            this.debugLog(message);
            throw new Error(message);
        }
        if (this.checkRequirements(isBound)) {
            this.debugLog(`Requirements are met, continue loading of feature module with id '${this.featureId.toString()}'`);
            bind(this.featureId).toConstantValue(this.featureId);
            return true;
        }
        return false;
    }
    debugLog(message, ...optionalParams) {
        if (FeatureModule.DEBUG_LOG_ENABLED) {
            console.log(message, ...optionalParams);
        }
    }
    /**
     * Checks if all required {@link FeatureModule}s are already loaded/bound in the container.
     * @param isBound The `isBound` property of the module callback. Used to check the required modules.
     * @returns `true` if all requirements are met, `false` otherwise
     */
    checkRequirements(isBound) {
        var _a;
        const requires = (0, array_util_1.asArray)((_a = this.requires) !== null && _a !== void 0 ? _a : []);
        if (requires.length === 0) {
            return true;
        }
        const missing = requires.filter(module => !module.isLoaded({ isBound }));
        if (missing.length > 0) {
            this.debugLog(
            // eslint-disable-next-line max-len
            `Could not load feature module. Required modules are not loaded. Feature ids: ${missing.map(m => m.featureId.toString()).join(', ')}`);
            return false;
        }
        return true;
    }
    isLoaded(context) {
        return context.isBound(this.featureId);
    }
}
exports.FeatureModule = FeatureModule;
/**
 * Global flag to enable/disable additional debug log output when loading feature modules
 * Default is `false`.
 */
FeatureModule.DEBUG_LOG_ENABLED = false;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/di/index.js":
/*!**************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/di/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__exportStar(__webpack_require__(/*! ./container-configuration */ "../node_modules/@eclipse-glsp/protocol/lib/di/container-configuration.js"), exports);
__exportStar(__webpack_require__(/*! ./feature-module */ "../node_modules/@eclipse-glsp/protocol/lib/di/feature-module.js"), exports);
__exportStar(__webpack_require__(/*! ./inversify-util */ "../node_modules/@eclipse-glsp/protocol/lib/di/inversify-util.js"), exports);
__exportStar(__webpack_require__(/*! ./lazy-injector */ "../node_modules/@eclipse-glsp/protocol/lib/di/lazy-injector.js"), exports);
__exportStar(__webpack_require__(/*! ./re-decorate */ "../node_modules/@eclipse-glsp/protocol/lib/di/re-decorate.js"), exports);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/di/inversify-util.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/di/inversify-util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindOrRebind = bindOrRebind;
exports.lazyBind = lazyBind;
exports.bindAsService = bindAsService;
/**
 * Checks wether the given service identifier is already bound in the given context
 * then either calls  the `bind` or `rebind` function respectively.
 *
 * As this is just a convenience function
 * ```ts
 * bindOrRebind({bind,isBound,rebind}, MyService).to(SomeOtherService);
 * ```
 * is equivalent to:
 * ```
 * if (isBound(MyService)) {
 *    rebind(MyService).to(SomeOtherService);
 * } else {
 *    bind(MyService).to(SomeOtherService);
 * }
 * ```
 * @param context The binding context
 * @param serviceIdentifier The service identifier
 * @returns The result of the `bind` or `rebind` function
 */
function bindOrRebind(context, serviceIdentifier) {
    if (context.isBound(serviceIdentifier)) {
        return context.rebind(serviceIdentifier);
    }
    return context.bind(serviceIdentifier);
}
/**
 * Only binds the given service identifier if it's not already bound in the given context.
 *
 * As this is just a convenience function
 * ```ts
 * lazyBind({bind,isBound}, MyService)?.to(SomeOtherService);
 * ```
 * is equivalent to:
 * ```
 * if (!isBound(MyService)) {
 *    bind(MyService).to(SomeOtherService);
 * }
 * ```
 * @param context The binding context
 * @param serviceIdentifier The service identifier
 * @returns The result of the `bind` function or `undefined` if the service was already bound
 */
function lazyBind(context, serviceIdentifier) {
    if (context.isBound(serviceIdentifier)) {
        return undefined;
    }
    return context.bind(serviceIdentifier);
}
/**
 * Binds the given service identifier to the given target service in the given context.
 * In addition, the target service is bound to itself in singleton scope. This ensures
 * that services can be rebound individually even if they are multi-injected.
 *
 * As this is just a convenience function
 * ```ts
 * bindAsService(bind,SomeOtherService,MyServiceImpl);
 * ```
 * is equivalent to:
 * ```ts
 * bind(MyServiceImpl).toSelf.inSingletonScope():
 * bind(SomeOtherService).toService(MyServiceImpl);
 * ```
 * @param serviceIdentifier
 * @param toServiceIdentifier
 */
function bindAsService(context, serviceIdentifier, targetService) {
    const bind = typeof context === 'object' ? context.bind.bind(context) : context;
    bind(targetService).toSelf().inSingletonScope();
    bind(serviceIdentifier).toService(targetService);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/di/lazy-injector.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/di/lazy-injector.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultLazyInjector = exports.LazyInjector = void 0;
exports.bindLazyInjector = bindLazyInjector;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
exports.LazyInjector = Symbol('LazyInjector');
/**
 * Default implementation of the {@link LazyInjector} interface. This implementation
 * will be bound when using the {@link bindLazyInjector} function.
 */
class DefaultLazyInjector {
    constructor(container) {
        this.container = container;
        this.cache = new Map();
    }
    get(serviceIdentifier) {
        const service = this.getOptional(serviceIdentifier);
        if (service === undefined) {
            throw new Error('No matching bindings found for serviceIdentifier:' + (0, inversify_1.getServiceIdentifierAsString)(serviceIdentifier));
        }
        return service;
    }
    getOptional(serviceIdentifier) {
        if (this.cache.has(serviceIdentifier)) {
            return this.cache.get(serviceIdentifier);
        }
        const service = this.container.isBound(serviceIdentifier) ? this.container.get(serviceIdentifier) : undefined;
        this.cache.set(serviceIdentifier, service);
        return service;
    }
    getAll(serviceIdentifier) {
        if (this.cache.has(serviceIdentifier)) {
            return this.cache.get(serviceIdentifier);
        }
        const services = this.container.isBound(serviceIdentifier) ? this.container.getAll(serviceIdentifier) : [];
        this.cache.set(serviceIdentifier, services);
        return services;
    }
}
exports.DefaultLazyInjector = DefaultLazyInjector;
function bindLazyInjector(context) {
    const bind = typeof context === 'object' ? context.bind.bind(context) : context;
    bind(exports.LazyInjector).toDynamicValue(ctx => new DefaultLazyInjector(ctx.container));
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/di/re-decorate.js":
/*!********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/di/re-decorate.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const base_jsonrpc_glsp_client_1 = __webpack_require__(/*! ../client-server-protocol/jsonrpc/base-jsonrpc-glsp-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/base-jsonrpc-glsp-client.js");
// Decorate `JsonrpcClientProxy` as injectable for anyone who imports the di functionality, such as the client package,
// the Theia integration package and the server package.
(0, inversify_1.decorate)((0, inversify_1.injectable)(), base_jsonrpc_glsp_client_1.JsonrpcClientProxy);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/index.js":
/*!***********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__exportStar(__webpack_require__(/*! ./action-protocol/base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/client-notification */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/client-notification.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/clipboard */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/clipboard.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/contexts */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/contexts.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/edge-modification */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/edge-modification.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/element-creation */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-creation.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/element-hover */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-hover.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/element-navigation */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-navigation.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/element-selection */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-selection.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/element-text-editing */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-text-editing.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/element-type-hints */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-type-hints.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/element-validation */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/element-validation.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/model-data */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-data.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/model-edit-mode */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-edit-mode.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/model-layout */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/model-saving */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/model-saving.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/node-modification */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/node-modification.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/tool-palette */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/tool-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/types */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/types.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/undo-redo */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/undo-redo.js"), exports);
__exportStar(__webpack_require__(/*! ./action-protocol/viewport */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/viewport.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/base-glsp-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/base-glsp-client.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/glsp-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-client.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/glsp-server */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/glsp-server.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/jsonrpc/base-jsonrpc-glsp-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/base-jsonrpc-glsp-client.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/jsonrpc/glsp-jsonrpc-client */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/glsp-jsonrpc-client.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/jsonrpc/glsp-jsonrpc-server */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/glsp-jsonrpc-server.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/jsonrpc/websocket-connection */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/websocket-connection.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/jsonrpc/worker-connection-provider */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/worker-connection-provider.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/jsonrpc/ws-connection-provider */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/jsonrpc/ws-connection-provider.js"), exports);
__exportStar(__webpack_require__(/*! ./client-server-protocol/types */ "../node_modules/@eclipse-glsp/protocol/lib/client-server-protocol/types.js"), exports);
__exportStar(__webpack_require__(/*! ./model/default-types */ "../node_modules/@eclipse-glsp/protocol/lib/model/default-types.js"), exports);
__exportStar(__webpack_require__(/*! ./model/model-schema */ "../node_modules/@eclipse-glsp/protocol/lib/model/model-schema.js"), exports);
__exportStar(__webpack_require__(/*! ./re-exports */ "../node_modules/@eclipse-glsp/protocol/lib/re-exports.js"), exports);
__exportStar(__webpack_require__(/*! ./sprotty-actions */ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-actions.js"), exports);
__exportStar(__webpack_require__(/*! ./sprotty-geometry-bounds */ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-bounds.js"), exports);
__exportStar(__webpack_require__(/*! ./sprotty-geometry-dimension */ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-dimension.js"), exports);
__exportStar(__webpack_require__(/*! ./sprotty-geometry-point */ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-point.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/array-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/disposable */ "../node_modules/@eclipse-glsp/protocol/lib/utils/disposable.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/event */ "../node_modules/@eclipse-glsp/protocol/lib/utils/event.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/geometry-movement */ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-movement.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/geometry-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-util.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/geometry-vector */ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-vector.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/math-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/math-util.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js"), exports);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/model/default-types.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/model/default-types.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultTypes = void 0;
/**
 * The default types for graphical model elements available in GLSP.
 */
var DefaultTypes;
(function (DefaultTypes) {
    // HTML elements
    DefaultTypes.HTML = 'html';
    // generic types
    DefaultTypes.FOREIGN_OBJECT = 'foreign-object';
    DefaultTypes.PRE_RENDERED = 'pre-rendered';
    DefaultTypes.SHAPE_PRE_RENDERED = 'shape-pre-rendered';
    // SVG elements
    DefaultTypes.SVG = 'svg';
    // graph types
    DefaultTypes.GRAPH = 'graph';
    DefaultTypes.NODE = 'node';
    DefaultTypes.COMPARTMENT = 'comp';
    DefaultTypes.COMPARTMENT_HEADER = 'comp:header';
    DefaultTypes.EDGE = 'edge';
    DefaultTypes.PORT = 'port';
    DefaultTypes.ROUTING_POINT = 'routing-point';
    DefaultTypes.VOLATILE_ROUTING_POINT = `volatile-${DefaultTypes.ROUTING_POINT}`;
    DefaultTypes.LABEL = 'label';
    // UI elements
    DefaultTypes.BUTTON = 'button';
    DefaultTypes.BUTTON_EXPAND = 'button:expand';
    DefaultTypes.ISSUE_MARKER = 'marker';
    // shapes
    DefaultTypes.NODE_CIRCLE = 'node:circle';
    DefaultTypes.NODE_RECTANGLE = 'node:rectangle';
    DefaultTypes.NODE_DIAMOND = 'node:diamond';
})(DefaultTypes || (exports.DefaultTypes = DefaultTypes = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/model/model-schema.js":
/*!************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/model/model-schema.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isGModelElementSchema = isGModelElementSchema;
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
/** Serializable representation of GModel elements. This is the transfer format
 * used to exchange model information between client and server. Both the client and
 * server have a deserialization mechanism in place to convert a GModelElementSchema
 * into the corresponding class-based model (or EMF-based in case of the Java Server).
 *
 * To ensure sprotty compatibility all types are just aliases of the corresponding Sprotty SModel API element.
 */
function isGModelElementSchema(object) {
    return typeof object === 'object' && (0, type_util_1.hasStringProp)(object, 'type') && (0, type_util_1.hasStringProp)(object, 'id');
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/re-exports.js":
/*!****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/re-exports.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSubType = exports.getBasicType = exports.findElement = exports.cloneModel = exports.applyBounds = exports.isZoomable = exports.isScrollable = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var model_1 = __webpack_require__(/*! sprotty-protocol/lib/model */ "../node_modules/sprotty-protocol/lib/model.js");
Object.defineProperty(exports, "isScrollable", ({ enumerable: true, get: function () { return model_1.isScrollable; } }));
Object.defineProperty(exports, "isZoomable", ({ enumerable: true, get: function () { return model_1.isZoomable; } }));
__exportStar(__webpack_require__(/*! sprotty-protocol/lib/utils/async */ "../node_modules/sprotty-protocol/lib/utils/async.js"), exports);
__exportStar(__webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js"), exports);
__exportStar(__webpack_require__(/*! sprotty-protocol/lib/utils/json */ "../node_modules/sprotty-protocol/lib/utils/json.js"), exports);
var model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "../node_modules/sprotty-protocol/lib/utils/model-utils.js");
Object.defineProperty(exports, "applyBounds", ({ enumerable: true, get: function () { return model_utils_1.applyBounds; } }));
Object.defineProperty(exports, "cloneModel", ({ enumerable: true, get: function () { return model_utils_1.cloneModel; } }));
Object.defineProperty(exports, "findElement", ({ enumerable: true, get: function () { return model_utils_1.findElement; } }));
Object.defineProperty(exports, "getBasicType", ({ enumerable: true, get: function () { return model_utils_1.getBasicType; } }));
Object.defineProperty(exports, "getSubType", ({ enumerable: true, get: function () { return model_utils_1.getSubType; } }));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-actions.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/sprotty-actions.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable @typescript-eslint/no-shadow */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewportResult = exports.SetViewportAction = exports.SetBoundsAction = exports.SelectionResult = exports.OpenAction = exports.MoveAction = exports.HoverFeedbackAction = exports.GetViewportAction = exports.GetSelectionAction = exports.CollapseExpandAllAction = exports.CollapseExpandAction = exports.BringToFrontAction = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
Object.defineProperty(exports, "BringToFrontAction", ({ enumerable: true, get: function () { return actions_1.BringToFrontAction; } }));
Object.defineProperty(exports, "CollapseExpandAction", ({ enumerable: true, get: function () { return actions_1.CollapseExpandAction; } }));
Object.defineProperty(exports, "CollapseExpandAllAction", ({ enumerable: true, get: function () { return actions_1.CollapseExpandAllAction; } }));
Object.defineProperty(exports, "GetSelectionAction", ({ enumerable: true, get: function () { return actions_1.GetSelectionAction; } }));
Object.defineProperty(exports, "GetViewportAction", ({ enumerable: true, get: function () { return actions_1.GetViewportAction; } }));
Object.defineProperty(exports, "HoverFeedbackAction", ({ enumerable: true, get: function () { return actions_1.HoverFeedbackAction; } }));
Object.defineProperty(exports, "MoveAction", ({ enumerable: true, get: function () { return actions_1.MoveAction; } }));
Object.defineProperty(exports, "OpenAction", ({ enumerable: true, get: function () { return actions_1.OpenAction; } }));
Object.defineProperty(exports, "SelectionResult", ({ enumerable: true, get: function () { return actions_1.SelectionResult; } }));
Object.defineProperty(exports, "SetBoundsAction", ({ enumerable: true, get: function () { return actions_1.SetBoundsAction; } }));
Object.defineProperty(exports, "SetViewportAction", ({ enumerable: true, get: function () { return actions_1.SetViewportAction; } }));
Object.defineProperty(exports, "ViewportResult", ({ enumerable: true, get: function () { return actions_1.ViewportResult; } }));
const base_protocol_1 = __webpack_require__(/*! ./action-protocol/base-protocol */ "../node_modules/@eclipse-glsp/protocol/lib/action-protocol/base-protocol.js");
const type_util_1 = __webpack_require__(/*! ./utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
actions_1.CollapseExpandAction.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.CollapseExpandAction.KIND) && (0, type_util_1.hasArrayProp)(object, 'expandIds') && (0, type_util_1.hasArrayProp)(object, 'collapseIds');
actions_1.CollapseExpandAllAction.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.CollapseExpandAllAction.KIND) && (0, type_util_1.hasBooleanProp)(object, 'expand');
actions_1.GetSelectionAction.is = (object) => base_protocol_1.RequestAction.hasKind(object, actions_1.GetSelectionAction.KIND);
actions_1.GetViewportAction.is = (object) => base_protocol_1.RequestAction.hasKind(object, actions_1.GetViewportAction.KIND);
actions_1.HoverFeedbackAction.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.HoverFeedbackAction.KIND) && (0, type_util_1.hasStringProp)(object, 'mouseoverElement') && (0, type_util_1.hasBooleanProp)(object, 'mouseIsOver');
actions_1.MoveAction.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.MoveAction.KIND) &&
    (0, type_util_1.hasArrayProp)(object, 'moves') &&
    (0, type_util_1.hasBooleanProp)(object, 'animate') &&
    (0, type_util_1.hasBooleanProp)(object, 'finished');
actions_1.OpenAction.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.OpenAction.KIND) && (0, type_util_1.hasStringProp)(object, 'elementId');
actions_1.SelectionResult.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.SelectionResult.KIND) && (0, type_util_1.hasArrayProp)(object, 'selectedElementsIDs');
actions_1.SetBoundsAction.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.SetBoundsAction.KIND) && (0, type_util_1.hasObjectProp)(object, 'bounds');
actions_1.SetViewportAction.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.SetViewportAction.KIND) &&
    (0, type_util_1.hasStringProp)(object, 'elementId') &&
    (0, type_util_1.hasObjectProp)(object, 'newViewport') &&
    (0, type_util_1.hasBooleanProp)(object, 'animate');
actions_1.ViewportResult.is = (object) => base_protocol_1.Action.hasKind(object, actions_1.ViewportResult.KIND) && (0, type_util_1.hasObjectProp)(object, 'viewport') && (0, type_util_1.hasObjectProp)(object, 'canvasBounds');


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-bounds.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-bounds.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable @typescript-eslint/no-shadow */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Bounds = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
Object.defineProperty(exports, "Bounds", ({ enumerable: true, get: function () { return geometry_1.Bounds; } }));
const sprotty_geometry_dimension_1 = __webpack_require__(/*! ./sprotty-geometry-dimension */ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-dimension.js");
const sprotty_geometry_point_1 = __webpack_require__(/*! ./sprotty-geometry-point */ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-point.js");
const type_util_1 = __webpack_require__(/*! ./utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
geometry_1.Bounds.ZERO = Object.freeze({
    x: 0,
    y: 0,
    width: 0,
    height: 0
});
geometry_1.Bounds.is = (bounds) => type_util_1.AnyObject.is(bounds) &&
    (0, type_util_1.hasNumberProp)(bounds, 'x') &&
    (0, type_util_1.hasNumberProp)(bounds, 'y') &&
    (0, type_util_1.hasNumberProp)(bounds, 'width') &&
    (0, type_util_1.hasNumberProp)(bounds, 'height');
geometry_1.Bounds.isValid = (bounds) => bounds !== undefined && sprotty_geometry_dimension_1.Dimension.isValid(bounds) && sprotty_geometry_point_1.Point.isValid(bounds);
geometry_1.Bounds.encompasses = (outer, inner) => geometry_1.Bounds.includes(outer, geometry_1.Bounds.topLeft(inner)) && geometry_1.Bounds.includes(outer, geometry_1.Bounds.bottomRight(inner));
geometry_1.Bounds.overlap = (one, other, touch) => {
    const oneTopLeft = geometry_1.Bounds.topLeft(one);
    const oneBottomRight = geometry_1.Bounds.bottomRight(one);
    const otherTopLeft = geometry_1.Bounds.topLeft(other);
    const otherBottomRight = geometry_1.Bounds.bottomRight(other);
    return touch
        ? oneTopLeft.x <= otherBottomRight.x &&
            otherTopLeft.x <= oneBottomRight.x &&
            oneBottomRight.y >= otherTopLeft.y &&
            otherBottomRight.y >= oneTopLeft.y
        : oneTopLeft.x < otherBottomRight.x &&
            otherTopLeft.x < oneBottomRight.x &&
            oneBottomRight.y > otherTopLeft.y &&
            otherBottomRight.y > oneTopLeft.y;
};
geometry_1.Bounds.equals = (left, right, eps) => sprotty_geometry_point_1.Point.equals(left, right, eps) && sprotty_geometry_dimension_1.Dimension.equals(left, right, eps);
geometry_1.Bounds.left = (bounds) => bounds.x;
geometry_1.Bounds.centerX = (bounds) => bounds.x + (bounds.width >= 0 ? bounds.width * 0.5 : 0);
geometry_1.Bounds.right = (bounds) => bounds.x + bounds.width;
geometry_1.Bounds.top = (bounds) => bounds.y;
geometry_1.Bounds.middle = (bounds) => bounds.y + (bounds.height >= 0 ? bounds.height * 0.5 : 0);
geometry_1.Bounds.centerY = geometry_1.Bounds.middle;
geometry_1.Bounds.bottom = (bounds) => bounds.y + bounds.height;
geometry_1.Bounds.topLeft = (bounds) => ({ x: geometry_1.Bounds.left(bounds), y: geometry_1.Bounds.top(bounds) });
geometry_1.Bounds.topCenter = (bounds) => ({ x: geometry_1.Bounds.centerX(bounds), y: geometry_1.Bounds.top(bounds) });
geometry_1.Bounds.topRight = (bounds) => ({ x: geometry_1.Bounds.right(bounds), y: geometry_1.Bounds.top(bounds) });
geometry_1.Bounds.middleLeft = (bounds) => ({ x: geometry_1.Bounds.left(bounds), y: geometry_1.Bounds.middle(bounds) });
geometry_1.Bounds.middleCenter = (bounds) => ({ x: geometry_1.Bounds.centerX(bounds), y: geometry_1.Bounds.middle(bounds) });
geometry_1.Bounds.middleRight = (bounds) => ({ x: geometry_1.Bounds.right(bounds), y: geometry_1.Bounds.middle(bounds) });
geometry_1.Bounds.bottomLeft = (bounds) => ({ x: geometry_1.Bounds.left(bounds), y: geometry_1.Bounds.bottom(bounds) });
geometry_1.Bounds.bottomCenter = (bounds) => ({ x: geometry_1.Bounds.centerX(bounds), y: geometry_1.Bounds.bottom(bounds) });
geometry_1.Bounds.bottomRight = (bounds) => ({ x: geometry_1.Bounds.right(bounds), y: geometry_1.Bounds.bottom(bounds) });
geometry_1.Bounds.isAbove = (leftBounds, rightBounds) => geometry_1.Bounds.top(leftBounds) <= geometry_1.Bounds.top(rightBounds);
geometry_1.Bounds.isBelow = (leftBounds, rightBounds) => geometry_1.Bounds.top(leftBounds) >= geometry_1.Bounds.top(rightBounds);
geometry_1.Bounds.isBefore = (leftBounds, rightBounds) => geometry_1.Bounds.left(leftBounds) < geometry_1.Bounds.left(rightBounds);
geometry_1.Bounds.isAfter = (leftBounds, rightBounds) => geometry_1.Bounds.left(leftBounds) >= geometry_1.Bounds.left(rightBounds);
geometry_1.Bounds.sortBy = (rankFunc, ...bounds) => bounds.sort((left, right) => rankFunc(left) - rankFunc(right));
geometry_1.Bounds.from = (topLeft, bottomRight) => ({
    ...topLeft,
    width: bottomRight.x - topLeft.x,
    height: bottomRight.y - topLeft.y
});
geometry_1.Bounds.position = geometry_1.Bounds.topLeft;
geometry_1.Bounds.dimension = (bounds) => ({ width: bounds.width, height: bounds.height });
geometry_1.Bounds.move = geometry_1.Bounds.translate;
geometry_1.Bounds.resize = (bounds, delta) => ({
    ...bounds,
    width: bounds.width + delta.width,
    height: bounds.height + delta.height
});


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-dimension.js":
/*!********************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-dimension.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable @typescript-eslint/no-shadow */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dimension = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
Object.defineProperty(exports, "Dimension", ({ enumerable: true, get: function () { return geometry_1.Dimension; } }));
const math_util_1 = __webpack_require__(/*! ./utils/math-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/math-util.js");
const type_util_1 = __webpack_require__(/*! ./utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
geometry_1.Dimension.ZERO = Object.freeze({
    width: 0,
    height: 0
});
geometry_1.Dimension.is = (dimension) => type_util_1.AnyObject.is(dimension) && (0, type_util_1.hasNumberProp)(dimension, 'width') && (0, type_util_1.hasNumberProp)(dimension, 'height');
geometry_1.Dimension.center = (d) => ({ x: d.width * 0.5, y: d.height * 0.5 });
geometry_1.Dimension.add = (d, a) => ({ width: d.width + a.width, height: d.height + a.height });
geometry_1.Dimension.subtract = (d, a) => ({ width: d.width - a.width, height: d.height - a.height });
geometry_1.Dimension.multiplyMeasure = (d, m) => ({ width: d.width * m, height: d.height * m });
geometry_1.Dimension.divideMeasure = (d, m) => ({ width: d.width / m, height: d.height / m });
geometry_1.Dimension.map = (dimension, callbackfn) => ({
    ...dimension,
    width: callbackfn(dimension.width, 'width'),
    height: callbackfn(dimension.height, 'height')
});
geometry_1.Dimension.equals = (left, right, eps) => (0, math_util_1.equalUpTo)(left.width, right.width, eps) && (0, math_util_1.equalUpTo)(left.height, right.height, eps);
geometry_1.Dimension.fromPoint = (point) => ({ width: point.x, height: point.y });
geometry_1.Dimension.area = (dimension) => dimension.width * dimension.height;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-point.js":
/*!****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-point.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable @typescript-eslint/no-shadow */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Point = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
Object.defineProperty(exports, "Point", ({ enumerable: true, get: function () { return geometry_1.Point; } }));
const geometry_vector_1 = __webpack_require__(/*! ./utils/geometry-vector */ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-vector.js");
const math_util_1 = __webpack_require__(/*! ./utils/math-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/math-util.js");
const type_util_1 = __webpack_require__(/*! ./utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
geometry_1.Point.is = (point) => type_util_1.AnyObject.is(point) && (0, type_util_1.hasNumberProp)(point, 'x') && (0, type_util_1.hasNumberProp)(point, 'y');
geometry_1.Point.isOrigin = (point) => geometry_1.Point.equals(point, geometry_1.Point.ORIGIN);
geometry_1.Point.isValid = (point) => point !== undefined && !isNaN(point.x) && !isNaN(point.y);
geometry_1.Point.abs = (point) => geometry_1.Point.map(point, Math.abs);
geometry_1.Point.divideScalar = (point, scalar) => geometry_1.Point.map(point, coordinate => coordinate / scalar);
geometry_1.Point.multiplyScalar = (point, scalar) => geometry_1.Point.map(point, coordinate => coordinate * scalar);
geometry_1.Point.map = (point, callbackfn) => ({
    ...point,
    x: callbackfn(point.x, 'x'),
    y: callbackfn(point.y, 'y')
});
geometry_1.Point.snapToGrid = (point, grid, gridOrigin) => {
    if (gridOrigin) {
        // move point relative to grid origin and then restore after snapping
        const relative = geometry_1.Point.subtract(point, gridOrigin);
        const snapped = geometry_1.Point.snapToGrid(relative, grid);
        return geometry_1.Point.add(gridOrigin, snapped);
    }
    else {
        return { x: Math.round(point.x / grid.x) * grid.x, y: Math.round(point.y / grid.y) * grid.y };
    }
};
geometry_1.Point.vector = (from, to) => geometry_1.Point.subtract(to, from);
geometry_1.Point.move = (from, to) => {
    const vector = geometry_1.Point.vector(from, to);
    const direction = geometry_vector_1.Vector.direction(vector);
    return { from, to, vector, direction };
};
geometry_1.Point.moveTowards = (from, vector) => {
    const to = geometry_1.Point.add(from, vector);
    const dir = geometry_vector_1.Vector.direction(vector);
    return { from, to, vector, direction: dir };
};
geometry_1.Point.equals = (one, other, eps) => (0, math_util_1.equalUpTo)(one.x, other.x, eps) && (0, math_util_1.equalUpTo)(one.y, other.y, eps);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.first = first;
exports.last = last;
exports.pluck = pluck;
exports.remove = remove;
exports.flatPush = flatPush;
exports.asArray = asArray;
exports.distinctAdd = distinctAdd;
exports.isArrayOfType = isArrayOfType;
exports.isArrayOfClass = isArrayOfClass;
exports.isArrayOfPrimitive = isArrayOfPrimitive;
exports.isStringArray = isStringArray;
exports.isArrayMatching = isArrayMatching;
exports.partition = partition;
exports.arrayOf = arrayOf;
function first(array, n) {
    if (n) {
        return array.filter((_, index) => index < n);
    }
    return array[0];
}
function last(array, n) {
    if (n) {
        return array.filter((_, index) => array.length - index <= n);
    }
    return array[array.length - 1];
}
/**
 * Plucks (i.e. extracts) the property value that corresponds to the given key from all objects of the array.
 * @param array The array which should be plucked.
 * @param key  The key of the property that should be extracted.
 * @returns A new array containing the plugged property for each element of the array.
 */
function pluck(array, key) {
    return array.map(element => element[key]);
}
/**
 * Removes the given values from the given array (if present).
 * @param array The array to execute the remove operation on.
 * @param values The values that should be removed from the array.
 */
function remove(array, ...values) {
    values.forEach(value => {
        const index = array.indexOf(value);
        if (index >= 0) {
            array.splice(index, 1);
        }
    });
}
/**
 * Push an array of values to the given array. The values can either be single objects of a concrete type `T`
 * or can also be nested arrays of T. If nested arrays are passed the they will be destructured (i.e. flattened)
 * so that they can be pushed to the given array.
 * @param array The array to push to.
 * @param toPush The values of {@link MaybeArray}s that should be pushed.
 */
function flatPush(array, toPush) {
    toPush.forEach(value => (Array.isArray(value) ? array.push(...value) : array.push(value)));
}
/**
 * Helper function to convert a {@link MaybeArray} into an array.
 * @param maybe The MaybeArray to convert
 * @returns The corresponding array
 */
function asArray(maybe) {
    if (Array.isArray(maybe)) {
        return maybe;
    }
    return [maybe];
}
/**
 * Adds the given values to the given array. The add operation is executed distinct meaning
 * a value will not be pushed to the array if its already present in the array.
 * @param array The array to push to.
 * @param values The values that should be added distinctively.
 */
function distinctAdd(array, ...values) {
    values.forEach(value => {
        if (!array.includes(value)) {
            array.push(value);
        }
    });
}
/**
 * A typeguard function to check wether a given object is an array of a specific type `T`. As it checks the type of each individual
 * array element this guard check is expensive and should only be used in cases where complete type-safety is required.
 * @param object The object to check.
 * @param typeGuard A typeguard to check the type of the individual elements.
 * @param supportEmpty A flag to determine wether empty arrays should pass the typeguard check.
 * @returns A type predicate indicating wether the given object has passed the type guard check.
 */
function isArrayOfType(object, typeGuard, supportEmpty = false) {
    return isArrayMatching(object, element => typeGuard(element), supportEmpty);
}
/**
 * A typeguard function to check wether a given object is an array of a class`T`. As it checks the wether each individual element
 * is an instance of the given class this  guard check is expensive and should only be used in cases where complete type-safety is required.
 * @param object The object to check.
 * @param constructor The constructor for the class under test.
 * @param supportEmpty A flag to determine wether empty arrays should pass the typeguard check.
 * @returns A type predicate indicating wether the given object has passed the type guard check.
 */
function isArrayOfClass(object, constructor, supportEmpty = false) {
    return isArrayMatching(object, element => element instanceof constructor, supportEmpty);
}
/**
 * A typeguard function to check wether a given object is an array of a {@link PrimitiveType} `T. As it checks the type of each individual
 * array element this guard check is expensive and should only be used in cases where complete type-safety is required.
 * @param object The object to check.
 * @param primitiveType The expected primitive type of the elements.
 * @param supportEmpty A flag to determine wether empty arrays should pass the typeguard check.
 * @returns A type predicate indicating wether the given object has passed the type guard check.
 */
function isArrayOfPrimitive(object, primitiveType, supportEmpty = false) {
    return isArrayMatching(object, element => typeof element === primitiveType, supportEmpty);
}
/**
 * A typeguard function to check wether a given object is an array of a strings. As it checks the type of each individual
 * array element this guard check is expensive and should only be used in cases where complete type-safety is required.
 * @param object The object to check.
 * @param supportEmpty A flag to determine wether empty arrays should pass the typeguard check.
 * @returns A type predicate indicating wether the given object has passed the type guard check.
 */
function isStringArray(object, supportEmpty = false) {
    return isArrayOfPrimitive(object, 'string', supportEmpty);
}
/**
 * A typeguard function to check wether a given object is an array where each element matches the given predicate.
 * @param object The object to check.
 * @param predicate The predicate to test with.
 * @param supportEmpty A flag to determine wether empty arrays be matched by the predicate..
 * @returns `true` if the given object is an array and all elements match the given predicate. `false` otherwise.
 */
function isArrayMatching(object, predicate, supportEmpty = false) {
    return Array.isArray(object) && object.every(predicate) && (supportEmpty || object.length > 0);
}
function partition(source, matchGuard) {
    const match = [];
    const rest = [];
    source.forEach(element => {
        if (matchGuard(element)) {
            match.push(element);
        }
        else {
            rest.push(element);
        }
    });
    return { match, rest };
}
/**
 * Helper function to create an array of values without any undefined values.
 * @param values The values to create the array from.
 * @returns The array of values without any undefined values.
 */
function arrayOf(...values) {
    return values.filter(element => element !== undefined);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/utils/disposable.js":
/*!**********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/utils/disposable.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisposableCollection = exports.Disposable = void 0;
const array_util_1 = __webpack_require__(/*! ../utils/array-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js");
const type_util_1 = __webpack_require__(/*! ../utils/type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
var Disposable;
(function (Disposable) {
    function is(value) {
        return type_util_1.AnyObject.is(value) && (0, type_util_1.hasFunctionProp)(value, 'dispose');
    }
    Disposable.is = is;
    /**
     * Creates a new empty i.e. no-op {@link Disposable}.
     * @returns the newly created disposable
     */
    function empty() {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        return { dispose: () => { } };
    }
    Disposable.empty = empty;
    /**
     * Creates a new {@link Disposable} that delegates to the given callback.
     * @param cb The callback that should be invoked on dispose
     * @returns the newly created disposable
     */
    function create(cb) {
        return { dispose: cb };
    }
    Disposable.create = create;
    /**
     * Disposes the given object if it is a {@link Disposable}.
     * @param value The object that should be disposed
     */
    function dispose(value) {
        if (is(value)) {
            value.dispose();
        }
    }
    Disposable.dispose = dispose;
})(Disposable || (exports.Disposable = Disposable = {}));
/**
 * Reusable base class to manage a collection of {@link Disposable}s.
 */
class DisposableCollection {
    constructor(...toDispose) {
        this.disposables = [];
        toDispose.forEach(d => this.push(d));
        this.errorHandler = err => console.error(err);
    }
    dispose() {
        var _a, _b;
        if (this.disposed) {
            return;
        }
        try {
            while (!this.disposed) {
                (_a = this.disposables.pop()) === null || _a === void 0 ? void 0 : _a.dispose();
            }
        }
        catch (err) {
            (_b = this.errorHandler) === null || _b === void 0 ? void 0 : _b.call(this, err);
        }
    }
    get disposed() {
        return this.disposables.length === 0;
    }
    push(...disposables) {
        const toAdd = (0, array_util_1.isArrayOfType)(disposables, Disposable.is) ? disposables : disposables.map(Disposable.create);
        this.disposables.push(...toAdd);
        return Disposable.create(() => (0, array_util_1.remove)(this.disposables, ...toAdd));
    }
    get isDisposed() {
        return this.disposed;
    }
    /**
     * Removes all disposables in this collection WITHOUT triggering their disposal behavior.
     */
    clear() {
        this.disposables.length = 0;
    }
}
exports.DisposableCollection = DisposableCollection;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/utils/event.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/utils/event.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Emitter = exports.Event = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const jsonrpc = __webpack_require__(/*! vscode-jsonrpc */ "../node_modules/vscode-jsonrpc/lib/browser/main.js");
var Event;
(function (Event) {
    /**
     * Utility function to register a one-time listener for an event. The listener will be disposed
     * automatically after the next event is fired.
     * @param event The event to listen to
     * @param listener The listener function that will be called when the event happens.
     * @param thisArgs The 'this' which will be used when calling the event listener.
     * @param disposables An array to which the {@link Disposable} for removing the listener will be added.
     * @returns a {@link Disposable} to remove the listener again.
     */
    function once(event, listener, thisArgs, disposables) {
        const toDispose = event(e => {
            listener(e);
            toDispose.dispose();
        }, thisArgs, disposables);
        return toDispose;
    }
    Event.once = once;
    /**
     * Utility function to wait for an event to happen. The function will return a promise that will be resolved
     * when the event is fired. Optionally a predicate can be provided that will be used to filter the event.
     * If a predicate is provided, the promise will only be resolved when the predicate returns true.
     * The underlying listener will be disposed automatically when the promise is resolved.
     * @param event The event to listen to
     * @param predicate An optional predicate that will be used to filter the event
     * @returns a promise that will be resolved when the event is fired (and the optional predicate matches)
     */
    function waitUntil(event, predicate) {
        return new Promise(resolve => {
            const toDispose = event(e => {
                if (!predicate || predicate(e)) {
                    resolve(e);
                    toDispose.dispose();
                }
            });
        });
    }
    Event.waitUntil = waitUntil;
})(Event || (exports.Event = Event = {}));
class Emitter extends jsonrpc.Emitter {
    constructor(options = {}) {
        super(options);
    }
    /**
     * The even that is managed by this emitter.
     * Intended for the public to allow to subscribe to the emitter`s events.
     */
    get event() {
        return super.event;
    }
    /**
     * Fires and event and notifies all registered listeners
     */
    fire(event) {
        super.fire(event);
    }
}
exports.Emitter = Emitter;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-movement.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-movement.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Movement = void 0;
const sprotty_geometry_point_1 = __webpack_require__(/*! ../sprotty-geometry-point */ "../node_modules/@eclipse-glsp/protocol/lib/sprotty-geometry-point.js");
const geometry_vector_1 = __webpack_require__(/*! ./geometry-vector */ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-vector.js");
const type_util_1 = __webpack_require__(/*! ./type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
/**
 * A collection of utility functions for working with movements.

 */
var Movement;
(function (Movement) {
    /**
     * The zero movement. It has from and to set to the origin and the vector set to zero.
     */
    Movement.ZERO = Object.freeze({
        from: sprotty_geometry_point_1.Point.ORIGIN,
        to: sprotty_geometry_point_1.Point.ORIGIN,
        vector: geometry_vector_1.Vector.ZERO,
        direction: []
    });
    /**
     * A type guard that checks if the given object is a movement.
     * @param obj the object to check
     * @returns true if the object is a movement, false otherwise
     */
    function is(obj) {
        return (type_util_1.AnyObject.is(obj) &&
            (0, type_util_1.hasObjectProp)(obj, 'from') &&
            sprotty_geometry_point_1.Point.is(obj.from) &&
            (0, type_util_1.hasObjectProp)(obj, 'to') &&
            sprotty_geometry_point_1.Point.is(obj.to) &&
            (0, type_util_1.hasObjectProp)(obj, 'vector') &&
            geometry_vector_1.Vector.is(obj.to) &&
            (0, type_util_1.hasObjectProp)(obj, 'direction'));
    }
    Movement.is = is;
    /**
     * Checks if the given movement is stationary, i.e. the starting point and end point are equal and the vector is zero.
     * @param movement the movement to check
     * @returns true if the movement is stationary, false otherwise
     */
    function isStationary(movement) {
        return geometry_vector_1.Vector.isZero(movement.vector);
    }
    Movement.isStationary = isStationary;
    /**
     * Checks if the given movement is zero, i.e., all values are zero.
     * @param movement the movement to check
     * @returns true if the movement is zero, false otherwise
     */
    function isZero(movement) {
        return Movement.equals(movement, Movement.ZERO);
    }
    Movement.isZero = isZero;
    /**
     * Checks if two movements are equal. Two movements are equal if their starting points, end points, and vectors are equal.
     * @param left the left movement
     * @param right the right movement
     * @returns true if the movements are equal, false otherwise
     */
    function equals(left, right) {
        return sprotty_geometry_point_1.Point.equals(left.from, right.from) && sprotty_geometry_point_1.Point.equals(left.to, right.to) && geometry_vector_1.Vector.equals(left.vector, right.vector);
    }
    Movement.equals = equals;
})(Movement || (exports.Movement = Movement = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-util.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-util.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Direction = void 0;
/**
 * A direction in 2D space.
 */
exports.Direction = {
    Left: 'left',
    Right: 'right',
    Up: 'up',
    Down: 'down'
};


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-vector.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-vector.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Vector = void 0;
const geometry_util_1 = __webpack_require__(/*! ./geometry-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/geometry-util.js");
const type_util_1 = __webpack_require__(/*! ./type-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js");
/**
 * A collection of utility functions for working with vectors.
 */
var Vector;
(function (Vector) {
    /**
     * The zero vector. It has x and y set to 0.
     */
    Vector.ZERO = Object.freeze({
        x: 0,
        y: 0
    });
    /**
     * Compute the absolute value of the vector.
     * @param vector the vector to compute the absolute value of
     * @returns the absolute value of the vector
     */
    function abs(vector) {
        return { x: Math.abs(vector.x), y: Math.abs(vector.y) };
    }
    Vector.abs = abs;
    /**
     * Computes the sum of two vectors.
     * @param vector the vector to add to
     * @param addend the vector to add
     * @returns the sum of the two vectors
     */
    function add(vector, addend) {
        return { x: vector.x + addend.x, y: vector.y + addend.y };
    }
    Vector.add = add;
    /**
     * Check if two vectors are equal.
     * @param left the left vector
     * @param right the right vector
     * @returns true if the vectors are equal, false otherwise
     */
    function equals(left, right) {
        return left.x === right.x && left.y === right.y;
    }
    Vector.equals = equals;
    /**
     * Check if a vector is valid. A vector is valid if it is not undefined and both x and y are numbers.
     * @param vector the vector to check
     * @returns true if the vector is valid, false otherwise
     */
    function isValid(vector) {
        return vector !== undefined && !isNaN(vector.x) && !isNaN(vector.y);
    }
    Vector.isValid = isValid;
    /**
     * Computes the magnitude of a vector defined as the square root of the sum of the squares of the x and y components.
     * @param point the vector to compute the magnitude of
     * @returns the magnitude of the vector
     */
    function magnitude(point) {
        return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
    }
    Vector.magnitude = magnitude;
    /**
     * Maps each component of the vector to a new value given by the callback function.
     * @param vector the vector to map
     * @param callbackfn the function to map the components
     * @returns the mapped vector
     */
    function map(vector, callbackfn) {
        return {
            ...vector,
            x: callbackfn(vector.x, 'x'),
            y: callbackfn(vector.y, 'y')
        };
    }
    Vector.map = map;
    /**
     * Computes the normalized vector of a given vector.
     * The normalized vector has the same direction as the original vector but a magnitude of 1.
     *
     * @param vector the vector to normalize
     * @returns the normalized vector
     */
    function normalize(vector) {
        const mag = magnitude(vector);
        if (mag === 0 || mag === 1) {
            return Vector.ZERO;
        }
        return {
            x: vector.x / mag,
            y: vector.y / mag
        };
    }
    Vector.normalize = normalize;
    /**
     * Check if a vector is the zero vector.
     * @param vector the vector to check
     * @returns true if the vector is the zero vector, false otherwise
     */
    function isZero(vector) {
        return Vector.equals(vector, Vector.ZERO);
    }
    Vector.isZero = isZero;
    /**
     * Type guard to check if a value is a vector.
     * @param vector the value to check
     * @returns true if the value is a vector, false otherwise
     */
    function is(vector) {
        return type_util_1.AnyObject.is(vector) && (0, type_util_1.hasNumberProp)(vector, 'x') && (0, type_util_1.hasNumberProp)(vector, 'y');
    }
    Vector.is = is;
    /**
     * Divides each component of the vector by a scalar.
     *
     * @param vector the vector to divide
     * @param scalar the scalar to divide by
     * @returns the divided vector
     */
    function divide(vector, scalar) {
        return Vector.map(vector, coordinate => coordinate / scalar);
    }
    Vector.divide = divide;
    /**
     * Multiplies each component of the vector by a scalar.
     *
     * @param vector the vector to multiply
     * @param scalar the scalar to multiply by
     * @returns the multiplied vector
     */
    function multiply(vector, scalar) {
        return Vector.map(vector, coordinate => coordinate * scalar);
    }
    Vector.multiply = multiply;
    /**
     * Subtracts the subtrahend from the vector.
     *
     * @param vector the vector to subtract from
     * @param subtrahend the vector to subtract
     * @returns the subtracted vector
     */
    function subtract(vector, subtrahend) {
        return { x: vector.x - subtrahend.x, y: vector.y - subtrahend.y };
    }
    Vector.subtract = subtract;
    /**
     * Reverse the direction of a vector.
     * @param vector the vector to reverse
     * @returns the reversed vector
     */
    function reverse(vector) {
        return { x: -vector.x, y: -vector.y };
    }
    Vector.reverse = reverse;
    /**
     * Computes the direction of a vector
     * @param vector the vector to compute the direction of
     * @returns the direction of the vector
     */
    function direction(vector) {
        const directions = [];
        if (vector.x < 0) {
            directions.push(geometry_util_1.Direction.Left);
        }
        else if (vector.x > 0) {
            directions.push(geometry_util_1.Direction.Right);
        }
        if (vector.y < 0) {
            directions.push(geometry_util_1.Direction.Up);
        }
        else if (vector.y > 0) {
            directions.push(geometry_util_1.Direction.Down);
        }
        return directions;
    }
    Vector.direction = direction;
    /**
     * Computes a vector that is the minimum of all given vectors.
     * @returns the minimum vector
     */
    function min(...vectors) {
        return {
            x: Math.min(...vectors.map(vector => vector.x)),
            y: Math.min(...vectors.map(vector => vector.y))
        };
    }
    Vector.min = min;
    /**
     * Computes a vector that is the maximum of all given vectors.
     * @returns the maximum vector
     */
    function max(...vectors) {
        return {
            x: Math.max(...vectors.map(vector => vector.x)),
            y: Math.max(...vectors.map(vector => vector.y))
        };
    }
    Vector.max = max;
    /**
     * Computes a vector that is the average of all given vectors.
     * @returns the average vector
     */
    function avg(...vectors) {
        if (vectors.length === 0) {
            return Vector.ZERO;
        }
        return {
            x: vectors.reduce((prev, cur) => prev + cur.x, 0) / vectors.length,
            y: vectors.reduce((prev, cur) => prev + cur.y, 0) / vectors.length
        };
    }
    Vector.avg = avg;
})(Vector || (exports.Vector = Vector = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/utils/math-util.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/utils/math-util.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.equalUpTo = equalUpTo;
function equalUpTo(one, other, epsilon = Number.EPSILON) {
    return Math.abs(one - other) <= epsilon;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/protocol/lib/utils/type-util.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MaybeActions = exports.AnyObject = void 0;
exports.typeGuard = typeGuard;
exports.typeGuardOr = typeGuardOr;
exports.toTypeGuard = toTypeGuard;
exports.call = call;
exports.hasStringProp = hasStringProp;
exports.hasBooleanProp = hasBooleanProp;
exports.hasNumberProp = hasNumberProp;
exports.hasObjectProp = hasObjectProp;
exports.hasFunctionProp = hasFunctionProp;
exports.hasArrayProp = hasArrayProp;
const array_util_1 = __webpack_require__(/*! ../utils/array-util */ "../node_modules/@eclipse-glsp/protocol/lib/utils/array-util.js");
var AnyObject;
(function (AnyObject) {
    /**
     * Type guard to check wether a given object is of type {@link AnyObject}.
     * @param object The object to check.
     * @returns The given object as {@link AnyObject} or `false`.
     */
    function is(object) {
        // eslint-disable-next-line no-null/no-null
        return object !== null && typeof object === 'object';
    }
    AnyObject.is = is;
})(AnyObject || (exports.AnyObject = AnyObject = {}));
/** Utility function to combine two type guards */
function typeGuard(one, other) {
    return (element) => one(element) && other(element);
}
/** Utility function to combine two type guards with an OR */
function typeGuardOr(one, other) {
    return (element) => one(element) || other(element);
}
/**
 * Utility function that create a typeguard function for a given class constructor.
 * Essentially this wraps an instance of check as typeguard function.
 * @param constructor The constructor of the class for which the typeguard should be created.
 * @returns The typeguard for this class.
 */
function toTypeGuard(constructor) {
    return (element) => element instanceof constructor;
}
/**
 * Utility function that calls a given function if it is a function, otherwise returns the value.
 * This is useful to allow functions to be passed as parameters but also allow
 * simple values to be passed.
 * @template T The type of the value that might be returned by the function.
 * @param maybeFun The value that might be a function or a value of type `T`.
 * @param args The arguments to pass to the function if it is called.
 * @returns The result of the function call or the value itself if it is not a function.
 */
function call(maybeFun, ...args) {
    return typeof maybeFun === 'function' ? maybeFun(...args) : maybeFun;
}
var MaybeActions;
(function (MaybeActions) {
    /**
     * Utility function that converts a given `MaybeActions` value into an array of actions.
     * If the value is a function, it will be called to get the actions.
     * If the value is an array, it will be returned as is.
     * If the value is undefined, an empty array will be returned.
     * @param actions The value that might be a function or an array of actions.
     * @returns An array of actions.
     */
    function asArray(actions) {
        const cleanup = actions ? call(actions) : [];
        return cleanup ? (0, array_util_1.asArray)(cleanup) : [];
    }
    MaybeActions.asArray = asArray;
})(MaybeActions || (exports.MaybeActions = MaybeActions = {}));
/**
 * Validates whether the given object has a property of type `string` with the given key.
 * @param object The object that should be validated
 * @param propertyKey The key of the property
 * @param optional Flag to indicate wether the property can be optional i.e. also return true if the given key is undefined
 * @returns `true` if the object has property with matching key of type `string`.
 */
function hasStringProp(object, propertyKey, optional = false) {
    const property = object[propertyKey];
    return property !== undefined ? typeof property === 'string' : optional;
}
/**
 * Validates whether the given object has a property of type `boolean` with the given key.
 * @param object The object that should be validated
 * @param propertyKey The key of the property
 * @param optional Flag to indicate wether the property can be optional i.e. also return true if the given key is undefined
 * @returns `true` if the object has property with matching key of type `boolean`.
 */
function hasBooleanProp(object, propertyKey, optional = false) {
    const property = object[propertyKey];
    return property !== undefined ? typeof property === 'boolean' : optional;
}
/**
 * Validates whether the given object has a property of type `number` with the given key.
 * @param object The object that should be validated
 * @param propertyKey The key of the property
 * @param optional Flag to indicate wether the property can be optional i.e. also return true if the given key is undefined
 * @returns `true` if the object has property with matching key of type `number`.
 */
function hasNumberProp(object, propertyKey, optional = false) {
    const property = object[propertyKey];
    return property !== undefined ? typeof property === 'number' : optional;
}
/**
 * Validates whether the given object has a property of type `object` with the given key.
 * @param object The object that should be validated
 * @param propertyKey The key of the property
 * @param optional Flag to indicate wether the property can be optional i.e. also return true if the given key is undefined
 * @returns `true` if the object has property with matching key of type `object`.
 */
function hasObjectProp(object, propertyKey, optional = false) {
    const property = object[propertyKey];
    return property !== undefined ? AnyObject.is(property) : optional;
}
/**
 * Validates whether the given object has a property of type `function` with the given key.
 * @param object The object that should be validated
 * @param propertyKey The key of the property
 * @param optional Flag to indicate wether the property can be optional i.e. also return true if the given key is undefined
 * @returns `true` if the object has property with matching key of type `function`.
 */
function hasFunctionProp(object, propertyKey, optional = false) {
    const property = object[propertyKey];
    return property !== undefined ? typeof property === 'function' : optional;
}
/**
 * Validates whether the given object has a property of type `Array` with the given key.
 * @param object The object that should be validated
 * @param propertyKey The key of the property
 * @param optional Flag to indicate wether the property can be optional i.e. also return true if the given key is undefined
 * @returns `true` if the object has property with matching key of type `Array`.
 */
function hasArrayProp(object, propertyKey, optional = false) {
    const property = object[propertyKey];
    return property !== undefined ? Array.isArray(property) : optional;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/sprotty/lib/api-override.js":
/*!*****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/sprotty/lib/api-override.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MouseListener = exports.KeyListener = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! sprotty */ "../node_modules/sprotty/lib/index.js");
let KeyListener = class KeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        return [];
    }
    keyUp(element, event) {
        return [];
    }
};
exports.KeyListener = KeyListener;
exports.KeyListener = KeyListener = __decorate([
    (0, inversify_1.injectable)()
], KeyListener);
let MouseListener = class MouseListener extends sprotty_1.MouseListener {
    mouseOver(target, event) {
        return [];
    }
    mouseOut(target, event) {
        return [];
    }
    mouseEnter(target, event) {
        return [];
    }
    mouseLeave(target, event) {
        return [];
    }
    mouseDown(target, event) {
        return [];
    }
    mouseMove(target, event) {
        return [];
    }
    mouseUp(target, event) {
        return [];
    }
    wheel(target, event) {
        return [];
    }
    doubleClick(target, event) {
        return [];
    }
    contextMenu(target, event) {
        return [];
    }
    dragOver(target, event) {
        return [];
    }
    drop(target, event) {
        return [];
    }
    decorate(vnode, element) {
        return vnode;
    }
};
exports.MouseListener = MouseListener;
exports.MouseListener = MouseListener = __decorate([
    (0, inversify_1.injectable)()
], MouseListener);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/sprotty/lib/feature-modules.js":
/*!********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/sprotty/lib/feature-modules.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sprottyDefaultModule = exports.edgeJunctionModule = exports.updateModule = exports.openModule = exports.moveModule = exports.modelSourceModule = exports.fadeModule = exports.expandModule = exports.edgeLayoutModule = exports.edgeIntersectionModule = exports.edgeEditModule = exports.buttonModule = void 0;
/********************************************************************************
 * Copyright (c) 2023-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable no-restricted-imports */
const di_1 = __webpack_require__(/*! @eclipse-glsp/protocol/lib/di */ "../node_modules/@eclipse-glsp/protocol/lib/di/index.js");
const di_config_1 = __webpack_require__(/*! sprotty/lib/base/di.config */ "../node_modules/sprotty/lib/base/di.config.js");
exports.sprottyDefaultModule = di_config_1.default;
const di_config_2 = __webpack_require__(/*! sprotty/lib/features/button/di.config */ "../node_modules/sprotty/lib/features/button/di.config.js");
const di_config_3 = __webpack_require__(/*! sprotty/lib/features/edge-intersection/di.config */ "../node_modules/sprotty/lib/features/edge-intersection/di.config.js");
const di_config_4 = __webpack_require__(/*! sprotty/lib/features/edge-junction/di.config */ "../node_modules/sprotty/lib/features/edge-junction/di.config.js");
const di_config_5 = __webpack_require__(/*! sprotty/lib/features/edge-layout/di.config */ "../node_modules/sprotty/lib/features/edge-layout/di.config.js");
const di_config_6 = __webpack_require__(/*! sprotty/lib/features/edit/di.config */ "../node_modules/sprotty/lib/features/edit/di.config.js");
const di_config_7 = __webpack_require__(/*! sprotty/lib/features/expand/di.config */ "../node_modules/sprotty/lib/features/expand/di.config.js");
const di_config_8 = __webpack_require__(/*! sprotty/lib/features/fade/di.config */ "../node_modules/sprotty/lib/features/fade/di.config.js");
const di_config_9 = __webpack_require__(/*! sprotty/lib/features/move/di.config */ "../node_modules/sprotty/lib/features/move/di.config.js");
const di_config_10 = __webpack_require__(/*! sprotty/lib/features/open/di.config */ "../node_modules/sprotty/lib/features/open/di.config.js");
const di_config_11 = __webpack_require__(/*! sprotty/lib/features/update/di.config */ "../node_modules/sprotty/lib/features/update/di.config.js");
const di_config_12 = __webpack_require__(/*! sprotty/lib/model-source/di.config */ "../node_modules/sprotty/lib/model-source/di.config.js");
exports.buttonModule = new di_1.FeatureModule(di_config_2.default.registry, { featureId: Symbol('button') });
exports.edgeEditModule = new di_1.FeatureModule(di_config_6.edgeEditModule.registry, { featureId: Symbol('edgeEdit') });
exports.edgeIntersectionModule = new di_1.FeatureModule(di_config_3.default.registry, { featureId: Symbol('edgeIntersection') });
exports.edgeLayoutModule = new di_1.FeatureModule(di_config_5.default.registry, { featureId: Symbol('edgeLayout') });
exports.expandModule = new di_1.FeatureModule(di_config_7.default.registry, { featureId: Symbol('expand') });
exports.fadeModule = new di_1.FeatureModule(di_config_8.default.registry, { featureId: Symbol('fade') });
exports.modelSourceModule = new di_1.FeatureModule(di_config_12.default.registry, { featureId: Symbol('modelSource') });
exports.moveModule = new di_1.FeatureModule(di_config_9.default.registry, { featureId: Symbol('move') });
exports.openModule = new di_1.FeatureModule(di_config_10.default.registry, { featureId: Symbol('open') });
exports.updateModule = new di_1.FeatureModule(di_config_11.default.registry, { featureId: Symbol('update') });
exports.edgeJunctionModule = new di_1.FeatureModule(di_config_4.default.registry, { featureId: Symbol('edgeJunction') });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/sprotty/lib/index.js":
/*!**********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/sprotty/lib/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
__exportStar(__webpack_require__(/*! ./api-override */ "../node_modules/@eclipse-glsp/sprotty/lib/api-override.js"), exports);
__exportStar(__webpack_require__(/*! ./feature-modules */ "../node_modules/@eclipse-glsp/sprotty/lib/feature-modules.js"), exports);
__exportStar(__webpack_require__(/*! ./layout-override */ "../node_modules/@eclipse-glsp/sprotty/lib/layout-override.js"), exports);
__exportStar(__webpack_require__(/*! ./re-exports */ "../node_modules/@eclipse-glsp/sprotty/lib/re-exports.js"), exports);
__exportStar(__webpack_require__(/*! ./svg-views-override */ "../node_modules/@eclipse-glsp/sprotty/lib/svg-views-override.js"), exports);
__exportStar(__webpack_require__(/*! ./types */ "../node_modules/@eclipse-glsp/sprotty/lib/types.js"), exports);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/sprotty/lib/layout-override.js":
/*!********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/sprotty/lib/layout-override.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HBoxLayouter = exports.VBoxLayouter = exports.AbstractLayout = exports.LayoutRegistry = void 0;
exports.configureLayout = configureLayout;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! sprotty */ "../node_modules/sprotty/lib/index.js");
const abstract_layout_1 = __webpack_require__(/*! sprotty/lib/features/bounds/abstract-layout */ "../node_modules/sprotty/lib/features/bounds/abstract-layout.js");
let LayoutRegistry = class LayoutRegistry extends sprotty_1.InstanceRegistry {
    constructor(layouts = []) {
        super();
        layouts.forEach(layout => {
            if (this.hasKey(layout.layoutKind)) {
                this.logger.warn('Layout kind is already defined: ', layout.layoutKind);
            }
            else {
                this.register(layout.layoutKind, layout.factory());
            }
        });
    }
};
exports.LayoutRegistry = LayoutRegistry;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], LayoutRegistry.prototype, "logger", void 0);
exports.LayoutRegistry = LayoutRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(sprotty_1.TYPES.LayoutRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], LayoutRegistry);
function configureLayout(context, kind, constr) {
    return (0, sprotty_1.configureLayout)(context, kind, constr);
}
let AbstractLayout = class AbstractLayout extends abstract_layout_1.AbstractLayout {
    constructor() {
        super(...arguments);
        this.orderAgnostic = true;
    }
};
exports.AbstractLayout = AbstractLayout;
exports.AbstractLayout = AbstractLayout = __decorate([
    (0, inversify_1.injectable)()
], AbstractLayout);
let VBoxLayouter = class VBoxLayouter extends sprotty_1.VBoxLayouter {
    constructor() {
        super(...arguments);
        this.orderAgnostic = false;
    }
};
exports.VBoxLayouter = VBoxLayouter;
exports.VBoxLayouter = VBoxLayouter = __decorate([
    (0, inversify_1.injectable)()
], VBoxLayouter);
let HBoxLayouter = class HBoxLayouter extends sprotty_1.HBoxLayouter {
    constructor() {
        super(...arguments);
        this.orderAgnostic = false;
    }
};
exports.HBoxLayouter = HBoxLayouter;
exports.HBoxLayouter = HBoxLayouter = __decorate([
    (0, inversify_1.injectable)()
], HBoxLayouter);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/sprotty/lib/re-exports.js":
/*!***************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/sprotty/lib/re-exports.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExportSvgCommand = exports.isExpandable = exports.expandFeature = exports.isEdgeLayoutable = exports.edgeLayoutFeature = exports.checkEdgePlacement = exports.DEFAULT_EDGE_PLACEMENT = exports.DeleteContextMenuItemProvider = exports.ContextMenuProviderRegistry = exports.RevealNamedElementActionProvider = exports.CommandPaletteActionProviderRegistry = exports.GButton = exports.configureButtonHandler = exports.ButtonHandlerRegistry = exports.layoutableChildFeature = exports.layoutContainerFeature = exports.isSizeable = exports.isLayoutableChild = exports.isLayoutContainer = exports.isBoundsAware = exports.isAlignable = exports.getAbsoluteClientBounds = exports.getAbsoluteBounds = exports.findChildrenAtPosition = exports.boundsFeature = exports.alignFeature = exports.GShapeElement = exports.StatefulLayouter = exports.Layouter = exports.FocusFixPostprocessor = exports.PopupMouseTool = exports.MouseTool = exports.MousePositionTracker = exports.KeyTool = exports.createFeatureSet = exports.SModelRegistry = exports.GModelFactory = exports.EMPTY_ROOT = exports.isParent = exports.createRandomId = exports.ModelIndexImpl = exports.GParentElement = exports.GModelRoot = exports.GModelElement = exports.GChildElement = exports.CommandStack = exports.onAction = exports.configureActionHandler = exports.ActionHandlerRegistry = exports.ActionDispatcher = void 0;
exports.GBezierCreateHandleView = exports.GBezierControlHandleView = exports.BezierCurveEdgeView = exports.SGraphImpl = exports.SEdgeImpl = exports.GPort = exports.GNode = exports.GLabel = exports.GGraphIndex = exports.GCompartment = exports.SprottyBringToFrontCommand = exports.GViewportRootElement = exports.SprottySelectCommand = exports.SprottySelectAllCommand = exports.SelectMouseListener = exports.SelectKeyboardListener = exports.GetSelectionCommand = exports.selectFeature = exports.isSelected = exports.isSelectable = exports.isConnectable = exports.getRouteBounds = exports.getAbsoluteRouteBounds = exports.edgeInProgressTargetHandleID = exports.edgeInProgressID = exports.connectableFeature = exports.GRoutingHandle = exports.GRoutableElement = exports.GDanglingAnchor = exports.GConnectableElement = exports.isProjectable = exports.getProjections = exports.getProjectedBounds = exports.getModelBounds = exports.moveFeature = exports.isMoveable = exports.isLocateable = exports.isDecoration = exports.decorationFeature = exports.SIssueMarkerImpl = exports.GDecoration = exports.popupFeature = exports.isHoverable = exports.hoverFeedbackFeature = exports.hasPopupFeature = exports.isFadeable = exports.fadeFeature = exports.SvgExporter = exports.ExportSvgPostprocessor = exports.ExportSvgKeyListener = void 0;
exports.SvgViewportView = exports.RectangularNodeView = exports.EmptyGroupView = exports.RectangularPort = exports.RectangularNode = exports.GShapedPreRenderedElement = exports.GPreRenderedElement = exports.GHtmlRoot = exports.GForeignObjectElement = exports.DiamondNode = exports.CircularPort = exports.CircularNode = exports.SRoutingHandleView = exports.SGraphView = exports.PolylineEdgeViewWithGapsOnIntersections = exports.PolylineEdgeView = exports.JumpingPolylineEdgeView = exports.GLabelView = exports.GCompartmentView = void 0;
/**
 * @eclipse-glsp/protocol
 */
__exportStar(__webpack_require__(/*! @eclipse-glsp/protocol */ "../node_modules/@eclipse-glsp/protocol/lib/index.js"), exports);
__exportStar(__webpack_require__(/*! @eclipse-glsp/protocol/lib/di */ "../node_modules/@eclipse-glsp/protocol/lib/di/index.js"), exports);
/*
 * sprotty
 */
// ------------------ Base ------------------
// Exclude  definition for labeled actions
// export * from 'sprotty/lib/base/actions/action';
// Exclude IActionDispatcher and IActionDispatcherProvider. Exported via api-override module instead
var action_dispatcher_1 = __webpack_require__(/*! sprotty/lib/base/actions/action-dispatcher */ "../node_modules/sprotty/lib/base/actions/action-dispatcher.js");
Object.defineProperty(exports, "ActionDispatcher", ({ enumerable: true, get: function () { return action_dispatcher_1.ActionDispatcher; } }));
var action_handler_1 = __webpack_require__(/*! sprotty/lib/base/actions/action-handler */ "../node_modules/sprotty/lib/base/actions/action-handler.js");
Object.defineProperty(exports, "ActionHandlerRegistry", ({ enumerable: true, get: function () { return action_handler_1.ActionHandlerRegistry; } }));
Object.defineProperty(exports, "configureActionHandler", ({ enumerable: true, get: function () { return action_handler_1.configureActionHandler; } }));
Object.defineProperty(exports, "onAction", ({ enumerable: true, get: function () { return action_handler_1.onAction; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/base/actions/diagram-locker */ "../node_modules/sprotty/lib/base/actions/diagram-locker.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/animations/animation */ "../node_modules/sprotty/lib/base/animations/animation.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/animations/animation-frame-syncer */ "../node_modules/sprotty/lib/base/animations/animation-frame-syncer.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/animations/easing */ "../node_modules/sprotty/lib/base/animations/easing.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js"), exports);
// Exclude ICommandStack and ICommandStackProvider. Exported via api-override module instead
var command_stack_1 = __webpack_require__(/*! sprotty/lib/base/commands/command-stack */ "../node_modules/sprotty/lib/base/commands/command-stack.js");
Object.defineProperty(exports, "CommandStack", ({ enumerable: true, get: function () { return command_stack_1.CommandStack; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/base/commands/command-stack-options */ "../node_modules/sprotty/lib/base/commands/command-stack-options.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/features/initialize-canvas */ "../node_modules/sprotty/lib/base/features/initialize-canvas.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/features/set-model */ "../node_modules/sprotty/lib/base/features/set-model.js"), exports);
// Exclude SModelElementImpl as it as exported with augmentation module
var smodel_1 = __webpack_require__(/*! sprotty/lib/base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
Object.defineProperty(exports, "GChildElement", ({ enumerable: true, get: function () { return smodel_1.SChildElementImpl; } }));
Object.defineProperty(exports, "GModelElement", ({ enumerable: true, get: function () { return smodel_1.SModelElementImpl; } }));
Object.defineProperty(exports, "GModelRoot", ({ enumerable: true, get: function () { return smodel_1.SModelRootImpl; } }));
Object.defineProperty(exports, "GParentElement", ({ enumerable: true, get: function () { return smodel_1.SParentElementImpl; } }));
Object.defineProperty(exports, "ModelIndexImpl", ({ enumerable: true, get: function () { return smodel_1.ModelIndexImpl; } }));
Object.defineProperty(exports, "createRandomId", ({ enumerable: true, get: function () { return smodel_1.createRandomId; } }));
Object.defineProperty(exports, "isParent", ({ enumerable: true, get: function () { return smodel_1.isParent; } }));
var smodel_factory_1 = __webpack_require__(/*! sprotty/lib/base/model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js");
Object.defineProperty(exports, "EMPTY_ROOT", ({ enumerable: true, get: function () { return smodel_factory_1.EMPTY_ROOT; } }));
Object.defineProperty(exports, "GModelFactory", ({ enumerable: true, get: function () { return smodel_factory_1.SModelFactory; } }));
// exported without alias we extend it in glsp-client to `GModelRegistry`
Object.defineProperty(exports, "SModelRegistry", ({ enumerable: true, get: function () { return smodel_factory_1.SModelRegistry; } }));
Object.defineProperty(exports, "createFeatureSet", ({ enumerable: true, get: function () { return smodel_factory_1.createFeatureSet; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/ui-extensions/ui-extension */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/ui-extensions/ui-extension-registry */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/views/dom-helper */ "../node_modules/sprotty/lib/base/views/dom-helper.js"), exports);
var key_tool_1 = __webpack_require__(/*! sprotty/lib/base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
Object.defineProperty(exports, "KeyTool", ({ enumerable: true, get: function () { return key_tool_1.KeyTool; } }));
var mouse_tool_1 = __webpack_require__(/*! sprotty/lib/base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
Object.defineProperty(exports, "MousePositionTracker", ({ enumerable: true, get: function () { return mouse_tool_1.MousePositionTracker; } }));
Object.defineProperty(exports, "MouseTool", ({ enumerable: true, get: function () { return mouse_tool_1.MouseTool; } }));
Object.defineProperty(exports, "PopupMouseTool", ({ enumerable: true, get: function () { return mouse_tool_1.PopupMouseTool; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/base/views/thunk-view */ "../node_modules/sprotty/lib/base/views/thunk-view.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/views/view */ "../node_modules/sprotty/lib/base/views/view.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/views/viewer */ "../node_modules/sprotty/lib/base/views/viewer.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/views/viewer-cache */ "../node_modules/sprotty/lib/base/views/viewer-cache.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/base/views/viewer-options */ "../node_modules/sprotty/lib/base/views/viewer-options.js"), exports);
// Exclude IVnodePostprocessor. Exported via api-override module instead
var vnode_postprocessor_1 = __webpack_require__(/*! sprotty/lib/base/views/vnode-postprocessor */ "../node_modules/sprotty/lib/base/views/vnode-postprocessor.js");
Object.defineProperty(exports, "FocusFixPostprocessor", ({ enumerable: true, get: function () { return vnode_postprocessor_1.FocusFixPostprocessor; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js"), exports);
// Exclude sprotty types and export augmented GLSP types instead
// export * from 'sprotty/lib/base/types';
// ------------------ Features ------------------
__exportStar(__webpack_require__(/*! sprotty/lib/features/bounds/bounds-manipulation */ "../node_modules/sprotty/lib/features/bounds/bounds-manipulation.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/bounds/hidden-bounds-updater */ "../node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js"), exports);
var layout_1 = __webpack_require__(/*! sprotty/lib/features/bounds/layout */ "../node_modules/sprotty/lib/features/bounds/layout.js");
Object.defineProperty(exports, "Layouter", ({ enumerable: true, get: function () { return layout_1.Layouter; } }));
Object.defineProperty(exports, "StatefulLayouter", ({ enumerable: true, get: function () { return layout_1.StatefulLayouter; } }));
var model_1 = __webpack_require__(/*! sprotty/lib/features/bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
Object.defineProperty(exports, "GShapeElement", ({ enumerable: true, get: function () { return model_1.SShapeElementImpl; } }));
Object.defineProperty(exports, "alignFeature", ({ enumerable: true, get: function () { return model_1.alignFeature; } }));
Object.defineProperty(exports, "boundsFeature", ({ enumerable: true, get: function () { return model_1.boundsFeature; } }));
Object.defineProperty(exports, "findChildrenAtPosition", ({ enumerable: true, get: function () { return model_1.findChildrenAtPosition; } }));
Object.defineProperty(exports, "getAbsoluteBounds", ({ enumerable: true, get: function () { return model_1.getAbsoluteBounds; } }));
Object.defineProperty(exports, "getAbsoluteClientBounds", ({ enumerable: true, get: function () { return model_1.getAbsoluteClientBounds; } }));
Object.defineProperty(exports, "isAlignable", ({ enumerable: true, get: function () { return model_1.isAlignable; } }));
Object.defineProperty(exports, "isBoundsAware", ({ enumerable: true, get: function () { return model_1.isBoundsAware; } }));
Object.defineProperty(exports, "isLayoutContainer", ({ enumerable: true, get: function () { return model_1.isLayoutContainer; } }));
Object.defineProperty(exports, "isLayoutableChild", ({ enumerable: true, get: function () { return model_1.isLayoutableChild; } }));
Object.defineProperty(exports, "isSizeable", ({ enumerable: true, get: function () { return model_1.isSizeable; } }));
Object.defineProperty(exports, "layoutContainerFeature", ({ enumerable: true, get: function () { return model_1.layoutContainerFeature; } }));
Object.defineProperty(exports, "layoutableChildFeature", ({ enumerable: true, get: function () { return model_1.layoutableChildFeature; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/bounds/views */ "../node_modules/sprotty/lib/features/bounds/views.js"), exports);
var button_handler_1 = __webpack_require__(/*! sprotty/lib/features/button/button-handler */ "../node_modules/sprotty/lib/features/button/button-handler.js");
Object.defineProperty(exports, "ButtonHandlerRegistry", ({ enumerable: true, get: function () { return button_handler_1.ButtonHandlerRegistry; } }));
Object.defineProperty(exports, "configureButtonHandler", ({ enumerable: true, get: function () { return button_handler_1.configureButtonHandler; } }));
var model_2 = __webpack_require__(/*! sprotty/lib/features/button/model */ "../node_modules/sprotty/lib/features/button/model.js");
Object.defineProperty(exports, "GButton", ({ enumerable: true, get: function () { return model_2.SButtonImpl; } }));
var action_providers_1 = __webpack_require__(/*! sprotty/lib/features/command-palette/action-providers */ "../node_modules/sprotty/lib/features/command-palette/action-providers.js");
Object.defineProperty(exports, "CommandPaletteActionProviderRegistry", ({ enumerable: true, get: function () { return action_providers_1.CommandPaletteActionProviderRegistry; } }));
Object.defineProperty(exports, "RevealNamedElementActionProvider", ({ enumerable: true, get: function () { return action_providers_1.RevealNamedElementActionProvider; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/command-palette/command-palette */ "../node_modules/sprotty/lib/features/command-palette/command-palette.js"), exports);
var menu_providers_1 = __webpack_require__(/*! sprotty/lib/features/context-menu/menu-providers */ "../node_modules/sprotty/lib/features/context-menu/menu-providers.js");
Object.defineProperty(exports, "ContextMenuProviderRegistry", ({ enumerable: true, get: function () { return menu_providers_1.ContextMenuProviderRegistry; } }));
Object.defineProperty(exports, "DeleteContextMenuItemProvider", ({ enumerable: true, get: function () { return menu_providers_1.DeleteContextMenuItemProvider; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/context-menu/mouse-listener */ "../node_modules/sprotty/lib/features/context-menu/mouse-listener.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edge-layout/di.config */ "../node_modules/sprotty/lib/features/edge-layout/di.config.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edge-layout/edge-layout */ "../node_modules/sprotty/lib/features/edge-layout/edge-layout.js"), exports);
var model_3 = __webpack_require__(/*! sprotty/lib/features/edge-layout/model */ "../node_modules/sprotty/lib/features/edge-layout/model.js");
Object.defineProperty(exports, "DEFAULT_EDGE_PLACEMENT", ({ enumerable: true, get: function () { return model_3.DEFAULT_EDGE_PLACEMENT; } }));
Object.defineProperty(exports, "checkEdgePlacement", ({ enumerable: true, get: function () { return model_3.checkEdgePlacement; } }));
Object.defineProperty(exports, "edgeLayoutFeature", ({ enumerable: true, get: function () { return model_3.edgeLayoutFeature; } }));
Object.defineProperty(exports, "isEdgeLayoutable", ({ enumerable: true, get: function () { return model_3.isEdgeLayoutable; } }));
// Exclude client-side creation features (not supported in GLSP)
// export * from 'sprotty/lib/features/edit/create';
// export * from 'sprotty/lib/features/edit/create-on-drag';
__exportStar(__webpack_require__(/*! sprotty/lib/features/edit/delete */ "../node_modules/sprotty/lib/features/edit/delete.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edit/edit-label */ "../node_modules/sprotty/lib/features/edit/edit-label.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edit/edit-label-ui */ "../node_modules/sprotty/lib/features/edit/edit-label-ui.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edit/edit-routing */ "../node_modules/sprotty/lib/features/edit/edit-routing.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edit/model */ "../node_modules/sprotty/lib/features/edit/model.js"), exports);
// export * from 'sprotty/lib/features/edit/reconnect';
__exportStar(__webpack_require__(/*! sprotty/lib/features/expand/expand */ "../node_modules/sprotty/lib/features/expand/expand.js"), exports);
var model_4 = __webpack_require__(/*! sprotty/lib/features/expand/model */ "../node_modules/sprotty/lib/features/expand/model.js");
Object.defineProperty(exports, "expandFeature", ({ enumerable: true, get: function () { return model_4.expandFeature; } }));
Object.defineProperty(exports, "isExpandable", ({ enumerable: true, get: function () { return model_4.isExpandable; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/expand/views */ "../node_modules/sprotty/lib/features/expand/views.js"), exports);
// Exclude RequestExportSvgAction. Already provided by glsp-protocol
var export_1 = __webpack_require__(/*! sprotty/lib/features/export/export */ "../node_modules/sprotty/lib/features/export/export.js");
Object.defineProperty(exports, "ExportSvgCommand", ({ enumerable: true, get: function () { return export_1.ExportSvgCommand; } }));
Object.defineProperty(exports, "ExportSvgKeyListener", ({ enumerable: true, get: function () { return export_1.ExportSvgKeyListener; } }));
Object.defineProperty(exports, "ExportSvgPostprocessor", ({ enumerable: true, get: function () { return export_1.ExportSvgPostprocessor; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/export/model */ "../node_modules/sprotty/lib/features/export/model.js"), exports);
// Exclude ExportSvgAction. Already provided by glsp-protocol
var svg_exporter_1 = __webpack_require__(/*! sprotty/lib/features/export/svg-exporter */ "../node_modules/sprotty/lib/features/export/svg-exporter.js");
Object.defineProperty(exports, "SvgExporter", ({ enumerable: true, get: function () { return svg_exporter_1.SvgExporter; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/fade/fade */ "../node_modules/sprotty/lib/features/fade/fade.js"), exports);
var model_5 = __webpack_require__(/*! sprotty/lib/features/fade/model */ "../node_modules/sprotty/lib/features/fade/model.js");
Object.defineProperty(exports, "fadeFeature", ({ enumerable: true, get: function () { return model_5.fadeFeature; } }));
Object.defineProperty(exports, "isFadeable", ({ enumerable: true, get: function () { return model_5.isFadeable; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/hover/hover */ "../node_modules/sprotty/lib/features/hover/hover.js"), exports);
var model_6 = __webpack_require__(/*! sprotty/lib/features/hover/model */ "../node_modules/sprotty/lib/features/hover/model.js");
Object.defineProperty(exports, "hasPopupFeature", ({ enumerable: true, get: function () { return model_6.hasPopupFeature; } }));
Object.defineProperty(exports, "hoverFeedbackFeature", ({ enumerable: true, get: function () { return model_6.hoverFeedbackFeature; } }));
Object.defineProperty(exports, "isHoverable", ({ enumerable: true, get: function () { return model_6.isHoverable; } }));
Object.defineProperty(exports, "popupFeature", ({ enumerable: true, get: function () { return model_6.popupFeature; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/hover/popup-position-updater */ "../node_modules/sprotty/lib/features/hover/popup-position-updater.js"), exports);
// Alias SModel types
__exportStar(__webpack_require__(/*! sprotty/lib/features/decoration/decoration-placer */ "../node_modules/sprotty/lib/features/decoration/decoration-placer.js"), exports);
var model_7 = __webpack_require__(/*! sprotty/lib/features/decoration/model */ "../node_modules/sprotty/lib/features/decoration/model.js");
Object.defineProperty(exports, "GDecoration", ({ enumerable: true, get: function () { return model_7.SDecoration; } }));
Object.defineProperty(exports, "SIssueMarkerImpl", ({ enumerable: true, get: function () { return model_7.SIssueMarkerImpl; } }));
Object.defineProperty(exports, "decorationFeature", ({ enumerable: true, get: function () { return model_7.decorationFeature; } }));
Object.defineProperty(exports, "isDecoration", ({ enumerable: true, get: function () { return model_7.isDecoration; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/decoration/views */ "../node_modules/sprotty/lib/features/decoration/views.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edge-intersection/intersection-finder */ "../node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edge-intersection/sweepline */ "../node_modules/sprotty/lib/features/edge-intersection/sweepline.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/edge-junction/junction-finder */ "../node_modules/sprotty/lib/features/edge-junction/junction-finder.js"), exports);
var model_8 = __webpack_require__(/*! sprotty/lib/features/move/model */ "../node_modules/sprotty/lib/features/move/model.js");
Object.defineProperty(exports, "isLocateable", ({ enumerable: true, get: function () { return model_8.isLocateable; } }));
Object.defineProperty(exports, "isMoveable", ({ enumerable: true, get: function () { return model_8.isMoveable; } }));
Object.defineProperty(exports, "moveFeature", ({ enumerable: true, get: function () { return model_8.moveFeature; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/move/move */ "../node_modules/sprotty/lib/features/move/move.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/move/snap */ "../node_modules/sprotty/lib/features/move/snap.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/nameable/model */ "../node_modules/sprotty/lib/features/nameable/model.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/open/model */ "../node_modules/sprotty/lib/features/open/model.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/open/open */ "../node_modules/sprotty/lib/features/open/open.js"), exports);
var model_9 = __webpack_require__(/*! sprotty/lib/features/projection/model */ "../node_modules/sprotty/lib/features/projection/model.js");
Object.defineProperty(exports, "getModelBounds", ({ enumerable: true, get: function () { return model_9.getModelBounds; } }));
Object.defineProperty(exports, "getProjectedBounds", ({ enumerable: true, get: function () { return model_9.getProjectedBounds; } }));
Object.defineProperty(exports, "getProjections", ({ enumerable: true, get: function () { return model_9.getProjections; } }));
Object.defineProperty(exports, "isProjectable", ({ enumerable: true, get: function () { return model_9.isProjectable; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/projection/views */ "../node_modules/sprotty/lib/features/projection/views.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/abstract-edge-router */ "../node_modules/sprotty/lib/features/routing/abstract-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/bezier-anchors */ "../node_modules/sprotty/lib/features/routing/bezier-anchors.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/bezier-edge-router */ "../node_modules/sprotty/lib/features/routing/bezier-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/manhattan-anchors */ "../node_modules/sprotty/lib/features/routing/manhattan-anchors.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/manhattan-edge-router */ "../node_modules/sprotty/lib/features/routing/manhattan-edge-router.js"), exports);
// Alias SModel types
var model_10 = __webpack_require__(/*! sprotty/lib/features/routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
Object.defineProperty(exports, "GConnectableElement", ({ enumerable: true, get: function () { return model_10.SConnectableElementImpl; } }));
Object.defineProperty(exports, "GDanglingAnchor", ({ enumerable: true, get: function () { return model_10.SDanglingAnchorImpl; } }));
Object.defineProperty(exports, "GRoutableElement", ({ enumerable: true, get: function () { return model_10.SRoutableElementImpl; } }));
Object.defineProperty(exports, "GRoutingHandle", ({ enumerable: true, get: function () { return model_10.SRoutingHandleImpl; } }));
Object.defineProperty(exports, "connectableFeature", ({ enumerable: true, get: function () { return model_10.connectableFeature; } }));
Object.defineProperty(exports, "edgeInProgressID", ({ enumerable: true, get: function () { return model_10.edgeInProgressID; } }));
Object.defineProperty(exports, "edgeInProgressTargetHandleID", ({ enumerable: true, get: function () { return model_10.edgeInProgressTargetHandleID; } }));
Object.defineProperty(exports, "getAbsoluteRouteBounds", ({ enumerable: true, get: function () { return model_10.getAbsoluteRouteBounds; } }));
Object.defineProperty(exports, "getRouteBounds", ({ enumerable: true, get: function () { return model_10.getRouteBounds; } }));
Object.defineProperty(exports, "isConnectable", ({ enumerable: true, get: function () { return model_10.isConnectable; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/polyline-anchors */ "../node_modules/sprotty/lib/features/routing/polyline-anchors.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/polyline-edge-router */ "../node_modules/sprotty/lib/features/routing/polyline-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/routing/views */ "../node_modules/sprotty/lib/features/routing/views.js"), exports);
var model_11 = __webpack_require__(/*! sprotty/lib/features/select/model */ "../node_modules/sprotty/lib/features/select/model.js");
Object.defineProperty(exports, "isSelectable", ({ enumerable: true, get: function () { return model_11.isSelectable; } }));
Object.defineProperty(exports, "isSelected", ({ enumerable: true, get: function () { return model_11.isSelected; } }));
Object.defineProperty(exports, "selectFeature", ({ enumerable: true, get: function () { return model_11.selectFeature; } }));
// Alias Select commands with sprotty prefix to avoid clash with glsp-client
var select_1 = __webpack_require__(/*! sprotty/lib/features/select/select */ "../node_modules/sprotty/lib/features/select/select.js");
Object.defineProperty(exports, "GetSelectionCommand", ({ enumerable: true, get: function () { return select_1.GetSelectionCommand; } }));
Object.defineProperty(exports, "SelectKeyboardListener", ({ enumerable: true, get: function () { return select_1.SelectKeyboardListener; } }));
Object.defineProperty(exports, "SelectMouseListener", ({ enumerable: true, get: function () { return select_1.SelectMouseListener; } }));
Object.defineProperty(exports, "SprottySelectAllCommand", ({ enumerable: true, get: function () { return select_1.SelectAllCommand; } }));
Object.defineProperty(exports, "SprottySelectCommand", ({ enumerable: true, get: function () { return select_1.SelectCommand; } }));
// Exclude undo-redo as the client provides its own implementation
// export * from 'sprotty/lib/features/undo-redo/undo-redo';
__exportStar(__webpack_require__(/*! sprotty/lib/features/update/model-matching */ "../node_modules/sprotty/lib/features/update/model-matching.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/update/update-model */ "../node_modules/sprotty/lib/features/update/update-model.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/viewport/center-fit */ "../node_modules/sprotty/lib/features/viewport/center-fit.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/viewport/model */ "../node_modules/sprotty/lib/features/viewport/model.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/features/viewport/scroll */ "../node_modules/sprotty/lib/features/viewport/scroll.js"), exports);
// Alias SModel types
__exportStar(__webpack_require__(/*! sprotty/lib/features/viewport/viewport */ "../node_modules/sprotty/lib/features/viewport/viewport.js"), exports);
var viewport_root_1 = __webpack_require__(/*! sprotty/lib/features/viewport/viewport-root */ "../node_modules/sprotty/lib/features/viewport/viewport-root.js");
Object.defineProperty(exports, "GViewportRootElement", ({ enumerable: true, get: function () { return viewport_root_1.ViewportRootElementImpl; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/features/viewport/zoom */ "../node_modules/sprotty/lib/features/viewport/zoom.js"), exports);
var zorder_1 = __webpack_require__(/*! sprotty/lib/features/zorder/zorder */ "../node_modules/sprotty/lib/features/zorder/zorder.js");
Object.defineProperty(exports, "SprottyBringToFrontCommand", ({ enumerable: true, get: function () { return zorder_1.BringToFrontCommand; } }));
// ------------------ Graph ------------------
// Alias SModel types
var sgraph_1 = __webpack_require__(/*! sprotty/lib/graph/sgraph */ "../node_modules/sprotty/lib/graph/sgraph.js");
Object.defineProperty(exports, "GCompartment", ({ enumerable: true, get: function () { return sgraph_1.SCompartmentImpl; } }));
Object.defineProperty(exports, "GGraphIndex", ({ enumerable: true, get: function () { return sgraph_1.SGraphIndex; } }));
Object.defineProperty(exports, "GLabel", ({ enumerable: true, get: function () { return sgraph_1.SLabelImpl; } }));
Object.defineProperty(exports, "GNode", ({ enumerable: true, get: function () { return sgraph_1.SNodeImpl; } }));
Object.defineProperty(exports, "GPort", ({ enumerable: true, get: function () { return sgraph_1.SPortImpl; } }));
// Exported as is, we extend it in glsp-client to GEdge
Object.defineProperty(exports, "SEdgeImpl", ({ enumerable: true, get: function () { return sgraph_1.SEdgeImpl; } }));
// Exported as is, we extend it in glsp-client to GGraph
Object.defineProperty(exports, "SGraphImpl", ({ enumerable: true, get: function () { return sgraph_1.SGraphImpl; } }));
// Alias SModel types
var views_1 = __webpack_require__(/*! sprotty/lib/graph/views */ "../node_modules/sprotty/lib/graph/views.js");
Object.defineProperty(exports, "BezierCurveEdgeView", ({ enumerable: true, get: function () { return views_1.BezierCurveEdgeView; } }));
Object.defineProperty(exports, "GBezierControlHandleView", ({ enumerable: true, get: function () { return views_1.SBezierControlHandleView; } }));
Object.defineProperty(exports, "GBezierCreateHandleView", ({ enumerable: true, get: function () { return views_1.SBezierCreateHandleView; } }));
Object.defineProperty(exports, "GCompartmentView", ({ enumerable: true, get: function () { return views_1.SCompartmentView; } }));
Object.defineProperty(exports, "GLabelView", ({ enumerable: true, get: function () { return views_1.SLabelView; } }));
Object.defineProperty(exports, "JumpingPolylineEdgeView", ({ enumerable: true, get: function () { return views_1.JumpingPolylineEdgeView; } }));
Object.defineProperty(exports, "PolylineEdgeView", ({ enumerable: true, get: function () { return views_1.PolylineEdgeView; } }));
Object.defineProperty(exports, "PolylineEdgeViewWithGapsOnIntersections", ({ enumerable: true, get: function () { return views_1.PolylineEdgeViewWithGapsOnIntersections; } }));
Object.defineProperty(exports, "SGraphView", ({ enumerable: true, get: function () { return views_1.SGraphView; } }));
Object.defineProperty(exports, "SRoutingHandleView", ({ enumerable: true, get: function () { return views_1.SRoutingHandleView; } }));
// ------------------ Library ------------------
__exportStar(__webpack_require__(/*! sprotty/lib/lib/generic-views */ "../node_modules/sprotty/lib/lib/generic-views.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/lib/html-views */ "../node_modules/sprotty/lib/lib/html-views.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/lib/jsx */ "../node_modules/sprotty/lib/lib/jsx.js"), exports);
// Alias SModel types
var model_12 = __webpack_require__(/*! sprotty/lib/lib/model */ "../node_modules/sprotty/lib/lib/model.js");
Object.defineProperty(exports, "CircularNode", ({ enumerable: true, get: function () { return model_12.CircularNode; } }));
Object.defineProperty(exports, "CircularPort", ({ enumerable: true, get: function () { return model_12.CircularPort; } }));
Object.defineProperty(exports, "DiamondNode", ({ enumerable: true, get: function () { return model_12.DiamondNode; } }));
Object.defineProperty(exports, "GForeignObjectElement", ({ enumerable: true, get: function () { return model_12.ForeignObjectElementImpl; } }));
Object.defineProperty(exports, "GHtmlRoot", ({ enumerable: true, get: function () { return model_12.HtmlRootImpl; } }));
Object.defineProperty(exports, "GPreRenderedElement", ({ enumerable: true, get: function () { return model_12.PreRenderedElementImpl; } }));
Object.defineProperty(exports, "GShapedPreRenderedElement", ({ enumerable: true, get: function () { return model_12.ShapedPreRenderedElementImpl; } }));
Object.defineProperty(exports, "RectangularNode", ({ enumerable: true, get: function () { return model_12.RectangularNode; } }));
Object.defineProperty(exports, "RectangularPort", ({ enumerable: true, get: function () { return model_12.RectangularPort; } }));
__exportStar(__webpack_require__(/*! sprotty/lib/lib/modules */ "../node_modules/sprotty/lib/lib/modules.js"), exports);
var svg_views_1 = __webpack_require__(/*! sprotty/lib/lib/svg-views */ "../node_modules/sprotty/lib/lib/svg-views.js");
Object.defineProperty(exports, "EmptyGroupView", ({ enumerable: true, get: function () { return svg_views_1.EmptyGroupView; } }));
Object.defineProperty(exports, "RectangularNodeView", ({ enumerable: true, get: function () { return svg_views_1.RectangularNodeView; } }));
Object.defineProperty(exports, "SvgViewportView", ({ enumerable: true, get: function () { return svg_views_1.SvgViewportView; } }));
// ------------------ Model Source ------------------
__exportStar(__webpack_require__(/*! sprotty/lib/model-source/commit-model */ "../node_modules/sprotty/lib/model-source/commit-model.js"), exports);
// Exclude as not supported in GLSP
// export * from 'sprotty/lib/model-source/diagram-server';
// export * from 'sprotty/lib/model-source/local-model-source';
__exportStar(__webpack_require__(/*! sprotty/lib/model-source/logging */ "../node_modules/sprotty/lib/model-source/logging.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/model-source/model-source */ "../node_modules/sprotty/lib/model-source/model-source.js"), exports);
// export * from 'sprotty/lib/model-source/websocket';
// ------------------ Utilities ------------------
__exportStar(__webpack_require__(/*! sprotty/lib/utils/browser */ "../node_modules/sprotty/lib/utils/browser.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/utils/codicon */ "../node_modules/sprotty/lib/utils/codicon.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/utils/color */ "../node_modules/sprotty/lib/utils/color.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/utils/inversify */ "../node_modules/sprotty/lib/utils/inversify.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/utils/iterable */ "../node_modules/sprotty/lib/utils/iterable.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/utils/logging */ "../node_modules/sprotty/lib/utils/logging.js"), exports);
__exportStar(__webpack_require__(/*! sprotty/lib/utils/registry */ "../node_modules/sprotty/lib/utils/registry.js"), exports);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/sprotty/lib/svg-views-override.js":
/*!***********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/sprotty/lib/svg-views-override.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CircularNodeView = exports.DiamondNodeView = void 0;
exports.hiddenBoundingRect = hiddenBoundingRect;
exports.applyHiddenBoundingRect = applyHiddenBoundingRect;
/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const protocol_1 = __webpack_require__(/*! @eclipse-glsp/protocol */ "../node_modules/@eclipse-glsp/protocol/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_1 = __webpack_require__(/*! sprotty */ "../node_modules/sprotty/lib/index.js");
let DiamondNodeView = class DiamondNodeView extends sprotty_1.DiamondNodeView {
    render(node, context, args) {
        // The super class may change the bounds of the given node as browsers may calculate larger bounds for the rendered node (BBox).
        // To ensure that the node's bounds remains unchanged, we render a rectangle with the correct bounds during hidden rendering.
        return applyHiddenBoundingRect(node, context, super.render(node, context, args));
    }
};
exports.DiamondNodeView = DiamondNodeView;
exports.DiamondNodeView = DiamondNodeView = __decorate([
    (0, inversify_1.injectable)()
], DiamondNodeView);
let CircularNodeView = class CircularNodeView extends sprotty_1.CircularNodeView {
    render(node, context, args) {
        // The super class may change the bounds of the given node as browsers may calculate larger bounds for the rendered node (BBox).
        // To ensure that the node's bounds remains unchanged, we render a rectangle with the correct bounds during hidden rendering.
        return applyHiddenBoundingRect(node, context, super.render(node, context, args));
    }
};
exports.CircularNodeView = CircularNodeView;
exports.CircularNodeView = CircularNodeView = __decorate([
    (0, inversify_1.injectable)()
], CircularNodeView);
function hiddenBoundingRect(withBounds, context) {
    // an element with attribute ATTR_BBOX_ELEMENT is used by the hidden bounds updater to determine the bounds if it is within a g-element
    // we set the fill to transparent since the SVG export uses the hidden rendering to generate the image and we do not want to be seen
    return !context || context.targetKind === 'hidden' ? ((0, sprotty_1.svg)("rect", { attrs: { [sprotty_1.ATTR_BBOX_ELEMENT]: true }, ...protocol_1.Bounds.dimension(withBounds.bounds), style: { fill: 'transparent' } })) : undefined;
}
/**
 * Applies a hidden bounding rectangle to the given view if we are in the hidden rendering context where sizes are being determined.
 *
 * @param withBounds The element to apply the hidden bounding rectangle to.
 * @param context The rendering context.
 * @param view The view to apply the hidden bounding rectangle to.
 * @returns The view with the hidden bounding rectangle applied, wrapped in a group element if necessary.
 */
function applyHiddenBoundingRect(withBounds, context, view) {
    var _a;
    if (view && context.targetKind === 'hidden') {
        const parent = view.sel === 'g' ? view : (0, sprotty_1.svg)("g", null, view);
        (_a = parent.children) === null || _a === void 0 ? void 0 : _a.unshift(hiddenBoundingRect(withBounds));
        return parent;
    }
    return view;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/sprotty/lib/types.js":
/*!**********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/sprotty/lib/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TYPES = void 0;
/********************************************************************************
 * Copyright (c) 2019-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable deprecation/deprecation */
const sprotty_1 = __webpack_require__(/*! sprotty */ "../node_modules/sprotty/lib/index.js");
/**
 * Reexport of the TYPES namespace of sprotty augments with additional GLSP specific service
 * identifiers.
 */
const IGModelRootListener = Symbol('IGModelRootListener');
exports.TYPES = {
    ...sprotty_1.TYPES,
    // GLSP extends certain sprotty base classes and replaces constructor injection with lazy injection to avoid circular dependencies
    // To pass inversify base class checks an empty array has to be injected.
    // This is the purpose of this service identifier. Typically adopters should not have to  use this identifier.
    EmptyArray: Symbol('EmptyArray'),
    /** @deprecated Using async providers for container service retrieval is discouraged. Use the `LazyInjector` instead */
    ActionHandlerRegistryProvider: sprotty_1.TYPES.ActionHandlerRegistryProvider,
    IAsyncClipboardService: Symbol('IAsyncClipboardService'),
    /** @deprecated Async provider is no longer necessary. Either directly inject or use `LazyInjector`*/
    IEditorContextServiceProvider: Symbol('IEditorContextProvider'),
    IFeedbackActionDispatcher: Symbol('IFeedbackActionDispatcher'),
    IToolFactory: Symbol('Factory<Tool>'),
    ITypeHintProvider: Symbol('ITypeHintProvider'),
    IMovementRestrictor: Symbol('IMovementRestrictor'),
    IMovementOptions: Symbol('IMovementOptions'),
    ISelectionListener: Symbol('ISelectionListener'),
    /** @deprecated Use {@link TYPES.IGModelRootListener} instead */
    ISModelRootListener: IGModelRootListener,
    IGModelRootListener: IGModelRootListener,
    IContextMenuProvider: Symbol('IContextMenuProvider'),
    ICopyPasteHandler: Symbol('ICopyPasteHandler'),
    ITool: Symbol('ITool'),
    IDefaultTool: Symbol('IDefaultTool'),
    IEditModeListener: Symbol('IEditModeListener'),
    IMarqueeBehavior: Symbol('IMarqueeBehavior'),
    IHelperLineManager: Symbol('IHelperLineManager'),
    IHelperLineOptions: Symbol('IHelperLineOptions'),
    IElementNavigator: Symbol('IElementNavigator'),
    ILocalElementNavigator: Symbol('ILocalElementNavigator'),
    IDiagramOptions: Symbol('IDiagramOptions'),
    IDiagramStartup: Symbol('IDiagramStartup'),
    IToolManager: Symbol('IToolManager'),
    IContainerManager: Symbol('IContainerManager'),
    IChangeBoundsManager: Symbol('IChangeBoundsManager'),
    IGridManager: Symbol('IGridManager'),
    IDebugManager: Symbol('IDebugManager'),
    Grid: Symbol('Grid'),
    ZoomFactors: Symbol('ZoomFactors'),
    IModelChangeService: Symbol('IModelChangeService'),
    /**
     * Experimental shortcut manager.
     * The API is not stable yet.
     */
    IShortcutManager: Symbol('IShortcutManager')
};


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram-service-provider.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram-service-provider.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagramServiceProvider = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const diagram_widget_factory_1 = __webpack_require__(/*! ./diagram/diagram-widget-factory */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/diagram-widget-factory.js");
const glsp_diagram_configuration_1 = __webpack_require__(/*! ./diagram/glsp-diagram-configuration */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-configuration.js");
const glsp_client_contribution_1 = __webpack_require__(/*! ./glsp-client-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-client-contribution.js");
/**
 * Provides lookup methods to diagram specific services (i.e. services that are associated with
 * a specific diagram language implementation) via the `diagramType` and/or `contributionId`
 */
let DiagramServiceProvider = class DiagramServiceProvider {
    /**
     * Retrieve the {@link DiagramWidgetFactory} that is configured for the given diagramType.
     * @param diagramType The diagramType of the target widget factory.
     * @throws An error if no `DiagramWidgetFactory` could be found for the given diagram type
     * @returns the corresponding `DiagramWidgetFactory`
     */
    getDiagramWidgetFactory(diagramType) {
        const result = this.findDiagramWidgetFactory(diagramType);
        if (!result) {
            throw new Error(`No GLSPDiagramWidgetFactory is registered for diagramType: ${diagramType}!`);
        }
        return result;
    }
    /**
     * Look up the {@link DiagramWidgetFactory} that is configured for the given diagramType(if any).
     * @param diagramType The diagramType of the target widget factory.
     * @returns the corresponding `DiagramWidgetFactory` or `undefined` if no widget factory is configured for the given type
     */
    findDiagramWidgetFactory(diagramType) {
        return this.widgetFactoryContributions.getContributions().find(contribution => contribution.diagramType === diagramType);
    }
    /**
     * Retrieve the {@link DiagramConfiguration} that is configured for the given diagramType.
     * @param diagramType The diagramType of the target diagram configuration.
     * @throws An error if no `DiagramConfiguration` could be found for the given diagram type
     * @returns the corresponding `DiagramConfiguration`
     */
    getDiagramConfiguration(diagramType) {
        const result = this.findDiagramConfiguration(diagramType);
        if (!result) {
            throw new Error(`No DiagramConfiguration is registered for diagramType: ${diagramType}!`);
        }
        return result;
    }
    /**
     * Look up the {@link DiagramWidgetFactory} that is configured for the given diagramType(if any).
     * @param diagramType The diagramType of the target diagram configuration.
     * @returns the corresponding `DiagramConfiguration` or `undefined` if no diagram configuration is configured for the given type
     */
    findDiagramConfiguration(diagramType) {
        return this.diagramConfigurationContribution.getContributions().find(contribution => contribution.diagramType === diagramType);
    }
    /**
     * Retrieve the {@link DiagramConfiguration} that is configured for the given contributionId.
     * @param contributionId The id of the target contribution.
     * @throws An error if no `GLSPClientContribution` could be found for the given diagram type
     * @returns the corresponding `GLSPClientContribution`
     */
    getGLSPClientContribution(contributionId) {
        const result = this.findGLSPClientContribution(contributionId);
        if (!result) {
            throw new Error(`No GLSPClientContribution is registered for diagramType: ${contributionId}!`);
        }
        return result;
    }
    /**
     * Look up the {@link GLSPClientContribution} that is configured for the given  contribution Id (if any).
     * @param contributionId The contributionId of the target contribution
     * @returns the corresponding `GLSPClientContribution` or `undefined` if no client contribution is configured for the given type
     */
    findGLSPClientContribution(contributionId) {
        return this.glspClientContributions.getContributions().find(contribution => contribution.id === contributionId);
    }
};
exports.DiagramServiceProvider = DiagramServiceProvider;
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(glsp_client_contribution_1.GLSPClientContribution),
    __metadata("design:type", Object)
], DiagramServiceProvider.prototype, "glspClientContributions", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(diagram_widget_factory_1.DiagramWidgetFactory),
    __metadata("design:type", Object)
], DiagramServiceProvider.prototype, "widgetFactoryContributions", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(glsp_diagram_configuration_1.DiagramConfiguration),
    __metadata("design:type", Object)
], DiagramServiceProvider.prototype, "diagramConfigurationContribution", void 0);
exports.DiagramServiceProvider = DiagramServiceProvider = __decorate([
    (0, inversify_1.injectable)()
], DiagramServiceProvider);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/diagram-widget-factory.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/diagram-widget-factory.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagramWidgetFactory = void 0;
exports.createDiagramWidgetFactory = createDiagramWidgetFactory;
const glsp_diagram_widget_1 = __webpack_require__(/*! ./glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js");
/**
 * A factory for creating new, injectable {@link GLSPDiagramWidget} instances.
 * Scoped to a specific `diagramType`
 */
exports.DiagramWidgetFactory = Symbol('DiagramWidgetFactory');
/**
 * Utility function to create the default inversify binding for the {@link DiagramWidgetFactory}
 * @param context the inversify context
 * @param diagramType the diagram type this factory is for
 * @param widgetConstructor The optional widget constructor that should be used by this factory (i.e resolved from the container).
 *                          Can be used to create a factory for a subclass of {@link GLSPDiagramWidget}.
 */
function createDiagramWidgetFactory(context, diagramType, widgetConstructor) {
    return {
        diagramType,
        create: (options, diagramDiContainer) => {
            const serviceId = widgetConstructor !== null && widgetConstructor !== void 0 ? widgetConstructor : glsp_diagram_widget_1.GLSPDiagramWidget;
            const diagramWidget = context.container.resolve(serviceId);
            diagramWidget.configure(options, diagramDiContainer);
            return diagramWidget;
        }
    };
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/default-modules.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/default-modules.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.THEIA_DEFAULT_MODULE_CONFIG = exports.THEIA_DEFAULT_MODULES = void 0;
const theia_export_module_1 = __webpack_require__(/*! ./export/theia-export-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/export/theia-export-module.js");
const theia_navigation_module_1 = __webpack_require__(/*! ./navigation/theia-navigation-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/navigation/theia-navigation-module.js");
const notification_module_1 = __webpack_require__(/*! ./notification/notification-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/notification/notification-module.js");
const theia_select_module_1 = __webpack_require__(/*! ./select/theia-select-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/select/theia-select-module.js");
const theia_source_model_watcher_module_1 = __webpack_require__(/*! ./source-model-watcher/theia-source-model-watcher-module */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/source-model-watcher/theia-source-model-watcher-module.js");
exports.THEIA_DEFAULT_MODULES = [
    theia_select_module_1.theiaSelectModule,
    theia_export_module_1.theiaExportModule,
    theia_navigation_module_1.theiaNavigationModule,
    theia_source_model_watcher_module_1.theiaSourceModelWatcherModule,
    notification_module_1.theiaNotificationModule
];
exports.THEIA_DEFAULT_MODULE_CONFIG = {
    add: [...exports.THEIA_DEFAULT_MODULES]
};


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/export/theia-export-module.js":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/export/theia-export-module.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.theiaExportModule = void 0;
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const theia_export_svg_action_handler_1 = __webpack_require__(/*! ./theia-export-svg-action-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/export/theia-export-svg-action-handler.js");
exports.theiaExportModule = new client_1.FeatureModule((bind, _unbind, isBound, _rebind) => {
    (0, client_1.configureActionHandler)({ bind, isBound }, client_1.ExportSvgAction.KIND, theia_export_svg_action_handler_1.TheiaExportSvgActionHandler);
}, { requires: client_1.exportModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/export/theia-export-svg-action-handler.js":
/*!******************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/export/theia-export-svg-action-handler.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaExportSvgActionHandler = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const file_dialog_service_1 = __webpack_require__(/*! @theia/filesystem/lib/browser/file-dialog/file-dialog-service */ "../node_modules/@theia/filesystem/lib/browser/file-dialog/file-dialog-service.js");
const file_service_1 = __webpack_require__(/*! @theia/filesystem/lib/browser/file-service */ "../node_modules/@theia/filesystem/lib/browser/file-service.js");
/**
 * Default {@link IActionHandler} for {@link ExportSvgAction}s in Theia
 * (bound in Diagram child DI container)
 */
let TheiaExportSvgActionHandler = class TheiaExportSvgActionHandler {
    handle(action) {
        this.export(action);
    }
    async export(action) {
        const folder = await this.getExportFolder();
        let file = await this.fileDialogService.showSaveDialog({ title: 'Export Diagram', filters: { 'Images (*.svg)': ['svg'] } }, folder);
        if (file) {
            try {
                if (!file.path.ext) {
                    file = new core_1.URI(file.path.fsPath() + '.svg');
                }
                await this.fileService.write(file, action.svg);
                this.messageService.info(`Diagram exported to '${file.path.name}'`);
            }
            catch (error) {
                this.messageService.info(`Error exporting diagram '${error}'`);
            }
        }
    }
    getExportFolder() {
        const uri = this.editorContextService.sourceUri;
        return this.fileService.resolve(new core_1.URI(uri));
    }
};
exports.TheiaExportSvgActionHandler = TheiaExportSvgActionHandler;
__decorate([
    (0, inversify_1.inject)(file_service_1.FileService),
    __metadata("design:type", file_service_1.FileService)
], TheiaExportSvgActionHandler.prototype, "fileService", void 0);
__decorate([
    (0, inversify_1.inject)(file_dialog_service_1.FileDialogService),
    __metadata("design:type", Object)
], TheiaExportSvgActionHandler.prototype, "fileDialogService", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.MessageService),
    __metadata("design:type", core_1.MessageService)
], TheiaExportSvgActionHandler.prototype, "messageService", void 0);
__decorate([
    (0, inversify_1.inject)(client_1.EditorContextService),
    __metadata("design:type", client_1.EditorContextService)
], TheiaExportSvgActionHandler.prototype, "editorContextService", void 0);
exports.TheiaExportSvgActionHandler = TheiaExportSvgActionHandler = __decorate([
    (0, inversify_1.injectable)()
], TheiaExportSvgActionHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/navigation/theia-navigate-to-external-target-handler.js":
/*!********************************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/navigation/theia-navigate-to-external-target-handler.js ***!
  \********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var TheiaNavigateToExternalTargetHandler_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaNavigateToExternalTargetHandler = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const lib_1 = __webpack_require__(/*! @eclipse-glsp/client/lib */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const opener_service_1 = __webpack_require__(/*! @theia/core/lib/browser/opener-service */ "../node_modules/@theia/core/lib/browser/opener-service.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../node_modules/@theia/core/lib/common/uri.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
/**
 * Default {@link IActionHandler} for {@link NavigateToExternalTargetAction}s in Theia
 *
 * (bound in Diagram child DI container)
 */
let TheiaNavigateToExternalTargetHandler = TheiaNavigateToExternalTargetHandler_1 = class TheiaNavigateToExternalTargetHandler {
    constructor(openerService) {
        this.openerService = openerService;
    }
    handle(action) {
        if (lib_1.NavigateToExternalTargetAction.is(action)) {
            this.navigateTo(action.target.uri, action.target.args);
        }
    }
    /**
     * Opens the specified URI in Theia using Theia's opener service.
     *
     * If `args` contain a property `jsonOpenerOptions`, the string of this property will be parsed as JSON
     * and merged into the opener options. This allows GLSP servers to pass additional opener options, such
     * as a selection, etc.
     */
    async navigateTo(uri, args) {
        if (args && args[TheiaNavigateToExternalTargetHandler_1.JSON_OPENER_OPTIONS]) {
            args = { args, ...JSON.parse(args[TheiaNavigateToExternalTargetHandler_1.JSON_OPENER_OPTIONS].toString()) };
        }
        await (0, opener_service_1.open)(this.openerService, new uri_1.default(uri), { ...args });
    }
};
exports.TheiaNavigateToExternalTargetHandler = TheiaNavigateToExternalTargetHandler;
TheiaNavigateToExternalTargetHandler.JSON_OPENER_OPTIONS = 'jsonOpenerOptions';
exports.TheiaNavigateToExternalTargetHandler = TheiaNavigateToExternalTargetHandler = TheiaNavigateToExternalTargetHandler_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(opener_service_1.OpenerService)),
    __metadata("design:paramtypes", [Object])
], TheiaNavigateToExternalTargetHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/navigation/theia-navigation-module.js":
/*!**************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/navigation/theia-navigation-module.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.theiaNavigationModule = void 0;
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const theia_navigate_to_external_target_handler_1 = __webpack_require__(/*! ./theia-navigate-to-external-target-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/navigation/theia-navigate-to-external-target-handler.js");
exports.theiaNavigationModule = new client_1.FeatureModule((bind, _unbind, isBound, rebind) => {
    (0, client_1.configureActionHandler)({ bind, isBound }, client_1.NavigateToExternalTargetAction.KIND, theia_navigate_to_external_target_handler_1.TheiaNavigateToExternalTargetHandler);
}, { requires: client_1.navigationModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/notification/notification-module.js":
/*!************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/notification/notification-module.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.theiaNotificationModule = void 0;
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const theia_glsp_message_service_1 = __webpack_require__(/*! ./theia-glsp-message-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/notification/theia-glsp-message-service.js");
exports.theiaNotificationModule = new client_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    bind(theia_glsp_message_service_1.TheiaGLSPMessageService).toSelf().inSingletonScope();
    (0, client_1.configureActionHandler)(context, client_1.MessageAction.KIND, theia_glsp_message_service_1.TheiaGLSPMessageService);
    (0, client_1.configureActionHandler)(context, client_1.StartProgressAction.KIND, theia_glsp_message_service_1.TheiaGLSPMessageService);
    (0, client_1.configureActionHandler)(context, client_1.UpdateProgressAction.KIND, theia_glsp_message_service_1.TheiaGLSPMessageService);
    (0, client_1.configureActionHandler)(context, client_1.EndProgressAction.KIND, theia_glsp_message_service_1.TheiaGLSPMessageService);
});


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/notification/theia-glsp-message-service.js":
/*!*******************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/notification/theia-glsp-message-service.js ***!
  \*******************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TheiaGLSPMessageService_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaGLSPMessageService = void 0;
/********************************************************************************
 * Copyright (c) 2023-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
let TheiaGLSPMessageService = TheiaGLSPMessageService_1 = class TheiaGLSPMessageService {
    constructor() {
        this.progressReporters = new Map();
    }
    dispose() {
        this.progressReporters.forEach(progress => progress.cancel());
        this.progressReporters.clear();
    }
    handle(action) {
        if (client_1.MessageAction.is(action)) {
            return this.message(action);
        }
        if (client_1.StartProgressAction.is(action)) {
            return this.startProgress(action);
        }
        if (client_1.UpdateProgressAction.is(action)) {
            return this.updateProgress(action);
        }
        if (client_1.EndProgressAction.is(action)) {
            return this.endProgress(action);
        }
    }
    message(action) {
        var _a;
        if (!this.shouldShowMessage(action)) {
            return;
        }
        const method = this.toMessageServiceMethod(action.severity);
        const text = action.message;
        const details = (_a = action.details) !== null && _a !== void 0 ? _a : '';
        const actions = details ? [TheiaGLSPMessageService_1.SHOW_DETAILS_LABEL] : [];
        this.messageService[method](text, undefined, ...actions).then(result => {
            if (result === TheiaGLSPMessageService_1.SHOW_DETAILS_LABEL) {
                this.showDetailsDialog(text, details);
            }
        });
    }
    toMessageServiceMethod(severity) {
        switch (severity) {
            case 'ERROR':
                return 'error';
            case 'WARNING':
                return 'warn';
            case 'INFO':
                return 'info';
        }
        return 'log';
    }
    shouldShowMessage(action) {
        return action.severity !== 'NONE';
    }
    showDetailsDialog(title, msg) {
        const wrappedMsg = wrapMessage(msg);
        return new browser_1.ConfirmDialog({ title, msg: wrappedMsg }).open();
    }
    startProgress(action) {
        const { progressId, title, message, percentage } = action;
        const newPercentage = (percentage !== null && percentage !== void 0 ? percentage : -1) >= 0 ? percentage : undefined;
        this.messageService
            .showProgress({ text: title }) //
            .then(progress => {
            this.progressReporters.set(progressId, progress);
            progress.report({ message, work: newPercentage ? { done: newPercentage, total: 100 } : undefined });
        });
    }
    progressReporterId(widgetId, progressId) {
        return `${widgetId}_${progressId}`;
    }
    updateProgress(action) {
        const { progressId, message, percentage } = action;
        const newPercentage = (percentage !== null && percentage !== void 0 ? percentage : -1) >= 0 ? percentage : undefined;
        const progress = this.progressReporters.get(progressId);
        if (!progress) {
            return;
        }
        progress.report({ message, work: newPercentage ? { done: newPercentage, total: 100 } : undefined });
    }
    endProgress(action) {
        const { progressId } = action;
        const progress = this.progressReporters.get(progressId);
        if (!progress) {
            return;
        }
        this.progressReporters.delete(progressId);
        progress.cancel();
    }
};
exports.TheiaGLSPMessageService = TheiaGLSPMessageService;
TheiaGLSPMessageService.SHOW_DETAILS_LABEL = 'Show details';
__decorate([
    (0, inversify_1.inject)(core_1.MessageService),
    __metadata("design:type", core_1.MessageService)
], TheiaGLSPMessageService.prototype, "messageService", void 0);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TheiaGLSPMessageService.prototype, "dispose", null);
exports.TheiaGLSPMessageService = TheiaGLSPMessageService = TheiaGLSPMessageService_1 = __decorate([
    (0, inversify_1.injectable)()
], TheiaGLSPMessageService);
/**
 * Wraps the given message in a pre-formatted,
 * scrollable div.
 * @param msg
 */
function wrapMessage(msg) {
    const scrollDiv = document.createElement('div');
    scrollDiv.className = 'scroll-div';
    const pre = document.createElement('pre');
    pre.textContent = msg;
    scrollDiv.appendChild(pre);
    return scrollDiv;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/select/theia-glsp-selection-forwarder.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/select/theia-glsp-selection-forwarder.js ***!
  \*****************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaGLSPSelectionForwarder = exports.GlspSelectionDataService = exports.GlspSelection = void 0;
/********************************************************************************
 * Copyright (c) 2018-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
// based on: https://github.com/eclipse-sprotty/sprotty-theia/blob/v0.12.0/src/sprotty/theia-sprotty-selection-forwarder.ts
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
var GlspSelection;
(function (GlspSelection) {
    function is(object) {
        return (client_1.AnyObject.is(object) &&
            (0, client_1.hasArrayProp)(object, 'selectedElementsIDs') &&
            (0, client_1.hasStringProp)(object, 'widgetId') &&
            (0, client_1.hasStringProp)(object, 'sourceUri', true) &&
            (0, client_1.hasObjectProp)(object, 'additionalSelectionData', true));
    }
    GlspSelection.is = is;
})(GlspSelection || (exports.GlspSelection = GlspSelection = {}));
/**
 * Optional service that can be implemented to provide additional {@link GlspSelectionData} for
 *  the {@link TheiaGLSPSelectionForwarder}
 */
let GlspSelectionDataService = class GlspSelectionDataService {
};
exports.GlspSelectionDataService = GlspSelectionDataService;
exports.GlspSelectionDataService = GlspSelectionDataService = __decorate([
    (0, inversify_1.injectable)()
], GlspSelectionDataService);
/**
 * Reacts to diagram selection changes and forwards the corresponding {@link GlspSelection}
 * to Theia`s {@link SelectionService}
 *
 * (bound in Diagram child DI container)
 */
let TheiaGLSPSelectionForwarder = class TheiaGLSPSelectionForwarder {
    constructor() {
        this.toDispose = new client_1.DisposableCollection();
    }
    init() {
        this.toDispose.push(this.editorContext.onFocusChanged(event => {
            if (event.hasFocus) {
                // restore selection from the global scope to the diagram
                this.selectionChanged(this.editorContext.modelRoot, (0, client_1.pluck)(this.editorContext.selectedElements, 'id'));
            }
        }));
    }
    dispose() {
        this.toDispose.dispose();
    }
    async getSourceUri() {
        if (!this.sourceUri) {
            const modelSource = await this.modelSourceProvider();
            if (modelSource instanceof client_1.GLSPModelSource) {
                this.sourceUri = modelSource.sourceUri;
            }
        }
        return this.sourceUri;
    }
    selectionChanged(root, selectedElements) {
        this.handleSelectionChanged(root, selectedElements);
    }
    async handleSelectionChanged(root, selectedElementsIDs) {
        var _a, _b;
        const sourceUri = await this.getSourceUri();
        const additionalSelectionData = (_b = (await ((_a = this.selectionDataService) === null || _a === void 0 ? void 0 : _a.getSelectionData(root, selectedElementsIDs)))) !== null && _b !== void 0 ? _b : undefined;
        const glspSelection = {
            selectedElementsIDs,
            additionalSelectionData,
            widgetId: this.viewerOptions.baseDiv,
            sourceUri: sourceUri
        };
        this.theiaSelectionService.selection = glspSelection;
    }
};
exports.TheiaGLSPSelectionForwarder = TheiaGLSPSelectionForwarder;
__decorate([
    (0, inversify_1.inject)(GlspSelectionDataService),
    (0, inversify_1.optional)(),
    __metadata("design:type", GlspSelectionDataService)
], TheiaGLSPSelectionForwarder.prototype, "selectionDataService", void 0);
__decorate([
    (0, inversify_1.inject)(client_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], TheiaGLSPSelectionForwarder.prototype, "viewerOptions", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.SelectionService),
    __metadata("design:type", core_1.SelectionService)
], TheiaGLSPSelectionForwarder.prototype, "theiaSelectionService", void 0);
__decorate([
    (0, inversify_1.inject)(client_1.TYPES.ModelSourceProvider),
    __metadata("design:type", Function)
], TheiaGLSPSelectionForwarder.prototype, "modelSourceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(client_1.EditorContextService),
    __metadata("design:type", client_1.EditorContextService)
], TheiaGLSPSelectionForwarder.prototype, "editorContext", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TheiaGLSPSelectionForwarder.prototype, "init", null);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TheiaGLSPSelectionForwarder.prototype, "dispose", null);
exports.TheiaGLSPSelectionForwarder = TheiaGLSPSelectionForwarder = __decorate([
    (0, inversify_1.injectable)()
], TheiaGLSPSelectionForwarder);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/select/theia-select-module.js":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/select/theia-select-module.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.theiaSelectModule = void 0;
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const theia_glsp_selection_forwarder_1 = __webpack_require__(/*! ./theia-glsp-selection-forwarder */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/select/theia-glsp-selection-forwarder.js");
exports.theiaSelectModule = new client_1.FeatureModule(bind => {
    (0, client_1.bindAsService)({ bind }, client_1.TYPES.ISelectionListener, theia_glsp_selection_forwarder_1.TheiaGLSPSelectionForwarder);
}, { requires: client_1.selectModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/source-model-watcher/theia-source-model-changed-handler.js":
/*!***********************************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/source-model-watcher/theia-source-model-changed-handler.js ***!
  \***********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaSourceModelChangedHandler = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const glsp_diagram_widget_1 = __webpack_require__(/*! ../../glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js");
/**
 * Default {@link ExternalSourceModelChangedHandler} for Theia. Notifies the user if the underlying source model
 * has changed. Optional a model reload can be triggered.
 *
 * (bound in Diagram child DI container)
 */
let TheiaSourceModelChangedHandler = class TheiaSourceModelChangedHandler extends client_1.ExternalSourceModelChangedHandler {
    async notifySourceModelChange(sourceModelName, options) {
        const element = document.getElementById(options.baseDiv);
        if (element) {
            const widget = this.shell.findWidgetForElement(element);
            if (widget) {
                return this.notifySourceModelChangedWithWidget(widget, sourceModelName);
            }
        }
        return [];
    }
    async notifySourceModelChangedWithWidget(widget, sourceModelName) {
        const diagramWidget = (0, glsp_diagram_widget_1.getDiagramWidget)(widget);
        if (!diagramWidget) {
            return [];
        }
        if (this.autoReload() && !diagramWidget.saveable.dirty) {
            await diagramWidget.reloadModel();
            return [];
        }
        await this.shell.activateWidget(widget.id);
        const reload = await this.showDialog(widget.title.label, sourceModelName);
        if (reload === true) {
            await diagramWidget.reloadModel();
        }
        return [];
    }
    autoReload() {
        return false;
    }
    showDialog(widgetTitle, sourceModelName) {
        const dialog = new browser_1.ConfirmDialog({
            title: `Source of editor '${widgetTitle}' changed`,
            msg: `The source model '${sourceModelName}' changed. Do you want to omit
            local changes and reload the editor or continue editing and ignore the changes?`,
            cancel: 'Continue editing',
            ok: 'Reload editor',
            wordWrap: 'normal',
            maxWidth: 640
        });
        return dialog.open();
    }
};
exports.TheiaSourceModelChangedHandler = TheiaSourceModelChangedHandler;
__decorate([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    __metadata("design:type", browser_1.ApplicationShell)
], TheiaSourceModelChangedHandler.prototype, "shell", void 0);
exports.TheiaSourceModelChangedHandler = TheiaSourceModelChangedHandler = __decorate([
    (0, inversify_1.injectable)()
], TheiaSourceModelChangedHandler);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/source-model-watcher/theia-source-model-watcher-module.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/source-model-watcher/theia-source-model-watcher-module.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.theiaSourceModelWatcherModule = void 0;
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const theia_source_model_changed_handler_1 = __webpack_require__(/*! ./theia-source-model-changed-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/source-model-watcher/theia-source-model-changed-handler.js");
exports.theiaSourceModelWatcherModule = new client_1.FeatureModule(bind => {
    bind(client_1.ExternalSourceModelChangedHandler).to(theia_source_model_changed_handler_1.TheiaSourceModelChangedHandler).inSingletonScope();
}, { requires: client_1.sourceModelWatcherModule });


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-command-handler.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-command-handler.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPCommandHandler = void 0;
/********************************************************************************
 * Copyright (c) 2020-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const glsp_diagram_widget_1 = __webpack_require__(/*! ./glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js");
/**
 * A reusable {@link CommandHandler} for simplified action dispatching in GLSP diagrams.
 */
class GLSPCommandHandler {
    constructor(shell, command) {
        this.shell = shell;
        this.command = command;
    }
    async execute() {
        if (this.isEnabled() && this.diagramWidget) {
            const actions = (0, client_1.asArray)(this.command.actions(this.diagramWidget.editorContext));
            return this.diagramWidget.actionDispatcher.dispatchAll(actions);
        }
    }
    get diagramWidget() {
        return (0, glsp_diagram_widget_1.getDiagramWidget)(this.shell);
    }
    isEnabled() {
        var _a, _b, _c;
        return !!this.diagramWidget && ((_c = (_b = (_a = this.command).isEnabled) === null || _b === void 0 ? void 0 : _b.call(_a, this.diagramWidget.editorContext)) !== null && _c !== void 0 ? _c : true);
    }
    isVisible() {
        var _a, _b, _c;
        if (this.command.alwaysVisible) {
            return true;
        }
        return !!this.diagramWidget && ((_c = (_b = (_a = this.command).isVisible) === null || _b === void 0 ? void 0 : _b.call(_a, this.diagramWidget.editorContext)) !== null && _c !== void 0 ? _c : true);
    }
    isToggled() {
        var _a, _b, _c;
        return !!this.diagramWidget && ((_c = (_b = (_a = this.command).isToggled) === null || _b === void 0 ? void 0 : _b.call(_a, this.diagramWidget.editorContext)) !== null && _c !== void 0 ? _c : false);
    }
}
exports.GLSPCommandHandler = GLSPCommandHandler;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-commands.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-commands.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPDiagramCommandContribution = exports.GLSPDiagramMenuContribution = exports.GLSPDiagramMenus = exports.GLSPDiagramCommands = void 0;
/********************************************************************************
 * Copyright (c) 2017-2025 TypeFox and others.
 * Modifications: (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
// based on: https://github.com/eclipse-sprotty/sprotty-theia/blob/v0.12.0/src/theia/diagram-commands.ts
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const common_1 = __webpack_require__(/*! @theia/core/lib/common */ "../node_modules/@theia/core/lib/common/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const glsp_command_handler_1 = __webpack_require__(/*! ./glsp-command-handler */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-command-handler.js");
var GLSPDiagramCommands;
(function (GLSPDiagramCommands) {
    GLSPDiagramCommands.CENTER = 'glsp.diagram:center';
    GLSPDiagramCommands.FIT = 'glsp.diagram:fit';
    GLSPDiagramCommands.EXPORT = 'glsp.diagram:export';
    GLSPDiagramCommands.SELECT_ALL = 'glsp.diagram.selectAll';
    GLSPDiagramCommands.DELETE = 'glsp.diagram.delete';
    GLSPDiagramCommands.LAYOUT = 'glsp.diagram.layout';
})(GLSPDiagramCommands || (exports.GLSPDiagramCommands = GLSPDiagramCommands = {}));
var GLSPDiagramMenus;
(function (GLSPDiagramMenus) {
    GLSPDiagramMenus.DIAGRAM = common_1.MAIN_MENU_BAR.concat('3_glsp_diagram');
})(GLSPDiagramMenus || (exports.GLSPDiagramMenus = GLSPDiagramMenus = {}));
let GLSPDiagramMenuContribution = class GLSPDiagramMenuContribution {
    registerMenus(registry) {
        registry.registerSubmenu(GLSPDiagramMenus.DIAGRAM, 'Diagram');
        registry.registerMenuAction(GLSPDiagramMenus.DIAGRAM, {
            commandId: GLSPDiagramCommands.CENTER
        });
        registry.registerMenuAction(GLSPDiagramMenus.DIAGRAM, {
            commandId: GLSPDiagramCommands.FIT
        });
        registry.registerMenuAction(GLSPDiagramMenus.DIAGRAM, {
            commandId: GLSPDiagramCommands.EXPORT
        });
        registry.registerMenuAction(GLSPDiagramMenus.DIAGRAM, {
            commandId: GLSPDiagramCommands.LAYOUT
        });
        registry.registerMenuAction(GLSPDiagramMenus.DIAGRAM, {
            commandId: GLSPDiagramCommands.SELECT_ALL
        });
    }
};
exports.GLSPDiagramMenuContribution = GLSPDiagramMenuContribution;
exports.GLSPDiagramMenuContribution = GLSPDiagramMenuContribution = __decorate([
    (0, inversify_1.injectable)()
], GLSPDiagramMenuContribution);
let GLSPDiagramCommandContribution = class GLSPDiagramCommandContribution {
    registerCommands(registry) {
        registry.registerCommand({
            id: GLSPDiagramCommands.CENTER,
            label: 'Center'
        });
        registry.registerCommand({
            id: GLSPDiagramCommands.FIT,
            label: 'Fit to screen'
        });
        registry.registerCommand({
            id: GLSPDiagramCommands.EXPORT,
            label: 'Export'
        });
        registry.registerCommand({
            id: GLSPDiagramCommands.LAYOUT,
            label: 'Layout'
        });
        registry.registerCommand({
            id: GLSPDiagramCommands.SELECT_ALL,
            label: 'Select all'
        });
        registry.registerHandler(GLSPDiagramCommands.CENTER, new glsp_command_handler_1.GLSPCommandHandler(this.shell, { actions: () => client_1.CenterAction.create([]), alwaysVisible: true }));
        registry.registerHandler(GLSPDiagramCommands.FIT, new glsp_command_handler_1.GLSPCommandHandler(this.shell, { actions: () => client_1.FitToScreenAction.create([]), alwaysVisible: true }));
        registry.registerHandler(GLSPDiagramCommands.EXPORT, new glsp_command_handler_1.GLSPCommandHandler(this.shell, { actions: () => client_1.RequestExportSvgAction.create(), alwaysVisible: true }));
        registry.registerHandler(GLSPDiagramCommands.LAYOUT, new glsp_command_handler_1.GLSPCommandHandler(this.shell, { actions: () => client_1.TriggerLayoutAction.create(), alwaysVisible: true }));
        registry.registerHandler(GLSPDiagramCommands.SELECT_ALL, new glsp_command_handler_1.GLSPCommandHandler(this.shell, { actions: () => client_1.SelectAllAction.create(true), alwaysVisible: true }));
        registry.registerHandler(browser_1.CommonCommands.UNDO.id, new glsp_command_handler_1.GLSPCommandHandler(this.shell, { actions: () => client_1.UndoAction.create(), alwaysVisible: true }));
        registry.registerHandler(browser_1.CommonCommands.REDO.id, new glsp_command_handler_1.GLSPCommandHandler(this.shell, { actions: () => client_1.RedoAction.create(), alwaysVisible: true }));
    }
};
exports.GLSPDiagramCommandContribution = GLSPDiagramCommandContribution;
__decorate([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    __metadata("design:type", browser_1.ApplicationShell)
], GLSPDiagramCommandContribution.prototype, "shell", void 0);
exports.GLSPDiagramCommandContribution = GLSPDiagramCommandContribution = __decorate([
    (0, inversify_1.injectable)()
], GLSPDiagramCommandContribution);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-configuration.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-configuration.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPDiagramConfiguration = exports.DiagramConfiguration = exports.DiagramContainerFactory = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const default_modules_1 = __webpack_require__(/*! ./features/default-modules */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/features/default-modules.js");
const theia_context_menu_service_1 = __webpack_require__(/*! ./theia-context-menu-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-context-menu-service.js");
const theia_marker_manager_1 = __webpack_require__(/*! ./theia-marker-manager */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-marker-manager.js");
exports.DiagramContainerFactory = Symbol('DiagramContainerFactory');
exports.DiagramConfiguration = Symbol('DiagramConfiguration');
/**
 * Default {@link DiagramConfiguration} implementation for GLSP diagrams.
 * The created diagram container is a child container of the main Theia DI container.
 * This means that services that are configured inside of the diagram container also have access (i.e. can inject)
 * services from the main Theia DI container.
 *
 * (bound in Theia main DI container)
 */
let GLSPDiagramConfiguration = class GLSPDiagramConfiguration {
    createContainer(options) {
        const container = this.diagramContainerFactory();
        const diagramOptionsModule = this.createDiagramOptionsModule(options);
        this.configureContainer(container, diagramOptionsModule, ...this.getContainerConfiguration());
        this.initializeContainer(container);
        return container;
    }
    createDiagramOptionsModule(options) {
        return (0, client_1.createDiagramOptionsModule)(options);
    }
    /**
     * Retrieves additional {@link ContainerConfiguration} for the diagram container.
     * Typically this composes a set of theia specific customization modules.
     * @returns the container configuration
     */
    getContainerConfiguration() {
        return [default_modules_1.THEIA_DEFAULT_MODULE_CONFIG];
    }
    initializeContainer(container) {
        (0, theia_context_menu_service_1.connectTheiaContextMenuService)(container, this.contextMenuServiceFactory);
        (0, theia_marker_manager_1.connectTheiaMarkerManager)(container, this.theiaMarkerManager, this.diagramType);
    }
};
exports.GLSPDiagramConfiguration = GLSPDiagramConfiguration;
__decorate([
    (0, inversify_1.inject)(theia_context_menu_service_1.TheiaContextMenuServiceFactory),
    __metadata("design:type", Function)
], GLSPDiagramConfiguration.prototype, "contextMenuServiceFactory", void 0);
__decorate([
    (0, inversify_1.inject)(theia_marker_manager_1.TheiaMarkerManagerFactory),
    __metadata("design:type", Function)
], GLSPDiagramConfiguration.prototype, "theiaMarkerManager", void 0);
__decorate([
    (0, inversify_1.inject)(exports.DiagramContainerFactory),
    __metadata("design:type", Function)
], GLSPDiagramConfiguration.prototype, "diagramContainerFactory", void 0);
exports.GLSPDiagramConfiguration = GLSPDiagramConfiguration = __decorate([
    (0, inversify_1.injectable)()
], GLSPDiagramConfiguration);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-context-key-service.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-context-key-service.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPDiagramContextKeyService = exports.AbstractGLSPDiagramContextKeyService = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const context_key_service_1 = __webpack_require__(/*! @theia/core/lib/browser/context-key-service */ "../node_modules/@theia/core/lib/browser/context-key-service.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const glsp_diagram_widget_1 = __webpack_require__(/*! ./glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js");
let AbstractGLSPDiagramContextKeyService = class AbstractGLSPDiagramContextKeyService {
    constructor() {
        this.disposeOnUpdate = new core_1.DisposableCollection();
    }
    init() {
        this.registerContextKeys();
        this.updateContextKeys();
        this.shell.onDidChangeActiveWidget(() => this.updateContextKeys());
    }
    updateContextKeys() {
        this.disposeOnUpdate.dispose();
        const glspDiagramWidget = this.getDiagramWidget();
        if (glspDiagramWidget) {
            this.doUpdateStaticContextKeys(glspDiagramWidget);
            const selectionService = this.getSelectionService(glspDiagramWidget);
            const editorContextService = this.getEditorContextService(glspDiagramWidget);
            this.disposeOnUpdate.pushAll([
                selectionService.onSelectionChanged(change => this.updateSelectionContextKeys(change.root, change.selectedElements)),
                editorContextService.onEditModeChanged(change => this.doUpdateEditModeContextKeys(change.newValue))
            ]);
        }
        else {
            this.resetContextKeys();
        }
    }
    updateSelectionContextKeys(root, selectedElementIds) {
        if (selectedElementIds.length < 1) {
            this.doResetSelectionContextKeys();
            return;
        }
        this.doUpdateSelectionContextKeys((0, client_1.getElements)(root.index, selectedElementIds));
    }
    getSelectionService(glspDiagramWidget) {
        return glspDiagramWidget.diContainer.get(client_1.SelectionService);
    }
    getEditorContextService(glspDiagramWidget) {
        return glspDiagramWidget.diContainer.get(client_1.EditorContextService);
    }
    getDiagramWidget() {
        return (0, glsp_diagram_widget_1.getDiagramWidget)(this.shell);
    }
    resetContextKeys() {
        this.doResetStaticContextKeys();
        this.doResetSelectionContextKeys();
        this.doResetEditModeContextKeys();
    }
};
exports.AbstractGLSPDiagramContextKeyService = AbstractGLSPDiagramContextKeyService;
__decorate([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    __metadata("design:type", browser_1.ApplicationShell)
], AbstractGLSPDiagramContextKeyService.prototype, "shell", void 0);
__decorate([
    (0, inversify_1.inject)(context_key_service_1.ContextKeyService),
    __metadata("design:type", Object)
], AbstractGLSPDiagramContextKeyService.prototype, "contextKeyService", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AbstractGLSPDiagramContextKeyService.prototype, "init", null);
exports.AbstractGLSPDiagramContextKeyService = AbstractGLSPDiagramContextKeyService = __decorate([
    (0, inversify_1.injectable)()
], AbstractGLSPDiagramContextKeyService);
class GLSPDiagramContextKeyService extends AbstractGLSPDiagramContextKeyService {
    get glspEditorFocus() {
        return this._glspEditorFocus;
    }
    get glspEditorDiagramType() {
        return this._glspEditorDiagramType;
    }
    get glspEditorHasSelection() {
        return this._glspEditorHasSelection;
    }
    get glspEditorHasSelectionOfType() {
        return this._glspEditorHasSelectionOfType;
    }
    get glspEditorHasMultipleSelection() {
        return this._glspEditorHasMultipleSelection;
    }
    get glspEditorHasDeletableSelection() {
        return this._glspEditorHasDeletableSelection;
    }
    get glspEditorHasMoveableSelection() {
        return this._glspEditorHasMoveableSelection;
    }
    get glspEditorIsReadonly() {
        return this._glspEditorIsReadonly;
    }
    registerContextKeys() {
        this._glspEditorFocus = this.contextKeyService.createKey('glspEditorFocus', false);
        this._glspEditorDiagramType = this.contextKeyService.createKey('glspEditorDiagramType', undefined);
        this._glspEditorHasSelection = this.contextKeyService.createKey('glspEditorHasSelection', false);
        this._glspEditorHasSelectionOfType = this.contextKeyService.createKey('glspEditorHasSelectionOfType', undefined);
        this._glspEditorHasMultipleSelection = this.contextKeyService.createKey('glspEditorHasMultipleSelection', false);
        this._glspEditorHasDeletableSelection = this.contextKeyService.createKey('glspEditorHasDeletableSelection', false);
        this._glspEditorHasMoveableSelection = this.contextKeyService.createKey('glspEditorHasMoveableSelection', false);
        this._glspEditorIsReadonly = this.contextKeyService.createKey('glspEditorIsReadonly', false);
    }
    doUpdateStaticContextKeys(glspDiagramWidget) {
        this.glspEditorFocus.set(true);
        this.glspEditorDiagramType.set(glspDiagramWidget.diagramType);
    }
    doResetStaticContextKeys() {
        this.glspEditorFocus.reset();
        this.glspEditorDiagramType.reset();
    }
    doUpdateSelectionContextKeys(selectedElements) {
        this.glspEditorHasSelection.set(true);
        this.glspEditorHasMultipleSelection.set(selectedElements.length > 1);
        this.glspEditorHasDeletableSelection.set(selectedElements.filter(client_1.isDeletable).length > 0);
        this.glspEditorHasMoveableSelection.set(selectedElements.filter(client_1.isMoveable).length > 0);
        if (selectedElements.length === 1 && selectedElements[0]) {
            this.glspEditorHasSelectionOfType.set(selectedElements[0].type);
        }
    }
    doUpdateEditModeContextKeys(editMode) {
        this.glspEditorIsReadonly.set(editMode === client_1.EditMode.READONLY);
    }
    doResetSelectionContextKeys() {
        this.glspEditorHasDeletableSelection.reset();
        this.glspEditorHasMoveableSelection.reset();
        this.glspEditorHasMultipleSelection.reset();
        this.glspEditorHasSelection.reset();
        this.glspEditorHasSelectionOfType.reset();
    }
    doResetEditModeContextKeys() {
        this.glspEditorIsReadonly.reset();
    }
}
exports.GLSPDiagramContextKeyService = GLSPDiagramContextKeyService;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-keybinding.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-keybinding.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2023 TypeFox and others.
 * Modifications: (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
// based on: https://github.com/eclipse-sprotty/sprotty-theia/blob/v0.12.0/src/theia/diagram-commands.ts
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GLSPDiagramKeybindingContext_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPDiagramKeybindingContribution = exports.GLSPDiagramKeybindingContext = void 0;
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const frontend_application_1 = __webpack_require__(/*! @theia/core/lib/browser/frontend-application */ "../node_modules/@theia/core/lib/browser/frontend-application.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const glsp_diagram_commands_1 = __webpack_require__(/*! ./glsp-diagram-commands */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-commands.js");
const glsp_diagram_widget_1 = __webpack_require__(/*! ./glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js");
let GLSPDiagramKeybindingContext = GLSPDiagramKeybindingContext_1 = class GLSPDiagramKeybindingContext {
    constructor() {
        this.id = GLSPDiagramKeybindingContext_1.ID;
    }
    isEnabled(_arg) {
        return !!(0, glsp_diagram_widget_1.getDiagramWidget)(this.application.shell);
    }
};
exports.GLSPDiagramKeybindingContext = GLSPDiagramKeybindingContext;
GLSPDiagramKeybindingContext.ID = 'glsp.diagram.keybinding.context';
__decorate([
    (0, inversify_1.inject)(frontend_application_1.FrontendApplication),
    __metadata("design:type", frontend_application_1.FrontendApplication)
], GLSPDiagramKeybindingContext.prototype, "application", void 0);
exports.GLSPDiagramKeybindingContext = GLSPDiagramKeybindingContext = GLSPDiagramKeybindingContext_1 = __decorate([
    (0, inversify_1.injectable)()
], GLSPDiagramKeybindingContext);
let GLSPDiagramKeybindingContribution = class GLSPDiagramKeybindingContribution {
    registerKeybindings(registry) {
        [
            {
                command: glsp_diagram_commands_1.GLSPDiagramCommands.CENTER,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+c'
            },
            {
                command: glsp_diagram_commands_1.GLSPDiagramCommands.FIT,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+f'
            },
            {
                command: glsp_diagram_commands_1.GLSPDiagramCommands.EXPORT,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+e'
            },
            {
                command: glsp_diagram_commands_1.GLSPDiagramCommands.LAYOUT,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+l'
            },
            {
                command: glsp_diagram_commands_1.GLSPDiagramCommands.SELECT_ALL,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+a'
            },
            {
                command: browser_1.CommonCommands.UNDO.id,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+z'
            },
            {
                command: browser_1.CommonCommands.REDO.id,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+shift+z'
            }
        ].forEach(binding => {
            registry.registerKeybinding(binding);
        });
    }
};
exports.GLSPDiagramKeybindingContribution = GLSPDiagramKeybindingContribution;
__decorate([
    (0, inversify_1.inject)(GLSPDiagramKeybindingContext),
    __metadata("design:type", GLSPDiagramKeybindingContext)
], GLSPDiagramKeybindingContribution.prototype, "diagramKeybindingContext", void 0);
exports.GLSPDiagramKeybindingContribution = GLSPDiagramKeybindingContribution = __decorate([
    (0, inversify_1.injectable)()
], GLSPDiagramKeybindingContribution);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPDiagramWidget = exports.GLSPDiagramWidgetOptions = void 0;
exports.isDiagramWidgetContainer = isDiagramWidgetContainer;
exports.getDiagramWidget = getDiagramWidget;
/********************************************************************************
 * Copyright (c) 2017-2025 TypeFox and others.
 * Modifications: (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
// based on: https://github.com/eclipse-sprotty/sprotty-theia/blob/v0.12.0/src/theia/diagram-widget.ts
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const selection_service_1 = __webpack_require__(/*! @theia/core/lib/common/selection-service */ "../node_modules/@theia/core/lib/common/selection-service.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../node_modules/@theia/core/lib/common/uri.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const browser_2 = __webpack_require__(/*! @theia/editor/lib/browser */ "../node_modules/@theia/editor/lib/browser/index.js");
const lodash_1 = __webpack_require__(/*! lodash */ "../node_modules/lodash/lodash.js");
const glsp_saveable_1 = __webpack_require__(/*! ./glsp-saveable */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-saveable.js");
var GLSPDiagramWidgetOptions;
(function (GLSPDiagramWidgetOptions) {
    function is(object) {
        return (browser_1.NavigatableWidgetOptions.is(object) &&
            (0, client_1.hasStringProp)(object, 'uri') &&
            (0, client_1.hasStringProp)(object, 'diagramType') &&
            (0, client_1.hasStringProp)(object, 'label') &&
            (0, client_1.hasStringProp)(object, 'iconClass') &&
            (0, client_1.hasStringProp)(object, 'editMode'));
    }
    GLSPDiagramWidgetOptions.is = is;
})(GLSPDiagramWidgetOptions || (exports.GLSPDiagramWidgetOptions = GLSPDiagramWidgetOptions = {}));
function isDiagramWidgetContainer(widget) {
    return !!widget && 'diagramWidget' in widget && widget.diagramWidget instanceof GLSPDiagramWidget;
}
class GLSPDiagramWidget extends browser_1.BaseWidget {
    constructor() {
        super(...arguments);
        this.storeViewportStateOnClose = true;
    }
    configure(options, diContainer) {
        this._options = options;
        this._diContainer = diContainer;
        this.title.closable = true;
        this.title.label = options.label;
        this.title.iconClass = options.iconClass;
        this.id = this.createWidgetId();
        this.saveable = new glsp_saveable_1.GLSPSaveable(this.actionDispatcher, this.diContainer.get(client_1.EditorContextService));
        this.updateSaveable();
        this.title.caption = this.uri.path.fsPath();
        this.toDispose.push(this.editorPreferences.onPreferenceChanged(() => this.updateSaveable()));
        this.toDispose.push(this.saveable);
    }
    createWidgetId() {
        return `${this.diagramType}:${this.options.uri}`;
    }
    onAfterAttach(msg) {
        if (!this.diagramContainer) {
            // Create the container and initialize its content upon first attachment
            this.createContainer();
            this.initializeDiagram();
        }
        super.onAfterAttach(msg);
        this.restoreViewportDataFromStorageService();
        this.disposed.connect(() => {
            this.diContainer.unbindAll();
        });
        this.node.dataset['uri'] = this.uri.toString();
        if (this.diContainer.isBound(client_1.TYPES.ICopyPasteHandler)) {
            this.copyPasteHandler = this.diContainer.get(client_1.TYPES.ICopyPasteHandler);
            this.addClipboardListener(this.node, 'copy', e => this.handleCopy(e));
            this.addClipboardListener(this.node, 'paste', e => this.handlePaste(e));
            this.addClipboardListener(this.node, 'cut', e => this.handleCut(e));
        }
        this.addEventListener(this.node, 'mouseenter', e => this.handleMouseEnter(e));
        this.addEventListener(this.node, 'mouseleave', e => this.handleMouseLeave(e));
    }
    createContainer() {
        this.diagramContainer = document.createElement('div');
        this.diagramContainer.id = this.viewerOptions.baseDiv;
        this.node.appendChild(this.diagramContainer);
        const hiddenContainer = document.createElement('div');
        hiddenContainer.id = this.viewerOptions.hiddenDiv;
        document.body.appendChild(hiddenContainer);
    }
    /**
     * Note: Manually updating the autosave settings is only necessary when using Theia < 1.50.0.
     * Since Theia 1.50.0, the autosave settings are generically handled and no longer the responsibility
     * of the `Saveable` implementation. See https://github.com/eclipse-theia/theia/pull/13683
     */
    updateSaveable() {
        this.saveable.autoSave = this.editorPreferences['files.autoSave'];
        this.saveable.autoSaveDelay = this.editorPreferences['files.autoSaveDelay'];
    }
    async initializeDiagram() {
        // Filter options to only contain defined primitive values
        this.requestModelOptions = this.getRequestModelOptions();
        const loader = this.diContainer.get(client_1.DiagramLoader);
        return loader.load({ requestModelOptions: this.requestModelOptions });
    }
    getRequestModelOptions() {
        const definedOptions = (0, lodash_1.pickBy)(this.options, v => v !== undefined && typeof v !== 'object');
        return {
            sourceUri: this.uri.path.fsPath(),
            ...definedOptions
        };
    }
    getBoundsInPage(element) {
        const bounds = element.getBoundingClientRect();
        return {
            x: bounds.left,
            y: bounds.top,
            width: bounds.width,
            height: bounds.height
        };
    }
    onResize(msg) {
        super.onResize(msg);
        const newBounds = this.getBoundsInPage(this.node);
        this.actionDispatcher.dispatch(client_1.InitializeCanvasBoundsAction.create(newBounds));
    }
    onActivateRequest(msg) {
        this.makeFocusable(this.node.querySelector(`#${this.viewerOptions.baseDiv} svg`));
        super.onActivateRequest(msg);
        this.focusDiagram();
        this.updateGlobalSelection();
    }
    makeFocusable(element) {
        // eslint-disable-next-line no-null/no-null
        if (element !== null) {
            const tabindex = element.getAttribute('tabindex');
            // eslint-disable-next-line no-null/no-null
            if (tabindex === null) {
                // use -1 to make focusable but not reachable via keyboard navigation
                element.setAttribute('tabindex', '-1');
            }
        }
    }
    focusDiagram() {
        const svgElement = this.node.querySelector(`#${this.viewerOptions.baseDiv} svg`);
        if (svgElement) {
            svgElement.focus();
        }
        else {
            const tabindex = this.node.getAttribute('tabindex');
            if (tabindex) {
                this.node.setAttribute('tabindex', '-1');
            }
            this.node.focus();
        }
    }
    async updateGlobalSelection() {
        this.getSelectedElementIds().then((selectedElementsIDs) => this.actionDispatcher.dispatch(client_1.SelectAction.create({ selectedElementsIDs })));
    }
    /**
     * We cannot activate the widget before the SVG element is there, as it takes the focus.
     * This should happen within two animation frames, as the action dispatcher issues
     * a SetModelCommand in the constructor. OTOH, shell.activateWidget() is synchronous. So
     * after creating the widget and before activating it, we use this method to wait for the
     * SVG to be appended to the DOM.
     */
    async getSvgElement() {
        return new Promise(resolve => {
            let frames = 0;
            const waitForSvg = () => {
                requestAnimationFrame(() => {
                    const svgElement = this.node.querySelector(`#${this.viewerOptions.baseDiv} svg`);
                    if (svgElement) {
                        resolve(svgElement);
                    }
                    else if (++frames < 5) {
                        waitForSvg();
                    }
                    else {
                        resolve(undefined);
                    }
                });
            };
            waitForSvg();
        });
    }
    onBeforeDetach(msg) {
        var _a;
        this.storeViewportDataInStorageService();
        (_a = document.querySelector(`#${this.viewerOptions.hiddenDiv}`)) === null || _a === void 0 ? void 0 : _a.remove();
        super.onBeforeDetach(msg);
    }
    onCloseRequest(msg) {
        super.onCloseRequest(msg);
        this.clearGlobalSelection();
    }
    reloadModel() {
        return this.actionDispatcher.dispatch(client_1.RequestModelAction.create({ options: this.requestModelOptions }));
    }
    handleMouseEnter(e) {
        this.node.classList.add('mouse-enter');
        this.node.classList.remove('mouse-leave');
    }
    handleMouseLeave(e) {
        this.node.classList.add('mouse-leave');
        this.node.classList.remove('mouse-enter');
    }
    handleCopy(e) {
        if (this.copyPasteHandler) {
            this.copyPasteHandler.handleCopy(e);
        }
    }
    handleCut(e) {
        if (this.copyPasteHandler) {
            this.copyPasteHandler.handleCut(e);
        }
    }
    handlePaste(e) {
        if (this.copyPasteHandler) {
            this.copyPasteHandler.handlePaste(e);
        }
    }
    listenToFocusState(shell) {
        this.toDispose.push(shell.onDidChangeActiveWidget(event => {
            const focusedWidget = event.newValue;
            if (this.hasFocus && focusedWidget && !this.isThisWidget(focusedWidget)) {
                this.actionDispatcher.dispatch(client_1.FocusStateChangedAction.create(false));
            }
            else if (!this.hasFocus && this.isThisWidget(focusedWidget)) {
                this.actionDispatcher.dispatch(client_1.FocusStateChangedAction.create(true));
            }
        }));
    }
    isThisWidget(widget) {
        if (!widget) {
            return false;
        }
        const diagramWidget = getDiagramWidget(widget);
        return diagramWidget !== undefined && diagramWidget.id === this.id;
    }
    get hasFocus() {
        let focusTracker;
        if (this.diContainer.isBound(client_1.FocusTracker)) {
            focusTracker = this.diContainer.get(client_1.FocusTracker);
        }
        if (focusTracker) {
            return focusTracker.hasFocus;
        }
        return undefined;
    }
    async getSelectedElementIds() {
        const editorContextService = this.diContainer.get(client_1.EditorContextService);
        return editorContextService.selectedElements.map(element => element.id);
    }
    async clearGlobalSelection() {
        this.theiaSelectionService.selection = undefined;
    }
    storeState() {
        // the viewport is stored in the application layout
        // so there is no need to keep it in the storage
        this.removeViewportDataFromStorageService();
        return { ...this.options, ...this.getViewportData() };
    }
    restoreState(oldState) {
        if (GLSPDiagramWidgetOptions.is(oldState)) {
            this._options = oldState;
        }
        if (isViewportDataContainer(oldState)) {
            this.setViewportData(oldState);
        }
    }
    getResourceUri() {
        return this.uri;
    }
    createMoveToUri(resourceUri) {
        return this.uri.withPath(resourceUri.path);
    }
    storeViewportDataInStorageService() {
        if (!this.storeViewportStateOnClose) {
            return;
        }
        const viewportData = this.getViewportData();
        if (viewportData) {
            this.storage.setData(this.viewportStorageId, viewportData);
        }
    }
    async restoreViewportDataFromStorageService() {
        if (!this.storeViewportStateOnClose) {
            return;
        }
        const viewportData = await this.storage.getData(this.viewportStorageId);
        if (viewportData) {
            this.setViewportData(viewportData);
        }
    }
    async removeViewportDataFromStorageService() {
        return this.storage.setData(this.viewportStorageId, undefined);
    }
    getViewportData() {
        let viewportData = undefined;
        if ((0, client_1.isViewport)(this.editorContext.modelRoot)) {
            viewportData = {
                elementId: this.editorContext.modelRoot.id,
                viewportData: {
                    scroll: this.editorContext.modelRoot.scroll,
                    zoom: this.editorContext.modelRoot.zoom
                }
            };
        }
        return viewportData;
    }
    async setViewportData(viewportData) {
        if (this.actionDispatcher instanceof client_1.GLSPActionDispatcher) {
            const restoreViewportAction = client_1.SetViewportAction.create(viewportData.elementId, viewportData.viewportData, { animate: true });
            return this.actionDispatcher.dispatchOnceModelInitialized(restoreViewportAction);
        }
    }
    get viewportStorageId() {
        return this.options.diagramType + ':' + this.options.uri;
    }
    get actionDispatcher() {
        return this.diContainer.get(client_1.TYPES.IActionDispatcher);
    }
    get editorContext() {
        return this.diContainer.get(client_1.EditorContextService);
    }
    get viewerOptions() {
        return this.diContainer.get(client_1.TYPES.ViewerOptions);
    }
    get modelSource() {
        return this.diContainer.get(client_1.GLSPModelSource);
    }
    get clientId() {
        return this.modelSource.clientId;
    }
    get uri() {
        return new uri_1.default(this.options.uri);
    }
    get diagramType() {
        return this.options.diagramType;
    }
    get options() {
        return this._options;
    }
    get diContainer() {
        return this._diContainer;
    }
}
exports.GLSPDiagramWidget = GLSPDiagramWidget;
__decorate([
    (0, inversify_1.inject)(browser_2.EditorPreferences),
    __metadata("design:type", Object)
], GLSPDiagramWidget.prototype, "editorPreferences", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.StorageService),
    __metadata("design:type", Object)
], GLSPDiagramWidget.prototype, "storage", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], GLSPDiagramWidget.prototype, "theiaSelectionService", void 0);
function isViewportDataContainer(obj) {
    return obj !== undefined && obj['elementId'] !== undefined && obj['viewportData'] !== undefined;
}
function getDiagramWidget(widgetOrShell) {
    var _a;
    const widget = widgetOrShell instanceof browser_1.ApplicationShell ? ((_a = widgetOrShell.activeWidget) !== null && _a !== void 0 ? _a : widgetOrShell.currentWidget) : widgetOrShell;
    if (widget instanceof GLSPDiagramWidget) {
        return widget;
    }
    else if (isDiagramWidgetContainer(widget)) {
        return widget.diagramWidget;
    }
    return undefined;
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-saveable.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-saveable.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPSaveable = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const common_1 = __webpack_require__(/*! ../../common */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/index.js");
/**
 * The default {@link Saveable} implementation of the `GLSPDiagramWidget`.
 * Since Theia 1.50.0, handling the autosave functionality is done by a central `SaveableService` and is no longer the responsibility of the
 * {@link Saveable} itself. This implementation includes a compatibility layer for both the old saveable implementation prior
 * to Theia 1.50.0 and the new saveable implementation.
 * When using a Theia version >= 1.50.0, the autosave functionality is limited to the `afterDelay` strategy.
 * Other autosave types (`onWindowChange` | `onFocusChange`) are not supported. If the `autoSaveType` is set to an unsupported value, the
 * `afterDelay` save strategy will be used.
 */
class GLSPSaveable {
    get onDirtyChanged() {
        return this.onDirtyChangedEmitter.event;
    }
    get onContentChanged() {
        return this.onContentChangedEmitter.event;
    }
    constructor(actionDispatcher, editorContextService) {
        this.actionDispatcher = actionDispatcher;
        this.editorContextService = editorContextService;
        this.toDispose = new core_1.DisposableCollection();
        this.onDirtyChangedEmitter = new core_1.Emitter();
        this.onContentChangedEmitter = new core_1.Emitter();
        // The timeout in ms after which a pending save operation will be rejected if the server does not respond with a save confirmation
        // i.e dirty state change
        this.saveTimeout = 2000;
        // Compatibility layer for the old saveable implementation prior to Theia 1.50.0
        this.compatibilityLayerEnabled = (0, common_1.satisfiesTheiaVersion)('<1.50.0');
        this._autoSave = 'off';
        this.autoSaveDelay = 500;
        this.autoSaveJobs = new core_1.DisposableCollection();
        this.toDispose.pushAll([
            this.editorContextService.onDirtyStateChanged(change => this.handleDirtyStateChange(change)),
            this.onDirtyChangedEmitter,
            this.autoSaveJobs
        ]);
    }
    handleDirtyStateChange(change) {
        this.onDirtyChangedEmitter.fire(undefined);
        if (change.reason === 'save' && this.pendingSave) {
            this.pendingSave.resolve();
        }
        if (change.isDirty) {
            this.onContentChangedEmitter.fire(undefined);
            this.scheduleAutoSave();
        }
    }
    /**
     * Saves the current diagram by dispatching a `SaveModelAction` to the GLSP server.
     * The save operation is asynchronous and the method returns a promise that resolves once the save operation is completed.
     * or is rejected if the {@link saveTimeout} is reached before the server responds with a save confirmation.
     * Note: if the diagram is currently not dirty this is a no-op and no save action is dispatched.
     * @returns A promise that resolves once the save client-server roundtrip is completed i.e.
     * the server has responded with a save confirmation in the form of `SetDirtyStateAction`
     */
    save() {
        if (this.editorContextService.isDirty) {
            this.actionDispatcher.dispatch(client_1.SaveModelAction.create());
            this.pendingSave = new client_1.Deferred();
            const savePromise = this.pendingSave.promise.then(() => (this.pendingSave = undefined));
            const timeoutPromise = new Promise((_, reject) => setTimeout(() => {
                if (this.pendingSave && this.pendingSave.state === 'unresolved') {
                    this.pendingSave.resolve();
                    this.pendingSave = undefined;
                    reject(new Error('Save operation timed out'));
                }
            }, this.saveTimeout));
            return Promise.race([savePromise, timeoutPromise]).catch(error => {
                this.pendingSave = undefined;
                throw error;
            });
        }
        return Promise.resolve();
    }
    get dirty() {
        if (this.pendingSave) {
            return false;
        }
        return this.editorContextService.isDirty;
    }
    dispose() {
        this.toDispose.dispose();
    }
    doAutoSave() {
        if (this.shouldAutoSave) {
            this.save();
        }
    }
    get shouldAutoSave() {
        return this.compatibilityLayerEnabled && this.dirty && this.autoSave !== 'off';
    }
    set autoSave(autoSave) {
        this._autoSave = autoSave;
        if (this.shouldAutoSave) {
            this.scheduleAutoSave();
        }
        else {
            this.autoSaveJobs.dispose();
        }
    }
    get autoSave() {
        return this._autoSave;
    }
    scheduleAutoSave() {
        if (this.shouldAutoSave) {
            this.autoSaveJobs.dispose();
            const autoSaveJob = window.setTimeout(() => this.doAutoSave(), this.autoSaveDelay);
            const disposableAutoSaveJob = core_1.Disposable.create(() => window.clearTimeout(autoSaveJob));
            this.autoSaveJobs.push(disposableAutoSaveJob);
        }
    }
}
exports.GLSPSaveable = GLSPSaveable;


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-context-menu-service.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-context-menu-service.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPContextMenu = exports.TheiaContextMenuServiceFactory = void 0;
exports.connectTheiaContextMenuService = connectTheiaContextMenuService;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const theia_glsp_context_menu_service_1 = __webpack_require__(/*! ../theia-glsp-context-menu-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-glsp-context-menu-service.js");
exports.TheiaContextMenuServiceFactory = Symbol('TheiaContextMenuServiceFactory');
var GLSPContextMenu;
(function (GLSPContextMenu) {
    GLSPContextMenu.MENU_PATH = theia_glsp_context_menu_service_1.TheiaGLSPContextMenu.CONTEXT_MENU;
})(GLSPContextMenu || (exports.GLSPContextMenu = GLSPContextMenu = {}));
function connectTheiaContextMenuService(container, contextMenuServiceFactory) {
    const contextMenuService = contextMenuServiceFactory();
    container.bind(client_1.TYPES.IContextMenuService).toConstantValue(contextMenuService);
    contextMenuService.connect(container.get(client_1.TYPES.IActionDispatcher));
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-marker-manager.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-marker-manager.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaMarkerManager = exports.TheiaMarkerManagerFactory = void 0;
exports.connectTheiaMarkerManager = connectTheiaMarkerManager;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const lib_1 = __webpack_require__(/*! @eclipse-glsp/client/lib */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "../node_modules/@theia/core/lib/common/uri.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const problem_manager_1 = __webpack_require__(/*! @theia/markers/lib/browser/problem/problem-manager */ "../node_modules/@theia/markers/lib/browser/problem/problem-manager.js");
const vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ "../node_modules/vscode-languageserver-types/lib/esm/main.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const theia_opener_options_navigation_service_1 = __webpack_require__(/*! ../theia-opener-options-navigation-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-opener-options-navigation-service.js");
const glsp_diagram_widget_1 = __webpack_require__(/*! ./glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js");
exports.TheiaMarkerManagerFactory = Symbol('TheiaMarkerManagerFactory');
function connectTheiaMarkerManager(container, markerManagerFactory, languageLabel) {
    const markerManager = markerManagerFactory();
    if (markerManager instanceof lib_1.ExternalMarkerManager) {
        (0, lib_1.bindOrRebind)(container, lib_1.ExternalMarkerManager).toConstantValue(markerManager);
        markerManager.languageLabel = languageLabel;
        markerManager.connect(container.get(lib_1.TYPES.IActionDispatcher));
    }
}
class DiagnosticMarkers {
    constructor() {
        this.diagnostic2marker = new Map();
    }
    get size() {
        return this.diagnostic2marker.size;
    }
    all() {
        return this.diagnostic2marker.values();
    }
    marker(diagnostic) {
        return this.diagnostic2marker.get(diagnostic);
    }
    add(diagnostic, marker) {
        return this.diagnostic2marker.set(diagnostic, marker);
    }
    getMarkerByOrigin(origin) {
        return Array.from(this.diagnostic2marker.values()).filter(marker => marker.reason === origin);
    }
    getByOrigin(origin) {
        const diagnostics = [];
        this.diagnostic2marker.forEach((marker, diagnostic) => {
            if (marker.reason === origin) {
                diagnostics.push(diagnostic);
            }
        });
        return diagnostics;
    }
    deleteByOrigin(origin) {
        const toDelete = [];
        this.diagnostic2marker.forEach((marker, diagnostic) => {
            if (marker.reason === origin) {
                toDelete.push(diagnostic);
            }
        });
        toDelete.forEach(diagnostic => this.delete(diagnostic));
    }
    delete(diagnostic) {
        return this.diagnostic2marker.delete(diagnostic);
    }
    clear() {
        return this.diagnostic2marker.clear();
    }
}
let TheiaMarkerManager = class TheiaMarkerManager extends lib_1.ExternalMarkerManager {
    constructor() {
        super(...arguments);
        this.markerReasonsToKeep = [lib_1.MarkersReason.LIVE];
        this.uri2markers = new Map();
    }
    markers(uri) {
        const markers = this.uri2markers.get(uri.toString());
        if (markers === undefined) {
            const newMarker = new DiagnosticMarkers();
            this.uri2markers.set(uri.toString(), newMarker);
            return newMarker;
        }
        return markers;
    }
    initialize() {
        if (this.problemManager) {
            this.problemManager.onDidChangeMarkers(uri => this.refreshMarker(uri));
        }
        if (this.shell) {
            this.shell.onDidRemoveWidget(widget => this.handleWidgetClose(widget));
        }
    }
    async refreshMarker(uri) {
        if (this.problemManager === undefined || this.markers(uri).size < 1) {
            return;
        }
        const toDelete = [...this.markers(uri).all()];
        for (const existingMarker of this.problemManager.findMarkers({ uri })) {
            const diagnostic = existingMarker.data;
            const marker = this.markers(uri).marker(diagnostic);
            if (marker) {
                const index = toDelete.indexOf(marker);
                if (index > -1) {
                    toDelete.splice(index, 1);
                }
                else {
                    this.markers(uri).delete(diagnostic);
                }
            }
        }
        if (toDelete.length > 0) {
            this.removeMarkers(toDelete);
        }
    }
    setMarkers(markers, reason, sourceUri) {
        if (this.problemManager === undefined) {
            return;
        }
        const uri = new uri_1.default(sourceUri);
        this.markers(uri).deleteByOrigin(reason);
        const existingOtherMarkers = [...this.markers(uri).all()];
        this.markers(uri).clear();
        const existingOtherDiagnostics = existingOtherMarkers.map(marker => this.createDiagnostic(uri, marker, marker.reason));
        const newDiagnostics = markers.map(marker => this.createDiagnostic(uri, marker, reason));
        this.problemManager.setMarkers(uri, this.languageLabel, [...existingOtherDiagnostics, ...newDiagnostics]);
    }
    createDiagnostic(uri, marker, origin) {
        const range = theia_opener_options_navigation_service_1.SelectionWithElementIds.createRange([marker.elementId]);
        const diagnostic = vscode_languageserver_types_1.Diagnostic.create(range, marker.label, this.toSeverity(marker.kind));
        this.markers(uri).add(diagnostic, { ...marker, reason: origin });
        return diagnostic;
    }
    toSeverity(kind) {
        switch (kind) {
            case lib_1.MarkerKind.ERROR:
                return 1;
            case lib_1.MarkerKind.WARNING:
                return 2;
            case lib_1.MarkerKind.INFO:
                return 3;
            default:
                return undefined;
        }
    }
    handleWidgetClose(widget) {
        var _a;
        const resourceUri = (_a = (0, glsp_diagram_widget_1.getDiagramWidget)(widget)) === null || _a === void 0 ? void 0 : _a.getResourceUri();
        if (resourceUri) {
            this.clearMarkers(resourceUri, this.markerReasonsToKeep);
        }
    }
    clearMarkers(uri, exceptThoseWithReasons) {
        var _a;
        const diagnostics = [];
        for (const reason of exceptThoseWithReasons) {
            const markersToKeep = this.markers(uri).getMarkerByOrigin(reason);
            this.markers(uri).clear();
            const diagnosticsToKeep = markersToKeep.map(marker => this.createDiagnostic(uri, marker, reason));
            diagnostics.push(...diagnosticsToKeep);
        }
        (_a = this.problemManager) === null || _a === void 0 ? void 0 : _a.setMarkers(uri, this.languageLabel, diagnostics);
    }
};
exports.TheiaMarkerManager = TheiaMarkerManager;
__decorate([
    (0, inversify_1.inject)(problem_manager_1.ProblemManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", problem_manager_1.ProblemManager)
], TheiaMarkerManager.prototype, "problemManager", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    (0, inversify_1.optional)(),
    __metadata("design:type", browser_1.ApplicationShell)
], TheiaMarkerManager.prototype, "shell", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TheiaMarkerManager.prototype, "initialize", null);
exports.TheiaMarkerManager = TheiaMarkerManager = __decorate([
    (0, inversify_1.injectable)()
], TheiaMarkerManager);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-client-contribution.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-client-contribution.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseGLSPClientContribution = exports.GLSPClientContribution = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const service_connection_provider_1 = __webpack_require__(/*! @theia/core/lib/browser/messaging/service-connection-provider */ "../node_modules/@theia/core/lib/browser/messaging/service-connection-provider.js");
const promise_util_1 = __webpack_require__(/*! @theia/core/lib/common/promise-util */ "../node_modules/@theia/core/lib/common/promise-util.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
__webpack_require__(/*! ../../css/command-palette.css */ "../node_modules/@eclipse-glsp/theia-integration/css/command-palette.css");
__webpack_require__(/*! ../../css/decoration.css */ "../node_modules/@eclipse-glsp/theia-integration/css/decoration.css");
__webpack_require__(/*! ../../css/diagram.css */ "../node_modules/@eclipse-glsp/theia-integration/css/diagram.css");
__webpack_require__(/*! ../../css/features.css */ "../node_modules/@eclipse-glsp/theia-integration/css/features.css");
__webpack_require__(/*! ../../css/theia-dialogs.css */ "../node_modules/@eclipse-glsp/theia-integration/css/theia-dialogs.css");
__webpack_require__(/*! ../../css/tool-palette.css */ "../node_modules/@eclipse-glsp/theia-integration/css/tool-palette.css");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/index.js");
const theia_jsonrpc_glsp_client_1 = __webpack_require__(/*! ./theia-jsonrpc-glsp-client */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-jsonrpc-glsp-client.js");
exports.GLSPClientContribution = Symbol('GLSPClientContribution');
/**
 * Base implementation for {@link GLSPClientContribution}s. The default implementation setups a {@link GLSPClient} that
 * uses a Theia service connection to communicate with the corresponding `GLSPBackendContribution`.
 * Subclasses can override the {@link BaseGLSPClientContribution.getWebSocketConnectionOptions} method. If this method
 * provides websocket options the  `GLSPClient` is not routed via service connection to the Theia backend, and instead directly
 * communicates with a `GLSPServer` via WebSocket.
 */
let BaseGLSPClientContribution = class BaseGLSPClientContribution {
    constructor() {
        this.glspClientDeferred = new promise_util_1.Deferred();
        this.toDispose = new core_1.DisposableCollection();
        this.glspClientStartupTimeout = 15000;
    }
    getWebSocketConnectionOptions() {
        return undefined;
    }
    get glspClient() {
        return this.glspClientDeferred.promise;
    }
    activate(app) {
        if (this.toDispose.disposed) {
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            this.toDispose.push(new core_1.DisposableCollection(core_1.Disposable.create(() => { }))); // mark as not disposed
            if (this.waitForActivation) {
                return this.waitForActivation(app).then(() => this.doActivate());
            }
            return this.doActivate();
        }
    }
    deactivate(_app) {
        this.dispose();
    }
    doActivate() {
        /* Let `doActivate` complete synchronous even though 'activateClient' is asynchronous.
         This way we don't block the startup of other contributions. We are using a deferred GLSPClient anyways
         that only resolves after client activation is completed */
        this.activateClient();
    }
    async activateClient() {
        const connection = await this.createConnection();
        const client = await this.createGLSPClient(connection);
        connection.onDispose(() => {
            client.stop();
        });
        return this.start(client);
    }
    async createConnection() {
        const opts = await this.getWebSocketConnectionOptions();
        if (opts) {
            return this.createWebSocketConnection(opts);
        }
        return this.createChannelConnection();
    }
    createWebSocketConnection(opts) {
        const address = this.getWebsocketAddress(opts);
        const socket = new WebSocket(address);
        return (0, client_1.listen)(socket);
    }
    getWebsocketAddress(opts) {
        const address = typeof opts === 'string' ? opts : (0, common_1.getWebSocketAddress)(opts);
        if (!address) {
            throw new Error(`Could not derive server websocket address from options: ${JSON.stringify(opts, undefined, 2)}`);
        }
        if (!(0, common_1.isValidWebSocketAddress)(address)) {
            throw new Error(`The given websocket server address is not valid: ${address}`);
        }
        return address;
    }
    createChannelConnection() {
        return new Promise((resolve, reject) => {
            this.connectionProvider.listen(common_1.GLSPContribution.getPath(this), (path, channel) => {
                if (path === common_1.GLSPContribution.getPath(this)) {
                    if (this.toDispose.disposed) {
                        channel.close();
                        reject(new Error('GLSPClientContribution is already disposed'));
                    }
                    const connection = (0, common_1.createChannelConnection)(channel);
                    this.toDispose.push(connection);
                    if (core_1.Disposable.is(channel)) {
                        this.toDispose.push(channel);
                    }
                    resolve(connection);
                }
            }, true);
        });
    }
    async start(glspClient) {
        try {
            await glspClient.start();
            await this.initialize(glspClient);
            this.glspClientDeferred.resolve(glspClient);
        }
        catch (error) {
            this.glspClientDeferred.reject(error);
        }
    }
    async initialize(languageClient) {
        try {
            const parameters = await this.createInitializeParameters();
            return await languageClient.initializeServer(parameters);
        }
        catch (error) {
            const errorMsg = `Failed to initialize ${this.id} glsp server with: ${error}`;
            this.messageService.error(errorMsg);
            return Promise.reject(errorMsg);
        }
    }
    async createInitializeParameters() {
        const args = await this.createInitializeOptions();
        return {
            applicationId: client_1.ApplicationIdProvider.get(),
            protocolVersion: client_1.GLSPClient.protocolVersion,
            args
        };
    }
    createInitializeOptions() {
        return undefined;
    }
    async createGLSPClient(connectionProvider) {
        return new theia_jsonrpc_glsp_client_1.TheiaJsonrpcGLSPClient({
            id: this.id,
            connectionProvider,
            messageService: this.messageService
        });
    }
    dispose() {
        this.toDispose.dispose();
    }
};
exports.BaseGLSPClientContribution = BaseGLSPClientContribution;
__decorate([
    (0, inversify_1.inject)(core_1.MessageService),
    __metadata("design:type", core_1.MessageService)
], BaseGLSPClientContribution.prototype, "messageService", void 0);
__decorate([
    (0, inversify_1.inject)(service_connection_provider_1.RemoteConnectionProvider),
    __metadata("design:type", service_connection_provider_1.ServiceConnectionProvider)
], BaseGLSPClientContribution.prototype, "connectionProvider", void 0);
exports.BaseGLSPClientContribution = BaseGLSPClientContribution = __decorate([
    (0, inversify_1.injectable)()
], BaseGLSPClientContribution);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-frontend-contribution.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-frontend-contribution.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPFrontendContribution = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const glsp_client_contribution_1 = __webpack_require__(/*! ./glsp-client-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-client-contribution.js");
/**
 * Responsible for the activation & deactivation of all registered {@link GLSPClientContribution}s.
 */
let GLSPFrontendContribution = class GLSPFrontendContribution {
    async onStart(app) {
        for (const contribution of this.contributors.getContributions()) {
            await contribution.activate(app);
        }
    }
    onStop(app) {
        for (const contribution of this.contributors.getContributions()) {
            contribution.deactivate(app);
        }
    }
};
exports.GLSPFrontendContribution = GLSPFrontendContribution;
__decorate([
    (0, inversify_1.inject)(browser_1.FrontendApplication),
    __metadata("design:type", browser_1.FrontendApplication)
], GLSPFrontendContribution.prototype, "app", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.ContributionProvider),
    (0, inversify_1.named)(glsp_client_contribution_1.GLSPClientContribution),
    __metadata("design:type", Object)
], GLSPFrontendContribution.prototype, "contributors", void 0);
exports.GLSPFrontendContribution = GLSPFrontendContribution = __decorate([
    (0, inversify_1.injectable)()
], GLSPFrontendContribution);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-glsp-context-menu-service.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-glsp-context-menu-service.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaContextMenuService = exports.TheiaGLSPContextMenu = void 0;
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const glsp_diagram_widget_1 = __webpack_require__(/*! ./diagram/glsp-diagram-widget */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-widget.js");
var TheiaGLSPContextMenu;
(function (TheiaGLSPContextMenu) {
    TheiaGLSPContextMenu.CONTEXT_MENU = ['theia-glsp-context-menu'];
})(TheiaGLSPContextMenu || (exports.TheiaGLSPContextMenu = TheiaGLSPContextMenu = {}));
let TheiaContextMenuService = class TheiaContextMenuService {
    constructor() {
        this.disposables = [];
    }
    connect(actionDispatcher) {
        this.actionDispatcher = actionDispatcher;
    }
    get diagramWidget() {
        return (0, glsp_diagram_widget_1.getDiagramWidget)(this.shell);
    }
    show(items, anchor, onHide) {
        var _a;
        const context = (_a = this.diagramWidget) === null || _a === void 0 ? void 0 : _a.node;
        if (!context) {
            console.warn('No context available for context menu');
            return;
        }
        this.cleanUpNow();
        this.disposables = this.register(TheiaGLSPContextMenu.CONTEXT_MENU, items);
        const renderOptions = {
            menuPath: TheiaGLSPContextMenu.CONTEXT_MENU,
            anchor: anchor,
            context,
            onHide: () => {
                if (onHide) {
                    onHide();
                }
                this.scheduleCleanup();
            }
        };
        this.contextMenuRenderer.render(renderOptions);
    }
    register(menuPath, items) {
        const disposables = [];
        for (const item of items) {
            if (item.children && item.children.length > 0) {
                const menuPathOfItem = item.group ? [...menuPath, item.group] : menuPath;
                disposables.push(this.registerSubmenu(menuPathOfItem, item));
                disposables.push(...this.register([...menuPathOfItem, item.id], item.children));
            }
            else {
                disposables.push(this.registerCommand(menuPath, item));
                disposables.push(this.registerMenuAction(menuPath, item));
            }
        }
        return disposables;
    }
    registerSubmenu(menuPath, item) {
        return this.menuProvider.registerSubmenu([...menuPath, item.id], item.label, { icon: item.icon });
    }
    registerCommand(menuPath, item) {
        const command = { id: commandId(menuPath, item), label: item.label, iconClass: item.icon };
        const disposable = this.commandRegistry.registerCommand(command, new GLSPCommandHandler(item, this.actionDispatcher));
        return new DisposableCommand(command, disposable);
    }
    registerMenuAction(menuPath, item) {
        const menuAction = { label: item.label, order: item.sortString, commandId: commandId(menuPath, item) };
        const menuPathOfItem = item.group ? [...menuPath, item.group] : menuPath;
        const disposable = this.menuProvider.registerMenuAction(menuPathOfItem, menuAction);
        return new DisposableMenuAction(menuAction, disposable);
    }
    cleanUpNow() {
        window.clearTimeout(this.timeout);
        this.cleanUp();
    }
    scheduleCleanup() {
        this.timeout = window.setTimeout(() => {
            this.cleanUp();
        }, 200);
    }
    cleanUp() {
        this.disposables.forEach(disposable => disposable.dispose(this.menuProvider, this.commandRegistry));
        this.disposables = [];
    }
};
exports.TheiaContextMenuService = TheiaContextMenuService;
__decorate([
    (0, inversify_1.inject)(browser_1.ContextMenuRenderer),
    __metadata("design:type", browser_1.ContextMenuRenderer)
], TheiaContextMenuService.prototype, "contextMenuRenderer", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.MenuModelRegistry),
    __metadata("design:type", core_1.MenuModelRegistry)
], TheiaContextMenuService.prototype, "menuProvider", void 0);
__decorate([
    (0, inversify_1.inject)(core_1.CommandRegistry),
    __metadata("design:type", core_1.CommandRegistry)
], TheiaContextMenuService.prototype, "commandRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(browser_1.ApplicationShell),
    __metadata("design:type", browser_1.ApplicationShell)
], TheiaContextMenuService.prototype, "shell", void 0);
exports.TheiaContextMenuService = TheiaContextMenuService = __decorate([
    (0, inversify_1.injectable)()
], TheiaContextMenuService);
class GLSPCommandHandler {
    constructor(menuItem, actionDispatcher) {
        this.menuItem = menuItem;
        this.actionDispatcher = actionDispatcher;
    }
    execute(...args) {
        if (this.actionDispatcher && this.menuItem.actions) {
            this.actionDispatcher.dispatchAll(this.menuItem.actions);
        }
    }
    isEnabled(...args) {
        return getBooleanValue(this.menuItem.isEnabled, true);
    }
    isVisible(...args) {
        return getBooleanValue(this.menuItem.isVisible, true);
    }
    isToggled(...args) {
        return getBooleanValue(this.menuItem.isToggled, false);
    }
}
class DisposableMenuAction {
    constructor(menuAction, disposable) {
        this.menuAction = menuAction;
        this.disposable = disposable;
    }
    dispose(menuProvider, commandRegistry) {
        menuProvider.unregisterMenuAction(this.menuAction);
        this.disposable.dispose();
    }
}
class DisposableCommand {
    constructor(command, disposable) {
        this.command = command;
        this.disposable = disposable;
    }
    dispose(menuProvider, commandRegistry) {
        commandRegistry.unregisterCommand(this.command);
        this.disposable.dispose();
    }
}
function commandId(menuPath, item) {
    return menuPath.join('.') + '.' + item.id;
}
function getBooleanValue(value, defaultValue) {
    let returnVal = defaultValue;
    if (isFunction(value)) {
        returnVal = value();
    }
    else if (isBoolean(value)) {
        returnVal = value;
    }
    return returnVal;
}
function isFunction(value) {
    return !!(value && value.constructor && value.apply);
}
function isBoolean(value) {
    return typeof value === 'boolean';
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-integration-frontend-module.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-integration-frontend-module.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const browser_1 = __webpack_require__(/*! @theia/core/lib/browser */ "../node_modules/@theia/core/lib/browser/index.js");
const service_connection_provider_1 = __webpack_require__(/*! @theia/core/lib/browser/messaging/service-connection-provider */ "../node_modules/@theia/core/lib/browser/messaging/service-connection-provider.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const common_1 = __webpack_require__(/*! ../common */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/index.js");
const diagram_service_provider_1 = __webpack_require__(/*! ./diagram-service-provider */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram-service-provider.js");
const diagram_widget_factory_1 = __webpack_require__(/*! ./diagram/diagram-widget-factory */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/diagram-widget-factory.js");
const glsp_diagram_commands_1 = __webpack_require__(/*! ./diagram/glsp-diagram-commands */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-commands.js");
const glsp_diagram_configuration_1 = __webpack_require__(/*! ./diagram/glsp-diagram-configuration */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-configuration.js");
const glsp_diagram_context_key_service_1 = __webpack_require__(/*! ./diagram/glsp-diagram-context-key-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-context-key-service.js");
const glsp_diagram_keybinding_1 = __webpack_require__(/*! ./diagram/glsp-diagram-keybinding */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/glsp-diagram-keybinding.js");
const theia_context_menu_service_1 = __webpack_require__(/*! ./diagram/theia-context-menu-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-context-menu-service.js");
const theia_marker_manager_1 = __webpack_require__(/*! ./diagram/theia-marker-manager */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/diagram/theia-marker-manager.js");
const glsp_client_contribution_1 = __webpack_require__(/*! ./glsp-client-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-client-contribution.js");
const glsp_frontend_contribution_1 = __webpack_require__(/*! ./glsp-frontend-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/glsp-frontend-contribution.js");
const theia_glsp_context_menu_service_1 = __webpack_require__(/*! ./theia-glsp-context-menu-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-glsp-context-menu-service.js");
const theia_opener_options_navigation_service_1 = __webpack_require__(/*! ./theia-opener-options-navigation-service */ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-opener-options-navigation-service.js");
exports["default"] = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    // GLSP Contribution API
    (0, core_1.bindContributionProvider)(bind, glsp_client_contribution_1.GLSPClientContribution);
    (0, client_1.bindAsService)(context, browser_1.FrontendApplicationContribution, glsp_frontend_contribution_1.GLSPFrontendContribution);
    bind(diagram_service_provider_1.DiagramServiceProvider).toSelf().inSingletonScope();
    bind(common_1.GLSPContribution.Service)
        .toDynamicValue(({ container }) => service_connection_provider_1.ServiceConnectionProvider.createProxy(container, common_1.GLSPContribution.servicePath))
        .inSingletonScope();
    // Diagram Command API
    (0, client_1.bindAsService)(context, core_1.CommandContribution, glsp_diagram_commands_1.GLSPDiagramCommandContribution);
    (0, client_1.bindAsService)(context, core_1.MenuContribution, glsp_diagram_commands_1.GLSPDiagramMenuContribution);
    (0, client_1.bindAsService)(context, browser_1.KeybindingContext, glsp_diagram_keybinding_1.GLSPDiagramKeybindingContext);
    (0, client_1.bindAsService)(context, browser_1.KeybindingContribution, glsp_diagram_keybinding_1.GLSPDiagramKeybindingContribution);
    // Misc
    (0, core_1.bindContributionProvider)(bind, diagram_widget_factory_1.DiagramWidgetFactory);
    (0, core_1.bindContributionProvider)(bind, glsp_diagram_configuration_1.DiagramConfiguration);
    bind(glsp_diagram_configuration_1.DiagramContainerFactory).toFactory(ctx => () => ctx.container.createChild());
    bind(glsp_diagram_context_key_service_1.GLSPDiagramContextKeyService).toSelf().inSingletonScope();
    bind(theia_opener_options_navigation_service_1.TheiaOpenerOptionsNavigationService).toSelf().inSingletonScope();
    bind(theia_context_menu_service_1.TheiaContextMenuServiceFactory).toFactory(ctx => () => {
        const container = ctx.container.createChild();
        container.bind(theia_glsp_context_menu_service_1.TheiaContextMenuService).toSelf().inSingletonScope();
        return container.get(theia_glsp_context_menu_service_1.TheiaContextMenuService);
    });
    bind(theia_marker_manager_1.TheiaMarkerManagerFactory).toFactory(ctx => () => {
        const container = ctx.container.createChild();
        container.bind(theia_marker_manager_1.TheiaMarkerManager).toSelf().inSingletonScope();
        return container.get(theia_marker_manager_1.TheiaMarkerManager);
    });
});


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-jsonrpc-glsp-client.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-jsonrpc-glsp-client.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TheiaJsonrpcGLSPClient = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = __webpack_require__(/*! @eclipse-glsp/client */ "../node_modules/@eclipse-glsp/client/lib/index.js");
class TheiaJsonrpcGLSPClient extends client_1.BaseJsonrpcGLSPClient {
    constructor(options) {
        super(options);
        this.messageService = options.messageService;
    }
    handleConnectionError(error, message, count) {
        super.handleConnectionError(error, message, count);
        this.messageService.error(`Connection the ${this.id} glsp server is erroring. Shutting down server.`);
    }
    handleConnectionClosed() {
        if (this.state !== client_1.ClientState.Stopping && this.state !== client_1.ClientState.Stopped) {
            this.messageService.error(`Connection to the ${this.id} glsp server got closed. Server will not be restarted.`);
        }
        super.handleConnectionClosed();
    }
}
exports.TheiaJsonrpcGLSPClient = TheiaJsonrpcGLSPClient;
// eslint-disable-next-line no-redeclare
(function (TheiaJsonrpcGLSPClient) {
    function isOptions(object) {
        return client_1.JsonrpcGLSPClient.isOptions(object) && 'messageService' in object;
    }
    TheiaJsonrpcGLSPClient.isOptions = isOptions;
})(TheiaJsonrpcGLSPClient || (exports.TheiaJsonrpcGLSPClient = TheiaJsonrpcGLSPClient = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-opener-options-navigation-service.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/browser/theia-opener-options-navigation-service.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionWithRange = exports.SelectionWithElementIds = exports.OptionsWithSelection = exports.TheiaOpenerOptionsNavigationService = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const lib_1 = __webpack_require__(/*! @eclipse-glsp/client/lib */ "../node_modules/@eclipse-glsp/client/lib/index.js");
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "../node_modules/@theia/core/shared/inversify/index.js");
const browser_1 = __webpack_require__(/*! @theia/editor/lib/browser */ "../node_modules/@theia/editor/lib/browser/index.js");
/**
 * Service for translating `OpenerOptions` into a `NavigateToTargetAction`.
 *
 * This service is typically used to determine requested selections from Theia
 * opener options on open or reveal of a diagram widget. Diagram widgets can
 * then dispatch the determined diagram navigation actions once the widget is
 * initialized.
 *
 * This service will forward the `selection` property of the `OpenerOptions`
 * in the form of arguments in the issued `NavigateToTargetAction` as follows:
 *   *(a)* the property `elementIds: string[]` as element ids
 *   *(b)* `start` with `line: number` and `character: number`
 *   *(c)* any simple-typed properties that are direct properties of `selection`
 *
 * (bound in Theia main DI container)
 */
let TheiaOpenerOptionsNavigationService = class TheiaOpenerOptionsNavigationService {
    determineNavigations(uri, options) {
        if (OptionsWithSelection.is(options)) {
            const selection = options.selection;
            const navigationTarget = { uri };
            Object.keys(selection).forEach(key => {
                const value = selection[key];
                if (typeof value !== 'object') {
                    lib_1.NavigationTarget.addArgument(navigationTarget, key, value);
                }
            });
            if (SelectionWithElementIds.is(selection)) {
                lib_1.NavigationTarget.setElementIds(navigationTarget, ...selection.elementIds);
            }
            if (browser_1.Range.is(selection)) {
                lib_1.NavigationTarget.setTextPosition(navigationTarget, {
                    line: selection.start.line,
                    character: selection.start.character
                });
            }
            return [lib_1.NavigateToTargetAction.create(navigationTarget)];
        }
        return [];
    }
};
exports.TheiaOpenerOptionsNavigationService = TheiaOpenerOptionsNavigationService;
exports.TheiaOpenerOptionsNavigationService = TheiaOpenerOptionsNavigationService = __decorate([
    (0, inversify_1.injectable)()
], TheiaOpenerOptionsNavigationService);
var OptionsWithSelection;
(function (OptionsWithSelection) {
    function is(options) {
        return options !== undefined && 'selection' in options;
    }
    OptionsWithSelection.is = is;
    function elementId(options) {
        if (!OptionsWithSelection.is(options)) {
            return undefined;
        }
        if (!SelectionWithElementIds.is(options.selection)) {
            return undefined;
        }
        return options.selection.elementIds;
    }
    OptionsWithSelection.elementId = elementId;
})(OptionsWithSelection || (exports.OptionsWithSelection = OptionsWithSelection = {}));
var SelectionWithElementIds;
(function (SelectionWithElementIds) {
    function is(selection) {
        return selection !== undefined && 'elementIds' in selection;
    }
    SelectionWithElementIds.is = is;
    function createRange(elementIds) {
        return { elementIds, start: { line: -1, character: -1 }, end: { line: -1, character: -1 } };
    }
    SelectionWithElementIds.createRange = createRange;
})(SelectionWithElementIds || (exports.SelectionWithElementIds = SelectionWithElementIds = {}));
var SelectionWithRange;
(function (SelectionWithRange) {
    function is(selection) {
        return browser_1.Range.is(selection);
    }
    SelectionWithRange.is = is;
})(SelectionWithRange || (exports.SelectionWithRange = SelectionWithRange = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/common/channel-connection.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/common/channel-connection.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "../node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChannelMessageWriter = exports.ChannelMessageReader = void 0;
exports.createChannelConnection = createChannelConnection;
/********************************************************************************
 * Copyright (c) 2022-2024 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../node_modules/vscode-jsonrpc/lib/browser/main.js");
// Temporary fix/workaround to enable comparability with Theia >=1.27 until https://github.com/eclipse-theia/theia/issues/11405 is resolved
/**
 * A `vscode-jsonrpc` {@link MessageReader} that reads messages from an underlying {@link Channel}.
 */
class ChannelMessageReader extends vscode_jsonrpc_1.AbstractMessageReader {
    constructor(channel) {
        super();
        this.channel = channel;
        this.onMessageEmitter = new core_1.Emitter();
        this.toDispose = new core_1.DisposableCollection();
        this.toDispose.push(this.onMessageEmitter);
        this.toDispose.push(channel.onMessage(data => this.handleMessage(data)));
        this.toDispose.push(channel.onClose(() => this.fireClose()));
    }
    handleMessage(msgProvider) {
        const buffer = msgProvider().readBytes();
        const message = JSON.parse(new TextDecoder().decode(buffer));
        this.onMessageEmitter.fire(message);
    }
    dispose() {
        super.dispose();
        this.toDispose.dispose();
    }
    listen(callback) {
        return this.onMessageEmitter.event(callback);
    }
}
exports.ChannelMessageReader = ChannelMessageReader;
/**
 * A `vscode-jsonrpc` {@link MessageWriter} that writes messages to an underlying {@link Channel}.
 */
class ChannelMessageWriter extends vscode_jsonrpc_1.AbstractMessageWriter {
    constructor(channel) {
        super();
        this.channel = channel;
        this.toDispose = channel.onClose(() => this.fireClose());
    }
    async write(msg) {
        const writeBuffer = this.channel.getWriteBuffer();
        writeBuffer.writeBytes(Buffer.from(JSON.stringify(msg, undefined, 0)));
        writeBuffer.commit();
    }
    end() {
        this.dispose();
    }
    dispose() {
        super.dispose();
        this.toDispose.dispose();
    }
}
exports.ChannelMessageWriter = ChannelMessageWriter;
/**
 * Create a `vscode-jsonrpc` {@link MessageConnection} on top of a given {@link Channel}.
 */
function createChannelConnection(channel, logger) {
    const reader = new ChannelMessageReader(channel);
    const writer = new ChannelMessageWriter(channel);
    return (0, vscode_jsonrpc_1.createMessageConnection)(reader, writer, logger);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/common/glsp-contribution.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/common/glsp-contribution.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (C) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GLSPContribution = void 0;
var GLSPContribution;
(function (GLSPContribution) {
    GLSPContribution.servicePath = '/services/glsp';
    function getPath(contribution) {
        return GLSPContribution.servicePath + '/' + contribution.id;
    }
    GLSPContribution.getPath = getPath;
    GLSPContribution.Service = Symbol('GLSPContributionService');
})(GLSPContribution || (exports.GLSPContribution = GLSPContribution = {}));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/common/glsp-diagram-language.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/common/glsp-diagram-language.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/common/index.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/common/index.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./channel-connection */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/channel-connection.js"), exports);
__exportStar(__webpack_require__(/*! ./glsp-contribution */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/glsp-contribution.js"), exports);
__exportStar(__webpack_require__(/*! ./glsp-diagram-language */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/glsp-diagram-language.js"), exports);
__exportStar(__webpack_require__(/*! ./theia-version-util */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/theia-version-util.js"), exports);
__exportStar(__webpack_require__(/*! ./websocket-util */ "../node_modules/@eclipse-glsp/theia-integration/lib/common/websocket-util.js"), exports);


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/common/theia-version-util.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/common/theia-version-util.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getTheiaVersion = getTheiaVersion;
exports.satisfiesTheiaVersion = satisfiesTheiaVersion;
const core_1 = __webpack_require__(/*! @theia/core */ "../node_modules/@theia/core/lib/common/index.js");
const semver = __webpack_require__(/*! semver */ "../node_modules/semver/index.js");
/**
 * Returns the currently used Theia version i.e. the version of the installed @theia/core package.
 *
 */
function getTheiaVersion() {
    return core_1.THEIA_VERSION;
}
/**
 * Validates if the current Theia version satisfies the given semver range.
 * @param range - The semver range to validate against the current Theia version.
 * @param optionsOrLoose - Optional configuration options to treat the given range as loose or include prerelease versions.
 * By default, prerelease versions are included.
 * @returns `true` if the current Theia version satisfies the given range, `false` otherwise.
 * @throws An error if the given range is invalid.
 */
function satisfiesTheiaVersion(range, options = { includePrerelease: true }) {
    if (!semver.valid(range) && !semver.validRange(range)) {
        throw new Error(`Invalid version or range: ${range}`);
    }
    return semver.satisfies(getTheiaVersion(), range, options);
}


/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/lib/common/websocket-util.js":
/*!************************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/lib/common/websocket-util.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getWebSocketAddress = getWebSocketAddress;
exports.isValidWebSocketAddress = isValidWebSocketAddress;
/**
 * Utility function that tries to construct a WebSocket address from the given partial {@link WebSocketConnectionInfo}.
 * To construct a valid address the info most provide at least a port and and a path.
 * @param info Partial connection information
 * @returns The corresponding address, or `undefined` if the info does not contain the required properties.
 */
function getWebSocketAddress(info) {
    var _a, _b;
    if ('path' in info && info.path !== undefined && 'port' in info && info.port !== undefined) {
        const protocol = (_a = info.protocol) !== null && _a !== void 0 ? _a : 'ws';
        const host = (_b = info.host) !== null && _b !== void 0 ? _b : '127.0.0.1';
        return `${protocol}://${host}:${info.port}/${info.path}`;
    }
    return undefined;
}
/**
 * Validates wether the given string is valid WebSocket address.
 * @param address The address to validate
 * @returns `true` if the address is valid, `false` otherwise
 */
function isValidWebSocketAddress(address) {
    try {
        const { protocol } = new URL(address);
        return protocol === 'ws:' || protocol === 'wss:';
    }
    catch (error) {
        return false;
    }
}


/***/ }),

/***/ "../node_modules/autocompleter/autocomplete.js":
/*!*****************************************************!*\
  !*** ../node_modules/autocompleter/autocomplete.js ***!
  \*****************************************************/
/***/ (function(module) {

(function (global, factory) {
     true ? module.exports = factory() :
    0;
}(this, (function () { 'use strict';

    /**
     * Copyright (c) 2016 Denis Taran
     *
     * Homepage: https://smartscheduling.com/en/documentation/autocomplete
     * Source: https://github.com/kraaden/autocomplete
     *
     * MIT License
     */
    function autocomplete(settings) {
        // just an alias to minimize JS file size
        var doc = document;
        var container = settings.container || doc.createElement('div');
        var preventSubmit = settings.preventSubmit || 0 /* Never */;
        container.id = container.id || 'autocomplete-' + uid();
        var containerStyle = container.style;
        var debounceWaitMs = settings.debounceWaitMs || 0;
        var disableAutoSelect = settings.disableAutoSelect || false;
        var customContainerParent = container.parentElement;
        var items = [];
        var inputValue = '';
        var minLen = 2;
        var showOnFocus = settings.showOnFocus;
        var selected;
        var fetchCounter = 0;
        var debounceTimer;
        var destroyed = false;
        // Fixes #104: autocomplete selection is broken on Firefox for Android
        var suppressAutocomplete = false;
        if (settings.minLength !== undefined) {
            minLen = settings.minLength;
        }
        if (!settings.input) {
            throw new Error('input undefined');
        }
        var input = settings.input;
        container.className = [container.className, 'autocomplete', settings.className || ''].join(' ').trim();
        container.setAttribute('role', 'listbox');
        input.setAttribute('role', 'combobox');
        input.setAttribute('aria-expanded', 'false');
        input.setAttribute('aria-autocomplete', 'list');
        input.setAttribute('aria-controls', container.id);
        input.setAttribute('aria-owns', container.id);
        input.setAttribute('aria-activedescendant', '');
        input.setAttribute('aria-haspopup', 'listbox');
        // IOS implementation for fixed positioning has many bugs, so we will use absolute positioning
        containerStyle.position = 'absolute';
        /**
         * Generate a very complex textual ID that greatly reduces the chance of a collision with another ID or text.
         */
        function uid() {
            return Date.now().toString(36) + Math.random().toString(36).substring(2);
        }
        /**
         * Detach the container from DOM
         */
        function detach() {
            var parent = container.parentNode;
            if (parent) {
                parent.removeChild(container);
            }
        }
        /**
         * Clear debouncing timer if assigned
         */
        function clearDebounceTimer() {
            if (debounceTimer) {
                window.clearTimeout(debounceTimer);
            }
        }
        /**
         * Attach the container to DOM
         */
        function attach() {
            if (!container.parentNode) {
                (customContainerParent || doc.body).appendChild(container);
            }
        }
        /**
         * Check if container for autocomplete is displayed
         */
        function containerDisplayed() {
            return !!container.parentNode;
        }
        /**
         * Clear autocomplete state and hide container
         */
        function clear() {
            // prevent the update call if there are pending AJAX requests
            fetchCounter++;
            items = [];
            inputValue = '';
            selected = undefined;
            input.setAttribute('aria-activedescendant', '');
            input.setAttribute('aria-expanded', 'false');
            detach();
        }
        /**
         * Update autocomplete position
         */
        function updatePosition() {
            if (!containerDisplayed()) {
                return;
            }
            input.setAttribute('aria-expanded', 'true');
            containerStyle.height = 'auto';
            containerStyle.width = input.offsetWidth + 'px';
            var maxHeight = 0;
            var inputRect;
            function calc() {
                var docEl = doc.documentElement;
                var clientTop = docEl.clientTop || doc.body.clientTop || 0;
                var clientLeft = docEl.clientLeft || doc.body.clientLeft || 0;
                var scrollTop = window.pageYOffset || docEl.scrollTop;
                var scrollLeft = window.pageXOffset || docEl.scrollLeft;
                inputRect = input.getBoundingClientRect();
                var top = inputRect.top + input.offsetHeight + scrollTop - clientTop;
                var left = inputRect.left + scrollLeft - clientLeft;
                containerStyle.top = top + 'px';
                containerStyle.left = left + 'px';
                maxHeight = window.innerHeight - (inputRect.top + input.offsetHeight);
                if (maxHeight < 0) {
                    maxHeight = 0;
                }
                containerStyle.top = top + 'px';
                containerStyle.bottom = '';
                containerStyle.left = left + 'px';
                containerStyle.maxHeight = maxHeight + 'px';
            }
            // the calc method must be called twice, otherwise the calculation may be wrong on resize event (chrome browser)
            calc();
            calc();
            if (settings.customize && inputRect) {
                settings.customize(input, inputRect, container, maxHeight);
            }
        }
        /**
         * Redraw the autocomplete div element with suggestions
         */
        function update() {
            container.textContent = '';
            input.setAttribute('aria-activedescendant', '');
            // function for rendering autocomplete suggestions
            var render = function (item, _, __) {
                var itemElement = doc.createElement('div');
                itemElement.textContent = item.label || '';
                return itemElement;
            };
            if (settings.render) {
                render = settings.render;
            }
            // function to render autocomplete groups
            var renderGroup = function (groupName, _) {
                var groupDiv = doc.createElement('div');
                groupDiv.textContent = groupName;
                return groupDiv;
            };
            if (settings.renderGroup) {
                renderGroup = settings.renderGroup;
            }
            var fragment = doc.createDocumentFragment();
            var prevGroup = uid();
            items.forEach(function (item, index) {
                if (item.group && item.group !== prevGroup) {
                    prevGroup = item.group;
                    var groupDiv = renderGroup(item.group, inputValue);
                    if (groupDiv) {
                        groupDiv.className += ' group';
                        fragment.appendChild(groupDiv);
                    }
                }
                var div = render(item, inputValue, index);
                if (div) {
                    div.id = container.id + "_" + index;
                    div.setAttribute('role', 'option');
                    div.addEventListener('click', function (ev) {
                        suppressAutocomplete = true;
                        try {
                            settings.onSelect(item, input);
                        }
                        finally {
                            suppressAutocomplete = false;
                        }
                        clear();
                        ev.preventDefault();
                        ev.stopPropagation();
                    });
                    if (item === selected) {
                        div.className += ' selected';
                        div.setAttribute('aria-selected', 'true');
                        input.setAttribute('aria-activedescendant', div.id);
                    }
                    fragment.appendChild(div);
                }
            });
            container.appendChild(fragment);
            if (items.length < 1) {
                if (settings.emptyMsg) {
                    var empty = doc.createElement('div');
                    empty.id = container.id + "_" + uid();
                    empty.className = 'empty';
                    empty.textContent = settings.emptyMsg;
                    container.appendChild(empty);
                    input.setAttribute('aria-activedescendant', empty.id);
                }
                else {
                    clear();
                    return;
                }
            }
            attach();
            updatePosition();
            updateScroll();
        }
        function updateIfDisplayed() {
            if (containerDisplayed()) {
                update();
            }
        }
        function resizeEventHandler() {
            updateIfDisplayed();
        }
        function scrollEventHandler(e) {
            if (e.target !== container) {
                updateIfDisplayed();
            }
            else {
                e.preventDefault();
            }
        }
        function inputEventHandler() {
            if (!suppressAutocomplete) {
                fetch(0 /* Keyboard */);
            }
        }
        /**
         * Automatically move scroll bar if selected item is not visible
         */
        function updateScroll() {
            var elements = container.getElementsByClassName('selected');
            if (elements.length > 0) {
                var element = elements[0];
                // make group visible
                var previous = element.previousElementSibling;
                if (previous && previous.className.indexOf('group') !== -1 && !previous.previousElementSibling) {
                    element = previous;
                }
                if (element.offsetTop < container.scrollTop) {
                    container.scrollTop = element.offsetTop;
                }
                else {
                    var selectBottom = element.offsetTop + element.offsetHeight;
                    var containerBottom = container.scrollTop + container.offsetHeight;
                    if (selectBottom > containerBottom) {
                        container.scrollTop += selectBottom - containerBottom;
                    }
                }
            }
        }
        function selectPreviousSuggestion() {
            var index = items.indexOf(selected);
            selected = index === -1
                ? undefined
                : items[(index + items.length - 1) % items.length];
            updateSelectedSuggestion(index);
        }
        function selectNextSuggestion() {
            var index = items.indexOf(selected);
            selected = items.length < 1
                ? undefined
                : index === -1
                    ? items[0]
                    : items[(index + 1) % items.length];
            updateSelectedSuggestion(index);
        }
        function updateSelectedSuggestion(index) {
            if (items.length > 0) {
                unselectSuggestion(index);
                selectSuggestion(items.indexOf(selected));
                updateScroll();
            }
        }
        function selectSuggestion(index) {
            var element = doc.getElementById(container.id + "_" + index);
            if (element) {
                element.classList.add('selected');
                element.setAttribute('aria-selected', 'true');
                input.setAttribute('aria-activedescendant', element.id);
            }
        }
        function unselectSuggestion(index) {
            var element = doc.getElementById(container.id + "_" + index);
            if (element) {
                element.classList.remove('selected');
                element.removeAttribute('aria-selected');
                input.removeAttribute('aria-activedescendant');
            }
        }
        function handleArrowAndEscapeKeys(ev, key) {
            var containerIsDisplayed = containerDisplayed();
            if (key === 'Escape') {
                clear();
            }
            else {
                if (!containerIsDisplayed || items.length < 1) {
                    return;
                }
                key === 'ArrowUp'
                    ? selectPreviousSuggestion()
                    : selectNextSuggestion();
            }
            ev.preventDefault();
            if (containerIsDisplayed) {
                ev.stopPropagation();
            }
        }
        function handleEnterKey(ev) {
            if (selected) {
                if (preventSubmit === 2 /* OnSelect */) {
                    ev.preventDefault();
                }
                suppressAutocomplete = true;
                try {
                    settings.onSelect(selected, input);
                }
                finally {
                    suppressAutocomplete = false;
                }
                clear();
            }
            if (preventSubmit === 1 /* Always */) {
                ev.preventDefault();
            }
        }
        function keydownEventHandler(ev) {
            var key = ev.key;
            switch (key) {
                case 'ArrowUp':
                case 'ArrowDown':
                case 'Escape':
                    handleArrowAndEscapeKeys(ev, key);
                    break;
                case 'Enter':
                    handleEnterKey(ev);
                    break;
            }
        }
        function focusEventHandler() {
            if (showOnFocus) {
                fetch(1 /* Focus */);
            }
        }
        function fetch(trigger) {
            if (input.value.length >= minLen || trigger === 1 /* Focus */) {
                clearDebounceTimer();
                debounceTimer = window.setTimeout(function () { return startFetch(input.value, trigger, input.selectionStart || 0); }, trigger === 0 /* Keyboard */ || trigger === 2 /* Mouse */ ? debounceWaitMs : 0);
            }
            else {
                clear();
            }
        }
        function startFetch(inputText, trigger, cursorPos) {
            if (destroyed)
                return;
            var savedFetchCounter = ++fetchCounter;
            settings.fetch(inputText, function (elements) {
                if (fetchCounter === savedFetchCounter && elements) {
                    items = elements;
                    inputValue = inputText;
                    selected = (items.length < 1 || disableAutoSelect) ? undefined : items[0];
                    update();
                }
            }, trigger, cursorPos);
        }
        function keyupEventHandler(e) {
            if (settings.keyup) {
                settings.keyup({
                    event: e,
                    fetch: function () { return fetch(0 /* Keyboard */); }
                });
                return;
            }
            if (!containerDisplayed() && e.key === 'ArrowDown') {
                fetch(0 /* Keyboard */);
            }
        }
        function clickEventHandler(e) {
            settings.click && settings.click({
                event: e,
                fetch: function () { return fetch(2 /* Mouse */); }
            });
        }
        function blurEventHandler() {
            // when an item is selected by mouse click, the blur event will be initiated before the click event and remove DOM elements,
            // so that the click event will never be triggered. In order to avoid this issue, DOM removal should be delayed.
            setTimeout(function () {
                if (doc.activeElement !== input) {
                    clear();
                }
            }, 200);
        }
        function manualFetch() {
            startFetch(input.value, 3 /* Manual */, input.selectionStart || 0);
        }
        /**
         * Fixes #26: on long clicks focus will be lost and onSelect method will not be called
         */
        container.addEventListener('mousedown', function (evt) {
            evt.stopPropagation();
            evt.preventDefault();
        });
        /**
         * Fixes #30: autocomplete closes when scrollbar is clicked in IE
         * See: https://stackoverflow.com/a/9210267/13172349
         */
        container.addEventListener('focus', function () { return input.focus(); });
        // If the custom autocomplete container is already appended to the DOM during widget initialization, detach it.
        detach();
        /**
         * This function will remove DOM elements and clear event handlers
         */
        function destroy() {
            input.removeEventListener('focus', focusEventHandler);
            input.removeEventListener('keyup', keyupEventHandler);
            input.removeEventListener('click', clickEventHandler);
            input.removeEventListener('keydown', keydownEventHandler);
            input.removeEventListener('input', inputEventHandler);
            input.removeEventListener('blur', blurEventHandler);
            window.removeEventListener('resize', resizeEventHandler);
            doc.removeEventListener('scroll', scrollEventHandler, true);
            input.removeAttribute('role');
            input.removeAttribute('aria-expanded');
            input.removeAttribute('aria-autocomplete');
            input.removeAttribute('aria-controls');
            input.removeAttribute('aria-activedescendant');
            input.removeAttribute('aria-owns');
            input.removeAttribute('aria-haspopup');
            clearDebounceTimer();
            clear();
            destroyed = true;
        }
        // setup event handlers
        input.addEventListener('keyup', keyupEventHandler);
        input.addEventListener('click', clickEventHandler);
        input.addEventListener('keydown', keydownEventHandler);
        input.addEventListener('input', inputEventHandler);
        input.addEventListener('blur', blurEventHandler);
        input.addEventListener('focus', focusEventHandler);
        window.addEventListener('resize', resizeEventHandler);
        doc.addEventListener('scroll', scrollEventHandler, true);
        return {
            destroy: destroy,
            fetch: manualFetch
        };
    }

    return autocomplete;

})));


/***/ }),

/***/ "../node_modules/file-saver/dist/FileSaver.min.js":
/*!********************************************************!*\
  !*** ../node_modules/file-saver/dist/FileSaver.min.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof __webpack_require__.g&&__webpack_require__.g.global===__webpack_require__.g?__webpack_require__.g:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g, true&&(module.exports=g)});



/***/ }),

/***/ "../node_modules/lodash/lodash.js":
/*!****************************************!*\
  !*** ../node_modules/lodash/lodash.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "../node_modules/semver/classes/comparator.js":
/*!****************************************************!*\
  !*** ../node_modules/semver/classes/comparator.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const ANY = Symbol('SemVer ANY')
// hoisted class for cyclic dependency
class Comparator {
  static get ANY () {
    return ANY
  }

  constructor (comp, options) {
    options = parseOptions(options)

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp
      } else {
        comp = comp.value
      }
    }

    comp = comp.trim().split(/\s+/).join(' ')
    debug('comparator', comp, options)
    this.options = options
    this.loose = !!options.loose
    this.parse(comp)

    if (this.semver === ANY) {
      this.value = ''
    } else {
      this.value = this.operator + this.semver.version
    }

    debug('comp', this)
  }

  parse (comp) {
    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const m = comp.match(r)

    if (!m) {
      throw new TypeError(`Invalid comparator: ${comp}`)
    }

    this.operator = m[1] !== undefined ? m[1] : ''
    if (this.operator === '=') {
      this.operator = ''
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      this.semver = ANY
    } else {
      this.semver = new SemVer(m[2], this.options.loose)
    }
  }

  toString () {
    return this.value
  }

  test (version) {
    debug('Comparator.test', version, this.options.loose)

    if (this.semver === ANY || version === ANY) {
      return true
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    return cmp(version, this.operator, this.semver, this.options)
  }

  intersects (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required')
    }

    if (this.operator === '') {
      if (this.value === '') {
        return true
      }
      return new Range(comp.value, options).test(this.value)
    } else if (comp.operator === '') {
      if (comp.value === '') {
        return true
      }
      return new Range(this.value, options).test(comp.semver)
    }

    options = parseOptions(options)

    // Special cases where nothing can possibly be lower
    if (options.includePrerelease &&
      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
      return false
    }
    if (!options.includePrerelease &&
      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
      return false
    }

    // Same direction increasing (> or >=)
    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
      return true
    }
    // Same direction decreasing (< or <=)
    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
      return true
    }
    // same SemVer and both sides are inclusive (<= or >=)
    if (
      (this.semver.version === comp.semver.version) &&
      this.operator.includes('=') && comp.operator.includes('=')) {
      return true
    }
    // opposite directions less than
    if (cmp(this.semver, '<', comp.semver, options) &&
      this.operator.startsWith('>') && comp.operator.startsWith('<')) {
      return true
    }
    // opposite directions greater than
    if (cmp(this.semver, '>', comp.semver, options) &&
      this.operator.startsWith('<') && comp.operator.startsWith('>')) {
      return true
    }
    return false
  }
}

module.exports = Comparator

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "../node_modules/semver/internal/parse-options.js")
const { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ "../node_modules/semver/internal/re.js")
const cmp = __webpack_require__(/*! ../functions/cmp */ "../node_modules/semver/functions/cmp.js")
const debug = __webpack_require__(/*! ../internal/debug */ "../node_modules/semver/internal/debug.js")
const SemVer = __webpack_require__(/*! ./semver */ "../node_modules/semver/classes/semver.js")
const Range = __webpack_require__(/*! ./range */ "../node_modules/semver/classes/range.js")


/***/ }),

/***/ "../node_modules/semver/classes/range.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/classes/range.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SPACE_CHARACTERS = /\s+/g

// hoisted class for cyclic dependency
class Range {
  constructor (range, options) {
    options = parseOptions(options)

    if (range instanceof Range) {
      if (
        range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease
      ) {
        return range
      } else {
        return new Range(range.raw, options)
      }
    }

    if (range instanceof Comparator) {
      // just put it in the set and return
      this.raw = range.value
      this.set = [[range]]
      this.formatted = undefined
      return this
    }

    this.options = options
    this.loose = !!options.loose
    this.includePrerelease = !!options.includePrerelease

    // First reduce all whitespace as much as possible so we do not have to rely
    // on potentially slow regexes like \s*. This is then stored and used for
    // future error messages as well.
    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')

    // First, split on ||
    this.set = this.raw
      .split('||')
      // map the range to a 2d array of comparators
      .map(r => this.parseRange(r.trim()))
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(c => c.length)

    if (!this.set.length) {
      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
    }

    // if we have any that are not the null set, throw out null sets.
    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      const first = this.set[0]
      this.set = this.set.filter(c => !isNullSet(c[0]))
      if (this.set.length === 0) {
        this.set = [first]
      } else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        for (const c of this.set) {
          if (c.length === 1 && isAny(c[0])) {
            this.set = [c]
            break
          }
        }
      }
    }

    this.formatted = undefined
  }

  get range () {
    if (this.formatted === undefined) {
      this.formatted = ''
      for (let i = 0; i < this.set.length; i++) {
        if (i > 0) {
          this.formatted += '||'
        }
        const comps = this.set[i]
        for (let k = 0; k < comps.length; k++) {
          if (k > 0) {
            this.formatted += ' '
          }
          this.formatted += comps[k].toString().trim()
        }
      }
    }
    return this.formatted
  }

  format () {
    return this.range
  }

  toString () {
    return this.range
  }

  parseRange (range) {
    // memoize range parsing for performance.
    // this is a very hot path, and fully deterministic.
    const memoOpts =
      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
      (this.options.loose && FLAG_LOOSE)
    const memoKey = memoOpts + ':' + range
    const cached = cache.get(memoKey)
    if (cached) {
      return cached
    }

    const loose = this.options.loose
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
    debug('hyphen replace', range)

    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
    debug('comparator trim', range)

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)
    debug('tilde trim', range)

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[t.CARETTRIM], caretTrimReplace)
    debug('caret trim', range)

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    let rangeList = range
      .split(' ')
      .map(comp => parseComparator(comp, this.options))
      .join(' ')
      .split(/\s+/)
      // >=0.0.0 is equivalent to *
      .map(comp => replaceGTE0(comp, this.options))

    if (loose) {
      // in loose mode, throw out any that are not valid comparators
      rangeList = rangeList.filter(comp => {
        debug('loose invalid filter', comp, this.options)
        return !!comp.match(re[t.COMPARATORLOOSE])
      })
    }
    debug('range list', rangeList)

    // if any comparators are the null set, then replace with JUST null set
    // if more than one comparator, remove any * comparators
    // also, don't include the same comparator more than once
    const rangeMap = new Map()
    const comparators = rangeList.map(comp => new Comparator(comp, this.options))
    for (const comp of comparators) {
      if (isNullSet(comp)) {
        return [comp]
      }
      rangeMap.set(comp.value, comp)
    }
    if (rangeMap.size > 1 && rangeMap.has('')) {
      rangeMap.delete('')
    }

    const result = [...rangeMap.values()]
    cache.set(memoKey, result)
    return result
  }

  intersects (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required')
    }

    return this.set.some((thisComparators) => {
      return (
        isSatisfiable(thisComparators, options) &&
        range.set.some((rangeComparators) => {
          return (
            isSatisfiable(rangeComparators, options) &&
            thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options)
              })
            })
          )
        })
      )
    })
  }

  // if ANY of the sets match ALL of its comparators, then pass
  test (version) {
    if (!version) {
      return false
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    for (let i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true
      }
    }
    return false
  }
}

module.exports = Range

const LRU = __webpack_require__(/*! ../internal/lrucache */ "../node_modules/semver/internal/lrucache.js")
const cache = new LRU()

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "../node_modules/semver/internal/parse-options.js")
const Comparator = __webpack_require__(/*! ./comparator */ "../node_modules/semver/classes/comparator.js")
const debug = __webpack_require__(/*! ../internal/debug */ "../node_modules/semver/internal/debug.js")
const SemVer = __webpack_require__(/*! ./semver */ "../node_modules/semver/classes/semver.js")
const {
  safeRe: re,
  t,
  comparatorTrimReplace,
  tildeTrimReplace,
  caretTrimReplace,
} = __webpack_require__(/*! ../internal/re */ "../node_modules/semver/internal/re.js")
const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __webpack_require__(/*! ../internal/constants */ "../node_modules/semver/internal/constants.js")

const isNullSet = c => c.value === '<0.0.0-0'
const isAny = c => c.value === ''

// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options) => {
  let result = true
  const remainingComparators = comparators.slice()
  let testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every((otherComparator) => {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }

  return result
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options) => {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const replaceTildes = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceTilde(c, options))
    .join(' ')
}

const replaceTilde = (comp, options) => {
  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('tilde', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const replaceCarets = (comp, options) => {
  return comp
    .trim()
    .split(/\s+/)
    .map((c) => replaceCaret(c, options))
    .join(' ')
}

const replaceCaret = (comp, options) => {
  debug('caret', comp, options)
  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
  const z = options.includePrerelease ? '-0' : ''
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('caret', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      if (M === '0') {
        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
      } else {
        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`
      }
    }

    debug('caret return', ret)
    return ret
  })
}

const replaceXRanges = (comp, options) => {
  debug('replaceXRanges', comp, options)
  return comp
    .split(/\s+/)
    .map((c) => replaceXRange(c, options))
    .join(' ')
}

const replaceXRange = (comp, options) => {
  comp = comp.trim()
  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    const xM = isX(M)
    const xm = xM || isX(m)
    const xp = xm || isX(p)
    const anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : ''

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      if (gtlt === '<') {
        pr = '-0'
      }

      ret = `${gtlt + M}.${m}.${p}${pr}`
    } else if (xm) {
      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
    } else if (xp) {
      ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options) => {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp
    .trim()
    .replace(re[t.STAR], '')
}

const replaceGTE0 = (comp, options) => {
  debug('replaceGTE0', comp, options)
  return comp
    .trim()
    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
}

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
// TODO build?
const hyphenReplace = incPr => ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr) => {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = `>=${fM}.0.0${incPr ? '-0' : ''}`
  } else if (isX(fp)) {
    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
  } else if (fpr) {
    from = `>=${from}`
  } else {
    from = `>=${from}${incPr ? '-0' : ''}`
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = `<${+tM + 1}.0.0-0`
  } else if (isX(tp)) {
    to = `<${tM}.${+tm + 1}.0-0`
  } else if (tpr) {
    to = `<=${tM}.${tm}.${tp}-${tpr}`
  } else if (incPr) {
    to = `<${tM}.${tm}.${+tp + 1}-0`
  } else {
    to = `<=${to}`
  }

  return `${from} ${to}`.trim()
}

const testSet = (set, version, options) => {
  for (let i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (let i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === Comparator.ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        const allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}


/***/ }),

/***/ "../node_modules/semver/classes/semver.js":
/*!************************************************!*\
  !*** ../node_modules/semver/classes/semver.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const debug = __webpack_require__(/*! ../internal/debug */ "../node_modules/semver/internal/debug.js")
const { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__(/*! ../internal/constants */ "../node_modules/semver/internal/constants.js")
const { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ "../node_modules/semver/internal/re.js")

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "../node_modules/semver/internal/parse-options.js")
const { compareIdentifiers } = __webpack_require__(/*! ../internal/identifiers */ "../node_modules/semver/internal/identifiers.js")
class SemVer {
  constructor (version, options) {
    options = parseOptions(options)

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose &&
          version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug('SemVer', version, options)
    this.options = options
    this.loose = !!options.loose
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease

    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version

    // these are actually numbers
    this.major = +m[1]
    this.minor = +m[2]
    this.patch = +m[3]

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = []
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      })
    }

    this.build = m[5] ? m[5].split('.') : []
    this.format()
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug('SemVer.compare', this.version, this.options, other)
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer(other, this.options)
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0
    do {
      const a = this.prerelease[i]
      const b = other.prerelease[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    let i = 0
    do {
      const a = this.build[i]
      const b = other.build[i]
      debug('build compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier, identifierBase) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor = 0
        this.major++
        this.inc('pre', identifier, identifierBase)
        break
      case 'preminor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor++
        this.inc('pre', identifier, identifierBase)
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0
        this.inc('patch', identifier, identifierBase)
        this.inc('pre', identifier, identifierBase)
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier, identifierBase)
        }
        this.inc('pre', identifier, identifierBase)
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++
        }
        this.minor = 0
        this.patch = 0
        this.prerelease = []
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++
        }
        this.patch = 0
        this.prerelease = []
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++
        }
        this.prerelease = []
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre': {
        const base = Number(identifierBase) ? 1 : 0

        if (!identifier && identifierBase === false) {
          throw new Error('invalid increment argument: identifier is empty')
        }

        if (this.prerelease.length === 0) {
          this.prerelease = [base]
        } else {
          let i = this.prerelease.length
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++
              i = -2
            }
          }
          if (i === -1) {
            // didn't increment anything
            if (identifier === this.prerelease.join('.') && identifierBase === false) {
              throw new Error('invalid increment argument: identifier already exists')
            }
            this.prerelease.push(base)
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          let prerelease = [identifier, base]
          if (identifierBase === false) {
            prerelease = [identifier]
          }
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = prerelease
            }
          } else {
            this.prerelease = prerelease
          }
        }
        break
      }
      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.raw = this.format()
    if (this.build.length) {
      this.raw += `+${this.build.join('.')}`
    }
    return this
  }
}

module.exports = SemVer


/***/ }),

/***/ "../node_modules/semver/functions/clean.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/clean.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(/*! ./parse */ "../node_modules/semver/functions/parse.js")
const clean = (version, options) => {
  const s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}
module.exports = clean


/***/ }),

/***/ "../node_modules/semver/functions/cmp.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/cmp.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const eq = __webpack_require__(/*! ./eq */ "../node_modules/semver/functions/eq.js")
const neq = __webpack_require__(/*! ./neq */ "../node_modules/semver/functions/neq.js")
const gt = __webpack_require__(/*! ./gt */ "../node_modules/semver/functions/gt.js")
const gte = __webpack_require__(/*! ./gte */ "../node_modules/semver/functions/gte.js")
const lt = __webpack_require__(/*! ./lt */ "../node_modules/semver/functions/lt.js")
const lte = __webpack_require__(/*! ./lte */ "../node_modules/semver/functions/lte.js")

const cmp = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a === b

    case '!==':
      if (typeof a === 'object') {
        a = a.version
      }
      if (typeof b === 'object') {
        b = b.version
      }
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
}
module.exports = cmp


/***/ }),

/***/ "../node_modules/semver/functions/coerce.js":
/*!**************************************************!*\
  !*** ../node_modules/semver/functions/coerce.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const parse = __webpack_require__(/*! ./parse */ "../node_modules/semver/functions/parse.js")
const { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ "../node_modules/semver/internal/re.js")

const coerce = (version, options) => {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version === 'number') {
    version = String(version)
  }

  if (typeof version !== 'string') {
    return null
  }

  options = options || {}

  let match = null
  if (!options.rtl) {
    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]
    let next
    while ((next = coerceRtlRegex.exec(version)) &&
        (!match || match.index + match[0].length !== version.length)
    ) {
      if (!match ||
            next.index + next[0].length !== match.index + match[0].length) {
        match = next
      }
      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length
    }
    // leave it in a clean state
    coerceRtlRegex.lastIndex = -1
  }

  if (match === null) {
    return null
  }

  const major = match[2]
  const minor = match[3] || '0'
  const patch = match[4] || '0'
  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''
  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''

  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)
}
module.exports = coerce


/***/ }),

/***/ "../node_modules/semver/functions/compare-build.js":
/*!*********************************************************!*\
  !*** ../node_modules/semver/functions/compare-build.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const compareBuild = (a, b, loose) => {
  const versionA = new SemVer(a, loose)
  const versionB = new SemVer(b, loose)
  return versionA.compare(versionB) || versionA.compareBuild(versionB)
}
module.exports = compareBuild


/***/ }),

/***/ "../node_modules/semver/functions/compare-loose.js":
/*!*********************************************************!*\
  !*** ../node_modules/semver/functions/compare-loose.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "../node_modules/semver/functions/compare.js")
const compareLoose = (a, b) => compare(a, b, true)
module.exports = compareLoose


/***/ }),

/***/ "../node_modules/semver/functions/compare.js":
/*!***************************************************!*\
  !*** ../node_modules/semver/functions/compare.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const compare = (a, b, loose) =>
  new SemVer(a, loose).compare(new SemVer(b, loose))

module.exports = compare


/***/ }),

/***/ "../node_modules/semver/functions/diff.js":
/*!************************************************!*\
  !*** ../node_modules/semver/functions/diff.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(/*! ./parse.js */ "../node_modules/semver/functions/parse.js")

const diff = (version1, version2) => {
  const v1 = parse(version1, null, true)
  const v2 = parse(version2, null, true)
  const comparison = v1.compare(v2)

  if (comparison === 0) {
    return null
  }

  const v1Higher = comparison > 0
  const highVersion = v1Higher ? v1 : v2
  const lowVersion = v1Higher ? v2 : v1
  const highHasPre = !!highVersion.prerelease.length
  const lowHasPre = !!lowVersion.prerelease.length

  if (lowHasPre && !highHasPre) {
    // Going from prerelease -> no prerelease requires some special casing

    // If the low version has only a major, then it will always be a major
    // Some examples:
    // 1.0.0-1 -> 1.0.0
    // 1.0.0-1 -> 1.1.1
    // 1.0.0-1 -> 2.0.0
    if (!lowVersion.patch && !lowVersion.minor) {
      return 'major'
    }

    // Otherwise it can be determined by checking the high version

    if (highVersion.patch) {
      // anything higher than a patch bump would result in the wrong version
      return 'patch'
    }

    if (highVersion.minor) {
      // anything higher than a minor bump would result in the wrong version
      return 'minor'
    }

    // bumping major/minor/patch all have same result
    return 'major'
  }

  // add the `pre` prefix if we are going to a prerelease version
  const prefix = highHasPre ? 'pre' : ''

  if (v1.major !== v2.major) {
    return prefix + 'major'
  }

  if (v1.minor !== v2.minor) {
    return prefix + 'minor'
  }

  if (v1.patch !== v2.patch) {
    return prefix + 'patch'
  }

  // high and low are preleases
  return 'prerelease'
}

module.exports = diff


/***/ }),

/***/ "../node_modules/semver/functions/eq.js":
/*!**********************************************!*\
  !*** ../node_modules/semver/functions/eq.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "../node_modules/semver/functions/compare.js")
const eq = (a, b, loose) => compare(a, b, loose) === 0
module.exports = eq


/***/ }),

/***/ "../node_modules/semver/functions/gt.js":
/*!**********************************************!*\
  !*** ../node_modules/semver/functions/gt.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "../node_modules/semver/functions/compare.js")
const gt = (a, b, loose) => compare(a, b, loose) > 0
module.exports = gt


/***/ }),

/***/ "../node_modules/semver/functions/gte.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/gte.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "../node_modules/semver/functions/compare.js")
const gte = (a, b, loose) => compare(a, b, loose) >= 0
module.exports = gte


/***/ }),

/***/ "../node_modules/semver/functions/inc.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/inc.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")

const inc = (version, release, options, identifier, identifierBase) => {
  if (typeof (options) === 'string') {
    identifierBase = identifier
    identifier = options
    options = undefined
  }

  try {
    return new SemVer(
      version instanceof SemVer ? version.version : version,
      options
    ).inc(release, identifier, identifierBase).version
  } catch (er) {
    return null
  }
}
module.exports = inc


/***/ }),

/***/ "../node_modules/semver/functions/lt.js":
/*!**********************************************!*\
  !*** ../node_modules/semver/functions/lt.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "../node_modules/semver/functions/compare.js")
const lt = (a, b, loose) => compare(a, b, loose) < 0
module.exports = lt


/***/ }),

/***/ "../node_modules/semver/functions/lte.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/lte.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "../node_modules/semver/functions/compare.js")
const lte = (a, b, loose) => compare(a, b, loose) <= 0
module.exports = lte


/***/ }),

/***/ "../node_modules/semver/functions/major.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/major.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const major = (a, loose) => new SemVer(a, loose).major
module.exports = major


/***/ }),

/***/ "../node_modules/semver/functions/minor.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/minor.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const minor = (a, loose) => new SemVer(a, loose).minor
module.exports = minor


/***/ }),

/***/ "../node_modules/semver/functions/neq.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/neq.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "../node_modules/semver/functions/compare.js")
const neq = (a, b, loose) => compare(a, b, loose) !== 0
module.exports = neq


/***/ }),

/***/ "../node_modules/semver/functions/parse.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/parse.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const parse = (version, options, throwErrors = false) => {
  if (version instanceof SemVer) {
    return version
  }
  try {
    return new SemVer(version, options)
  } catch (er) {
    if (!throwErrors) {
      return null
    }
    throw er
  }
}

module.exports = parse


/***/ }),

/***/ "../node_modules/semver/functions/patch.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/patch.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const patch = (a, loose) => new SemVer(a, loose).patch
module.exports = patch


/***/ }),

/***/ "../node_modules/semver/functions/prerelease.js":
/*!******************************************************!*\
  !*** ../node_modules/semver/functions/prerelease.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(/*! ./parse */ "../node_modules/semver/functions/parse.js")
const prerelease = (version, options) => {
  const parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}
module.exports = prerelease


/***/ }),

/***/ "../node_modules/semver/functions/rcompare.js":
/*!****************************************************!*\
  !*** ../node_modules/semver/functions/rcompare.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compare = __webpack_require__(/*! ./compare */ "../node_modules/semver/functions/compare.js")
const rcompare = (a, b, loose) => compare(b, a, loose)
module.exports = rcompare


/***/ }),

/***/ "../node_modules/semver/functions/rsort.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/rsort.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compareBuild = __webpack_require__(/*! ./compare-build */ "../node_modules/semver/functions/compare-build.js")
const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))
module.exports = rsort


/***/ }),

/***/ "../node_modules/semver/functions/satisfies.js":
/*!*****************************************************!*\
  !*** ../node_modules/semver/functions/satisfies.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(/*! ../classes/range */ "../node_modules/semver/classes/range.js")
const satisfies = (version, range, options) => {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}
module.exports = satisfies


/***/ }),

/***/ "../node_modules/semver/functions/sort.js":
/*!************************************************!*\
  !*** ../node_modules/semver/functions/sort.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const compareBuild = __webpack_require__(/*! ./compare-build */ "../node_modules/semver/functions/compare-build.js")
const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))
module.exports = sort


/***/ }),

/***/ "../node_modules/semver/functions/valid.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/valid.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const parse = __webpack_require__(/*! ./parse */ "../node_modules/semver/functions/parse.js")
const valid = (version, options) => {
  const v = parse(version, options)
  return v ? v.version : null
}
module.exports = valid


/***/ }),

/***/ "../node_modules/semver/index.js":
/*!***************************************!*\
  !*** ../node_modules/semver/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// just pre-load all the stuff that index.js lazily exports
const internalRe = __webpack_require__(/*! ./internal/re */ "../node_modules/semver/internal/re.js")
const constants = __webpack_require__(/*! ./internal/constants */ "../node_modules/semver/internal/constants.js")
const SemVer = __webpack_require__(/*! ./classes/semver */ "../node_modules/semver/classes/semver.js")
const identifiers = __webpack_require__(/*! ./internal/identifiers */ "../node_modules/semver/internal/identifiers.js")
const parse = __webpack_require__(/*! ./functions/parse */ "../node_modules/semver/functions/parse.js")
const valid = __webpack_require__(/*! ./functions/valid */ "../node_modules/semver/functions/valid.js")
const clean = __webpack_require__(/*! ./functions/clean */ "../node_modules/semver/functions/clean.js")
const inc = __webpack_require__(/*! ./functions/inc */ "../node_modules/semver/functions/inc.js")
const diff = __webpack_require__(/*! ./functions/diff */ "../node_modules/semver/functions/diff.js")
const major = __webpack_require__(/*! ./functions/major */ "../node_modules/semver/functions/major.js")
const minor = __webpack_require__(/*! ./functions/minor */ "../node_modules/semver/functions/minor.js")
const patch = __webpack_require__(/*! ./functions/patch */ "../node_modules/semver/functions/patch.js")
const prerelease = __webpack_require__(/*! ./functions/prerelease */ "../node_modules/semver/functions/prerelease.js")
const compare = __webpack_require__(/*! ./functions/compare */ "../node_modules/semver/functions/compare.js")
const rcompare = __webpack_require__(/*! ./functions/rcompare */ "../node_modules/semver/functions/rcompare.js")
const compareLoose = __webpack_require__(/*! ./functions/compare-loose */ "../node_modules/semver/functions/compare-loose.js")
const compareBuild = __webpack_require__(/*! ./functions/compare-build */ "../node_modules/semver/functions/compare-build.js")
const sort = __webpack_require__(/*! ./functions/sort */ "../node_modules/semver/functions/sort.js")
const rsort = __webpack_require__(/*! ./functions/rsort */ "../node_modules/semver/functions/rsort.js")
const gt = __webpack_require__(/*! ./functions/gt */ "../node_modules/semver/functions/gt.js")
const lt = __webpack_require__(/*! ./functions/lt */ "../node_modules/semver/functions/lt.js")
const eq = __webpack_require__(/*! ./functions/eq */ "../node_modules/semver/functions/eq.js")
const neq = __webpack_require__(/*! ./functions/neq */ "../node_modules/semver/functions/neq.js")
const gte = __webpack_require__(/*! ./functions/gte */ "../node_modules/semver/functions/gte.js")
const lte = __webpack_require__(/*! ./functions/lte */ "../node_modules/semver/functions/lte.js")
const cmp = __webpack_require__(/*! ./functions/cmp */ "../node_modules/semver/functions/cmp.js")
const coerce = __webpack_require__(/*! ./functions/coerce */ "../node_modules/semver/functions/coerce.js")
const Comparator = __webpack_require__(/*! ./classes/comparator */ "../node_modules/semver/classes/comparator.js")
const Range = __webpack_require__(/*! ./classes/range */ "../node_modules/semver/classes/range.js")
const satisfies = __webpack_require__(/*! ./functions/satisfies */ "../node_modules/semver/functions/satisfies.js")
const toComparators = __webpack_require__(/*! ./ranges/to-comparators */ "../node_modules/semver/ranges/to-comparators.js")
const maxSatisfying = __webpack_require__(/*! ./ranges/max-satisfying */ "../node_modules/semver/ranges/max-satisfying.js")
const minSatisfying = __webpack_require__(/*! ./ranges/min-satisfying */ "../node_modules/semver/ranges/min-satisfying.js")
const minVersion = __webpack_require__(/*! ./ranges/min-version */ "../node_modules/semver/ranges/min-version.js")
const validRange = __webpack_require__(/*! ./ranges/valid */ "../node_modules/semver/ranges/valid.js")
const outside = __webpack_require__(/*! ./ranges/outside */ "../node_modules/semver/ranges/outside.js")
const gtr = __webpack_require__(/*! ./ranges/gtr */ "../node_modules/semver/ranges/gtr.js")
const ltr = __webpack_require__(/*! ./ranges/ltr */ "../node_modules/semver/ranges/ltr.js")
const intersects = __webpack_require__(/*! ./ranges/intersects */ "../node_modules/semver/ranges/intersects.js")
const simplifyRange = __webpack_require__(/*! ./ranges/simplify */ "../node_modules/semver/ranges/simplify.js")
const subset = __webpack_require__(/*! ./ranges/subset */ "../node_modules/semver/ranges/subset.js")
module.exports = {
  parse,
  valid,
  clean,
  inc,
  diff,
  major,
  minor,
  patch,
  prerelease,
  compare,
  rcompare,
  compareLoose,
  compareBuild,
  sort,
  rsort,
  gt,
  lt,
  eq,
  neq,
  gte,
  lte,
  cmp,
  coerce,
  Comparator,
  Range,
  satisfies,
  toComparators,
  maxSatisfying,
  minSatisfying,
  minVersion,
  validRange,
  outside,
  gtr,
  ltr,
  intersects,
  simplifyRange,
  subset,
  SemVer,
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
  RELEASE_TYPES: constants.RELEASE_TYPES,
  compareIdentifiers: identifiers.compareIdentifiers,
  rcompareIdentifiers: identifiers.rcompareIdentifiers,
}


/***/ }),

/***/ "../node_modules/semver/internal/constants.js":
/*!****************************************************!*\
  !*** ../node_modules/semver/internal/constants.js ***!
  \****************************************************/
/***/ ((module) => {

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0'

const MAX_LENGTH = 256
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
/* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16

// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6

const RELEASE_TYPES = [
  'major',
  'premajor',
  'minor',
  'preminor',
  'patch',
  'prepatch',
  'prerelease',
]

module.exports = {
  MAX_LENGTH,
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_SAFE_INTEGER,
  RELEASE_TYPES,
  SEMVER_SPEC_VERSION,
  FLAG_INCLUDE_PRERELEASE: 0b001,
  FLAG_LOOSE: 0b010,
}


/***/ }),

/***/ "../node_modules/semver/internal/debug.js":
/*!************************************************!*\
  !*** ../node_modules/semver/internal/debug.js ***!
  \************************************************/
/***/ ((module) => {

const debug = (
  typeof process === 'object' &&
  process.env &&
  process.env.NODE_DEBUG &&
  /\bsemver\b/i.test(process.env.NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {}

module.exports = debug


/***/ }),

/***/ "../node_modules/semver/internal/identifiers.js":
/*!******************************************************!*\
  !*** ../node_modules/semver/internal/identifiers.js ***!
  \******************************************************/
/***/ ((module) => {

const numeric = /^[0-9]+$/
const compareIdentifiers = (a, b) => {
  const anum = numeric.test(a)
  const bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)

module.exports = {
  compareIdentifiers,
  rcompareIdentifiers,
}


/***/ }),

/***/ "../node_modules/semver/internal/lrucache.js":
/*!***************************************************!*\
  !*** ../node_modules/semver/internal/lrucache.js ***!
  \***************************************************/
/***/ ((module) => {

class LRUCache {
  constructor () {
    this.max = 1000
    this.map = new Map()
  }

  get (key) {
    const value = this.map.get(key)
    if (value === undefined) {
      return undefined
    } else {
      // Remove the key from the map and add it to the end
      this.map.delete(key)
      this.map.set(key, value)
      return value
    }
  }

  delete (key) {
    return this.map.delete(key)
  }

  set (key, value) {
    const deleted = this.delete(key)

    if (!deleted && value !== undefined) {
      // If cache is full, delete the least recently used item
      if (this.map.size >= this.max) {
        const firstKey = this.map.keys().next().value
        this.delete(firstKey)
      }

      this.map.set(key, value)
    }

    return this
  }
}

module.exports = LRUCache


/***/ }),

/***/ "../node_modules/semver/internal/parse-options.js":
/*!********************************************************!*\
  !*** ../node_modules/semver/internal/parse-options.js ***!
  \********************************************************/
/***/ ((module) => {

// parse out just the options we care about
const looseOption = Object.freeze({ loose: true })
const emptyOpts = Object.freeze({ })
const parseOptions = options => {
  if (!options) {
    return emptyOpts
  }

  if (typeof options !== 'object') {
    return looseOption
  }

  return options
}
module.exports = parseOptions


/***/ }),

/***/ "../node_modules/semver/internal/re.js":
/*!*********************************************!*\
  !*** ../node_modules/semver/internal/re.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

const {
  MAX_SAFE_COMPONENT_LENGTH,
  MAX_SAFE_BUILD_LENGTH,
  MAX_LENGTH,
} = __webpack_require__(/*! ./constants */ "../node_modules/semver/internal/constants.js")
const debug = __webpack_require__(/*! ./debug */ "../node_modules/semver/internal/debug.js")
exports = module.exports = {}

// The actual regexps go on exports.re
const re = exports.re = []
const safeRe = exports.safeRe = []
const src = exports.src = []
const t = exports.t = {}
let R = 0

const LETTERDASHNUMBER = '[a-zA-Z0-9-]'

// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
  ['\\s', 1],
  ['\\d', MAX_LENGTH],
  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
]

const makeSafeRegex = (value) => {
  for (const [token, max] of safeRegexReplacements) {
    value = value
      .split(`${token}*`).join(`${token}{0,${max}}`)
      .split(`${token}+`).join(`${token}{1,${max}}`)
  }
  return value
}

const createToken = (name, value, isGlobal) => {
  const safe = makeSafeRegex(value)
  const index = R++
  debug(name, index, value)
  t[name] = index
  src[index] = value
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)
}

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
createToken('NUMERICIDENTIFIERLOOSE', '\\d+')

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)

// ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})`)

createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
}|${src[t.NONNUMERICIDENTIFIER]})`)

createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
}|${src[t.NONNUMERICIDENTIFIER]})`)

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`)

createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`)

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`)

createToken('FULL', `^${src[t.FULLPLAIN]}$`)

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`)

createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)

createToken('GTLT', '((?:<|>)?=?)')

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`)
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)

createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                   `)?)?`)

createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                        `)?)?`)

createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCEPLAIN', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)
createToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\d])`)
createToken('COERCEFULL', src[t.COERCEPLAIN] +
              `(?:${src[t.PRERELEASE]})?` +
              `(?:${src[t.BUILD]})?` +
              `(?:$|[^\\d])`)
createToken('COERCERTL', src[t.COERCE], true)
createToken('COERCERTLFULL', src[t.COERCEFULL], true)

// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)')

createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
exports.tildeTrimReplace = '$1~'

createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)')

createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
exports.caretTrimReplace = '$1^'

createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`)
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)
exports.comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                   `\\s+-\\s+` +
                   `(${src[t.XRANGEPLAIN]})` +
                   `\\s*$`)

createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s+-\\s+` +
                        `(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s*$`)

// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*')
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$')
createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$')


/***/ }),

/***/ "../node_modules/semver/ranges/gtr.js":
/*!********************************************!*\
  !*** ../node_modules/semver/ranges/gtr.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Determine if version is greater than all the versions possible in the range.
const outside = __webpack_require__(/*! ./outside */ "../node_modules/semver/ranges/outside.js")
const gtr = (version, range, options) => outside(version, range, '>', options)
module.exports = gtr


/***/ }),

/***/ "../node_modules/semver/ranges/intersects.js":
/*!***************************************************!*\
  !*** ../node_modules/semver/ranges/intersects.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(/*! ../classes/range */ "../node_modules/semver/classes/range.js")
const intersects = (r1, r2, options) => {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2, options)
}
module.exports = intersects


/***/ }),

/***/ "../node_modules/semver/ranges/ltr.js":
/*!********************************************!*\
  !*** ../node_modules/semver/ranges/ltr.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const outside = __webpack_require__(/*! ./outside */ "../node_modules/semver/ranges/outside.js")
// Determine if version is less than all the versions possible in the range
const ltr = (version, range, options) => outside(version, range, '<', options)
module.exports = ltr


/***/ }),

/***/ "../node_modules/semver/ranges/max-satisfying.js":
/*!*******************************************************!*\
  !*** ../node_modules/semver/ranges/max-satisfying.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const Range = __webpack_require__(/*! ../classes/range */ "../node_modules/semver/classes/range.js")

const maxSatisfying = (versions, range, options) => {
  let max = null
  let maxSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}
module.exports = maxSatisfying


/***/ }),

/***/ "../node_modules/semver/ranges/min-satisfying.js":
/*!*******************************************************!*\
  !*** ../node_modules/semver/ranges/min-satisfying.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const Range = __webpack_require__(/*! ../classes/range */ "../node_modules/semver/classes/range.js")
const minSatisfying = (versions, range, options) => {
  let min = null
  let minSV = null
  let rangeObj = null
  try {
    rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach((v) => {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}
module.exports = minSatisfying


/***/ }),

/***/ "../node_modules/semver/ranges/min-version.js":
/*!****************************************************!*\
  !*** ../node_modules/semver/ranges/min-version.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const Range = __webpack_require__(/*! ../classes/range */ "../node_modules/semver/classes/range.js")
const gt = __webpack_require__(/*! ../functions/gt */ "../node_modules/semver/functions/gt.js")

const minVersion = (range, loose) => {
  range = new Range(range, loose)

  let minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let setMin = null
    comparators.forEach((comparator) => {
      // Clone to avoid manipulating the comparator's semver object.
      const compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!setMin || gt(compver, setMin)) {
            setMin = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error(`Unexpected operation: ${comparator.operator}`)
      }
    })
    if (setMin && (!minver || gt(minver, setMin))) {
      minver = setMin
    }
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}
module.exports = minVersion


/***/ }),

/***/ "../node_modules/semver/ranges/outside.js":
/*!************************************************!*\
  !*** ../node_modules/semver/ranges/outside.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const SemVer = __webpack_require__(/*! ../classes/semver */ "../node_modules/semver/classes/semver.js")
const Comparator = __webpack_require__(/*! ../classes/comparator */ "../node_modules/semver/classes/comparator.js")
const { ANY } = Comparator
const Range = __webpack_require__(/*! ../classes/range */ "../node_modules/semver/classes/range.js")
const satisfies = __webpack_require__(/*! ../functions/satisfies */ "../node_modules/semver/functions/satisfies.js")
const gt = __webpack_require__(/*! ../functions/gt */ "../node_modules/semver/functions/gt.js")
const lt = __webpack_require__(/*! ../functions/lt */ "../node_modules/semver/functions/lt.js")
const lte = __webpack_require__(/*! ../functions/lte */ "../node_modules/semver/functions/lte.js")
const gte = __webpack_require__(/*! ../functions/gte */ "../node_modules/semver/functions/gte.js")

const outside = (version, range, hilo, options) => {
  version = new SemVer(version, options)
  range = new Range(range, options)

  let gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisfies the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (let i = 0; i < range.set.length; ++i) {
    const comparators = range.set[i]

    let high = null
    let low = null

    comparators.forEach((comparator) => {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

module.exports = outside


/***/ }),

/***/ "../node_modules/semver/ranges/simplify.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/ranges/simplify.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
const satisfies = __webpack_require__(/*! ../functions/satisfies.js */ "../node_modules/semver/functions/satisfies.js")
const compare = __webpack_require__(/*! ../functions/compare.js */ "../node_modules/semver/functions/compare.js")
module.exports = (versions, range, options) => {
  const set = []
  let first = null
  let prev = null
  const v = versions.sort((a, b) => compare(a, b, options))
  for (const version of v) {
    const included = satisfies(version, range, options)
    if (included) {
      prev = version
      if (!first) {
        first = version
      }
    } else {
      if (prev) {
        set.push([first, prev])
      }
      prev = null
      first = null
    }
  }
  if (first) {
    set.push([first, null])
  }

  const ranges = []
  for (const [min, max] of set) {
    if (min === max) {
      ranges.push(min)
    } else if (!max && min === v[0]) {
      ranges.push('*')
    } else if (!max) {
      ranges.push(`>=${min}`)
    } else if (min === v[0]) {
      ranges.push(`<=${max}`)
    } else {
      ranges.push(`${min} - ${max}`)
    }
  }
  const simplified = ranges.join(' || ')
  const original = typeof range.raw === 'string' ? range.raw : String(range)
  return simplified.length < original.length ? simplified : range
}


/***/ }),

/***/ "../node_modules/semver/ranges/subset.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/ranges/subset.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(/*! ../classes/range.js */ "../node_modules/semver/classes/range.js")
const Comparator = __webpack_require__(/*! ../classes/comparator.js */ "../node_modules/semver/classes/comparator.js")
const { ANY } = Comparator
const satisfies = __webpack_require__(/*! ../functions/satisfies.js */ "../node_modules/semver/functions/satisfies.js")
const compare = __webpack_require__(/*! ../functions/compare.js */ "../node_modules/semver/functions/compare.js")

// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true

const subset = (sub, dom, options = {}) => {
  if (sub === dom) {
    return true
  }

  sub = new Range(sub, options)
  dom = new Range(dom, options)
  let sawNonNull = false

  OUTER: for (const simpleSub of sub.set) {
    for (const simpleDom of dom.set) {
      const isSub = simpleSubset(simpleSub, simpleDom, options)
      sawNonNull = sawNonNull || isSub !== null
      if (isSub) {
        continue OUTER
      }
    }
    // the null set is a subset of everything, but null simple ranges in
    // a complex range should be ignored.  so if we saw a non-null range,
    // then we know this isn't a subset, but if EVERY simple range was null,
    // then it is a subset.
    if (sawNonNull) {
      return false
    }
  }
  return true
}

const minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]
const minimumVersion = [new Comparator('>=0.0.0')]

const simpleSubset = (sub, dom, options) => {
  if (sub === dom) {
    return true
  }

  if (sub.length === 1 && sub[0].semver === ANY) {
    if (dom.length === 1 && dom[0].semver === ANY) {
      return true
    } else if (options.includePrerelease) {
      sub = minimumVersionWithPreRelease
    } else {
      sub = minimumVersion
    }
  }

  if (dom.length === 1 && dom[0].semver === ANY) {
    if (options.includePrerelease) {
      return true
    } else {
      dom = minimumVersion
    }
  }

  const eqSet = new Set()
  let gt, lt
  for (const c of sub) {
    if (c.operator === '>' || c.operator === '>=') {
      gt = higherGT(gt, c, options)
    } else if (c.operator === '<' || c.operator === '<=') {
      lt = lowerLT(lt, c, options)
    } else {
      eqSet.add(c.semver)
    }
  }

  if (eqSet.size > 1) {
    return null
  }

  let gtltComp
  if (gt && lt) {
    gtltComp = compare(gt.semver, lt.semver, options)
    if (gtltComp > 0) {
      return null
    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
      return null
    }
  }

  // will iterate one or zero times
  for (const eq of eqSet) {
    if (gt && !satisfies(eq, String(gt), options)) {
      return null
    }

    if (lt && !satisfies(eq, String(lt), options)) {
      return null
    }

    for (const c of dom) {
      if (!satisfies(eq, String(c), options)) {
        return false
      }
    }

    return true
  }

  let higher, lower
  let hasDomLT, hasDomGT
  // if the subset has a prerelease, we need a comparator in the superset
  // with the same tuple and a prerelease, or it's not a subset
  let needDomLTPre = lt &&
    !options.includePrerelease &&
    lt.semver.prerelease.length ? lt.semver : false
  let needDomGTPre = gt &&
    !options.includePrerelease &&
    gt.semver.prerelease.length ? gt.semver : false
  // exception: <1.2.3-0 is the same as <1.2.3
  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
    needDomLTPre = false
  }

  for (const c of dom) {
    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='
    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='
    if (gt) {
      if (needDomGTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomGTPre.major &&
            c.semver.minor === needDomGTPre.minor &&
            c.semver.patch === needDomGTPre.patch) {
          needDomGTPre = false
        }
      }
      if (c.operator === '>' || c.operator === '>=') {
        higher = higherGT(gt, c, options)
        if (higher === c && higher !== gt) {
          return false
        }
      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {
        return false
      }
    }
    if (lt) {
      if (needDomLTPre) {
        if (c.semver.prerelease && c.semver.prerelease.length &&
            c.semver.major === needDomLTPre.major &&
            c.semver.minor === needDomLTPre.minor &&
            c.semver.patch === needDomLTPre.patch) {
          needDomLTPre = false
        }
      }
      if (c.operator === '<' || c.operator === '<=') {
        lower = lowerLT(lt, c, options)
        if (lower === c && lower !== lt) {
          return false
        }
      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {
        return false
      }
    }
    if (!c.operator && (lt || gt) && gtltComp !== 0) {
      return false
    }
  }

  // if there was a < or >, and nothing in the dom, then must be false
  // UNLESS it was limited by another range in the other direction.
  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
  if (gt && hasDomLT && !lt && gtltComp !== 0) {
    return false
  }

  if (lt && hasDomGT && !gt && gtltComp !== 0) {
    return false
  }

  // we needed a prerelease range in a specific tuple, but didn't get one
  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
  // because it includes prereleases in the 1.2.3 tuple
  if (needDomGTPre || needDomLTPre) {
    return false
  }

  return true
}

// >=1.2.3 is lower than >1.2.3
const higherGT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp > 0 ? a
    : comp < 0 ? b
    : b.operator === '>' && a.operator === '>=' ? b
    : a
}

// <=1.2.3 is higher than <1.2.3
const lowerLT = (a, b, options) => {
  if (!a) {
    return b
  }
  const comp = compare(a.semver, b.semver, options)
  return comp < 0 ? a
    : comp > 0 ? b
    : b.operator === '<' && a.operator === '<=' ? b
    : a
}

module.exports = subset


/***/ }),

/***/ "../node_modules/semver/ranges/to-comparators.js":
/*!*******************************************************!*\
  !*** ../node_modules/semver/ranges/to-comparators.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(/*! ../classes/range */ "../node_modules/semver/classes/range.js")

// Mostly just for testing and legacy API reasons
const toComparators = (range, options) =>
  new Range(range, options).set
    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))

module.exports = toComparators


/***/ }),

/***/ "../node_modules/semver/ranges/valid.js":
/*!**********************************************!*\
  !*** ../node_modules/semver/ranges/valid.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Range = __webpack_require__(/*! ../classes/range */ "../node_modules/semver/classes/range.js")
const validRange = (range, options) => {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}
module.exports = validRange


/***/ }),

/***/ "../node_modules/snabbdom/build/h.js":
/*!*******************************************!*\
  !*** ../node_modules/snabbdom/build/h.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addNS: () => (/* binding */ addNS),
/* harmony export */   fragment: () => (/* binding */ fragment),
/* harmony export */   h: () => (/* binding */ h)
/* harmony export */ });
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vnode */ "../node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is */ "../node_modules/snabbdom/build/is.js");


function addNS(data, children, sel) {
    data.ns = "http://www.w3.org/2000/svg";
    if (sel !== "foreignObject" && children !== undefined) {
        for (let i = 0; i < children.length; ++i) {
            const child = children[i];
            if (typeof child === "string")
                continue;
            const childData = child.data;
            if (childData !== undefined) {
                addNS(childData, child.children, child.sel);
            }
        }
    }
}
function h(sel, b, c) {
    let data = {};
    let children;
    let text;
    let i;
    if (c !== undefined) {
        if (b !== null) {
            data = b;
        }
        if (_is__WEBPACK_IMPORTED_MODULE_0__.array(c)) {
            children = c;
        }
        else if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(c)) {
            text = c.toString();
        }
        else if (c && c.sel) {
            children = [c];
        }
    }
    else if (b !== undefined && b !== null) {
        if (_is__WEBPACK_IMPORTED_MODULE_0__.array(b)) {
            children = b;
        }
        else if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(b)) {
            text = b.toString();
        }
        else if (b && b.sel) {
            children = [b];
        }
        else {
            data = b;
        }
    }
    if (children !== undefined) {
        for (i = 0; i < children.length; ++i) {
            if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(children[i]))
                children[i] = (0,_vnode__WEBPACK_IMPORTED_MODULE_1__.vnode)(undefined, undefined, undefined, children[i], undefined);
        }
    }
    if (sel[0] === "s" &&
        sel[1] === "v" &&
        sel[2] === "g" &&
        (sel.length === 3 || sel[3] === "." || sel[3] === "#")) {
        addNS(data, children, sel);
    }
    return (0,_vnode__WEBPACK_IMPORTED_MODULE_1__.vnode)(sel, data, children, text, undefined);
}
/**
 * @experimental
 */
function fragment(children) {
    let c;
    let text;
    if (_is__WEBPACK_IMPORTED_MODULE_0__.array(children)) {
        c = children;
    }
    else if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(c)) {
        text = children;
    }
    else if (c && c.sel) {
        c = [children];
    }
    if (c !== undefined) {
        for (let i = 0; i < c.length; ++i) {
            if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(c[i]))
                c[i] = (0,_vnode__WEBPACK_IMPORTED_MODULE_1__.vnode)(undefined, undefined, undefined, c[i], undefined);
        }
    }
    return (0,_vnode__WEBPACK_IMPORTED_MODULE_1__.vnode)(undefined, {}, c, text, undefined);
}


/***/ }),

/***/ "../node_modules/snabbdom/build/helpers/attachto.js":
/*!**********************************************************!*\
  !*** ../node_modules/snabbdom/build/helpers/attachto.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attachTo: () => (/* binding */ attachTo)
/* harmony export */ });
function pre(vnode, newVnode) {
    const attachData = vnode.data.attachData;
    // Copy created placeholder and real element from old vnode
    newVnode.data.attachData.placeholder = attachData.placeholder;
    newVnode.data.attachData.real = attachData.real;
    // Mount real element in vnode so the patch process operates on it
    vnode.elm = vnode.data.attachData.real;
}
function post(_, vnode) {
    // Mount dummy placeholder in vnode so potential reorders use it
    vnode.elm = vnode.data.attachData.placeholder;
}
function destroy(vnode) {
    // Remove placeholder
    if (vnode.elm !== undefined) {
        vnode.elm.parentNode.removeChild(vnode.elm);
    }
    // Remove real element from where it was inserted
    vnode.elm = vnode.data.attachData.real;
}
function create(_, vnode) {
    const real = vnode.elm;
    const attachData = vnode.data.attachData;
    const placeholder = document.createElement("span");
    // Replace actual element with dummy placeholder
    // Snabbdom will then insert placeholder instead
    vnode.elm = placeholder;
    attachData.target.appendChild(real);
    attachData.real = real;
    attachData.placeholder = placeholder;
}
function attachTo(target, vnode) {
    if (vnode.data === undefined)
        vnode.data = {};
    if (vnode.data.hook === undefined)
        vnode.data.hook = {};
    const data = vnode.data;
    const hook = vnode.data.hook;
    data.attachData = { target: target, placeholder: undefined, real: undefined };
    hook.create = create;
    hook.prepatch = pre;
    hook.postpatch = post;
    hook.destroy = destroy;
    return vnode;
}


/***/ }),

/***/ "../node_modules/snabbdom/build/htmldomapi.js":
/*!****************************************************!*\
  !*** ../node_modules/snabbdom/build/htmldomapi.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   htmlDomApi: () => (/* binding */ htmlDomApi)
/* harmony export */ });
function createElement(tagName, options) {
    return document.createElement(tagName, options);
}
function createElementNS(namespaceURI, qualifiedName, options) {
    return document.createElementNS(namespaceURI, qualifiedName, options);
}
function createDocumentFragment() {
    return parseFragment(document.createDocumentFragment());
}
function createTextNode(text) {
    return document.createTextNode(text);
}
function createComment(text) {
    return document.createComment(text);
}
function insertBefore(parentNode, newNode, referenceNode) {
    if (isDocumentFragment(parentNode)) {
        let node = parentNode;
        while (node && isDocumentFragment(node)) {
            const fragment = parseFragment(node);
            node = fragment.parent;
        }
        parentNode = node !== null && node !== void 0 ? node : parentNode;
    }
    if (isDocumentFragment(newNode)) {
        newNode = parseFragment(newNode, parentNode);
    }
    if (referenceNode && isDocumentFragment(referenceNode)) {
        referenceNode = parseFragment(referenceNode).firstChildNode;
    }
    parentNode.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
    node.removeChild(child);
}
function appendChild(node, child) {
    if (isDocumentFragment(child)) {
        child = parseFragment(child, node);
    }
    node.appendChild(child);
}
function parentNode(node) {
    if (isDocumentFragment(node)) {
        while (node && isDocumentFragment(node)) {
            const fragment = parseFragment(node);
            node = fragment.parent;
        }
        return node !== null && node !== void 0 ? node : null;
    }
    return node.parentNode;
}
function nextSibling(node) {
    var _a;
    if (isDocumentFragment(node)) {
        const fragment = parseFragment(node);
        const parent = parentNode(fragment);
        if (parent && fragment.lastChildNode) {
            const children = Array.from(parent.childNodes);
            const index = children.indexOf(fragment.lastChildNode);
            return (_a = children[index + 1]) !== null && _a !== void 0 ? _a : null;
        }
        return null;
    }
    return node.nextSibling;
}
function tagName(elm) {
    return elm.tagName;
}
function setTextContent(node, text) {
    node.textContent = text;
}
function getTextContent(node) {
    return node.textContent;
}
function isElement(node) {
    return node.nodeType === 1;
}
function isText(node) {
    return node.nodeType === 3;
}
function isComment(node) {
    return node.nodeType === 8;
}
function isDocumentFragment(node) {
    return node.nodeType === 11;
}
function parseFragment(fragmentNode, parentNode) {
    var _a, _b, _c;
    const fragment = fragmentNode;
    (_a = fragment.parent) !== null && _a !== void 0 ? _a : (fragment.parent = parentNode !== null && parentNode !== void 0 ? parentNode : null);
    (_b = fragment.firstChildNode) !== null && _b !== void 0 ? _b : (fragment.firstChildNode = fragmentNode.firstChild);
    (_c = fragment.lastChildNode) !== null && _c !== void 0 ? _c : (fragment.lastChildNode = fragmentNode.lastChild);
    return fragment;
}
const htmlDomApi = {
    createElement,
    createElementNS,
    createTextNode,
    createDocumentFragment,
    createComment,
    insertBefore,
    removeChild,
    appendChild,
    parentNode,
    nextSibling,
    tagName,
    setTextContent,
    getTextContent,
    isElement,
    isText,
    isComment,
    isDocumentFragment,
};


/***/ }),

/***/ "../node_modules/snabbdom/build/index.js":
/*!***********************************************!*\
  !*** ../node_modules/snabbdom/build/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Fragment: () => (/* reexport safe */ _jsx__WEBPACK_IMPORTED_MODULE_14__.Fragment),
/* harmony export */   array: () => (/* reexport safe */ _is__WEBPACK_IMPORTED_MODULE_5__.array),
/* harmony export */   attachTo: () => (/* reexport safe */ _helpers_attachto__WEBPACK_IMPORTED_MODULE_4__.attachTo),
/* harmony export */   attributesModule: () => (/* reexport safe */ _modules_attributes__WEBPACK_IMPORTED_MODULE_8__.attributesModule),
/* harmony export */   classModule: () => (/* reexport safe */ _modules_class__WEBPACK_IMPORTED_MODULE_9__.classModule),
/* harmony export */   datasetModule: () => (/* reexport safe */ _modules_dataset__WEBPACK_IMPORTED_MODULE_10__.datasetModule),
/* harmony export */   eventListenersModule: () => (/* reexport safe */ _modules_eventlisteners__WEBPACK_IMPORTED_MODULE_11__.eventListenersModule),
/* harmony export */   fragment: () => (/* reexport safe */ _h__WEBPACK_IMPORTED_MODULE_7__.fragment),
/* harmony export */   h: () => (/* reexport safe */ _h__WEBPACK_IMPORTED_MODULE_7__.h),
/* harmony export */   htmlDomApi: () => (/* reexport safe */ _htmldomapi__WEBPACK_IMPORTED_MODULE_0__.htmlDomApi),
/* harmony export */   init: () => (/* reexport safe */ _init__WEBPACK_IMPORTED_MODULE_1__.init),
/* harmony export */   jsx: () => (/* reexport safe */ _jsx__WEBPACK_IMPORTED_MODULE_14__.jsx),
/* harmony export */   primitive: () => (/* reexport safe */ _is__WEBPACK_IMPORTED_MODULE_5__.primitive),
/* harmony export */   propsModule: () => (/* reexport safe */ _modules_props__WEBPACK_IMPORTED_MODULE_12__.propsModule),
/* harmony export */   styleModule: () => (/* reexport safe */ _modules_style__WEBPACK_IMPORTED_MODULE_13__.styleModule),
/* harmony export */   thunk: () => (/* reexport safe */ _thunk__WEBPACK_IMPORTED_MODULE_2__.thunk),
/* harmony export */   toVNode: () => (/* reexport safe */ _tovnode__WEBPACK_IMPORTED_MODULE_6__.toVNode),
/* harmony export */   vnode: () => (/* reexport safe */ _vnode__WEBPACK_IMPORTED_MODULE_3__.vnode)
/* harmony export */ });
/* harmony import */ var _htmldomapi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmldomapi */ "../node_modules/snabbdom/build/htmldomapi.js");
/* harmony import */ var _init__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./init */ "../node_modules/snabbdom/build/init.js");
/* harmony import */ var _thunk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./thunk */ "../node_modules/snabbdom/build/thunk.js");
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vnode */ "../node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _helpers_attachto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/attachto */ "../node_modules/snabbdom/build/helpers/attachto.js");
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./is */ "../node_modules/snabbdom/build/is.js");
/* harmony import */ var _tovnode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tovnode */ "../node_modules/snabbdom/build/tovnode.js");
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./h */ "../node_modules/snabbdom/build/h.js");
/* harmony import */ var _modules_attributes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/attributes */ "../node_modules/snabbdom/build/modules/attributes.js");
/* harmony import */ var _modules_class__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/class */ "../node_modules/snabbdom/build/modules/class.js");
/* harmony import */ var _modules_dataset__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/dataset */ "../node_modules/snabbdom/build/modules/dataset.js");
/* harmony import */ var _modules_eventlisteners__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/eventlisteners */ "../node_modules/snabbdom/build/modules/eventlisteners.js");
/* harmony import */ var _modules_props__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/props */ "../node_modules/snabbdom/build/modules/props.js");
/* harmony import */ var _modules_style__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/style */ "../node_modules/snabbdom/build/modules/style.js");
/* harmony import */ var _jsx__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./jsx */ "../node_modules/snabbdom/build/jsx.js");
// core




// helpers




// types

// modules






// JSX



/***/ }),

/***/ "../node_modules/snabbdom/build/init.js":
/*!**********************************************!*\
  !*** ../node_modules/snabbdom/build/init.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   init: () => (/* binding */ init)
/* harmony export */ });
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vnode */ "../node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is */ "../node_modules/snabbdom/build/is.js");
/* harmony import */ var _htmldomapi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./htmldomapi */ "../node_modules/snabbdom/build/htmldomapi.js");



function isUndef(s) {
    return s === undefined;
}
function isDef(s) {
    return s !== undefined;
}
const emptyNode = (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)("", {}, [], undefined, undefined);
function sameVnode(vnode1, vnode2) {
    var _a, _b;
    const isSameKey = vnode1.key === vnode2.key;
    const isSameIs = ((_a = vnode1.data) === null || _a === void 0 ? void 0 : _a.is) === ((_b = vnode2.data) === null || _b === void 0 ? void 0 : _b.is);
    const isSameSel = vnode1.sel === vnode2.sel;
    const isSameTextOrFragment = !vnode1.sel && vnode1.sel === vnode2.sel
        ? typeof vnode1.text === typeof vnode2.text
        : true;
    return isSameSel && isSameKey && isSameIs && isSameTextOrFragment;
}
/**
 * @todo Remove this function when the document fragment is considered stable.
 */
function documentFragmentIsNotSupported() {
    throw new Error("The document fragment is not supported on this platform.");
}
function isElement(api, vnode) {
    return api.isElement(vnode);
}
function isDocumentFragment(api, vnode) {
    return api.isDocumentFragment(vnode);
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
    var _a;
    const map = {};
    for (let i = beginIdx; i <= endIdx; ++i) {
        const key = (_a = children[i]) === null || _a === void 0 ? void 0 : _a.key;
        if (key !== undefined) {
            map[key] = i;
        }
    }
    return map;
}
const hooks = [
    "create",
    "update",
    "remove",
    "destroy",
    "pre",
    "post",
];
function init(modules, domApi, options) {
    const cbs = {
        create: [],
        update: [],
        remove: [],
        destroy: [],
        pre: [],
        post: [],
    };
    const api = domApi !== undefined ? domApi : _htmldomapi__WEBPACK_IMPORTED_MODULE_1__.htmlDomApi;
    for (const hook of hooks) {
        for (const module of modules) {
            const currentHook = module[hook];
            if (currentHook !== undefined) {
                cbs[hook].push(currentHook);
            }
        }
    }
    function emptyNodeAt(elm) {
        const id = elm.id ? "#" + elm.id : "";
        // elm.className doesn't return a string when elm is an SVG element inside a shadowRoot.
        // https://stackoverflow.com/questions/29454340/detecting-classname-of-svganimatedstring
        const classes = elm.getAttribute("class");
        const c = classes ? "." + classes.split(" ").join(".") : "";
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);
    }
    function emptyDocumentFragmentAt(frag) {
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(undefined, {}, [], undefined, frag);
    }
    function createRmCb(childElm, listeners) {
        return function rmCb() {
            if (--listeners === 0) {
                const parent = api.parentNode(childElm);
                api.removeChild(parent, childElm);
            }
        };
    }
    function createElm(vnode, insertedVnodeQueue) {
        var _a, _b, _c, _d;
        let i;
        let data = vnode.data;
        if (data !== undefined) {
            const init = (_a = data.hook) === null || _a === void 0 ? void 0 : _a.init;
            if (isDef(init)) {
                init(vnode);
                data = vnode.data;
            }
        }
        const children = vnode.children;
        const sel = vnode.sel;
        if (sel === "!") {
            if (isUndef(vnode.text)) {
                vnode.text = "";
            }
            vnode.elm = api.createComment(vnode.text);
        }
        else if (sel !== undefined) {
            // Parse selector
            const hashIdx = sel.indexOf("#");
            const dotIdx = sel.indexOf(".", hashIdx);
            const hash = hashIdx > 0 ? hashIdx : sel.length;
            const dot = dotIdx > 0 ? dotIdx : sel.length;
            const tag = hashIdx !== -1 || dotIdx !== -1
                ? sel.slice(0, Math.min(hash, dot))
                : sel;
            const elm = (vnode.elm =
                isDef(data) && isDef((i = data.ns))
                    ? api.createElementNS(i, tag, data)
                    : api.createElement(tag, data));
            if (hash < dot)
                elm.setAttribute("id", sel.slice(hash + 1, dot));
            if (dotIdx > 0)
                elm.setAttribute("class", sel.slice(dot + 1).replace(/\./g, " "));
            for (i = 0; i < cbs.create.length; ++i)
                cbs.create[i](emptyNode, vnode);
            if (_is__WEBPACK_IMPORTED_MODULE_2__.array(children)) {
                for (i = 0; i < children.length; ++i) {
                    const ch = children[i];
                    if (ch != null) {
                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));
                    }
                }
            }
            else if (_is__WEBPACK_IMPORTED_MODULE_2__.primitive(vnode.text)) {
                api.appendChild(elm, api.createTextNode(vnode.text));
            }
            const hook = vnode.data.hook;
            if (isDef(hook)) {
                (_b = hook.create) === null || _b === void 0 ? void 0 : _b.call(hook, emptyNode, vnode);
                if (hook.insert) {
                    insertedVnodeQueue.push(vnode);
                }
            }
        }
        else if (((_c = options === null || options === void 0 ? void 0 : options.experimental) === null || _c === void 0 ? void 0 : _c.fragments) && vnode.children) {
            vnode.elm = ((_d = api.createDocumentFragment) !== null && _d !== void 0 ? _d : documentFragmentIsNotSupported)();
            for (i = 0; i < cbs.create.length; ++i)
                cbs.create[i](emptyNode, vnode);
            for (i = 0; i < vnode.children.length; ++i) {
                const ch = vnode.children[i];
                if (ch != null) {
                    api.appendChild(vnode.elm, createElm(ch, insertedVnodeQueue));
                }
            }
        }
        else {
            vnode.elm = api.createTextNode(vnode.text);
        }
        return vnode.elm;
    }
    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
        for (; startIdx <= endIdx; ++startIdx) {
            const ch = vnodes[startIdx];
            if (ch != null) {
                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);
            }
        }
    }
    function invokeDestroyHook(vnode) {
        var _a, _b;
        const data = vnode.data;
        if (data !== undefined) {
            (_b = (_a = data === null || data === void 0 ? void 0 : data.hook) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a, vnode);
            for (let i = 0; i < cbs.destroy.length; ++i)
                cbs.destroy[i](vnode);
            if (vnode.children !== undefined) {
                for (let j = 0; j < vnode.children.length; ++j) {
                    const child = vnode.children[j];
                    if (child != null && typeof child !== "string") {
                        invokeDestroyHook(child);
                    }
                }
            }
        }
    }
    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
        var _a, _b;
        for (; startIdx <= endIdx; ++startIdx) {
            let listeners;
            let rm;
            const ch = vnodes[startIdx];
            if (ch != null) {
                if (isDef(ch.sel)) {
                    invokeDestroyHook(ch);
                    listeners = cbs.remove.length + 1;
                    rm = createRmCb(ch.elm, listeners);
                    for (let i = 0; i < cbs.remove.length; ++i)
                        cbs.remove[i](ch, rm);
                    const removeHook = (_b = (_a = ch === null || ch === void 0 ? void 0 : ch.data) === null || _a === void 0 ? void 0 : _a.hook) === null || _b === void 0 ? void 0 : _b.remove;
                    if (isDef(removeHook)) {
                        removeHook(ch, rm);
                    }
                    else {
                        rm();
                    }
                }
                else if (ch.children) {
                    // Fragment node
                    invokeDestroyHook(ch);
                    removeVnodes(parentElm, ch.children, 0, ch.children.length - 1);
                }
                else {
                    // Text node
                    api.removeChild(parentElm, ch.elm);
                }
            }
        }
    }
    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
        let oldStartIdx = 0;
        let newStartIdx = 0;
        let oldEndIdx = oldCh.length - 1;
        let oldStartVnode = oldCh[0];
        let oldEndVnode = oldCh[oldEndIdx];
        let newEndIdx = newCh.length - 1;
        let newStartVnode = newCh[0];
        let newEndVnode = newCh[newEndIdx];
        let oldKeyToIdx;
        let idxInOld;
        let elmToMove;
        let before;
        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
            if (oldStartVnode == null) {
                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
            }
            else if (oldEndVnode == null) {
                oldEndVnode = oldCh[--oldEndIdx];
            }
            else if (newStartVnode == null) {
                newStartVnode = newCh[++newStartIdx];
            }
            else if (newEndVnode == null) {
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newStartVnode)) {
                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                oldStartVnode = oldCh[++oldStartIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else if (sameVnode(oldEndVnode, newEndVnode)) {
                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                oldEndVnode = oldCh[--oldEndIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newEndVnode)) {
                // Vnode moved right
                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));
                oldStartVnode = oldCh[++oldStartIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldEndVnode, newStartVnode)) {
                // Vnode moved left
                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                oldEndVnode = oldCh[--oldEndIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                if (oldKeyToIdx === undefined) {
                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                }
                idxInOld = oldKeyToIdx[newStartVnode.key];
                if (isUndef(idxInOld)) {
                    // New element
                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                }
                else {
                    elmToMove = oldCh[idxInOld];
                    if (elmToMove.sel !== newStartVnode.sel) {
                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    }
                    else {
                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
                        oldCh[idxInOld] = undefined;
                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
                    }
                }
                newStartVnode = newCh[++newStartIdx];
            }
        }
        if (newStartIdx <= newEndIdx) {
            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;
            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
        }
        if (oldStartIdx <= oldEndIdx) {
            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
        }
    }
    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const hook = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.hook;
        (_b = hook === null || hook === void 0 ? void 0 : hook.prepatch) === null || _b === void 0 ? void 0 : _b.call(hook, oldVnode, vnode);
        const elm = (vnode.elm = oldVnode.elm);
        if (oldVnode === vnode)
            return;
        if (vnode.data !== undefined ||
            (isDef(vnode.text) && vnode.text !== oldVnode.text)) {
            (_c = vnode.data) !== null && _c !== void 0 ? _c : (vnode.data = {});
            (_d = oldVnode.data) !== null && _d !== void 0 ? _d : (oldVnode.data = {});
            for (let i = 0; i < cbs.update.length; ++i)
                cbs.update[i](oldVnode, vnode);
            (_g = (_f = (_e = vnode.data) === null || _e === void 0 ? void 0 : _e.hook) === null || _f === void 0 ? void 0 : _f.update) === null || _g === void 0 ? void 0 : _g.call(_f, oldVnode, vnode);
        }
        const oldCh = oldVnode.children;
        const ch = vnode.children;
        if (isUndef(vnode.text)) {
            if (isDef(oldCh) && isDef(ch)) {
                if (oldCh !== ch)
                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);
            }
            else if (isDef(ch)) {
                if (isDef(oldVnode.text))
                    api.setTextContent(elm, "");
                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
            }
            else if (isDef(oldCh)) {
                removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            }
            else if (isDef(oldVnode.text)) {
                api.setTextContent(elm, "");
            }
        }
        else if (oldVnode.text !== vnode.text) {
            if (isDef(oldCh)) {
                removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            }
            api.setTextContent(elm, vnode.text);
        }
        (_h = hook === null || hook === void 0 ? void 0 : hook.postpatch) === null || _h === void 0 ? void 0 : _h.call(hook, oldVnode, vnode);
    }
    return function patch(oldVnode, vnode) {
        let i, elm, parent;
        const insertedVnodeQueue = [];
        for (i = 0; i < cbs.pre.length; ++i)
            cbs.pre[i]();
        if (isElement(api, oldVnode)) {
            oldVnode = emptyNodeAt(oldVnode);
        }
        else if (isDocumentFragment(api, oldVnode)) {
            oldVnode = emptyDocumentFragmentAt(oldVnode);
        }
        if (sameVnode(oldVnode, vnode)) {
            patchVnode(oldVnode, vnode, insertedVnodeQueue);
        }
        else {
            elm = oldVnode.elm;
            parent = api.parentNode(elm);
            createElm(vnode, insertedVnodeQueue);
            if (parent !== null) {
                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));
                removeVnodes(parent, [oldVnode], 0, 0);
            }
        }
        for (i = 0; i < insertedVnodeQueue.length; ++i) {
            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
        }
        for (i = 0; i < cbs.post.length; ++i)
            cbs.post[i]();
        return vnode;
    };
}


/***/ }),

/***/ "../node_modules/snabbdom/build/is.js":
/*!********************************************!*\
  !*** ../node_modules/snabbdom/build/is.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   array: () => (/* binding */ array),
/* harmony export */   primitive: () => (/* binding */ primitive)
/* harmony export */ });
const array = Array.isArray;
function primitive(s) {
    return (typeof s === "string" ||
        typeof s === "number" ||
        s instanceof String ||
        s instanceof Number);
}


/***/ }),

/***/ "../node_modules/snabbdom/build/jsx.js":
/*!*********************************************!*\
  !*** ../node_modules/snabbdom/build/jsx.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Fragment: () => (/* binding */ Fragment),
/* harmony export */   jsx: () => (/* binding */ jsx)
/* harmony export */ });
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vnode */ "../node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./h */ "../node_modules/snabbdom/build/h.js");
/* eslint-disable @typescript-eslint/no-namespace, import/export */


function Fragment(data, ...children) {
    const flatChildren = flattenAndFilter(children, []);
    if (flatChildren.length === 1 &&
        !flatChildren[0].sel &&
        flatChildren[0].text) {
        // only child is a simple text node, pass as text for a simpler vtree
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(undefined, undefined, undefined, flatChildren[0].text, undefined);
    }
    else {
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(undefined, data !== null && data !== void 0 ? data : {}, flatChildren, undefined, undefined);
    }
}
function flattenAndFilter(children, flattened) {
    for (const child of children) {
        // filter out falsey children, except 0 since zero can be a valid value e.g inside a chart
        if (child !== undefined &&
            child !== null &&
            child !== false &&
            child !== "") {
            if (Array.isArray(child)) {
                flattenAndFilter(child, flattened);
            }
            else if (typeof child === "string" ||
                typeof child === "number" ||
                typeof child === "boolean") {
                flattened.push((0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(undefined, undefined, undefined, String(child), undefined));
            }
            else {
                flattened.push(child);
            }
        }
    }
    return flattened;
}
/**
 * jsx/tsx compatible factory function
 * see: https://www.typescriptlang.org/docs/handbook/jsx.html#factory-functions
 */
function jsx(tag, data, ...children) {
    const flatChildren = flattenAndFilter(children, []);
    if (typeof tag === "function") {
        // tag is a function component
        return tag(data, flatChildren);
    }
    else {
        if (flatChildren.length === 1 &&
            !flatChildren[0].sel &&
            flatChildren[0].text) {
            // only child is a simple text node, pass as text for a simpler vtree
            return (0,_h__WEBPACK_IMPORTED_MODULE_1__.h)(tag, data, flatChildren[0].text);
        }
        else {
            return (0,_h__WEBPACK_IMPORTED_MODULE_1__.h)(tag, data, flatChildren);
        }
    }
}
(function (jsx) {
})(jsx || (jsx = {}));


/***/ }),

/***/ "../node_modules/snabbdom/build/modules/attributes.js":
/*!************************************************************!*\
  !*** ../node_modules/snabbdom/build/modules/attributes.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attributesModule: () => (/* binding */ attributesModule)
/* harmony export */ });
const xlinkNS = "http://www.w3.org/1999/xlink";
const xmlNS = "http://www.w3.org/XML/1998/namespace";
const colonChar = 58;
const xChar = 120;
function updateAttrs(oldVnode, vnode) {
    let key;
    const elm = vnode.elm;
    let oldAttrs = oldVnode.data.attrs;
    let attrs = vnode.data.attrs;
    if (!oldAttrs && !attrs)
        return;
    if (oldAttrs === attrs)
        return;
    oldAttrs = oldAttrs || {};
    attrs = attrs || {};
    // update modified attributes, add new attributes
    for (key in attrs) {
        const cur = attrs[key];
        const old = oldAttrs[key];
        if (old !== cur) {
            if (cur === true) {
                elm.setAttribute(key, "");
            }
            else if (cur === false) {
                elm.removeAttribute(key);
            }
            else {
                if (key.charCodeAt(0) !== xChar) {
                    elm.setAttribute(key, cur);
                }
                else if (key.charCodeAt(3) === colonChar) {
                    // Assume xml namespace
                    elm.setAttributeNS(xmlNS, key, cur);
                }
                else if (key.charCodeAt(5) === colonChar) {
                    // Assume xlink namespace
                    elm.setAttributeNS(xlinkNS, key, cur);
                }
                else {
                    elm.setAttribute(key, cur);
                }
            }
        }
    }
    // remove removed attributes
    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
    // the other option is to remove all attributes with value == undefined
    for (key in oldAttrs) {
        if (!(key in attrs)) {
            elm.removeAttribute(key);
        }
    }
}
const attributesModule = {
    create: updateAttrs,
    update: updateAttrs,
};


/***/ }),

/***/ "../node_modules/snabbdom/build/modules/class.js":
/*!*******************************************************!*\
  !*** ../node_modules/snabbdom/build/modules/class.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   classModule: () => (/* binding */ classModule)
/* harmony export */ });
function updateClass(oldVnode, vnode) {
    let cur;
    let name;
    const elm = vnode.elm;
    let oldClass = oldVnode.data.class;
    let klass = vnode.data.class;
    if (!oldClass && !klass)
        return;
    if (oldClass === klass)
        return;
    oldClass = oldClass || {};
    klass = klass || {};
    for (name in oldClass) {
        if (oldClass[name] && !Object.prototype.hasOwnProperty.call(klass, name)) {
            // was `true` and now not provided
            elm.classList.remove(name);
        }
    }
    for (name in klass) {
        cur = klass[name];
        if (cur !== oldClass[name]) {
            elm.classList[cur ? "add" : "remove"](name);
        }
    }
}
const classModule = { create: updateClass, update: updateClass };


/***/ }),

/***/ "../node_modules/snabbdom/build/modules/dataset.js":
/*!*********************************************************!*\
  !*** ../node_modules/snabbdom/build/modules/dataset.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   datasetModule: () => (/* binding */ datasetModule)
/* harmony export */ });
const CAPS_REGEX = /[A-Z]/g;
function updateDataset(oldVnode, vnode) {
    const elm = vnode.elm;
    let oldDataset = oldVnode.data.dataset;
    let dataset = vnode.data.dataset;
    let key;
    if (!oldDataset && !dataset)
        return;
    if (oldDataset === dataset)
        return;
    oldDataset = oldDataset || {};
    dataset = dataset || {};
    const d = elm.dataset;
    for (key in oldDataset) {
        if (!dataset[key]) {
            if (d) {
                if (key in d) {
                    delete d[key];
                }
            }
            else {
                elm.removeAttribute("data-" + key.replace(CAPS_REGEX, "-$&").toLowerCase());
            }
        }
    }
    for (key in dataset) {
        if (oldDataset[key] !== dataset[key]) {
            if (d) {
                d[key] = dataset[key];
            }
            else {
                elm.setAttribute("data-" + key.replace(CAPS_REGEX, "-$&").toLowerCase(), dataset[key]);
            }
        }
    }
}
const datasetModule = {
    create: updateDataset,
    update: updateDataset,
};


/***/ }),

/***/ "../node_modules/snabbdom/build/modules/eventlisteners.js":
/*!****************************************************************!*\
  !*** ../node_modules/snabbdom/build/modules/eventlisteners.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eventListenersModule: () => (/* binding */ eventListenersModule)
/* harmony export */ });
function invokeHandler(handler, vnode, event) {
    if (typeof handler === "function") {
        // call function handler
        handler.call(vnode, event, vnode);
    }
    else if (typeof handler === "object") {
        // call multiple handlers
        for (let i = 0; i < handler.length; i++) {
            invokeHandler(handler[i], vnode, event);
        }
    }
}
function handleEvent(event, vnode) {
    const name = event.type;
    const on = vnode.data.on;
    // call event handler(s) if exists
    if (on && on[name]) {
        invokeHandler(on[name], vnode, event);
    }
}
function createListener() {
    return function handler(event) {
        handleEvent(event, handler.vnode);
    };
}
function updateEventListeners(oldVnode, vnode) {
    const oldOn = oldVnode.data.on;
    const oldListener = oldVnode.listener;
    const oldElm = oldVnode.elm;
    const on = vnode && vnode.data.on;
    const elm = (vnode && vnode.elm);
    let name;
    // optimization for reused immutable handlers
    if (oldOn === on) {
        return;
    }
    // remove existing listeners which no longer used
    if (oldOn && oldListener) {
        // if element changed or deleted we remove all existing listeners unconditionally
        if (!on) {
            for (name in oldOn) {
                // remove listener if element was changed or existing listeners removed
                oldElm.removeEventListener(name, oldListener, false);
            }
        }
        else {
            for (name in oldOn) {
                // remove listener if existing listener removed
                if (!on[name]) {
                    oldElm.removeEventListener(name, oldListener, false);
                }
            }
        }
    }
    // add new listeners which has not already attached
    if (on) {
        // reuse existing listener or create new
        const listener = (vnode.listener =
            oldVnode.listener || createListener());
        // update vnode for listener
        listener.vnode = vnode;
        // if element changed or added we add all needed listeners unconditionally
        if (!oldOn) {
            for (name in on) {
                // add listener if element was changed or new listeners added
                elm.addEventListener(name, listener, false);
            }
        }
        else {
            for (name in on) {
                // add listener if new listener added
                if (!oldOn[name]) {
                    elm.addEventListener(name, listener, false);
                }
            }
        }
    }
}
const eventListenersModule = {
    create: updateEventListeners,
    update: updateEventListeners,
    destroy: updateEventListeners,
};


/***/ }),

/***/ "../node_modules/snabbdom/build/modules/props.js":
/*!*******************************************************!*\
  !*** ../node_modules/snabbdom/build/modules/props.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   propsModule: () => (/* binding */ propsModule)
/* harmony export */ });
function updateProps(oldVnode, vnode) {
    let key;
    let cur;
    let old;
    const elm = vnode.elm;
    let oldProps = oldVnode.data.props;
    let props = vnode.data.props;
    if (!oldProps && !props)
        return;
    if (oldProps === props)
        return;
    oldProps = oldProps || {};
    props = props || {};
    for (key in props) {
        cur = props[key];
        old = oldProps[key];
        if (old !== cur && (key !== "value" || elm[key] !== cur)) {
            elm[key] = cur;
        }
    }
}
const propsModule = { create: updateProps, update: updateProps };


/***/ }),

/***/ "../node_modules/snabbdom/build/modules/style.js":
/*!*******************************************************!*\
  !*** ../node_modules/snabbdom/build/modules/style.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styleModule: () => (/* binding */ styleModule)
/* harmony export */ });
// Bindig `requestAnimationFrame` like this fixes a bug in IE/Edge. See #360 and #409.
const raf = (typeof window !== "undefined" &&
    window.requestAnimationFrame.bind(window)) ||
    setTimeout;
const nextFrame = function (fn) {
    raf(function () {
        raf(fn);
    });
};
let reflowForced = false;
function setNextFrame(obj, prop, val) {
    nextFrame(function () {
        obj[prop] = val;
    });
}
function updateStyle(oldVnode, vnode) {
    let cur;
    let name;
    const elm = vnode.elm;
    let oldStyle = oldVnode.data.style;
    let style = vnode.data.style;
    if (!oldStyle && !style)
        return;
    if (oldStyle === style)
        return;
    oldStyle = oldStyle || {};
    style = style || {};
    const oldHasDel = "delayed" in oldStyle;
    for (name in oldStyle) {
        if (!style[name]) {
            if (name[0] === "-" && name[1] === "-") {
                elm.style.removeProperty(name);
            }
            else {
                elm.style[name] = "";
            }
        }
    }
    for (name in style) {
        cur = style[name];
        if (name === "delayed" && style.delayed) {
            for (const name2 in style.delayed) {
                cur = style.delayed[name2];
                if (!oldHasDel || cur !== oldStyle.delayed[name2]) {
                    setNextFrame(elm.style, name2, cur);
                }
            }
        }
        else if (name !== "remove" && cur !== oldStyle[name]) {
            if (name[0] === "-" && name[1] === "-") {
                elm.style.setProperty(name, cur);
            }
            else {
                elm.style[name] = cur;
            }
        }
    }
}
function applyDestroyStyle(vnode) {
    let style;
    let name;
    const elm = vnode.elm;
    const s = vnode.data.style;
    if (!s || !(style = s.destroy))
        return;
    for (name in style) {
        elm.style[name] = style[name];
    }
}
function applyRemoveStyle(vnode, rm) {
    const s = vnode.data.style;
    if (!s || !s.remove) {
        rm();
        return;
    }
    if (!reflowForced) {
        // eslint-disable-next-line @typescript-eslint/no-unused-expressions
        vnode.elm.offsetLeft;
        reflowForced = true;
    }
    let name;
    const elm = vnode.elm;
    let i = 0;
    const style = s.remove;
    let amount = 0;
    const applied = [];
    for (name in style) {
        applied.push(name);
        elm.style[name] = style[name];
    }
    const compStyle = getComputedStyle(elm);
    const props = compStyle["transition-property"].split(", ");
    for (; i < props.length; ++i) {
        if (applied.indexOf(props[i]) !== -1)
            amount++;
    }
    elm.addEventListener("transitionend", function (ev) {
        if (ev.target === elm)
            --amount;
        if (amount === 0)
            rm();
    });
}
function forceReflow() {
    reflowForced = false;
}
const styleModule = {
    pre: forceReflow,
    create: updateStyle,
    update: updateStyle,
    destroy: applyDestroyStyle,
    remove: applyRemoveStyle,
};


/***/ }),

/***/ "../node_modules/snabbdom/build/thunk.js":
/*!***********************************************!*\
  !*** ../node_modules/snabbdom/build/thunk.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   thunk: () => (/* binding */ thunk)
/* harmony export */ });
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./h */ "../node_modules/snabbdom/build/h.js");

function copyToThunk(vnode, thunk) {
    var _a;
    const ns = (_a = thunk.data) === null || _a === void 0 ? void 0 : _a.ns;
    vnode.data.fn = thunk.data.fn;
    vnode.data.args = thunk.data.args;
    thunk.data = vnode.data;
    thunk.children = vnode.children;
    thunk.text = vnode.text;
    thunk.elm = vnode.elm;
    if (ns)
        (0,_h__WEBPACK_IMPORTED_MODULE_0__.addNS)(thunk.data, thunk.children, thunk.sel);
}
function init(thunk) {
    const cur = thunk.data;
    const vnode = cur.fn(...cur.args);
    copyToThunk(vnode, thunk);
}
function prepatch(oldVnode, thunk) {
    let i;
    const old = oldVnode.data;
    const cur = thunk.data;
    const oldArgs = old.args;
    const args = cur.args;
    if (old.fn !== cur.fn || oldArgs.length !== args.length) {
        copyToThunk(cur.fn(...args), thunk);
        return;
    }
    for (i = 0; i < args.length; ++i) {
        if (oldArgs[i] !== args[i]) {
            copyToThunk(cur.fn(...args), thunk);
            return;
        }
    }
    copyToThunk(oldVnode, thunk);
}
const thunk = function thunk(sel, key, fn, args) {
    if (args === undefined) {
        args = fn;
        fn = key;
        key = undefined;
    }
    return (0,_h__WEBPACK_IMPORTED_MODULE_0__.h)(sel, {
        key: key,
        hook: { init, prepatch },
        fn: fn,
        args: args,
    });
};


/***/ }),

/***/ "../node_modules/snabbdom/build/tovnode.js":
/*!*************************************************!*\
  !*** ../node_modules/snabbdom/build/tovnode.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toVNode: () => (/* binding */ toVNode)
/* harmony export */ });
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./h */ "../node_modules/snabbdom/build/h.js");
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vnode */ "../node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _htmldomapi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmldomapi */ "../node_modules/snabbdom/build/htmldomapi.js");



function toVNode(node, domApi) {
    const api = domApi !== undefined ? domApi : _htmldomapi__WEBPACK_IMPORTED_MODULE_0__.htmlDomApi;
    let text;
    if (api.isElement(node)) {
        const id = node.id ? "#" + node.id : "";
        const cn = node.getAttribute("class");
        const c = cn ? "." + cn.split(" ").join(".") : "";
        const sel = api.tagName(node).toLowerCase() + id + c;
        const attrs = {};
        const dataset = {};
        const data = {};
        const children = [];
        let name;
        let i, n;
        const elmAttrs = node.attributes;
        const elmChildren = node.childNodes;
        for (i = 0, n = elmAttrs.length; i < n; i++) {
            name = elmAttrs[i].nodeName;
            if (name[0] === "d" &&
                name[1] === "a" &&
                name[2] === "t" &&
                name[3] === "a" &&
                name[4] === "-") {
                dataset[name.slice(5)] = elmAttrs[i].nodeValue || "";
            }
            else if (name !== "id" && name !== "class") {
                attrs[name] = elmAttrs[i].nodeValue;
            }
        }
        for (i = 0, n = elmChildren.length; i < n; i++) {
            children.push(toVNode(elmChildren[i], domApi));
        }
        if (Object.keys(attrs).length > 0)
            data.attrs = attrs;
        if (Object.keys(dataset).length > 0)
            data.dataset = dataset;
        if (sel[0] === "s" &&
            sel[1] === "v" &&
            sel[2] === "g" &&
            (sel.length === 3 || sel[3] === "." || sel[3] === "#")) {
            (0,_h__WEBPACK_IMPORTED_MODULE_1__.addNS)(data, children, sel);
        }
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_2__.vnode)(sel, data, children, undefined, node);
    }
    else if (api.isText(node)) {
        text = api.getTextContent(node);
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_2__.vnode)(undefined, undefined, undefined, text, node);
    }
    else if (api.isComment(node)) {
        text = api.getTextContent(node);
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_2__.vnode)("!", {}, [], text, node);
    }
    else {
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_2__.vnode)("", {}, [], undefined, node);
    }
}


/***/ }),

/***/ "../node_modules/snabbdom/build/vnode.js":
/*!***********************************************!*\
  !*** ../node_modules/snabbdom/build/vnode.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   vnode: () => (/* binding */ vnode)
/* harmony export */ });
function vnode(sel, data, children, text, elm) {
    const key = data === undefined ? undefined : data.key;
    return { sel, data, children, text, elm, key };
}


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/action-handler.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/action-handler.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerActionHandlerRegistry = void 0;
/**
 * Use this service to register handlers to specific actions. The `DiagramServer` queries this registry
 * when an action is received from the client, and falls back to the built-in behavior if no handlers
 * are found.
 */
class ServerActionHandlerRegistry {
    constructor() {
        this.handlers = new Map();
    }
    /**
     * Returns the action handlers for the given action kind, or `undefined` if there are none.
     */
    getHandler(kind) {
        return this.handlers.get(kind);
    }
    /**
     * Add an action handler to be called when an action of the specified kind is received.
     */
    onAction(kind, handler) {
        if (this.handlers.has(kind)) {
            this.handlers.get(kind).push(handler);
        }
        else {
            this.handlers.set(kind, [handler]);
        }
    }
    /**
     * Remove an action handler that was previously added with `onAction`.
     */
    removeActionHandler(kind, handler) {
        const list = this.handlers.get(kind);
        if (list) {
            const index = list.indexOf(handler);
            if (index >= 0) {
                list.splice(index, 1);
            }
        }
    }
}
exports.ServerActionHandlerRegistry = ServerActionHandlerRegistry;


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/actions.js":
/*!*******************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/actions.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReconnectAction = exports.ApplyLabelEditAction = exports.DeleteElementAction = exports.CreateElementAction = exports.ExportSvgAction = exports.RequestExportSvgAction = exports.HoverFeedbackAction = exports.MoveAction = exports.RedoAction = exports.UndoAction = exports.BringToFrontAction = exports.ViewportResult = exports.GetViewportAction = exports.SetViewportAction = exports.FitToScreenAction = exports.CenterAction = exports.LayoutAction = exports.OpenAction = exports.CollapseExpandAllAction = exports.CollapseExpandAction = exports.SelectionResult = exports.GetSelectionAction = exports.SelectAllAction = exports.SelectAction = exports.LoggingAction = exports.ComputedBoundsAction = exports.RequestBoundsAction = exports.SetBoundsAction = exports.SetPopupModelAction = exports.RequestPopupModelAction = exports.UpdateModelAction = exports.SetModelAction = exports.RequestModelAction = exports.RejectAction = exports.isResponseAction = exports.setRequestContext = exports.generateRequestId = exports.isRequestAction = exports.isAction = exports.isActionMessage = void 0;
const object_1 = __webpack_require__(/*! ./utils/object */ "../node_modules/sprotty-protocol/lib/utils/object.js");
function isActionMessage(object) {
    return (0, object_1.hasOwnProperty)(object, 'action');
}
exports.isActionMessage = isActionMessage;
function isAction(object) {
    return (0, object_1.hasOwnProperty)(object, 'kind', 'string');
}
exports.isAction = isAction;
function isRequestAction(object) {
    return (0, object_1.hasOwnProperty)(object, 'requestId', 'string');
}
exports.isRequestAction = isRequestAction;
let requestContext = '';
let nextRequestId = 1;
/**
 * Generate a unique `requestId` for a request action.
 */
function generateRequestId() {
    return `${requestContext}_${nextRequestId++}`;
}
exports.generateRequestId = generateRequestId;
/**
 * Configure the context in which request actions are created. This is typically either
 * 'client' or 'server' to avoid collisions of request IDs.
 */
function setRequestContext(context) {
    requestContext = context;
}
exports.setRequestContext = setRequestContext;
/**
 * A response action is sent to respond to a request action. The `responseId` must match
 * the `requestId` of the preceding request. In case the `responseId` is empty or undefined,
 * the action is handled as standalone, i.e. it was fired without a preceding request.
 */
function isResponseAction(object) {
    return (0, object_1.hasOwnProperty)(object, 'responseId', 'string') && object.responseId !== '';
}
exports.isResponseAction = isResponseAction;
var RejectAction;
(function (RejectAction) {
    RejectAction.KIND = 'rejectRequest';
    function create(options) {
        return {
            kind: RejectAction.KIND,
            message: options.message,
            detail: options.detail,
            responseId: options.requestId
        };
    }
    RejectAction.create = create;
})(RejectAction || (exports.RejectAction = RejectAction = {}));
var RequestModelAction;
(function (RequestModelAction) {
    RequestModelAction.KIND = 'requestModel';
    function create(options) {
        return {
            kind: RequestModelAction.KIND,
            options,
            requestId: generateRequestId()
        };
    }
    RequestModelAction.create = create;
})(RequestModelAction || (exports.RequestModelAction = RequestModelAction = {}));
var SetModelAction;
(function (SetModelAction) {
    SetModelAction.KIND = 'setModel';
    function create(newRoot, requestId = '') {
        return {
            kind: SetModelAction.KIND,
            newRoot,
            responseId: requestId
        };
    }
    SetModelAction.create = create;
})(SetModelAction || (exports.SetModelAction = SetModelAction = {}));
var UpdateModelAction;
(function (UpdateModelAction) {
    UpdateModelAction.KIND = 'updateModel';
    function create(input, options = {}) {
        if (Array.isArray(input)) {
            return {
                kind: UpdateModelAction.KIND,
                matches: input,
                animate: options.animate,
                cause: options.cause
            };
        }
        else {
            return {
                kind: UpdateModelAction.KIND,
                newRoot: input,
                animate: options.animate,
                cause: options.cause
            };
        }
    }
    UpdateModelAction.create = create;
})(UpdateModelAction || (exports.UpdateModelAction = UpdateModelAction = {}));
var RequestPopupModelAction;
(function (RequestPopupModelAction) {
    RequestPopupModelAction.KIND = 'requestPopupModel';
    function create(options) {
        return {
            kind: RequestPopupModelAction.KIND,
            elementId: options.elementId,
            bounds: options.bounds,
            requestId: generateRequestId()
        };
    }
    RequestPopupModelAction.create = create;
})(RequestPopupModelAction || (exports.RequestPopupModelAction = RequestPopupModelAction = {}));
var SetPopupModelAction;
(function (SetPopupModelAction) {
    SetPopupModelAction.KIND = 'setPopupModel';
    function create(newRoot, requestId = '') {
        return {
            kind: SetPopupModelAction.KIND,
            newRoot,
            responseId: requestId
        };
    }
    SetPopupModelAction.create = create;
})(SetPopupModelAction || (exports.SetPopupModelAction = SetPopupModelAction = {}));
var SetBoundsAction;
(function (SetBoundsAction) {
    SetBoundsAction.KIND = 'setBounds';
    function create(bounds) {
        return {
            kind: SetBoundsAction.KIND,
            bounds
        };
    }
    SetBoundsAction.create = create;
})(SetBoundsAction || (exports.SetBoundsAction = SetBoundsAction = {}));
var RequestBoundsAction;
(function (RequestBoundsAction) {
    RequestBoundsAction.KIND = 'requestBounds';
    function create(newRoot) {
        return {
            kind: RequestBoundsAction.KIND,
            newRoot,
            requestId: generateRequestId()
        };
    }
    RequestBoundsAction.create = create;
})(RequestBoundsAction || (exports.RequestBoundsAction = RequestBoundsAction = {}));
var ComputedBoundsAction;
(function (ComputedBoundsAction) {
    ComputedBoundsAction.KIND = 'computedBounds';
    function create(bounds, options = {}) {
        var _a;
        return {
            kind: ComputedBoundsAction.KIND,
            bounds,
            revision: options.revision,
            alignments: options.alignments,
            responseId: (_a = options.requestId) !== null && _a !== void 0 ? _a : ''
        };
    }
    ComputedBoundsAction.create = create;
})(ComputedBoundsAction || (exports.ComputedBoundsAction = ComputedBoundsAction = {}));
var LoggingAction;
(function (LoggingAction) {
    LoggingAction.KIND = 'logging';
    function create(options) {
        return Object.assign({ kind: LoggingAction.KIND }, options);
    }
    LoggingAction.create = create;
})(LoggingAction || (exports.LoggingAction = LoggingAction = {}));
var SelectAction;
(function (SelectAction) {
    SelectAction.KIND = 'elementSelected';
    function create(options) {
        var _a, _b;
        return {
            kind: SelectAction.KIND,
            selectedElementsIDs: (_a = options.selectedElementsIDs) !== null && _a !== void 0 ? _a : [],
            deselectedElementsIDs: (_b = options.deselectedElementsIDs) !== null && _b !== void 0 ? _b : []
        };
    }
    SelectAction.create = create;
})(SelectAction || (exports.SelectAction = SelectAction = {}));
var SelectAllAction;
(function (SelectAllAction) {
    SelectAllAction.KIND = 'allSelected';
    function create(options = {}) {
        var _a;
        return {
            kind: SelectAllAction.KIND,
            select: (_a = options.select) !== null && _a !== void 0 ? _a : true
        };
    }
    SelectAllAction.create = create;
})(SelectAllAction || (exports.SelectAllAction = SelectAllAction = {}));
var GetSelectionAction;
(function (GetSelectionAction) {
    GetSelectionAction.KIND = 'getSelection';
    function create() {
        return {
            kind: GetSelectionAction.KIND,
            requestId: generateRequestId()
        };
    }
    GetSelectionAction.create = create;
})(GetSelectionAction || (exports.GetSelectionAction = GetSelectionAction = {}));
var SelectionResult;
(function (SelectionResult) {
    SelectionResult.KIND = 'selectionResult';
    function create(selectedElementsIDs, requestId) {
        return {
            kind: SelectionResult.KIND,
            selectedElementsIDs,
            responseId: requestId
        };
    }
    SelectionResult.create = create;
})(SelectionResult || (exports.SelectionResult = SelectionResult = {}));
var CollapseExpandAction;
(function (CollapseExpandAction) {
    CollapseExpandAction.KIND = 'collapseExpand';
    function create(options) {
        var _a, _b;
        return {
            kind: CollapseExpandAction.KIND,
            expandIds: (_a = options.expandIds) !== null && _a !== void 0 ? _a : [],
            collapseIds: (_b = options.collapseIds) !== null && _b !== void 0 ? _b : []
        };
    }
    CollapseExpandAction.create = create;
})(CollapseExpandAction || (exports.CollapseExpandAction = CollapseExpandAction = {}));
var CollapseExpandAllAction;
(function (CollapseExpandAllAction) {
    CollapseExpandAllAction.KIND = 'collapseExpandAll';
    function create(options = {}) {
        var _a;
        return {
            kind: CollapseExpandAllAction.KIND,
            expand: (_a = options.expand) !== null && _a !== void 0 ? _a : true
        };
    }
    CollapseExpandAllAction.create = create;
})(CollapseExpandAllAction || (exports.CollapseExpandAllAction = CollapseExpandAllAction = {}));
var OpenAction;
(function (OpenAction) {
    OpenAction.KIND = 'open';
    function create(elementId) {
        return {
            kind: OpenAction.KIND,
            elementId
        };
    }
    OpenAction.create = create;
})(OpenAction || (exports.OpenAction = OpenAction = {}));
var LayoutAction;
(function (LayoutAction) {
    LayoutAction.KIND = 'layout';
    function create(options = {}) {
        return {
            kind: LayoutAction.KIND,
            layoutType: options.layoutType,
            elementIds: options.elementIds
        };
    }
    LayoutAction.create = create;
})(LayoutAction || (exports.LayoutAction = LayoutAction = {}));
var CenterAction;
(function (CenterAction) {
    CenterAction.KIND = 'center';
    function create(elementIds, options = {}) {
        var _a, _b;
        return {
            kind: CenterAction.KIND,
            elementIds,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true,
            retainZoom: (_b = options.retainZoom) !== null && _b !== void 0 ? _b : false,
            zoomScale: options.zoomScale
        };
    }
    CenterAction.create = create;
})(CenterAction || (exports.CenterAction = CenterAction = {}));
var FitToScreenAction;
(function (FitToScreenAction) {
    FitToScreenAction.KIND = 'fit';
    function create(elementIds, options = {}) {
        var _a;
        return {
            kind: FitToScreenAction.KIND,
            elementIds,
            padding: options.padding,
            maxZoom: options.maxZoom,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true
        };
    }
    FitToScreenAction.create = create;
})(FitToScreenAction || (exports.FitToScreenAction = FitToScreenAction = {}));
var SetViewportAction;
(function (SetViewportAction) {
    SetViewportAction.KIND = 'viewport';
    function create(elementId, newViewport, options = {}) {
        var _a;
        return {
            kind: SetViewportAction.KIND,
            elementId,
            newViewport,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true
        };
    }
    SetViewportAction.create = create;
})(SetViewportAction || (exports.SetViewportAction = SetViewportAction = {}));
var GetViewportAction;
(function (GetViewportAction) {
    GetViewportAction.KIND = 'getViewport';
    function create() {
        return {
            kind: GetViewportAction.KIND,
            requestId: generateRequestId()
        };
    }
    GetViewportAction.create = create;
})(GetViewportAction || (exports.GetViewportAction = GetViewportAction = {}));
var ViewportResult;
(function (ViewportResult) {
    ViewportResult.KIND = 'viewportResult';
    function create(viewport, canvasBounds, requestId) {
        return {
            kind: ViewportResult.KIND,
            viewport,
            canvasBounds,
            responseId: requestId
        };
    }
    ViewportResult.create = create;
})(ViewportResult || (exports.ViewportResult = ViewportResult = {}));
var BringToFrontAction;
(function (BringToFrontAction) {
    BringToFrontAction.KIND = 'bringToFront';
    function create(elementIDs) {
        return {
            kind: BringToFrontAction.KIND,
            elementIDs
        };
    }
    BringToFrontAction.create = create;
})(BringToFrontAction || (exports.BringToFrontAction = BringToFrontAction = {}));
var UndoAction;
(function (UndoAction) {
    UndoAction.KIND = 'undo';
    function create() {
        return {
            kind: UndoAction.KIND
        };
    }
    UndoAction.create = create;
})(UndoAction || (exports.UndoAction = UndoAction = {}));
var RedoAction;
(function (RedoAction) {
    RedoAction.KIND = 'redo';
    function create() {
        return {
            kind: RedoAction.KIND
        };
    }
    RedoAction.create = create;
})(RedoAction || (exports.RedoAction = RedoAction = {}));
var MoveAction;
(function (MoveAction) {
    MoveAction.KIND = 'move';
    function create(moves, options = {}) {
        var _a, _b, _c;
        return {
            kind: MoveAction.KIND,
            moves,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true,
            finished: (_b = options.finished) !== null && _b !== void 0 ? _b : false,
            stoppable: (_c = options.stoppable) !== null && _c !== void 0 ? _c : false
        };
    }
    MoveAction.create = create;
})(MoveAction || (exports.MoveAction = MoveAction = {}));
var HoverFeedbackAction;
(function (HoverFeedbackAction) {
    HoverFeedbackAction.KIND = 'hoverFeedback';
    function create(options) {
        return {
            kind: HoverFeedbackAction.KIND,
            mouseoverElement: options.mouseoverElement,
            mouseIsOver: options.mouseIsOver
        };
    }
    HoverFeedbackAction.create = create;
})(HoverFeedbackAction || (exports.HoverFeedbackAction = HoverFeedbackAction = {}));
var RequestExportSvgAction;
(function (RequestExportSvgAction) {
    RequestExportSvgAction.KIND = 'requestExportSvg';
    function create(options) {
        return {
            kind: RequestExportSvgAction.KIND,
            requestId: generateRequestId(),
            options
        };
    }
    RequestExportSvgAction.create = create;
})(RequestExportSvgAction || (exports.RequestExportSvgAction = RequestExportSvgAction = {}));
var ExportSvgAction;
(function (ExportSvgAction) {
    ExportSvgAction.KIND = 'exportSvg';
    function create(svg, requestId, options) {
        return {
            kind: ExportSvgAction.KIND,
            svg,
            responseId: requestId,
            options
        };
    }
    ExportSvgAction.create = create;
})(ExportSvgAction || (exports.ExportSvgAction = ExportSvgAction = {}));
var CreateElementAction;
(function (CreateElementAction) {
    CreateElementAction.KIND = 'createElement';
    function create(elementSchema, options) {
        return {
            kind: CreateElementAction.KIND,
            elementSchema,
            containerId: options.containerId
        };
    }
    CreateElementAction.create = create;
})(CreateElementAction || (exports.CreateElementAction = CreateElementAction = {}));
var DeleteElementAction;
(function (DeleteElementAction) {
    DeleteElementAction.KIND = 'delete';
    function create(elementIds) {
        return {
            kind: DeleteElementAction.KIND,
            elementIds
        };
    }
    DeleteElementAction.create = create;
})(DeleteElementAction || (exports.DeleteElementAction = DeleteElementAction = {}));
var ApplyLabelEditAction;
(function (ApplyLabelEditAction) {
    ApplyLabelEditAction.KIND = 'applyLabelEdit';
    function create(labelId, text) {
        return {
            kind: ApplyLabelEditAction.KIND,
            labelId,
            text
        };
    }
    ApplyLabelEditAction.create = create;
})(ApplyLabelEditAction || (exports.ApplyLabelEditAction = ApplyLabelEditAction = {}));
var ReconnectAction;
(function (ReconnectAction) {
    ReconnectAction.KIND = 'reconnect';
    function create(options) {
        return {
            kind: ReconnectAction.KIND,
            routableId: options.routableId,
            newSourceId: options.newSourceId,
            newTargetId: options.newTargetId
        };
    }
    ReconnectAction.create = create;
})(ReconnectAction || (exports.ReconnectAction = ReconnectAction = {}));


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/diagram-server.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/diagram-server.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagramServer = void 0;
const actions_1 = __webpack_require__(/*! ./actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const async_1 = __webpack_require__(/*! ./utils/async */ "../node_modules/sprotty-protocol/lib/utils/async.js");
const model_utils_1 = __webpack_require__(/*! ./utils/model-utils */ "../node_modules/sprotty-protocol/lib/utils/model-utils.js");
/**
 * An instance of this class is responsible for handling a single diagram client. It holds the current
 * state of the diagram and manages communication with the client via actions.
 */
class DiagramServer {
    constructor(dispatch, services) {
        this.state = {
            currentRoot: {
                type: 'NONE',
                id: 'ROOT'
            },
            revision: 0
        };
        this.requests = new Map();
        this.dispatch = dispatch;
        this.diagramGenerator = services.DiagramGenerator;
        this.layoutEngine = services.ModelLayoutEngine;
        this.actionHandlerRegistry = services.ServerActionHandlerRegistry;
    }
    /**
     * Set the model and submit it to the client.
     */
    setModel(newRoot) {
        newRoot.revision = ++this.state.revision;
        this.state.currentRoot = newRoot;
        return this.submitModel(newRoot, false);
    }
    /**
     * Update the model to a new state and submit it to the client.
     */
    updateModel(newRoot) {
        newRoot.revision = ++this.state.revision;
        this.state.currentRoot = newRoot;
        return this.submitModel(newRoot, true);
    }
    /**
     * Whether the client needs to compute the layout of parts of the model. This affects the behavior
     * of `submitModel`.
     *
     * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`
     * from the client. If the client does not specify whether it needs client layout, the default value
     * is `true`.
     */
    get needsClientLayout() {
        if (this.state.options && this.state.options.needsClientLayout !== undefined) {
            return !!this.state.options.needsClientLayout;
        }
        return true;
    }
    /**
     * Whether the server needs to compute the layout of parts of the model. This affects the behavior
     * of `submitModel`.
     *
     * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`
     * from the client. If the client does not specify whether it needs server layout, the default value
     * is `false`.
     */
    get needsServerLayout() {
        if (this.state.options && this.state.options.needsServerLayout !== undefined) {
            return !!this.state.options.needsServerLayout;
        }
        return false;
    }
    /**
     * Called when an action is received from the client.
     */
    accept(action) {
        if ((0, actions_1.isResponseAction)(action)) {
            const id = action.responseId;
            const future = this.requests.get(id);
            if (future) {
                this.requests.delete(id);
                if (action.kind === actions_1.RejectAction.KIND) {
                    const rejectAction = action;
                    future.reject(new Error(rejectAction.message));
                    console.warn(`Request with id ${action.responseId} failed: ${rejectAction.message}`, rejectAction.detail);
                }
                else {
                    future.resolve(action);
                }
                return Promise.resolve();
            }
            console.info('No matching request for response:', action);
        }
        return this.handleAction(action);
    }
    /**
     * Send a request action to the client. The resulting promise is resolved when a matching
     * response is received and rejected when a `RejectAction` is received.
     */
    request(action) {
        if (!action.requestId) {
            action.requestId = 'server_' + (0, actions_1.generateRequestId)();
        }
        const future = new async_1.Deferred();
        this.requests.set(action.requestId, future);
        this.dispatch(action).catch(err => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.requests.delete(action.requestId);
            future.reject(err);
        });
        return future.promise;
    }
    /**
     * Send a `RejectAction` to the client to notify that a request could not be fulfilled.
     */
    rejectRemoteRequest(action, error) {
        if (action && (0, actions_1.isRequestAction)(action)) {
            this.dispatch({
                kind: actions_1.RejectAction.KIND,
                responseId: action.requestId,
                message: error.message,
                detail: error.stack
            });
        }
    }
    handleAction(action) {
        var _a, _b;
        // Find a matching action handler in the registry
        const handlers = (_a = this.actionHandlerRegistry) === null || _a === void 0 ? void 0 : _a.getHandler(action.kind);
        if (handlers && handlers.length === 1) {
            return (_b = handlers[0](action, this.state, this)) !== null && _b !== void 0 ? _b : Promise.resolve();
        }
        else if (handlers && handlers.length > 1) {
            return Promise.all(handlers.map(h => { var _a; return (_a = h(action, this.state, this)) !== null && _a !== void 0 ? _a : Promise.resolve(); }));
        }
        // If no handler is registered, call one of the default handling methods
        switch (action.kind) {
            case actions_1.RequestModelAction.KIND:
                return this.handleRequestModel(action);
            case actions_1.ComputedBoundsAction.KIND:
                return this.handleComputedBounds(action);
            case actions_1.LayoutAction.KIND:
                return this.handleLayout(action);
        }
        // We don't know this action kind, sigh
        console.warn(`Unhandled action from client: ${action.kind}`);
        return Promise.resolve();
    }
    async handleRequestModel(action) {
        var _a;
        this.state.options = action.options;
        try {
            const newRoot = await this.diagramGenerator.generate({
                options: (_a = this.state.options) !== null && _a !== void 0 ? _a : {},
                state: this.state
            });
            newRoot.revision = ++this.state.revision;
            this.state.currentRoot = newRoot;
            await this.submitModel(this.state.currentRoot, false, action);
        }
        catch (err) {
            this.rejectRemoteRequest(action, err);
            console.error('Failed to generate diagram:', err);
        }
    }
    /**
     * Submit a model to the client after it has been updated in the server state.
     */
    async submitModel(newRoot, update, cause) {
        if (this.needsClientLayout) {
            if (!this.needsServerLayout) {
                // In this case the client won't send us the computed bounds
                this.dispatch({ kind: actions_1.RequestBoundsAction.KIND, newRoot });
            }
            else {
                const request = actions_1.RequestBoundsAction.create(newRoot);
                const response = await this.request(request);
                const currentRoot = this.state.currentRoot;
                if (response.revision === currentRoot.revision) {
                    (0, model_utils_1.applyBounds)(currentRoot, response);
                    await this.doSubmitModel(currentRoot, update, cause);
                }
                else {
                    this.rejectRemoteRequest(cause, new Error(`Model revision does not match: ${response.revision}`));
                }
            }
        }
        else {
            await this.doSubmitModel(newRoot, update, cause);
        }
    }
    async doSubmitModel(newRoot, update, cause) {
        if (newRoot.revision !== this.state.revision) {
            return;
        }
        if (this.needsServerLayout && this.layoutEngine) {
            newRoot = await this.layoutEngine.layout(newRoot);
        }
        const modelType = newRoot.type;
        if (cause && cause.kind === actions_1.RequestModelAction.KIND) {
            const requestId = cause.requestId;
            const response = actions_1.SetModelAction.create(newRoot, requestId);
            await this.dispatch(response);
        }
        else if (update && modelType === this.state.lastSubmittedModelType) {
            await this.dispatch({ kind: actions_1.UpdateModelAction.KIND, newRoot, cause });
        }
        else {
            await this.dispatch({ kind: actions_1.SetModelAction.KIND, newRoot });
        }
        this.state.lastSubmittedModelType = modelType;
    }
    handleComputedBounds(action) {
        if (action.revision !== this.state.currentRoot.revision) {
            return Promise.reject();
        }
        (0, model_utils_1.applyBounds)(this.state.currentRoot, action);
        return Promise.resolve();
    }
    async handleLayout(action) {
        if (!this.layoutEngine) {
            return;
        }
        if (!this.needsServerLayout) {
            let newRoot = (0, model_utils_1.cloneModel)(this.state.currentRoot);
            newRoot = await this.layoutEngine.layout(newRoot);
            newRoot.revision = ++this.state.revision;
            this.state.currentRoot = newRoot;
        }
        await this.doSubmitModel(this.state.currentRoot, true, action);
    }
}
exports.DiagramServer = DiagramServer;


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/diagram-services.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/diagram-services.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/index.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./action-handler */ "../node_modules/sprotty-protocol/lib/action-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./actions */ "../node_modules/sprotty-protocol/lib/actions.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram-server */ "../node_modules/sprotty-protocol/lib/diagram-server.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram-services */ "../node_modules/sprotty-protocol/lib/diagram-services.js"), exports);
__exportStar(__webpack_require__(/*! ./model */ "../node_modules/sprotty-protocol/lib/model.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/async */ "../node_modules/sprotty-protocol/lib/utils/async.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/json */ "../node_modules/sprotty-protocol/lib/utils/json.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/model-utils */ "../node_modules/sprotty-protocol/lib/utils/model-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/object */ "../node_modules/sprotty-protocol/lib/utils/object.js"), exports);


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/model.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/model.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isZoomable = exports.isScrollable = void 0;
const object_1 = __webpack_require__(/*! ./utils/object */ "../node_modules/sprotty-protocol/lib/utils/object.js");
function isScrollable(element) {
    return (0, object_1.hasOwnProperty)(element, 'scroll');
}
exports.isScrollable = isScrollable;
function isZoomable(element) {
    return (0, object_1.hasOwnProperty)(element, 'zoom');
}
exports.isZoomable = isZoomable;
;


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/utils/async.js":
/*!***********************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/utils/async.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Deferred = void 0;
/**
 * Simple implementation of the deferred pattern.
 * An object that exposes a promise and functions to resolve and reject it.
 */
class Deferred {
    constructor() {
        this._state = 'unresolved';
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
        this.promise.then(res => this._state = 'resolved', rej => this._state = 'rejected');
    }
    set state(state) {
        if (this._state === 'unresolved') {
            this._state = state;
        }
    }
    get state() {
        return this._state;
    }
}
exports.Deferred = Deferred;


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/utils/geometry.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/utils/geometry.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.almostEquals = exports.toRadians = exports.toDegrees = exports.Bounds = exports.isBounds = exports.Dimension = exports.centerOfLine = exports.angleBetweenPoints = exports.angleOfPoint = exports.Point = void 0;
const object_1 = __webpack_require__(/*! ./object */ "../node_modules/sprotty-protocol/lib/utils/object.js");
var Point;
(function (Point) {
    /**
     * (x,y) coordinates of the origin.
     */
    Point.ORIGIN = Object.freeze({
        x: 0,
        y: 0
    });
    /**
     * Adds two points.
     * @param {Point} p1 - First point
     * @param {Point} p2 - Second point
     * @returns {Point} The sum of the two points
     */
    function add(p1, p2) {
        return {
            x: p1.x + p2.x,
            y: p1.y + p2.y
        };
    }
    Point.add = add;
    /**
     * Subtracts two points.
     * @param {Point} p1 - First point
     * @param {Point} p2 - Second point
     * @returns {Point} The difference of the two points
     */
    function subtract(p1, p2) {
        return {
            x: p1.x - p2.x,
            y: p1.y - p2.y
        };
    }
    Point.subtract = subtract;
    /**
     * Specifies whether a point has exactly the same coordinates as another point.
     * @param {Point} point1 a point
     * @param {Point} point2 another point
     * @returns {boolean} `true` if `point1` has exactly the same `x` and `y` values as `point2`, `false` otherwise.
     */
    function equals(point1, point2) {
        return point1.x === point2.x && point1.y === point2.y;
    }
    Point.equals = equals;
    /**
     * Computes a point that is the original `point` shifted towards `refPoint` by the given `distance`.
     * @param {Point} point - Point to shift
     * @param {Point} refPoint - Point to shift towards
     * @param {Point} distance - Distance to shift
     */
    function shiftTowards(point, refPoint, distance) {
        const diff = subtract(refPoint, point);
        const normalized = normalize(diff);
        const shift = { x: normalized.x * distance, y: normalized.y * distance };
        return add(point, shift);
    }
    Point.shiftTowards = shiftTowards;
    /**
     * Computes the normalized vector from the vector given in `point`; that is, computing its unit vector.
     * @param {Point} point - Point representing the vector to be normalized
     * @returns {Point} The normalized point
     */
    function normalize(point) {
        const mag = magnitude(point);
        if (mag === 0 || mag === 1) {
            return Point.ORIGIN;
        }
        return {
            x: point.x / mag,
            y: point.y / mag
        };
    }
    Point.normalize = normalize;
    /**
     * Computes the magnitude of the vector given in `point`.
     * @param {Point} point - Point representing the vector to compute the magnitude for
     * @returns {number} The magnitude or also known as length of the `point`
     */
    function magnitude(point) {
        return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
    }
    Point.magnitude = magnitude;
    /**
     * Calculates a linear combination of p0 and p1 using lambda, i.e.
     *   (1-lambda) * p0 + lambda * p1
     */
    function linear(p0, p1, lambda) {
        return {
            x: (1 - lambda) * p0.x + lambda * p1.x,
            y: (1 - lambda) * p0.y + lambda * p1.y
        };
    }
    Point.linear = linear;
    /**
     * Returns the "straight line" distance between two points.
     * @param {Point} a - First point
     * @param {Point} b - Second point
     * @returns {number} The Eucledian distance
     */
    function euclideanDistance(a, b) {
        const dx = b.x - a.x;
        const dy = b.y - a.y;
        return Math.sqrt(dx * dx + dy * dy);
    }
    Point.euclideanDistance = euclideanDistance;
    /**
     * Returns the distance between two points in a grid, using a
     * strictly vertical and/or horizontal path (versus straight line).
     * @param {Point} a - First point
     * @param {Point} b - Second point
     * @returns {number} The Manhattan distance
     */
    function manhattanDistance(a, b) {
        return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);
    }
    Point.manhattanDistance = manhattanDistance;
    /**
     * Returns the maximum of the horizontal and the vertical distance.
     * @param {Point} a - First point
     * @param {Point} b - Second point
     * @returns {number} The maximum distance
     */
    function maxDistance(a, b) {
        return Math.max(Math.abs(b.x - a.x), Math.abs(b.y - a.y));
    }
    Point.maxDistance = maxDistance;
    /**
     * Returns the dot product of two points.
     * @param {Point} a - First point
     * @param {Point} b - Second point
     * @returns {number} The dot product
     */
    function dotProduct(a, b) {
        return a.x * b.x + a.y * b.y;
    }
    Point.dotProduct = dotProduct;
})(Point || (exports.Point = Point = {}));
/**
 * Computes the angle in radians of the given point to the x-axis of the coordinate system.
 * The result is in the range [-pi, pi].
 * @param {Point} p - A point in the Eucledian plane
 */
function angleOfPoint(p) {
    return Math.atan2(p.y, p.x);
}
exports.angleOfPoint = angleOfPoint;
/**
 * Computes the angle in radians between the two given points (relative to the origin of the coordinate system).
 * The result is in the range [0, pi]. Returns NaN if the points are equal.
 * @param {Point} a - First point
 * @param {Point} b - Second point
 */
function angleBetweenPoints(a, b) {
    const lengthProduct = Math.sqrt((a.x * a.x + a.y * a.y) * (b.x * b.x + b.y * b.y));
    if (isNaN(lengthProduct) || lengthProduct === 0)
        return NaN;
    const dotProduct = a.x * b.x + a.y * b.y;
    return Math.acos(dotProduct / lengthProduct);
}
exports.angleBetweenPoints = angleBetweenPoints;
/**
 * Computes the center of the line segment spanned by the two given points.
 * @param {Point} s - Start point of the line
 * @param {Point} e - End point of the line
 */
function centerOfLine(s, e) {
    const b = {
        x: s.x > e.x ? e.x : s.x,
        y: s.y > e.y ? e.y : s.y,
        width: Math.abs(e.x - s.x),
        height: Math.abs(e.y - s.y)
    };
    return Bounds.center(b);
}
exports.centerOfLine = centerOfLine;
var Dimension;
(function (Dimension) {
    /**
     * A dimension with both width and height set to a negative value, which is considered as undefined.
     */
    Dimension.EMPTY = Object.freeze({
        width: -1,
        height: -1
    });
    /**
     * Checks whether the given dimention is valid, i.e. the width and height are non-zero.
     * @param {Dimension} b - Dimension object
     * @returns {boolean} `true` if the dimension is valid
     */
    function isValid(d) {
        return d.width >= 0 && d.height >= 0;
    }
    Dimension.isValid = isValid;
})(Dimension || (exports.Dimension = Dimension = {}));
function isBounds(element) {
    return (0, object_1.hasOwnProperty)(element, ['x', 'y', 'width', 'height']);
}
exports.isBounds = isBounds;
var Bounds;
(function (Bounds) {
    Bounds.EMPTY = Object.freeze({
        x: 0,
        y: 0,
        width: -1,
        height: -1
    });
    /**
     * Combines the bounds of two objects into one, so that the new bounds
     * are the minimum bounds that covers both of the original bounds.
     * @param {Bounds} b0 - First bounds object
     * @param {Bounds} b1 - Second bounds object
     * @returns {Bounds} The combined bounds
     */
    function combine(b0, b1) {
        if (!Dimension.isValid(b0))
            return Dimension.isValid(b1) ? b1 : Bounds.EMPTY;
        if (!Dimension.isValid(b1))
            return b0;
        const minX = Math.min(b0.x, b1.x);
        const minY = Math.min(b0.y, b1.y);
        const maxX = Math.max(b0.x + (b0.width >= 0 ? b0.width : 0), b1.x + (b1.width >= 0 ? b1.width : 0));
        const maxY = Math.max(b0.y + (b0.height >= 0 ? b0.height : 0), b1.y + (b1.height >= 0 ? b1.height : 0));
        return {
            x: minX, y: minY, width: maxX - minX, height: maxY - minY
        };
    }
    Bounds.combine = combine;
    /**
     * Translates the given bounds.
     * @param {Bounds} b - Bounds object
     * @param {Point} p - Vector by which to translate the bounds
     * @returns {Bounds} The translated bounds
     */
    function translate(b, p) {
        return {
            x: b.x + p.x,
            y: b.y + p.y,
            width: b.width,
            height: b.height
        };
    }
    Bounds.translate = translate;
    /**
     * Returns the center point of the bounds of an object
     * @param {Bounds} b - Bounds object
     * @returns {Point} the center point
     */
    function center(b) {
        return {
            x: b.x + (b.width >= 0 ? 0.5 * b.width : 0),
            y: b.y + (b.height >= 0 ? 0.5 * b.height : 0)
        };
    }
    Bounds.center = center;
    /**
    * Checks whether the point p is included in the bounds b.
    */
    function includes(b, p) {
        return p.x >= b.x && p.x <= b.x + b.width && p.y >= b.y && p.y <= b.y + b.height;
    }
    Bounds.includes = includes;
})(Bounds || (exports.Bounds = Bounds = {}));
/**
 * Converts from radians to degrees
 * @param {number} a - A value in radians
 * @returns {number} The converted value
 */
function toDegrees(a) {
    return a * 180 / Math.PI;
}
exports.toDegrees = toDegrees;
/**
 * Converts from degrees to radians
 * @param {number} a - A value in degrees
 * @returns {number} The converted value
 */
function toRadians(a) {
    return a * Math.PI / 180;
}
exports.toRadians = toRadians;
/**
 * Returns whether two numbers are almost equal, within a small margin (0.001)
 * @param {number} a - First number
 * @param {number} b - Second number
 * @returns {boolean} True if the two numbers are almost equal
 */
function almostEquals(a, b) {
    return Math.abs(a - b) < 1e-3;
}
exports.almostEquals = almostEquals;


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/utils/json.js":
/*!**********************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/utils/json.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2020-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/utils/model-utils.js":
/*!*****************************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/utils/model-utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SModelIndex = exports.findElement = exports.getSubType = exports.getBasicType = exports.applyBounds = exports.cloneModel = void 0;
/**
 * Clone a given model. This function requires that the model is serializable, so it's
 * free of cycles and functions.
 */
function cloneModel(model) {
    return JSON.parse(JSON.stringify(model));
}
exports.cloneModel = cloneModel;
/**
 * Apply the computed bounds to the given model. This ensures that the model has complete
 * information about positions and sizes derived from its actual rendering in the frontend.
 */
function applyBounds(root, action) {
    const index = new SModelIndex();
    index.add(root);
    for (const b of action.bounds) {
        const element = index.getById(b.elementId);
        if (element) {
            const bae = element;
            if (b.newPosition) {
                bae.position = { x: b.newPosition.x, y: b.newPosition.y };
            }
            if (b.newSize) {
                bae.size = { width: b.newSize.width, height: b.newSize.height };
            }
        }
    }
    if (action.alignments) {
        for (const a of action.alignments) {
            const element = index.getById(a.elementId);
            if (element) {
                const alignable = element;
                alignable.alignment = { x: a.newAlignment.x, y: a.newAlignment.y };
            }
        }
    }
}
exports.applyBounds = applyBounds;
/**
 * Model element types can include a colon to separate the basic type and a sub-type. This function
 * extracts the basic type of a model element.
 */
function getBasicType(element) {
    if (!element.type) {
        return '';
    }
    const colonIndex = element.type.indexOf(':');
    return colonIndex >= 0 ? element.type.substring(0, colonIndex) : element.type;
}
exports.getBasicType = getBasicType;
/**
 * Model element types can include a colon to separate the basic type and a sub-type. This function
 * extracts the sub-type of a model element.
 */
function getSubType(schema) {
    if (!schema.type) {
        return '';
    }
    const colonIndex = schema.type.indexOf(':');
    return colonIndex >= 0 ? schema.type.substring(colonIndex + 1) : schema.type;
}
exports.getSubType = getSubType;
/**
 * Find the element with the given identifier. If you need to find multiple elements, using an
 * `SModelIndex` might be more effective.
 */
function findElement(parent, elementId) {
    if (parent.id === elementId) {
        return parent;
    }
    if (parent.children) {
        for (const child of parent.children) {
            const result = findElement(child, elementId);
            if (result !== undefined) {
                return result;
            }
        }
    }
    return undefined;
}
exports.findElement = findElement;
/**
 * Used to speed up model element lookup by id.
 * This index implementation is for the serializable _external model_ defined in `sprotty-protocol`.
 */
class SModelIndex {
    constructor() {
        this.id2element = new Map();
        this.id2parent = new Map();
    }
    add(element) {
        if (!element.id) {
            throw new Error("Model element has no ID.");
        }
        else if (this.contains(element)) {
            throw new Error("Duplicate ID in model: " + element.id);
        }
        this.id2element.set(element.id, element);
        if (Array.isArray(element.children)) {
            for (const child of element.children) {
                this.add(child);
                this.id2parent.set(child.id, element);
            }
        }
        return this;
    }
    remove(element) {
        this.id2element.delete(element.id);
        if (Array.isArray(element.children)) {
            for (const child of element.children) {
                this.id2parent.delete(child.id);
                this.remove(child);
            }
        }
        return this;
    }
    contains(element) {
        return this.id2element.has(element.id);
    }
    getById(id) {
        return this.id2element.get(id);
    }
    getParent(id) {
        return this.id2parent.get(id);
    }
    getRoot(element) {
        let current = element;
        while (current) {
            const parent = this.id2parent.get(current.id);
            if (parent === undefined) {
                return current;
            }
            current = parent;
        }
        throw new Error("Element has no root");
    }
}
exports.SModelIndex = SModelIndex;


/***/ }),

/***/ "../node_modules/sprotty-protocol/lib/utils/object.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty-protocol/lib/utils/object.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safeAssign = exports.hasOwnProperty = exports.isObject = void 0;
function isObject(data) {
    return typeof data === 'object' && data !== null;
}
exports.isObject = isObject;
function hasOwnProperty(arg, key, type) {
    if (!isObject(arg)) {
        return false;
    }
    if (Array.isArray(key)) {
        for (const k of key) {
            if (!Object.prototype.hasOwnProperty.call(arg, k)) {
                return false;
            }
            if (typeof type === 'string' && typeof arg[k] !== type) {
                return false;
            }
            else if (typeof type === 'function' && !type(arg[k])) {
                return false;
            }
        }
    }
    else {
        if (!Object.prototype.hasOwnProperty.call(arg, key)) {
            return false;
        }
        if (typeof type === 'string') {
            return typeof arg[key] === type;
        }
        if (typeof type === 'function') {
            return type(arg[key]);
        }
    }
    return true;
}
exports.hasOwnProperty = hasOwnProperty;
function safeAssign(target, partial) {
    return Object.assign(target, partial);
}
exports.safeAssign = safeAssign;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/actions/action-dispatcher.js":
/*!*********************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/actions/action-dispatcher.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ActionDispatcher = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const async_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/async */ "../node_modules/sprotty-protocol/lib/utils/async.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const smodel_factory_1 = __webpack_require__(/*! ../model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js");
const animation_frame_syncer_1 = __webpack_require__(/*! ../animations/animation-frame-syncer */ "../node_modules/sprotty/lib/base/animations/animation-frame-syncer.js");
// This code should be used only in the client part of a Sprotty application.
// We set the request context to 'client' to avoid collisions with requests created by the server.
(0, actions_1.setRequestContext)('client');
/**
 * Collects actions, converts them to commands and dispatches them.
 * Also acts as the proxy to model sources such as diagram servers.
 */
let ActionDispatcher = class ActionDispatcher {
    constructor() {
        this.postponedActions = [];
        this.requests = new Map();
    }
    initialize() {
        if (!this.initialized) {
            this.initialized = this.actionHandlerRegistryProvider().then(registry => {
                this.actionHandlerRegistry = registry;
                this.handleAction(actions_1.SetModelAction.create(smodel_factory_1.EMPTY_ROOT)).catch(() => { });
            });
        }
        return this.initialized;
    }
    /**
     * Dispatch an action by querying all handlers that are registered for its kind.
     * The returned promise is resolved when all handler results (commands or actions)
     * have been processed.
     */
    dispatch(action) {
        return this.initialize().then(() => {
            if (this.blockUntil !== undefined) {
                return this.handleBlocked(action, this.blockUntil);
            }
            else if (this.diagramLocker.isAllowed(action)) {
                return this.handleAction(action);
            }
            return undefined;
        });
    }
    /**
     * Calls `dispatch` on every action in the given array. The returned promise
     * is resolved when the promises of all `dispatch` calls have been resolved.
     */
    dispatchAll(actions) {
        return Promise.all(actions.map(action => this.dispatch(action)));
    }
    /**
     * Dispatch a request. The returned promise is resolved when a response with matching
     * identifier is dispatched. That response is _not_ passed to the registered action
     * handlers. Instead, it is the responsibility of the caller of this method to handle
     * the response properly. For example, it can be sent to the registered handlers by
     * passing it again to the `dispatch` method.
     */
    request(action) {
        if (!action.requestId) {
            return Promise.reject(new Error('Request without requestId'));
        }
        const deferred = new async_1.Deferred();
        this.requests.set(action.requestId, deferred);
        this.dispatch(action).catch(() => { });
        return deferred.promise;
    }
    handleAction(action) {
        if (action.kind === actions_1.UndoAction.KIND) {
            return this.commandStack.undo().then(() => { });
        }
        if (action.kind === actions_1.RedoAction.KIND) {
            return this.commandStack.redo().then(() => { });
        }
        if ((0, actions_1.isResponseAction)(action)) {
            const deferred = this.requests.get(action.responseId);
            if (deferred !== undefined) {
                this.requests.delete(action.responseId);
                if (action.kind === actions_1.RejectAction.KIND) {
                    const rejectAction = action;
                    deferred.reject(new Error(rejectAction.message));
                    this.logger.warn(this, `Request with id ${action.responseId} failed.`, rejectAction.message, rejectAction.detail);
                }
                else {
                    deferred.resolve(action);
                }
                return Promise.resolve();
            }
            this.logger.log(this, 'No matching request for response', action);
        }
        const handlers = this.actionHandlerRegistry.get(action.kind);
        if (handlers.length === 0) {
            this.logger.warn(this, 'Missing handler for action', action);
            const error = new Error(`Missing handler for action '${action.kind}'`);
            if ((0, actions_1.isRequestAction)(action)) {
                const deferred = this.requests.get(action.requestId);
                if (deferred !== undefined) {
                    this.requests.delete(action.requestId);
                    deferred.reject(error);
                }
            }
            return Promise.reject(error);
        }
        this.logger.log(this, 'Handle', action);
        const promises = [];
        for (const handler of handlers) {
            const result = handler.handle(action);
            if ((0, actions_1.isAction)(result)) {
                promises.push(this.dispatch(result));
            }
            else if (result !== undefined) {
                promises.push(this.commandStack.execute(result));
                this.blockUntil = result.blockUntil;
            }
        }
        return Promise.all(promises);
    }
    handleBlocked(action, predicate) {
        if (predicate(action)) {
            this.blockUntil = undefined;
            const result = this.handleAction(action);
            const actions = this.postponedActions;
            this.postponedActions = [];
            for (const a of actions) {
                this.dispatch(a.action).then(a.resolve, a.reject);
            }
            return result;
        }
        else {
            this.logger.log(this, 'Action is postponed due to block condition', action);
            return new Promise((resolve, reject) => {
                this.postponedActions.push({ action, resolve, reject });
            });
        }
    }
};
exports.ActionDispatcher = ActionDispatcher;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ActionHandlerRegistryProvider),
    __metadata("design:type", Function)
], ActionDispatcher.prototype, "actionHandlerRegistryProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ICommandStack),
    __metadata("design:type", Object)
], ActionDispatcher.prototype, "commandStack", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], ActionDispatcher.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.AnimationFrameSyncer),
    __metadata("design:type", animation_frame_syncer_1.AnimationFrameSyncer)
], ActionDispatcher.prototype, "syncer", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IDiagramLocker),
    __metadata("design:type", Object)
], ActionDispatcher.prototype, "diagramLocker", void 0);
exports.ActionDispatcher = ActionDispatcher = __decorate([
    (0, inversify_1.injectable)()
], ActionDispatcher);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/actions/action-handler.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/actions/action-handler.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.onAction = exports.configureActionHandler = exports.ActionHandlerRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "../node_modules/sprotty/lib/utils/registry.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "../node_modules/sprotty/lib/utils/inversify.js");
/**
 * The action handler registry maps actions to their handlers using the Action.kind property.
 */
let ActionHandlerRegistry = class ActionHandlerRegistry extends registry_1.MultiInstanceRegistry {
    constructor(registrations, initializers) {
        super();
        registrations.forEach(registration => this.register(registration.actionKind, registration.factory()));
        initializers.forEach(initializer => this.initializeActionHandler(initializer));
    }
    initializeActionHandler(initializer) {
        initializer.initialize(this);
    }
};
exports.ActionHandlerRegistry = ActionHandlerRegistry;
exports.ActionHandlerRegistry = ActionHandlerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.ActionHandlerRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __param(1, (0, inversify_1.multiInject)(types_1.TYPES.IActionHandlerInitializer)),
    __param(1, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array, Array])
], ActionHandlerRegistry);
/**
 * Utility function to register an action handler for an action kind.
 */
function configureActionHandler(context, kind, constr) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Action handlers should be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.ActionHandlerRegistration).toDynamicValue(ctx => ({
        actionKind: kind,
        factory: () => ctx.container.get(constr)
    }));
}
exports.configureActionHandler = configureActionHandler;
/**
 * Utility function to register an action handler for an action kind.
 */
function onAction(context, kind, handle) {
    context.bind(types_1.TYPES.ActionHandlerRegistration).toConstantValue({
        actionKind: kind,
        factory: () => ({ handle })
    });
}
exports.onAction = onAction;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/actions/action.js":
/*!**********************************************************!*\
  !*** ../node_modules/sprotty/lib/base/actions/action.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isLabeledAction = exports.LabeledAction = void 0;
/**
 * A list of actions with a label.
 * Labeled actions are used to denote a group of actions in a user-interface context, e.g.,
 * to define an entry in the command palette or in the context menu.
 */
class LabeledAction {
    constructor(label, actions, icon) {
        this.label = label;
        this.actions = actions;
        this.icon = icon;
    }
}
exports.LabeledAction = LabeledAction;
function isLabeledAction(element) {
    return element !== undefined
        && element.label !== undefined
        && element.actions !== undefined;
}
exports.isLabeledAction = isLabeledAction;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/actions/diagram-locker.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/actions/diagram-locker.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultDiagramLocker = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let DefaultDiagramLocker = class DefaultDiagramLocker {
    isAllowed(action) {
        return true;
    }
};
exports.DefaultDiagramLocker = DefaultDiagramLocker;
exports.DefaultDiagramLocker = DefaultDiagramLocker = __decorate([
    (0, inversify_1.injectable)()
], DefaultDiagramLocker);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/animations/animation-frame-syncer.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/animations/animation-frame-syncer.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimationFrameSyncer = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let AnimationFrameSyncer = class AnimationFrameSyncer {
    constructor() {
        this.tasks = [];
        this.endTasks = [];
        this.triggered = false;
    }
    isAvailable() {
        return typeof requestAnimationFrame === "function";
    }
    onNextFrame(task) {
        this.tasks.push(task);
        this.trigger();
    }
    onEndOfNextFrame(task) {
        this.endTasks.push(task);
        this.trigger();
    }
    trigger() {
        if (!this.triggered) {
            this.triggered = true;
            if (this.isAvailable())
                requestAnimationFrame((time) => this.run(time));
            else
                setTimeout((time) => this.run(time));
        }
    }
    run(time) {
        const tasks = this.tasks;
        const endTasks = this.endTasks;
        this.triggered = false;
        this.tasks = [];
        this.endTasks = [];
        tasks.forEach(task => task.call(undefined, time));
        endTasks.forEach(task => task.call(undefined, time));
    }
};
exports.AnimationFrameSyncer = AnimationFrameSyncer;
exports.AnimationFrameSyncer = AnimationFrameSyncer = __decorate([
    (0, inversify_1.injectable)()
], AnimationFrameSyncer);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/animations/animation.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/animations/animation.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompoundAnimation = exports.Animation = void 0;
const easing_1 = __webpack_require__(/*! ./easing */ "../node_modules/sprotty/lib/base/animations/easing.js");
/**
 * An animation uses the rendering loop of the browser to smoothly
 * calculate a transition between two states of a model element.
 */
class Animation {
    constructor(context, ease = easing_1.easeInOut) {
        this.context = context;
        this.ease = ease;
        this.stopped = false;
    }
    start() {
        // in case start() is called multiple times, we need to reset the stopped flag
        this.stopped = false;
        return new Promise((resolve, reject) => {
            let start = undefined;
            let frames = 0;
            const lambda = (time) => {
                frames++;
                let dtime;
                if (start === undefined) {
                    start = time;
                    dtime = 0;
                }
                else {
                    dtime = time - start;
                }
                const t = Math.min(1, dtime / this.context.duration);
                const current = this.tween(this.ease(t), this.context);
                this.context.modelChanged.update(current);
                if (t === 1) {
                    this.context.logger.log(this, (frames * 1000 / this.context.duration) + ' fps');
                    resolve(current);
                }
                else if (this.stopped) {
                    this.context.logger.log(this, 'Animation stopped at ' + (t * 100) + '%');
                    resolve(current);
                }
                else {
                    this.context.syncer.onNextFrame(lambda);
                }
            };
            if (this.context.syncer.isAvailable()) {
                this.context.syncer.onNextFrame(lambda);
            }
            else {
                const finalModel = this.tween(1, this.context);
                resolve(finalModel);
            }
        });
    }
    /**
     * Stop the animation at the current state.
     * The promise returned by start() will be resolved with the current state after the next tweening step.
     */
    stop() {
        this.stopped = true;
    }
}
exports.Animation = Animation;
class CompoundAnimation extends Animation {
    constructor(model, context, components = [], ease = easing_1.easeInOut) {
        super(context, ease);
        this.model = model;
        this.context = context;
        this.components = components;
        this.ease = ease;
    }
    include(animation) {
        this.components.push(animation);
        return this;
    }
    tween(t, context) {
        for (const a of this.components) {
            a.tween(t, context);
        }
        return this.model;
    }
}
exports.CompoundAnimation = CompoundAnimation;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/animations/easing.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/animations/easing.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.easeInOut = void 0;
/**
 * Slows down animations towards the begin and the end.
 *
 * @param x the value between 0 (start of animation) and 1 (end of
 *     animation) linearly interpolated in time.
 * @returns {number} the eased value between 0 and 1
 */
function easeInOut(x) {
    if (x < 0.5)
        return x * x * 2;
    else
        return 1 - (1 - x) * (1 - x) * 2;
}
exports.easeInOut = easeInOut;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/commands/command-registration.js":
/*!*************************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/commands/command-registration.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.configureCommand = exports.CommandActionHandlerInitializer = exports.CommandActionHandler = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "../node_modules/sprotty/lib/utils/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
class CommandActionHandler {
    constructor(commandRegistration) {
        this.commandRegistration = commandRegistration;
    }
    handle(action) {
        return this.commandRegistration.factory(action);
    }
}
exports.CommandActionHandler = CommandActionHandler;
let CommandActionHandlerInitializer = class CommandActionHandlerInitializer {
    constructor(registrations) {
        this.registrations = registrations;
    }
    initialize(registry) {
        this.registrations.forEach(registration => registry.register(registration.kind, new CommandActionHandler(registration)));
    }
};
exports.CommandActionHandlerInitializer = CommandActionHandlerInitializer;
exports.CommandActionHandlerInitializer = CommandActionHandlerInitializer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.CommandRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], CommandActionHandlerInitializer);
/**
 * Use this method in your DI configuration to register a new command to the diagram.
 */
function configureCommand(context, constr) {
    if (!(0, inversify_2.isInjectable)(constr)) {
        throw new Error(`Commands should be @injectable: ${constr.name}`);
    }
    if (!context.isBound(constr)) {
        context.bind(constr).toSelf();
    }
    context.bind(types_1.TYPES.CommandRegistration).toDynamicValue(ctx => ({
        kind: constr.KIND,
        factory: (action) => {
            const childContainer = new inversify_1.Container();
            childContainer.parent = ctx.container;
            childContainer.bind(types_1.TYPES.Action).toConstantValue(action);
            return childContainer.get(constr);
        }
    }));
}
exports.configureCommand = configureCommand;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/commands/command-stack-options.js":
/*!**************************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/commands/command-stack-options.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.overrideCommandStackOptions = exports.configureCommandStackOptions = exports.defaultCommandStackOptions = void 0;
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "../node_modules/sprotty-protocol/lib/utils/object.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const defaultCommandStackOptions = () => ({
    defaultDuration: 250,
    undoHistoryLimit: 50
});
exports.defaultCommandStackOptions = defaultCommandStackOptions;
/**
 * Utility function to partially set command stack options. Default values (from `defaultViewerOptions`) are used for
 * options that are not specified.
 */
function configureCommandStackOptions(context, options) {
    const opt = Object.assign(Object.assign({}, (0, exports.defaultCommandStackOptions)()), options);
    if (context.isBound(types_1.TYPES.CommandStackOptions)) {
        context.rebind(types_1.TYPES.CommandStackOptions).toConstantValue(opt);
    }
    else {
        context.bind(types_1.TYPES.CommandStackOptions).toConstantValue(opt);
    }
}
exports.configureCommandStackOptions = configureCommandStackOptions;
/**
 * Utility function to partially override the currently configured command stack options in a DI container.
 */
function overrideCommandStackOptions(container, options) {
    const defaultOptions = container.get(types_1.TYPES.CommandStackOptions);
    (0, object_1.safeAssign)(defaultOptions, options);
    return defaultOptions;
}
exports.overrideCommandStackOptions = overrideCommandStackOptions;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/commands/command-stack.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/commands/command-stack.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandStack = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const smodel_factory_1 = __webpack_require__(/*! ../model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js");
const smodel_1 = __webpack_require__(/*! ../model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const animation_frame_syncer_1 = __webpack_require__(/*! ../animations/animation-frame-syncer */ "../node_modules/sprotty/lib/base/animations/animation-frame-syncer.js");
const command_1 = __webpack_require__(/*! ./command */ "../node_modules/sprotty/lib/base/commands/command.js");
/**
 * The implementation of the ICommandStack. Clients should not use this
 * class directly.
 *
 * The command stack holds the current model as the result of the current
 * promise. When a new command is executed/undone/redone, its execution is
 * chained using <code>Promise#then()</code> to the current Promise. This
 * way we can handle long running commands without blocking the current
 * thread.
 *
 * The command stack also does the special handling for special commands:
 *
 * System commands should be transparent to the user and as such be
 * automatically undone/redone with the next plain command. Additional care
 * must be taken that system commands that are executed after undo don't
 * break the correspondence between the topmost commands on the undo and
 * redo stacks.
 *
 * Hidden commands only tell the viewer to render a hidden model such that
 * its bounds can be extracted from the DOM and forwarded as separate actions.
 * Hidden commands should not leave any trace on the undo/redo/off stacks.
 *
 * Mergeable commands should be merged with their predecessor if possible,
 * such that e.g. multiple subsequent moves of the smae element can be undone
 * in one single step.
 */
let CommandStack = class CommandStack {
    constructor() {
        this.undoStack = [];
        this.redoStack = [];
        /**
         * Map which holds the last stoppable command for certain action kinds.
         */
        this.stoppableCommands = new Map();
        /**
         * System commands should be transparent to the user in undo/redo
         * operations. When a system command is executed when the redo
         * stack is not empty, it is pushed to offStack instead.
         *
         * On redo, all commands form this stack are undone such that the
         * redo operation gets the exact same model as when it was executed
         * first.
         *
         * On undo, all commands form this stack are undone as well as
         * system ommands should be transparent to the user.
         */
        this.offStack = [];
    }
    initialize() {
        this.currentPromise = Promise.resolve({
            main: {
                model: this.modelFactory.createRoot(smodel_factory_1.EMPTY_ROOT),
                modelChanged: false,
            },
            hidden: {
                model: this.modelFactory.createRoot(smodel_factory_1.EMPTY_ROOT),
                modelChanged: false,
            },
            popup: {
                model: this.modelFactory.createRoot(smodel_factory_1.EMPTY_ROOT),
                modelChanged: false,
            }
        });
    }
    get currentModel() {
        return this.currentPromise.then(state => state.main.model);
    }
    executeAll(commands) {
        commands.forEach(command => {
            this.logger.log(this, 'Executing', command);
            this.handleCommand(command, command.execute, this.mergeOrPush);
        });
        return this.thenUpdate();
    }
    execute(command) {
        this.logger.log(this, 'Executing', command);
        this.handleCommand(command, command.execute, this.mergeOrPush);
        return this.thenUpdate();
    }
    undo() {
        this.undoOffStackSystemCommands();
        this.undoPreceedingSystemCommands();
        const command = this.undoStack[this.undoStack.length - 1];
        if (command !== undefined && !this.isBlockUndo(command)) {
            this.undoStack.pop();
            this.logger.log(this, 'Undoing', command);
            this.handleCommand(command, command.undo, (c, context) => {
                this.redoStack.push(c);
            });
        }
        return this.thenUpdate();
    }
    redo() {
        this.undoOffStackSystemCommands();
        const command = this.redoStack.pop();
        if (command !== undefined) {
            this.logger.log(this, 'Redoing', command);
            this.handleCommand(command, command.redo, (c, context) => {
                this.pushToUndoStack(c);
            });
        }
        this.redoFollowingSystemCommands();
        return this.thenUpdate();
    }
    /**
     * Chains the current promise with another Promise that performs the
     * given operation on the given command.
     *
     * @param beforeResolve a function that is called directly before
     *      resolving the Promise to return the new model. Usually puts the
     *      command on the appropriate stack.
     */
    handleCommand(command, operation, beforeResolve) {
        // If the command implements the IStoppableCommand interface, we first need to stop the execution of the
        // previous command with the same action kind and then store the new command as the last stoppable command.
        if ((0, command_1.isStoppableCommand)(command)) {
            const stoppableCommand = this.stoppableCommands.get(command.stoppableCommandKey);
            if (stoppableCommand) {
                stoppableCommand.stopExecution();
            }
            this.stoppableCommands.set(command.stoppableCommandKey, command);
        }
        this.currentPromise = this.currentPromise.then(state => new Promise(resolve => {
            let target;
            if (command instanceof command_1.HiddenCommand)
                target = 'hidden';
            else if (command instanceof command_1.PopupCommand)
                target = 'popup';
            else
                target = 'main';
            const context = this.createContext(state.main.model);
            let commandResult;
            try {
                commandResult = operation.call(command, context);
            }
            catch (error) {
                this.logger.error(this, "Failed to execute command:", error);
                commandResult = state[target].model;
            }
            const newState = copyState(state);
            if (commandResult instanceof Promise) {
                commandResult.then(newModel => {
                    if (target === 'main')
                        beforeResolve.call(this, command, context);
                    newState[target] = { model: newModel, modelChanged: true };
                    resolve(newState);
                });
            }
            else if (commandResult instanceof smodel_1.SModelRootImpl) {
                if (target === 'main')
                    beforeResolve.call(this, command, context);
                newState[target] = { model: commandResult, modelChanged: true };
                resolve(newState);
            }
            else {
                if (target === 'main')
                    beforeResolve.call(this, command, context);
                newState[target] = {
                    model: commandResult.model,
                    modelChanged: state[target].modelChanged || commandResult.modelChanged,
                    cause: commandResult.cause
                };
                resolve(newState);
            }
        }));
    }
    pushToUndoStack(command) {
        this.undoStack.push(command);
        if (this.options.undoHistoryLimit >= 0 && this.undoStack.length > this.options.undoHistoryLimit)
            this.undoStack.splice(0, this.undoStack.length - this.options.undoHistoryLimit);
    }
    /**
     * Notifies the Viewer to render the new model and/or the new hidden model
     * and returns a Promise for the new model.
     */
    thenUpdate() {
        this.currentPromise = this.currentPromise.then(state => {
            const newState = copyState(state);
            if (state.hidden.modelChanged) {
                this.updateHidden(state.hidden.model, state.hidden.cause);
                newState.hidden.modelChanged = false;
                newState.hidden.cause = undefined;
            }
            if (state.main.modelChanged) {
                this.update(state.main.model, state.main.cause);
                newState.main.modelChanged = false;
                newState.main.cause = undefined;
            }
            if (state.popup.modelChanged) {
                this.updatePopup(state.popup.model, state.popup.cause);
                newState.popup.modelChanged = false;
                newState.popup.cause = undefined;
            }
            return newState;
        });
        return this.currentModel;
    }
    /**
     * Notify the `ModelViewer` that the model has changed.
     */
    update(model, cause) {
        if (this.modelViewer === undefined) {
            this.modelViewer = this.viewerProvider.modelViewer;
        }
        this.modelViewer.update(model, cause);
    }
    /**
     * Notify the `HiddenModelViewer` that the hidden model has changed.
     */
    updateHidden(model, cause) {
        if (this.hiddenModelViewer === undefined) {
            this.hiddenModelViewer = this.viewerProvider.hiddenModelViewer;
        }
        this.hiddenModelViewer.update(model, cause);
    }
    /**
     * Notify the `PopupModelViewer` that the popup model has changed.
     */
    updatePopup(model, cause) {
        if (this.popupModelViewer === undefined) {
            this.popupModelViewer = this.viewerProvider.popupModelViewer;
        }
        this.popupModelViewer.update(model, cause);
    }
    /**
     * Handling of commands after their execution.
     *
     * Hidden commands are not pushed to any stack.
     *
     * System commands are pushed to the <code>offStack</code> when the redo
     * stack is not empty, allowing to undo the before a redo to keep the chain
     * of commands consistent.
     *
     * Mergable commands are merged if possible.
     */
    mergeOrPush(command, context) {
        if (this.isBlockUndo(command)) {
            this.undoStack = [];
            this.redoStack = [];
            this.offStack = [];
            this.pushToUndoStack(command);
            return;
        }
        if (this.isPushToOffStack(command) && this.redoStack.length > 0) {
            if (this.offStack.length > 0) {
                const lastCommand = this.offStack[this.offStack.length - 1];
                if (lastCommand instanceof command_1.MergeableCommand && lastCommand.merge(command, context))
                    return;
            }
            this.offStack.push(command);
            return;
        }
        if (this.isPushToUndoStack(command)) {
            this.offStack.forEach(c => this.undoStack.push(c));
            this.offStack = [];
            this.redoStack = [];
            if (this.undoStack.length > 0) {
                const lastCommand = this.undoStack[this.undoStack.length - 1];
                if (lastCommand instanceof command_1.MergeableCommand && lastCommand.merge(command, context))
                    return;
            }
            this.pushToUndoStack(command);
        }
    }
    /**
     * Reverts all system commands on the offStack.
     */
    undoOffStackSystemCommands() {
        let command = this.offStack.pop();
        while (command !== undefined) {
            this.logger.log(this, 'Undoing off-stack', command);
            this.handleCommand(command, command.undo, () => { });
            command = this.offStack.pop();
        }
    }
    /**
     * System commands should be transparent to the user, so this method
     * is called from <code>undo()</code> to revert all system commands
     * at the top of the undoStack.
     */
    undoPreceedingSystemCommands() {
        let command = this.undoStack[this.undoStack.length - 1];
        while (command !== undefined && this.isPushToOffStack(command)) {
            this.undoStack.pop();
            this.logger.log(this, 'Undoing', command);
            this.handleCommand(command, command.undo, (c, context) => {
                this.redoStack.push(c);
            });
            command = this.undoStack[this.undoStack.length - 1];
        }
    }
    /**
     * System commands should be transparent to the user, so this method
     * is called from <code>redo()</code> to re-execute all system commands
     * at the top of the redoStack.
     */
    redoFollowingSystemCommands() {
        let command = this.redoStack[this.redoStack.length - 1];
        while (command !== undefined && this.isPushToOffStack(command)) {
            this.redoStack.pop();
            this.logger.log(this, 'Redoing ', command);
            this.handleCommand(command, command.redo, (c, context) => {
                this.pushToUndoStack(c);
            });
            command = this.redoStack[this.redoStack.length - 1];
        }
    }
    /**
     * Assembles the context object that is passed to the commands execution method.
     */
    createContext(currentModel) {
        return {
            root: currentModel,
            modelChanged: this,
            modelFactory: this.modelFactory,
            duration: this.options.defaultDuration,
            logger: this.logger,
            syncer: this.syncer
        };
    }
    isPushToOffStack(command) {
        return command instanceof command_1.SystemCommand;
    }
    isPushToUndoStack(command) {
        return !(command instanceof command_1.HiddenCommand);
    }
    isBlockUndo(command) {
        return command instanceof command_1.ResetCommand;
    }
};
exports.CommandStack = CommandStack;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IModelFactory),
    __metadata("design:type", Object)
], CommandStack.prototype, "modelFactory", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IViewerProvider),
    __metadata("design:type", Object)
], CommandStack.prototype, "viewerProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], CommandStack.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.AnimationFrameSyncer),
    __metadata("design:type", animation_frame_syncer_1.AnimationFrameSyncer)
], CommandStack.prototype, "syncer", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.CommandStackOptions),
    __metadata("design:type", Object)
], CommandStack.prototype, "options", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CommandStack.prototype, "initialize", null);
exports.CommandStack = CommandStack = __decorate([
    (0, inversify_1.injectable)()
], CommandStack);
function copyState(state) {
    return {
        main: Object.assign({}, state.main),
        hidden: Object.assign({}, state.hidden),
        popup: Object.assign({}, state.popup)
    };
}


/***/ }),

/***/ "../node_modules/sprotty/lib/base/commands/command.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/commands/command.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResetCommand = exports.SystemCommand = exports.PopupCommand = exports.HiddenCommand = exports.MergeableCommand = exports.Command = exports.isStoppableCommand = void 0;
__webpack_require__(/*! reflect-metadata */ "../node_modules/reflect-metadata/Reflect.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
function isStoppableCommand(command) {
    return command && (0, sprotty_protocol_1.hasOwnProperty)(command, 'stoppableCommandKey') && 'stopExecution' in command && typeof command.stopExecution === 'function';
}
exports.isStoppableCommand = isStoppableCommand;
/**
 * Base class for all commands.
 *
 * Command instances are created via dependency injection and should take
 * the respective action as an injected constructor parameter. They must
 * also define a static <code>KIND</code> which is used to map an
 * <code>Action#kind</code>.
 *
 * <pre>
 * export class MyCommand extends Command {
 *   static KIND = 'MyCommand'
 *   constructor(@inject(TYPES.Action) action: MyAction) {
 *   ...
 * }
 * @inject(TYPES.Action)
 * </pre>
 */
let Command = class Command {
};
exports.Command = Command;
exports.Command = Command = __decorate([
    (0, inversify_1.injectable)()
], Command);
/**
 * A mergeable command can accumulate subsequent commands of the same kind.
 *
 * For example, multiple subsequent move commands can be merged to yield a
 * single command, such that undo will roll them back altogether. Otherwise
 * the user would have to push CTRL-Z for each mouse move element that
 * resuted in a command.
 */
let MergeableCommand = class MergeableCommand extends Command {
    /**
     * Tries to merge the given command with this.
     *
     * @param command
     * @param context
     */
    merge(command, context) {
        return false;
    }
};
exports.MergeableCommand = MergeableCommand;
exports.MergeableCommand = MergeableCommand = __decorate([
    (0, inversify_1.injectable)()
], MergeableCommand);
/**
 * A hidden command is used to trigger the rendering of a model on a
 * hidden canvas.
 *
 * Some graphical elements are styled using CSS, others have bounds that
 * require to layout their children before being computed. In such cases
 * we cannot tell about the size of elements without acutally rendering
 * the DOM. We render them to an invisible canvas. This can be achieved
 * using hidden commands.
 *
 * Hidden commands do not change the model directly, and are as such
 * neither undoable nor redoable. The command stack does not push them on
 * any stack and forwards the resulting model to the invisible viewer.
 */
let HiddenCommand = class HiddenCommand extends Command {
    undo(context) {
        context.logger.error(this, 'Cannot undo a hidden command');
        return context.root;
    }
    redo(context) {
        context.logger.error(this, 'Cannot redo a hidden command');
        return context.root;
    }
};
exports.HiddenCommand = HiddenCommand;
exports.HiddenCommand = HiddenCommand = __decorate([
    (0, inversify_1.injectable)()
], HiddenCommand);
let PopupCommand = class PopupCommand extends Command {
};
exports.PopupCommand = PopupCommand;
exports.PopupCommand = PopupCommand = __decorate([
    (0, inversify_1.injectable)()
], PopupCommand);
/**
 * A system command is triggered by the system, e.g. in order to update bounds
 * in the model with data fetched from the DOM.
 *
 * As it is automatically triggered it should not count as a single command in
 * undo/redo operations. Into the bargain, such an automatic command could occur
 * after an undo and as such make the next redo command invalid because it is
 * based on a model state that has changed. The command stack handles system
 * commands in a special way to overcome these issues.
 */
let SystemCommand = class SystemCommand extends Command {
};
exports.SystemCommand = SystemCommand;
exports.SystemCommand = SystemCommand = __decorate([
    (0, inversify_1.injectable)()
], SystemCommand);
/**
 * A reset command deletes all undo/redo stacks and cannot be undone.
 *
 * It marks a point of no return.
 */
let ResetCommand = class ResetCommand extends Command {
};
exports.ResetCommand = ResetCommand;
exports.ResetCommand = ResetCommand = __decorate([
    (0, inversify_1.injectable)()
], ResetCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/commands/request-command.js":
/*!********************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/commands/request-command.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModelRequestCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const command_1 = __webpack_require__(/*! ./command */ "../node_modules/sprotty/lib/base/commands/command.js");
/**
 * A command that does not modify the internal model, but retrieves information
 * from it by dispatching a response action.
 */
let ModelRequestCommand = class ModelRequestCommand extends command_1.SystemCommand {
    execute(context) {
        const result = this.retrieveResult(context);
        this.actionDispatcher.dispatch(result);
        return { model: context.root, modelChanged: false };
    }
    undo(context) {
        return { model: context.root, modelChanged: false };
    }
    redo(context) {
        return { model: context.root, modelChanged: false };
    }
};
exports.ModelRequestCommand = ModelRequestCommand;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ModelRequestCommand.prototype, "actionDispatcher", void 0);
exports.ModelRequestCommand = ModelRequestCommand = __decorate([
    (0, inversify_1.injectable)()
], ModelRequestCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/di.config.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty/lib/base/di.config.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ./types */ "../node_modules/sprotty/lib/base/types.js");
const initialize_canvas_1 = __webpack_require__(/*! ./features/initialize-canvas */ "../node_modules/sprotty/lib/base/features/initialize-canvas.js");
const logging_1 = __webpack_require__(/*! ../utils/logging */ "../node_modules/sprotty/lib/utils/logging.js");
const action_dispatcher_1 = __webpack_require__(/*! ./actions/action-dispatcher */ "../node_modules/sprotty/lib/base/actions/action-dispatcher.js");
const action_handler_1 = __webpack_require__(/*! ./actions/action-handler */ "../node_modules/sprotty/lib/base/actions/action-handler.js");
const command_stack_1 = __webpack_require__(/*! ./commands/command-stack */ "../node_modules/sprotty/lib/base/commands/command-stack.js");
const command_stack_options_1 = __webpack_require__(/*! ./commands/command-stack-options */ "../node_modules/sprotty/lib/base/commands/command-stack-options.js");
const smodel_factory_1 = __webpack_require__(/*! ./model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js");
const animation_frame_syncer_1 = __webpack_require__(/*! ./animations/animation-frame-syncer */ "../node_modules/sprotty/lib/base/animations/animation-frame-syncer.js");
const viewer_1 = __webpack_require__(/*! ./views/viewer */ "../node_modules/sprotty/lib/base/views/viewer.js");
const viewer_options_1 = __webpack_require__(/*! ./views/viewer-options */ "../node_modules/sprotty/lib/base/views/viewer-options.js");
const mouse_tool_1 = __webpack_require__(/*! ./views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const key_tool_1 = __webpack_require__(/*! ./views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
const vnode_postprocessor_1 = __webpack_require__(/*! ./views/vnode-postprocessor */ "../node_modules/sprotty/lib/base/views/vnode-postprocessor.js");
const view_1 = __webpack_require__(/*! ./views/view */ "../node_modules/sprotty/lib/base/views/view.js");
const viewer_cache_1 = __webpack_require__(/*! ./views/viewer-cache */ "../node_modules/sprotty/lib/base/views/viewer-cache.js");
const dom_helper_1 = __webpack_require__(/*! ./views/dom-helper */ "../node_modules/sprotty/lib/base/views/dom-helper.js");
const id_postprocessor_1 = __webpack_require__(/*! ./views/id-postprocessor */ "../node_modules/sprotty/lib/base/views/id-postprocessor.js");
const command_registration_1 = __webpack_require__(/*! ./commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const css_class_postprocessor_1 = __webpack_require__(/*! ./views/css-class-postprocessor */ "../node_modules/sprotty/lib/base/views/css-class-postprocessor.js");
const set_model_1 = __webpack_require__(/*! ./features/set-model */ "../node_modules/sprotty/lib/base/features/set-model.js");
const ui_extension_registry_1 = __webpack_require__(/*! ./ui-extensions/ui-extension-registry */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js");
const diagram_locker_1 = __webpack_require__(/*! ./actions/diagram-locker */ "../node_modules/sprotty/lib/base/actions/diagram-locker.js");
const defaultContainerModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    // Logging ---------------------------------------------
    bind(types_1.TYPES.ILogger).to(logging_1.NullLogger).inSingletonScope();
    bind(types_1.TYPES.LogLevel).toConstantValue(logging_1.LogLevel.warn);
    // Registries ---------------------------------------------
    bind(types_1.TYPES.SModelRegistry).to(smodel_factory_1.SModelRegistry).inSingletonScope();
    bind(action_handler_1.ActionHandlerRegistry).toSelf().inSingletonScope();
    bind(types_1.TYPES.ActionHandlerRegistryProvider).toProvider(ctx => {
        return () => {
            return new Promise((resolve) => {
                resolve(ctx.container.get(action_handler_1.ActionHandlerRegistry));
            });
        };
    });
    bind(types_1.TYPES.ViewRegistry).to(view_1.ViewRegistry).inSingletonScope();
    // Model Creation ---------------------------------------------
    bind(types_1.TYPES.IModelFactory).to(smodel_factory_1.SModelFactory).inSingletonScope();
    // Action Dispatcher ---------------------------------------------
    bind(types_1.TYPES.IActionDispatcher).to(action_dispatcher_1.ActionDispatcher).inSingletonScope();
    bind(types_1.TYPES.IActionDispatcherProvider).toProvider(ctx => {
        return () => {
            return new Promise((resolve) => {
                resolve(ctx.container.get(types_1.TYPES.IActionDispatcher));
            });
        };
    });
    bind(types_1.TYPES.IDiagramLocker).to(diagram_locker_1.DefaultDiagramLocker).inSingletonScope();
    // Action handler
    bind(command_registration_1.CommandActionHandlerInitializer).toSelf().inSingletonScope();
    bind(types_1.TYPES.IActionHandlerInitializer).toService(command_registration_1.CommandActionHandlerInitializer);
    // Command Stack ---------------------------------------------
    bind(types_1.TYPES.ICommandStack).to(command_stack_1.CommandStack).inSingletonScope();
    bind(types_1.TYPES.ICommandStackProvider).toProvider(ctx => {
        return () => {
            return new Promise((resolve) => {
                resolve(ctx.container.get(types_1.TYPES.ICommandStack));
            });
        };
    });
    bind(types_1.TYPES.CommandStackOptions).toConstantValue((0, command_stack_options_1.defaultCommandStackOptions)());
    // Viewer ---------------------------------------------
    bind(viewer_1.ModelViewer).toSelf().inSingletonScope();
    bind(viewer_1.HiddenModelViewer).toSelf().inSingletonScope();
    bind(viewer_1.PopupModelViewer).toSelf().inSingletonScope();
    bind(types_1.TYPES.ModelViewer).toDynamicValue(ctx => {
        const container = ctx.container.createChild();
        container.bind(types_1.TYPES.IViewer).toService(viewer_1.ModelViewer);
        container.bind(viewer_cache_1.ViewerCache).toSelf();
        return container.get(viewer_cache_1.ViewerCache);
    }).inSingletonScope();
    bind(types_1.TYPES.PopupModelViewer).toDynamicValue(ctx => {
        const container = ctx.container.createChild();
        container.bind(types_1.TYPES.IViewer).toService(viewer_1.PopupModelViewer);
        container.bind(viewer_cache_1.ViewerCache).toSelf();
        return container.get(viewer_cache_1.ViewerCache);
    }).inSingletonScope();
    bind(types_1.TYPES.HiddenModelViewer).toService(viewer_1.HiddenModelViewer);
    bind(types_1.TYPES.IViewerProvider).toDynamicValue(ctx => {
        return {
            get modelViewer() {
                return ctx.container.get(types_1.TYPES.ModelViewer);
            },
            get hiddenModelViewer() {
                return ctx.container.get(types_1.TYPES.HiddenModelViewer);
            },
            get popupModelViewer() {
                return ctx.container.get(types_1.TYPES.PopupModelViewer);
            }
        };
    });
    bind(types_1.TYPES.ViewerOptions).toConstantValue((0, viewer_options_1.defaultViewerOptions)());
    bind(types_1.TYPES.PatcherProvider).to(viewer_1.PatcherProvider).inSingletonScope();
    bind(types_1.TYPES.DOMHelper).to(dom_helper_1.DOMHelper).inSingletonScope();
    bind(types_1.TYPES.ModelRendererFactory).toFactory(ctx => {
        return (targetKind, processors, args = {}) => {
            const viewRegistry = ctx.container.get(types_1.TYPES.ViewRegistry);
            return new viewer_1.ModelRenderer(viewRegistry, targetKind, processors, args);
        };
    });
    // Tools & Postprocessors --------------------------------------
    bind(id_postprocessor_1.IdPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(id_postprocessor_1.IdPostprocessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(id_postprocessor_1.IdPostprocessor);
    bind(css_class_postprocessor_1.CssClassPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(css_class_postprocessor_1.CssClassPostprocessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(css_class_postprocessor_1.CssClassPostprocessor);
    bind(mouse_tool_1.MouseTool).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(mouse_tool_1.MouseTool);
    bind(key_tool_1.KeyTool).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(key_tool_1.KeyTool);
    bind(vnode_postprocessor_1.FocusFixPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(vnode_postprocessor_1.FocusFixPostprocessor);
    bind(types_1.TYPES.PopupVNodePostprocessor).toService(id_postprocessor_1.IdPostprocessor);
    bind(mouse_tool_1.PopupMouseTool).toSelf().inSingletonScope();
    bind(types_1.TYPES.PopupVNodePostprocessor).toService(mouse_tool_1.PopupMouseTool);
    // Animation Frame Sync ------------------------------------------
    bind(types_1.TYPES.AnimationFrameSyncer).to(animation_frame_syncer_1.AnimationFrameSyncer).inSingletonScope();
    // Canvas Initialization ---------------------------------------------
    const context = { bind, isBound };
    (0, command_registration_1.configureCommand)(context, initialize_canvas_1.InitializeCanvasBoundsCommand);
    bind(initialize_canvas_1.CanvasBoundsInitializer).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(initialize_canvas_1.CanvasBoundsInitializer);
    // Model commands ---------------------------------------------
    (0, command_registration_1.configureCommand)(context, set_model_1.SetModelCommand);
    // UIExtension registry initialization ------------------------------------
    bind(types_1.TYPES.UIExtensionRegistry).to(ui_extension_registry_1.UIExtensionRegistry).inSingletonScope();
    (0, command_registration_1.configureCommand)(context, ui_extension_registry_1.SetUIExtensionVisibilityCommand);
    // Tracker for last known mouse position on diagram ------------------------
    bind(mouse_tool_1.MousePositionTracker).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(mouse_tool_1.MousePositionTracker);
});
exports["default"] = defaultContainerModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/features/initialize-canvas.js":
/*!**********************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/features/initialize-canvas.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InitializeCanvasBoundsCommand = exports.InitializeCanvasBoundsAction = exports.CanvasBoundsInitializer = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ../model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const command_1 = __webpack_require__(/*! ../commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "../node_modules/sprotty/lib/utils/browser.js");
/**
 * Grabs the bounds from the root element in page coordinates and fires a
 * InitializeCanvasBoundsAction. This size is needed for other actions such
 * as FitToScreenAction.
 */
let CanvasBoundsInitializer = class CanvasBoundsInitializer {
    decorate(vnode, element) {
        if (element instanceof smodel_1.SModelRootImpl && !geometry_1.Dimension.isValid(element.canvasBounds)) {
            this.rootAndVnode = [element, vnode];
        }
        return vnode;
    }
    postUpdate() {
        if (this.rootAndVnode !== undefined) {
            const domElement = this.rootAndVnode[1].elm;
            const oldBounds = this.rootAndVnode[0].canvasBounds;
            if (domElement !== undefined) {
                const newBounds = this.getBoundsInPage(domElement);
                if (!((0, geometry_1.almostEquals)(newBounds.x, oldBounds.x)
                    && (0, geometry_1.almostEquals)(newBounds.y, oldBounds.y)
                    && (0, geometry_1.almostEquals)(newBounds.width, oldBounds.width)
                    && (0, geometry_1.almostEquals)(newBounds.height, oldBounds.width)))
                    this.actionDispatcher.dispatch(InitializeCanvasBoundsAction.create(newBounds));
            }
            this.rootAndVnode = undefined;
        }
    }
    getBoundsInPage(element) {
        const bounds = element.getBoundingClientRect();
        const scroll = (0, browser_1.getWindowScroll)();
        return {
            x: bounds.left + scroll.x,
            y: bounds.top + scroll.y,
            width: bounds.width,
            height: bounds.height
        };
    }
};
exports.CanvasBoundsInitializer = CanvasBoundsInitializer;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], CanvasBoundsInitializer.prototype, "actionDispatcher", void 0);
exports.CanvasBoundsInitializer = CanvasBoundsInitializer = __decorate([
    (0, inversify_1.injectable)()
], CanvasBoundsInitializer);
var InitializeCanvasBoundsAction;
(function (InitializeCanvasBoundsAction) {
    InitializeCanvasBoundsAction.KIND = 'initializeCanvasBounds';
    function create(newCanvasBounds) {
        return {
            kind: InitializeCanvasBoundsAction.KIND,
            newCanvasBounds
        };
    }
    InitializeCanvasBoundsAction.create = create;
})(InitializeCanvasBoundsAction || (exports.InitializeCanvasBoundsAction = InitializeCanvasBoundsAction = {}));
let InitializeCanvasBoundsCommand = class InitializeCanvasBoundsCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.newCanvasBounds = this.action.newCanvasBounds;
        context.root.canvasBounds = this.newCanvasBounds;
        return context.root;
    }
    undo(context) {
        return context.root;
    }
    redo(context) {
        return context.root;
    }
};
exports.InitializeCanvasBoundsCommand = InitializeCanvasBoundsCommand;
InitializeCanvasBoundsCommand.KIND = InitializeCanvasBoundsAction.KIND;
exports.InitializeCanvasBoundsCommand = InitializeCanvasBoundsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], InitializeCanvasBoundsCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/features/set-model.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/features/set-model.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetModelCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const initialize_canvas_1 = __webpack_require__(/*! ./initialize-canvas */ "../node_modules/sprotty/lib/base/features/initialize-canvas.js");
let SetModelCommand = class SetModelCommand extends command_1.ResetCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.oldRoot = context.modelFactory.createRoot(context.root);
        this.newRoot = context.modelFactory.createRoot(this.action.newRoot);
        return this.newRoot;
    }
    undo(context) {
        return this.oldRoot;
    }
    redo(context) {
        return this.newRoot;
    }
    get blockUntil() {
        return action => action.kind === initialize_canvas_1.InitializeCanvasBoundsCommand.KIND;
    }
};
exports.SetModelCommand = SetModelCommand;
SetModelCommand.KIND = actions_1.SetModelAction.KIND;
exports.SetModelCommand = SetModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetModelCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/model/smodel-factory.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/model/smodel-factory.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFeatureSet = exports.EMPTY_ROOT = exports.SModelFactory = exports.SModelRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "../node_modules/sprotty/lib/utils/registry.js");
const smodel_1 = __webpack_require__(/*! ./smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
/**
 * Model element classes registered here are considered automatically when constructring a model from its schema.
 */
let SModelRegistry = class SModelRegistry extends registry_1.FactoryRegistry {
    constructor(registrations) {
        super();
        registrations.forEach(registration => {
            let defaultFeatures = this.getDefaultFeatures(registration.constr);
            if (!defaultFeatures && registration.features && registration.features.enable)
                defaultFeatures = [];
            if (defaultFeatures) {
                const featureSet = createFeatureSet(defaultFeatures, registration.features);
                if (registration.isOverride) {
                    this.override(registration.type, () => {
                        const element = new registration.constr();
                        element.features = featureSet;
                        return element;
                    });
                }
                else {
                    this.register(registration.type, () => {
                        const element = new registration.constr();
                        element.features = featureSet;
                        return element;
                    });
                }
            }
            else {
                if (registration.isOverride) {
                    this.override(registration.type, () => new registration.constr());
                }
                else {
                    this.register(registration.type, () => new registration.constr());
                }
            }
        });
    }
    getDefaultFeatures(constr) {
        let obj = constr;
        do {
            const defaultFeatures = obj.DEFAULT_FEATURES;
            if (defaultFeatures)
                return defaultFeatures;
            obj = Object.getPrototypeOf(obj);
        } while (obj);
        return undefined;
    }
};
exports.SModelRegistry = SModelRegistry;
exports.SModelRegistry = SModelRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.SModelElementRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], SModelRegistry);
/**
 * The default model factory creates SModelRoot for the root element and SChildElement for all other
 * model elements.
 */
let SModelFactory = class SModelFactory {
    createElement(schema, parent) {
        let child;
        if (this.registry.hasKey(schema.type)) {
            const regElement = this.registry.get(schema.type, undefined);
            if (!(regElement instanceof smodel_1.SChildElementImpl))
                throw new Error(`Element with type ${schema.type} was expected to be an SChildElement.`);
            child = regElement;
        }
        else {
            child = new smodel_1.SChildElementImpl();
        }
        return this.initializeChild(child, schema, parent);
    }
    createRoot(schema) {
        let root;
        if (this.registry.hasKey(schema.type)) {
            const regElement = this.registry.get(schema.type, undefined);
            if (!(regElement instanceof smodel_1.SModelRootImpl))
                throw new Error(`Element with type ${schema.type} was expected to be an SModelRoot.`);
            root = regElement;
        }
        else {
            root = new smodel_1.SModelRootImpl();
        }
        return this.initializeRoot(root, schema);
    }
    createSchema(element) {
        const schema = {};
        for (const key in element) {
            if (!this.isReserved(element, key)) {
                const value = element[key];
                if (typeof value !== 'function')
                    schema[key] = value;
            }
        }
        if (element instanceof smodel_1.SParentElementImpl)
            schema['children'] = element.children.map(child => this.createSchema(child));
        return schema;
    }
    initializeElement(element, schema) {
        for (const key in schema) {
            if (!this.isReserved(element, key)) {
                const value = schema[key];
                if (typeof value !== 'function')
                    element[key] = value;
            }
        }
        return element;
    }
    isReserved(element, propertyName) {
        if (['children', 'parent', 'index'].indexOf(propertyName) >= 0)
            return true;
        let obj = element;
        do {
            const descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);
            if (descriptor !== undefined)
                return descriptor.get !== undefined;
            obj = Object.getPrototypeOf(obj);
        } while (obj);
        return false;
    }
    initializeParent(parent, schema) {
        this.initializeElement(parent, schema);
        if ((0, smodel_1.isParent)(schema)) {
            parent.children = schema.children.map(childSchema => this.createElement(childSchema, parent));
        }
        return parent;
    }
    initializeChild(child, schema, parent) {
        this.initializeParent(child, schema);
        if (parent !== undefined) {
            child.parent = parent;
        }
        return child;
    }
    initializeRoot(root, schema) {
        this.initializeParent(root, schema);
        root.index.add(root);
        return root;
    }
};
exports.SModelFactory = SModelFactory;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.SModelRegistry),
    __metadata("design:type", SModelRegistry)
], SModelFactory.prototype, "registry", void 0);
exports.SModelFactory = SModelFactory = __decorate([
    (0, inversify_1.injectable)()
], SModelFactory);
exports.EMPTY_ROOT = Object.freeze({
    type: 'NONE',
    id: 'EMPTY'
});
function createFeatureSet(defaults, custom) {
    const featureSet = new Set(defaults);
    if (custom && custom.enable) {
        for (const f of custom.enable) {
            featureSet.add(f);
        }
    }
    if (custom && custom.disable) {
        for (const f of custom.disable) {
            featureSet.delete(f);
        }
    }
    return featureSet;
}
exports.createFeatureSet = createFeatureSet;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/model/smodel-utils.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/model/smodel-utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transformToRootBounds = exports.containsSome = exports.translateBounds = exports.translatePoint = exports.findParentByFeature = exports.findParent = exports.registerModelElement = void 0;
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ./smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
/**
 * Register a model element constructor for an element type.
 */
function registerModelElement(context, type, constr, features, isOverride) {
    context.bind(types_1.TYPES.SModelElementRegistration).toConstantValue({
        type, constr, features, isOverride
    });
}
exports.registerModelElement = registerModelElement;
/**
 * Find a parent element that satisfies the given predicate.
 */
function findParent(element, predicate) {
    let current = element;
    while (current !== undefined) {
        if (predicate(current))
            return current;
        else if (current instanceof smodel_1.SChildElementImpl)
            current = current.parent;
        else
            current = undefined;
    }
    return current;
}
exports.findParent = findParent;
/**
 * Find a parent element that implements the feature identified with the given predicate.
 */
function findParentByFeature(element, predicate) {
    let current = element;
    while (current !== undefined) {
        if (predicate(current))
            return current;
        else if (current instanceof smodel_1.SChildElementImpl)
            current = current.parent;
        else
            current = undefined;
    }
    return current;
}
exports.findParentByFeature = findParentByFeature;
/**
 * Translate a point from the coordinate system of the source element to the coordinate system
 * of the target element.
 */
function translatePoint(point, source, target) {
    if (source !== target) {
        // Translate from the source to the root element
        while (source instanceof smodel_1.SChildElementImpl) {
            point = source.localToParent(point);
            source = source.parent;
            if (source === target)
                return point;
        }
        // Translate from the root to the target element
        const targetTrace = [];
        while (target instanceof smodel_1.SChildElementImpl) {
            targetTrace.push(target);
            target = target.parent;
        }
        if (source !== target)
            throw new Error("Incompatible source and target: " + source.id + ", " + target.id);
        for (let i = targetTrace.length - 1; i >= 0; i--) {
            point = targetTrace[i].parentToLocal(point);
        }
    }
    return point;
}
exports.translatePoint = translatePoint;
/**
 * Translate some bounds from the coordinate system of the source element to the coordinate system
 * of the target element.
 */
function translateBounds(bounds, source, target) {
    const upperLeft = translatePoint(bounds, source, target);
    const lowerRight = translatePoint({ x: bounds.x + bounds.width, y: bounds.y + bounds.height }, source, target);
    return {
        x: upperLeft.x,
        y: upperLeft.y,
        width: lowerRight.x - upperLeft.x,
        height: lowerRight.y - upperLeft.y
    };
}
exports.translateBounds = translateBounds;
/**
 * Tests if the given model contains an id of then given element or one of its descendants.
 */
function containsSome(root, element) {
    const test = (el) => root.index.getById(el.id) !== undefined;
    const find = (elements) => elements.some(el => test(el) || find(el.children));
    return find([element]);
}
exports.containsSome = containsSome;
/**
 * Transforms the local bounds all the way up to the root.
 */
function transformToRootBounds(parent, bounds) {
    while (parent instanceof smodel_1.SChildElementImpl) {
        bounds = parent.localToParent(bounds);
        parent = parent.parent;
    }
    return bounds;
}
exports.transformToRootBounds = transformToRootBounds;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/model/smodel.js":
/*!********************************************************!*\
  !*** ../node_modules/sprotty/lib/base/model/smodel.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModelIndexImpl = exports.createRandomId = exports.SModelRootImpl = exports.SChildElementImpl = exports.SParentElementImpl = exports.isParent = exports.SModelElementImpl = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "../node_modules/sprotty/lib/utils/iterable.js");
/**
 * Base class for all elements of the internal diagram model.
 * Each model element must have a unique ID and a type that is used to look up its view.
 */
class SModelElementImpl {
    get root() {
        let current = this;
        while (current) {
            if (current instanceof SModelRootImpl)
                return current;
            else if (current instanceof SChildElementImpl)
                current = current.parent;
            else
                current = undefined;
        }
        throw new Error('Element has no root');
    }
    get index() {
        return this.root.index;
    }
    /**
     * A feature is a symbol identifying some functionality that can be enabled or disabled for
     * a model element. The set of supported features is determined by the `features` property.
     */
    hasFeature(feature) {
        return this.features !== undefined && this.features.has(feature);
    }
}
exports.SModelElementImpl = SModelElementImpl;
function isParent(element) {
    const children = element.children;
    return children !== undefined && children.constructor === Array;
}
exports.isParent = isParent;
/**
 * A parent element may contain child elements, thus the diagram model forms a tree.
 */
class SParentElementImpl extends SModelElementImpl {
    constructor() {
        super(...arguments);
        this.children = [];
    }
    add(child, index) {
        const children = this.children;
        if (index === undefined) {
            children.push(child);
        }
        else {
            if (index < 0 || index > this.children.length) {
                throw new Error(`Child index ${index} out of bounds (0..${children.length})`);
            }
            children.splice(index, 0, child);
        }
        child.parent = this;
        this.index.add(child);
    }
    remove(child) {
        const children = this.children;
        const i = children.indexOf(child);
        if (i < 0) {
            throw new Error(`No such child ${child.id}`);
        }
        children.splice(i, 1);
        this.index.remove(child);
    }
    removeAll(filter) {
        const children = this.children;
        if (filter !== undefined) {
            for (let i = children.length - 1; i >= 0; i--) {
                if (filter(children[i])) {
                    const child = children.splice(i, 1)[0];
                    this.index.remove(child);
                }
            }
        }
        else {
            children.forEach(child => {
                this.index.remove(child);
            });
            children.splice(0, children.length);
        }
    }
    move(child, newIndex) {
        const children = this.children;
        const i = children.indexOf(child);
        if (i === -1) {
            throw new Error(`No such child ${child.id}`);
        }
        else {
            if (newIndex < 0 || newIndex > children.length - 1) {
                throw new Error(`Child index ${newIndex} out of bounds (0..${children.length})`);
            }
            children.splice(i, 1);
            children.splice(newIndex, 0, child);
        }
    }
    /**
     * Transform the given bounds from the local coordinate system of this element to the coordinate
     * system of its parent. This function should consider any transformation that is applied to the
     * view of this element and its contents.
     * The base implementation assumes that this element does not define a local coordinate system,
     * so it leaves the bounds unchanged.
     */
    localToParent(point) {
        return (0, geometry_1.isBounds)(point) ? point : { x: point.x, y: point.y, width: -1, height: -1 };
    }
    /**
     * Transform the given bounds from the coordinate system of this element's parent to its local
     * coordinate system. This function should consider any transformation that is applied to the
     * view of this element and its contents.
     * The base implementation assumes that this element does not define a local coordinate system,
     * so it leaves the bounds unchanged.
     */
    parentToLocal(point) {
        return (0, geometry_1.isBounds)(point) ? point : { x: point.x, y: point.y, width: -1, height: -1 };
    }
}
exports.SParentElementImpl = SParentElementImpl;
/**
 * A child element is contained in a parent element. All elements except the model root are child
 * elements. In order to keep the model class hierarchy simple, every child element is also a
 * parent element, although for many elements the array of children is empty (i.e. they are
 * leafs in the model element tree).
 */
class SChildElementImpl extends SParentElementImpl {
}
exports.SChildElementImpl = SChildElementImpl;
/**
 * Base class for the root element of the diagram model tree.
 */
class SModelRootImpl extends SParentElementImpl {
    constructor(index = new ModelIndexImpl()) {
        super();
        this.canvasBounds = geometry_1.Bounds.EMPTY;
        // Override the index property from SModelElement, which has a getter, with a data property
        Object.defineProperty(this, 'index', {
            value: index,
            writable: false
        });
    }
}
exports.SModelRootImpl = SModelRootImpl;
const ID_CHARS = '0123456789abcdefghijklmnopqrstuvwxyz';
function createRandomId(length = 8) {
    let id = '';
    for (let i = 0; i < length; i++) {
        id += ID_CHARS.charAt(Math.floor(Math.random() * ID_CHARS.length));
    }
    return id;
}
exports.createRandomId = createRandomId;
/**
 * This index implementation is for the _internal model_ that is used for rendering.
 */
class ModelIndexImpl {
    constructor() {
        this.id2element = new Map();
    }
    add(element) {
        if (!element.id) {
            do {
                element.id = createRandomId();
            } while (this.contains(element));
        }
        else if (this.contains(element)) {
            throw new Error('Duplicate ID in model: ' + element.id);
        }
        this.id2element.set(element.id, element);
        if (element instanceof SParentElementImpl) {
            for (const child of element.children) {
                this.add(child);
            }
        }
    }
    remove(element) {
        this.id2element.delete(element.id);
        if (element instanceof SParentElementImpl) {
            for (const child of element.children) {
                this.remove(child);
            }
        }
    }
    contains(element) {
        return this.id2element.has(element.id);
    }
    getById(id) {
        return this.id2element.get(id);
    }
    getAttachedElements(element) {
        return [];
    }
    all() {
        return (0, iterable_1.mapIterable)(this.id2element, ([key, value]) => value);
    }
}
exports.ModelIndexImpl = ModelIndexImpl;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/types.js":
/*!*************************************************!*\
  !*** ../node_modules/sprotty/lib/base/types.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TYPES = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
exports.TYPES = {
    Action: Symbol('Action'),
    IActionDispatcher: Symbol('IActionDispatcher'),
    IActionDispatcherProvider: Symbol('IActionDispatcherProvider'),
    IActionHandlerInitializer: Symbol('IActionHandlerInitializer'),
    ActionHandlerRegistration: Symbol('ActionHandlerRegistration'),
    ActionHandlerRegistryProvider: Symbol('ActionHandlerRegistryProvider'),
    IAnchorComputer: Symbol('IAnchor'),
    AnimationFrameSyncer: Symbol('AnimationFrameSyncer'),
    IButtonHandlerRegistration: Symbol('IButtonHandlerRegistration'),
    ICommandPaletteActionProvider: Symbol('ICommandPaletteActionProvider'),
    ICommandPaletteActionProviderRegistry: Symbol('ICommandPaletteActionProviderRegistry'),
    CommandRegistration: Symbol('CommandRegistration'),
    ICommandStack: Symbol('ICommandStack'),
    CommandStackOptions: Symbol('CommandStackOptions'),
    ICommandStackProvider: Symbol('ICommandStackProvider'),
    IContextMenuItemProvider: Symbol.for("IContextMenuProvider"),
    IContextMenuProviderRegistry: Symbol.for("IContextMenuProviderRegistry"),
    IContextMenuService: Symbol.for("IContextMenuService"),
    IContextMenuServiceProvider: Symbol.for("IContextMenuServiceProvider"),
    DOMHelper: Symbol('DOMHelper'),
    IDiagramLocker: Symbol('IDiagramLocker'),
    IEdgeRouter: Symbol('IEdgeRouter'),
    IEdgeRoutePostprocessor: Symbol('IEdgeRoutePostprocessor'),
    IEditLabelValidationDecorator: Symbol('IEditLabelValidationDecorator'),
    IEditLabelValidator: Symbol('IEditLabelValidator'),
    HiddenModelViewer: Symbol('HiddenModelViewer'),
    HiddenVNodePostprocessor: Symbol('HiddenVNodeDecorator'),
    HoverState: Symbol('HoverState'),
    KeyListener: Symbol('KeyListener'),
    LayoutRegistration: Symbol('LayoutRegistration'),
    LayoutRegistry: Symbol('LayoutRegistry'),
    Layouter: Symbol('Layouter'),
    LogLevel: Symbol('LogLevel'),
    ILogger: Symbol('ILogger'),
    IModelFactory: Symbol('IModelFactory'),
    IModelLayoutEngine: Symbol('IModelLayoutEngine'),
    ModelRendererFactory: Symbol('ModelRendererFactory'),
    ModelSource: Symbol('ModelSource'),
    ModelSourceProvider: Symbol('ModelSourceProvider'),
    ModelViewer: Symbol('ModelViewer'),
    MouseListener: Symbol('MouseListener'),
    PatcherProvider: Symbol('PatcherProvider'),
    IPopupModelProvider: Symbol('IPopupModelProvider'),
    PopupModelViewer: Symbol('PopupModelViewer'),
    PopupMouseListener: Symbol('PopupMouseListener'),
    PopupVNodePostprocessor: Symbol('PopupVNodeDecorator'),
    SModelElementRegistration: Symbol('SModelElementRegistration'),
    SModelRegistry: Symbol('SModelRegistry'),
    ISnapper: Symbol('ISnapper'),
    SvgExporter: Symbol('SvgExporter'),
    ISvgExportPostprocessor: Symbol('ISvgExportPostprocessor'),
    IUIExtension: Symbol('IUIExtension'),
    UIExtensionRegistry: Symbol('UIExtensionRegistry'),
    IVNodePostprocessor: Symbol('IVNodePostprocessor'),
    ViewRegistration: Symbol('ViewRegistration'),
    ViewRegistry: Symbol('ViewRegistry'),
    IViewer: Symbol('IViewer'),
    ViewerOptions: Symbol('ViewerOptions'),
    IViewerProvider: Symbol('IViewerProvider'),
};
/* eslint-enable */


/***/ }),

/***/ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetUIExtensionVisibilityCommand = exports.SetUIExtensionVisibilityAction = exports.UIExtensionRegistry = void 0;
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "../node_modules/sprotty/lib/utils/registry.js");
const command_1 = __webpack_require__(/*! ../commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
/**
 * The registry maintaining UI extensions registered via `TYPES.IUIExtension`.
 */
let UIExtensionRegistry = class UIExtensionRegistry extends registry_1.InstanceRegistry {
    constructor(extensions = []) {
        super();
        extensions.forEach((extension) => this.register(extension.id(), extension));
    }
};
exports.UIExtensionRegistry = UIExtensionRegistry;
exports.UIExtensionRegistry = UIExtensionRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IUIExtension)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], UIExtensionRegistry);
var SetUIExtensionVisibilityAction;
(function (SetUIExtensionVisibilityAction) {
    SetUIExtensionVisibilityAction.KIND = "setUIExtensionVisibility";
    function create(options) {
        var _a;
        return {
            kind: SetUIExtensionVisibilityAction.KIND,
            extensionId: options.extensionId,
            visible: options.visible,
            contextElementsId: (_a = options.contextElementsId) !== null && _a !== void 0 ? _a : []
        };
    }
    SetUIExtensionVisibilityAction.create = create;
})(SetUIExtensionVisibilityAction || (exports.SetUIExtensionVisibilityAction = SetUIExtensionVisibilityAction = {}));
let SetUIExtensionVisibilityCommand = class SetUIExtensionVisibilityCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const extension = this.registry.get(this.action.extensionId);
        if (extension) {
            this.action.visible ? extension.show(context.root, ...this.action.contextElementsId) : extension.hide();
        }
        return { model: context.root, modelChanged: false };
    }
    undo(context) {
        return { model: context.root, modelChanged: false };
    }
    redo(context) {
        return { model: context.root, modelChanged: false };
    }
};
exports.SetUIExtensionVisibilityCommand = SetUIExtensionVisibilityCommand;
SetUIExtensionVisibilityCommand.KIND = SetUIExtensionVisibilityAction.KIND;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.UIExtensionRegistry),
    __metadata("design:type", UIExtensionRegistry)
], SetUIExtensionVisibilityCommand.prototype, "registry", void 0);
exports.SetUIExtensionVisibilityCommand = SetUIExtensionVisibilityCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetUIExtensionVisibilityCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension.js":
/*!**********************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/ui-extensions/ui-extension.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractUIExtension = exports.isUIExtension = void 0;
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
function isUIExtension(object) {
    return (0, sprotty_protocol_1.hasOwnProperty)(object, 'id', 'function')
        && (0, sprotty_protocol_1.hasOwnProperty)(object, 'show', 'function')
        && (0, sprotty_protocol_1.hasOwnProperty)(object, 'hide', 'function');
}
exports.isUIExtension = isUIExtension;
/**
 * Abstract base class for UI extensions.
 */
let AbstractUIExtension = class AbstractUIExtension {
    show(root, ...contextElementIds) {
        this.activeElement = document.activeElement;
        if (!this.containerElement) {
            if (!this.initialize())
                return;
        }
        this.onBeforeShow(this.containerElement, root, ...contextElementIds);
        this.setContainerVisible(true);
    }
    hide() {
        this.setContainerVisible(false);
        this.restoreFocus();
        this.activeElement = null;
    }
    restoreFocus() {
        const focusedElement = this.activeElement;
        if (focusedElement) {
            focusedElement.focus();
        }
    }
    initialize() {
        const baseDiv = document.getElementById(this.options.baseDiv);
        if (!baseDiv) {
            this.logger.warn(this, `Could not obtain sprotty base container for initializing UI extension ${this.id}`, this);
            return false;
        }
        this.containerElement = this.getOrCreateContainer(baseDiv.id);
        this.initializeContents(this.containerElement);
        if (baseDiv) {
            baseDiv.insertBefore(this.containerElement, baseDiv.firstChild);
        }
        return true;
    }
    getOrCreateContainer(baseDivId) {
        let container = document.getElementById(this.id());
        if (container === null) {
            container = document.createElement('div');
            container.id = baseDivId + "_" + this.id();
            container.classList.add(this.containerClass());
        }
        return container;
    }
    setContainerVisible(visible) {
        if (this.containerElement) {
            if (visible) {
                this.containerElement.style.visibility = 'visible';
                this.containerElement.style.opacity = '1';
            }
            else {
                this.containerElement.style.visibility = 'hidden';
                this.containerElement.style.opacity = '0';
            }
        }
    }
    /**
     * Updates the `containerElement` under the given `context` before it becomes visible.
     *
     * Subclasses may override this method to, for instance, modifying the position of the
     * `containerElement`, add or remove elements, etc. depending on the specified `root`
     * or `contextElementIds`.
     */
    onBeforeShow(containerElement, root, ...contextElementIds) {
        // default: do nothing
    }
};
exports.AbstractUIExtension = AbstractUIExtension;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], AbstractUIExtension.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], AbstractUIExtension.prototype, "logger", void 0);
exports.AbstractUIExtension = AbstractUIExtension = __decorate([
    (0, inversify_1.injectable)()
], AbstractUIExtension);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/css-class-postprocessor.js":
/*!*************************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/css-class-postprocessor.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CssClassPostprocessor = void 0;
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "../node_modules/sprotty-protocol/lib/utils/model-utils.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let CssClassPostprocessor = class CssClassPostprocessor {
    decorate(vnode, element) {
        if (element.cssClasses) {
            for (const cssClass of element.cssClasses)
                (0, vnode_utils_1.setClass)(vnode, cssClass, true);
        }
        // append model subtype as class
        const subType = (0, model_utils_1.getSubType)(element);
        if (subType && subType !== element.type) {
            (0, vnode_utils_1.setClass)(vnode, subType, true);
        }
        return vnode;
    }
    postUpdate() {
        // empty
    }
};
exports.CssClassPostprocessor = CssClassPostprocessor;
exports.CssClassPostprocessor = CssClassPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], CssClassPostprocessor);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/dom-helper.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/dom-helper.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DOMHelper = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
let DOMHelper = class DOMHelper {
    getPrefix() {
        const prefix = this.viewerOptions !== undefined && this.viewerOptions.baseDiv !== undefined ?
            this.viewerOptions.baseDiv + "_" : "";
        return prefix;
    }
    createUniqueDOMElementId(element) {
        return this.getPrefix() + element.id;
    }
    findSModelIdByDOMElement(element) {
        return element.id.replace(this.getPrefix(), '');
    }
};
exports.DOMHelper = DOMHelper;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], DOMHelper.prototype, "viewerOptions", void 0);
exports.DOMHelper = DOMHelper = __decorate([
    (0, inversify_1.injectable)()
], DOMHelper);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/id-postprocessor.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/id-postprocessor.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IdPostprocessor = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const dom_helper_1 = __webpack_require__(/*! ./dom-helper */ "../node_modules/sprotty/lib/base/views/dom-helper.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
let IdPostprocessor = class IdPostprocessor {
    decorate(vnode, element) {
        const attrs = (0, vnode_utils_1.getAttrs)(vnode);
        if (attrs.id !== undefined)
            this.logger.warn(vnode, 'Overriding id of vnode (' + attrs.id + '). Make sure not to set it manually in view.');
        attrs.id = this.domHelper.createUniqueDOMElementId(element);
        if (!vnode.key)
            vnode.key = element.id;
        return vnode;
    }
    postUpdate() {
    }
};
exports.IdPostprocessor = IdPostprocessor;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], IdPostprocessor.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.DOMHelper),
    __metadata("design:type", dom_helper_1.DOMHelper)
], IdPostprocessor.prototype, "domHelper", void 0);
exports.IdPostprocessor = IdPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], IdPostprocessor);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/key-tool.js":
/*!**********************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/key-tool.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyListener = exports.KeyTool = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ../model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
let KeyTool = class KeyTool {
    constructor(keyListeners = []) {
        this.keyListeners = keyListeners;
    }
    register(keyListener) {
        this.keyListeners.push(keyListener);
    }
    deregister(keyListener) {
        const index = this.keyListeners.indexOf(keyListener);
        if (index >= 0)
            this.keyListeners.splice(index, 1);
    }
    handleEvent(methodName, model, event) {
        const actions = this.keyListeners
            .map(listener => listener[methodName].apply(listener, [model, event]))
            .reduce((a, b) => a.concat(b));
        if (actions.length > 0) {
            event.preventDefault();
            this.actionDispatcher.dispatchAll(actions);
        }
    }
    keyDown(element, event) {
        this.handleEvent('keyDown', element, event);
    }
    keyUp(element, event) {
        this.handleEvent('keyUp', element, event);
    }
    focus() { }
    decorate(vnode, element) {
        if (element instanceof smodel_1.SModelRootImpl) {
            (0, vnode_utils_1.on)(vnode, 'focus', this.focus.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'keydown', this.keyDown.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'keyup', this.keyUp.bind(this, element));
        }
        return vnode;
    }
    postUpdate() {
    }
};
exports.KeyTool = KeyTool;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], KeyTool.prototype, "actionDispatcher", void 0);
exports.KeyTool = KeyTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.KeyListener)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], KeyTool);
let KeyListener = class KeyListener {
    keyDown(element, event) {
        return [];
    }
    keyUp(element, event) {
        return [];
    }
};
exports.KeyListener = KeyListener;
exports.KeyListener = KeyListener = __decorate([
    (0, inversify_1.injectable)()
], KeyListener);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/mouse-tool.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/mouse-tool.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MousePositionTracker = exports.MouseListener = exports.PopupMouseTool = exports.MouseTool = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const smodel_1 = __webpack_require__(/*! ../model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const dom_helper_1 = __webpack_require__(/*! ./dom-helper */ "../node_modules/sprotty/lib/base/views/dom-helper.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
let MouseTool = class MouseTool {
    constructor(mouseListeners = []) {
        this.mouseListeners = mouseListeners;
    }
    register(mouseListener) {
        this.mouseListeners.push(mouseListener);
    }
    deregister(mouseListener) {
        const index = this.mouseListeners.indexOf(mouseListener);
        if (index >= 0)
            this.mouseListeners.splice(index, 1);
    }
    getTargetElement(model, event) {
        let target = event.target;
        const index = model.index;
        while (target) {
            if (target.id) {
                const element = index.getById(this.domHelper.findSModelIdByDOMElement(target));
                if (element !== undefined)
                    return element;
            }
            target = target.parentNode;
        }
        return undefined;
    }
    handleEvent(methodName, model, event) {
        this.focusOnMouseEvent(methodName, model);
        const element = this.getTargetElement(model, event);
        if (!element)
            return;
        const actions = this.mouseListeners
            .map(listener => listener[methodName](element, event))
            .reduce((a, b) => a.concat(b));
        if (actions.length > 0) {
            event.preventDefault();
            for (const actionOrPromise of actions) {
                if ((0, actions_1.isAction)(actionOrPromise)) {
                    this.actionDispatcher.dispatch(actionOrPromise);
                }
                else {
                    actionOrPromise.then((action) => {
                        this.actionDispatcher.dispatch(action);
                    });
                }
            }
        }
    }
    focusOnMouseEvent(methodName, model) {
        if (document && methodName === 'mouseDown') {
            const domElement = document.getElementById(this.domHelper.createUniqueDOMElementId(model));
            if (domElement !== null && typeof domElement.focus === 'function')
                domElement.focus();
        }
    }
    mouseOver(model, event) {
        this.handleEvent('mouseOver', model, event);
    }
    mouseOut(model, event) {
        this.handleEvent('mouseOut', model, event);
    }
    mouseEnter(model, event) {
        this.handleEvent('mouseEnter', model, event);
    }
    mouseLeave(model, event) {
        this.handleEvent('mouseLeave', model, event);
    }
    mouseDown(model, event) {
        this.handleEvent('mouseDown', model, event);
    }
    mouseMove(model, event) {
        this.handleEvent('mouseMove', model, event);
    }
    mouseUp(model, event) {
        this.handleEvent('mouseUp', model, event);
    }
    wheel(model, event) {
        this.handleEvent('wheel', model, event);
    }
    contextMenu(model, event) {
        event.preventDefault();
        this.handleEvent('contextMenu', model, event);
    }
    doubleClick(model, event) {
        this.handleEvent('doubleClick', model, event);
    }
    decorate(vnode, element) {
        if (element instanceof smodel_1.SModelRootImpl) {
            (0, vnode_utils_1.on)(vnode, 'mouseover', this.mouseOver.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mouseout', this.mouseOut.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mouseenter', this.mouseEnter.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mouseleave', this.mouseLeave.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mousedown', this.mouseDown.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mouseup', this.mouseUp.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mousemove', this.mouseMove.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'wheel', this.wheel.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'contextmenu', this.contextMenu.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'dblclick', this.doubleClick.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'dragover', (event) => this.handleEvent('dragOver', element, event));
            (0, vnode_utils_1.on)(vnode, 'drop', (event) => this.handleEvent('drop', element, event));
        }
        vnode = this.mouseListeners.reduce((n, listener) => listener.decorate(n, element), vnode);
        return vnode;
    }
    postUpdate() {
    }
};
exports.MouseTool = MouseTool;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], MouseTool.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.DOMHelper),
    __metadata("design:type", dom_helper_1.DOMHelper)
], MouseTool.prototype, "domHelper", void 0);
exports.MouseTool = MouseTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.MouseListener)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], MouseTool);
let PopupMouseTool = class PopupMouseTool extends MouseTool {
    constructor(mouseListeners = []) {
        super(mouseListeners);
        this.mouseListeners = mouseListeners;
    }
};
exports.PopupMouseTool = PopupMouseTool;
exports.PopupMouseTool = PopupMouseTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.PopupMouseListener)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], PopupMouseTool);
let MouseListener = class MouseListener {
    mouseOver(target, event) {
        return [];
    }
    mouseOut(target, event) {
        return [];
    }
    mouseEnter(target, event) {
        return [];
    }
    mouseLeave(target, event) {
        return [];
    }
    mouseDown(target, event) {
        return [];
    }
    mouseMove(target, event) {
        return [];
    }
    mouseUp(target, event) {
        return [];
    }
    wheel(target, event) {
        return [];
    }
    doubleClick(target, event) {
        return [];
    }
    contextMenu(target, event) {
        return [];
    }
    dragOver(target, event) {
        return [];
    }
    drop(target, event) {
        return [];
    }
    decorate(vnode, element) {
        return vnode;
    }
};
exports.MouseListener = MouseListener;
exports.MouseListener = MouseListener = __decorate([
    (0, inversify_1.injectable)()
], MouseListener);
let MousePositionTracker = class MousePositionTracker extends MouseListener {
    mouseMove(target, event) {
        this.lastPosition = target.root.parentToLocal({ x: event.offsetX, y: event.offsetY });
        return [];
    }
    /**
     * Returns the last tracked mouse cursor position relative to the diagram root or `undefined`
     * if no mouse cursor position was ever tracked yet.
     */
    get lastPositionOnDiagram() {
        return this.lastPosition;
    }
};
exports.MousePositionTracker = MousePositionTracker;
exports.MousePositionTracker = MousePositionTracker = __decorate([
    (0, inversify_1.injectable)()
], MousePositionTracker);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/thunk-view.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/thunk-view.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isThunk = exports.ThunkView = void 0;
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "../node_modules/snabbdom/build/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
/**
 * An view that avoids calculation and patching of VNodes unless some model properties have changed.
 * Based on snabbdom's thunks.
 */
let ThunkView = class ThunkView {
    render(model, context) {
        return (0, snabbdom_1.h)(this.selector(model), {
            key: model.id,
            hook: {
                init: this.init.bind(this),
                prepatch: this.prepatch.bind(this)
            },
            fn: () => this.renderAndDecorate(model, context),
            args: this.watchedArgs(model),
            thunk: true
        });
    }
    renderAndDecorate(model, context) {
        const vnode = this.doRender(model, context);
        context.decorate(vnode, model);
        return vnode;
    }
    copyToThunk(vnode, thunk) {
        thunk.elm = vnode.elm;
        vnode.data.fn = thunk.data.fn;
        vnode.data.args = thunk.data.args;
        thunk.data = vnode.data;
        thunk.children = vnode.children;
        thunk.text = vnode.text;
        thunk.elm = vnode.elm;
    }
    init(thunk) {
        const cur = thunk.data;
        const vnode = cur.fn.apply(undefined, cur.args);
        this.copyToThunk(vnode, thunk);
    }
    prepatch(oldVnode, thunk) {
        const old = oldVnode.data, cur = thunk.data;
        if (!this.equals(old.args, cur.args))
            this.copyToThunk(cur.fn.apply(undefined, cur.args), thunk);
        else
            this.copyToThunk(oldVnode, thunk);
    }
    equals(oldArg, newArg) {
        if (Array.isArray(oldArg) && Array.isArray(newArg)) {
            if (oldArg.length !== newArg.length)
                return false;
            for (let i = 0; i < newArg.length; ++i) {
                if (!this.equals(oldArg[i], newArg[i]))
                    return false;
            }
        }
        else if (typeof oldArg === 'object' && typeof newArg === 'object') {
            if (Object.keys(oldArg).length !== Object.keys(newArg).length)
                return false;
            for (const key in oldArg) {
                if (key !== 'parent' && key !== 'root' && (!(key in newArg) || !this.equals(oldArg[key], newArg[key])))
                    return false;
            }
        }
        else if (oldArg !== newArg) {
            return false;
        }
        return true;
    }
};
exports.ThunkView = ThunkView;
exports.ThunkView = ThunkView = __decorate([
    (0, inversify_1.injectable)()
], ThunkView);
function isThunk(vnode) {
    return 'thunk' in vnode;
}
exports.isThunk = isThunk;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/view.js":
/*!******************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/view.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var MissingView_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MissingView = exports.EmptyView = exports.configureView = exports.overrideModelElement = exports.configureModelElement = exports.ViewRegistry = exports.findArgValue = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "../node_modules/sprotty/lib/lib/jsx.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "../node_modules/sprotty/lib/utils/registry.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "../node_modules/sprotty/lib/utils/inversify.js");
const smodel_factory_1 = __webpack_require__(/*! ../model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js");
const smodel_utils_1 = __webpack_require__(/*! ../model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
/**
 * Searches for the property specified in `key` in the specified `args`,
 * including its direct or indirect `IRenderingArgs#parentArgs`.
 *
 * @param arg the rendering arguments.
 * @param key the key to search for.
 * @returns the found value or `undefined.
 */
function findArgValue(arg, key) {
    while (arg !== undefined && !(key in arg) && arg.parentArgs) {
        arg = arg.parentArgs;
    }
    return arg ? arg[key] : undefined;
}
exports.findArgValue = findArgValue;
/**
 * Allows to look up the IView for a given SModelElement based on its type.
 */
let ViewRegistry = class ViewRegistry extends registry_1.InstanceRegistry {
    constructor(registrations) {
        super();
        this.registerDefaults();
        registrations.forEach(registration => {
            if (registration.isOverride) {
                this.override(registration.type, registration.factory());
            }
            else {
                this.register(registration.type, registration.factory());
            }
        });
    }
    registerDefaults() {
        this.register(smodel_factory_1.EMPTY_ROOT.type, new EmptyView());
    }
    missing(key) {
        this.logger.warn(this, `no registered view for type '${key}', please configure a view in the ContainerModule`);
        return new MissingView();
    }
};
exports.ViewRegistry = ViewRegistry;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], ViewRegistry.prototype, "logger", void 0);
exports.ViewRegistry = ViewRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.ViewRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], ViewRegistry);
/**
 * Combines `registerModelElement` and `configureView`.
 */
function configureModelElement(context, type, modelConstr, viewConstr, features) {
    (0, smodel_utils_1.registerModelElement)(context, type, modelConstr, features);
    configureView(context, type, viewConstr);
}
exports.configureModelElement = configureModelElement;
function overrideModelElement(context, type, modelConstr, viewConstr, features) {
    (0, smodel_utils_1.registerModelElement)(context, type, modelConstr, features, true);
    configureView(context, type, viewConstr, true);
}
exports.overrideModelElement = overrideModelElement;
/**
 * Utility function to register a view for a model element type.
 */
function configureView(context, type, constr, isOverride) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Views should be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.ViewRegistration).toDynamicValue(ctx => ({
        type,
        factory: () => ctx.container.get(constr),
        isOverride
    }));
}
exports.configureView = configureView;
/**
 * This view is used when the model is the EMPTY_ROOT.
 */
let EmptyView = class EmptyView {
    render(model, context) {
        return (0, jsx_1.svg)("svg", { "class-sprotty-empty": true });
    }
};
exports.EmptyView = EmptyView;
exports.EmptyView = EmptyView = __decorate([
    (0, inversify_1.injectable)()
], EmptyView);
/**
 * This view is used when no view has been registered for a model element type.
 */
let MissingView = MissingView_1 = class MissingView {
    render(model, context) {
        const position = model.position || this.getPostion(model.type);
        return (0, jsx_1.svg)("text", { "class-sprotty-missing": true, x: position.x, y: position.y },
            "missing \"",
            model.type,
            "\" view");
    }
    getPostion(type) {
        let position = MissingView_1.positionMap.get(type);
        if (!position) {
            position = sprotty_protocol_1.Point.ORIGIN;
            MissingView_1.positionMap.forEach(value => position = value.y >= position.y ? { x: 0, y: value.y + 20 } : position);
            MissingView_1.positionMap.set(type, position);
        }
        return position;
    }
};
exports.MissingView = MissingView;
MissingView.positionMap = new Map();
exports.MissingView = MissingView = MissingView_1 = __decorate([
    (0, inversify_1.injectable)()
], MissingView);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/viewer-cache.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/viewer-cache.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewerCache = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const animation_frame_syncer_1 = __webpack_require__(/*! ../animations/animation-frame-syncer */ "../node_modules/sprotty/lib/base/animations/animation-frame-syncer.js");
/**
 * Updating the view is rather expensive, and it doesn't make sense to calculate
 * more then one update per animation (rendering) frame. So this class batches
 * all incoming model changes and only renders the last one when the next animation
 * frame comes.
 */
let ViewerCache = class ViewerCache {
    update(model, cause) {
        if (cause !== undefined) {
            // Forward the update immediately in order to pass the cause action
            this.delegate.update(model, cause);
            this.cachedModel = undefined;
        }
        else {
            const isCacheEmpty = this.cachedModel === undefined;
            this.cachedModel = model;
            if (isCacheEmpty) {
                this.scheduleUpdate();
            }
        }
    }
    scheduleUpdate() {
        this.syncer.onEndOfNextFrame(() => {
            if (this.cachedModel) {
                this.delegate.update(this.cachedModel);
                this.cachedModel = undefined;
            }
        });
    }
};
exports.ViewerCache = ViewerCache;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IViewer),
    __metadata("design:type", Object)
], ViewerCache.prototype, "delegate", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.AnimationFrameSyncer),
    __metadata("design:type", animation_frame_syncer_1.AnimationFrameSyncer)
], ViewerCache.prototype, "syncer", void 0);
exports.ViewerCache = ViewerCache = __decorate([
    (0, inversify_1.injectable)()
], ViewerCache);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/viewer-options.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/viewer-options.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.overrideViewerOptions = exports.configureViewerOptions = exports.defaultViewerOptions = void 0;
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "../node_modules/sprotty-protocol/lib/utils/object.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const defaultViewerOptions = () => ({
    baseDiv: 'sprotty',
    baseClass: 'sprotty',
    hiddenDiv: 'sprotty-hidden',
    hiddenClass: 'sprotty-hidden',
    popupDiv: 'sprotty-popup',
    popupClass: 'sprotty-popup',
    popupClosedClass: 'sprotty-popup-closed',
    needsClientLayout: true,
    needsServerLayout: false,
    popupOpenDelay: 1000,
    popupCloseDelay: 300,
    zoomLimits: { min: 0.01, max: 10 },
    horizontalScrollLimits: { min: -100000, max: 100000 },
    verticalScrollLimits: { min: -100000, max: 100000 }
});
exports.defaultViewerOptions = defaultViewerOptions;
/**
 * Utility function to partially set viewer options. Default values (from `defaultViewerOptions`) are used for
 * options that are not specified.
 */
function configureViewerOptions(context, options) {
    const opt = Object.assign(Object.assign({}, (0, exports.defaultViewerOptions)()), options);
    if (context.isBound(types_1.TYPES.ViewerOptions)) {
        context.rebind(types_1.TYPES.ViewerOptions).toConstantValue(opt);
    }
    else {
        context.bind(types_1.TYPES.ViewerOptions).toConstantValue(opt);
    }
}
exports.configureViewerOptions = configureViewerOptions;
/**
 * Utility function to partially override the currently configured viewer options in a DI container.
 */
function overrideViewerOptions(container, options) {
    const opt = container.get(types_1.TYPES.ViewerOptions);
    (0, object_1.safeAssign)(opt, options);
    return opt;
}
exports.overrideViewerOptions = overrideViewerOptions;


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/viewer.js":
/*!********************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/viewer.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupModelViewer = exports.HiddenModelViewer = exports.ModelViewer = exports.PatcherProvider = exports.ModelRenderer = void 0;
/** @jsx html */
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "../node_modules/snabbdom/build/index.js");
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "../node_modules/sprotty/lib/lib/jsx.js"); // must be html here, as we're creating a div
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "../node_modules/sprotty/lib/utils/browser.js");
const initialize_canvas_1 = __webpack_require__(/*! ../features/initialize-canvas */ "../node_modules/sprotty/lib/base/features/initialize-canvas.js");
const smodel_factory_1 = __webpack_require__(/*! ../model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js");
const types_1 = __webpack_require__(/*! ../types */ "../node_modules/sprotty/lib/base/types.js");
const thunk_view_1 = __webpack_require__(/*! ./thunk-view */ "../node_modules/sprotty/lib/base/views/thunk-view.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
class ModelRenderer {
    constructor(viewRegistry, targetKind, postprocessors, args = {}) {
        this.viewRegistry = viewRegistry;
        this.targetKind = targetKind;
        this.postprocessors = postprocessors;
        this.args = args;
    }
    decorate(vnode, element) {
        if ((0, thunk_view_1.isThunk)(vnode)) {
            return vnode;
        }
        return this.postprocessors.reduce((n, processor) => processor.decorate(n, element), vnode);
    }
    renderElement(element) {
        const view = this.viewRegistry.get(element.type);
        const vnode = view.render(element, this, this.args);
        if (vnode) {
            return this.decorate(vnode, element);
        }
        else {
            return undefined;
        }
    }
    renderChildren(element, args) {
        const context = args ?
            new ModelRenderer(this.viewRegistry, this.targetKind, this.postprocessors, Object.assign(Object.assign({}, args), { parentArgs: this.args })) : this;
        return element.children
            .map(child => context.renderElement(child))
            .filter(vnode => vnode !== undefined);
    }
    postUpdate(cause) {
        this.postprocessors.forEach(processor => processor.postUpdate(cause));
    }
}
exports.ModelRenderer = ModelRenderer;
let PatcherProvider = class PatcherProvider {
    constructor() {
        this.patcher = (0, snabbdom_1.init)(this.createModules());
    }
    createModules() {
        return [
            snabbdom_1.propsModule,
            snabbdom_1.attributesModule,
            snabbdom_1.classModule,
            snabbdom_1.styleModule,
            snabbdom_1.eventListenersModule
        ];
    }
};
exports.PatcherProvider = PatcherProvider;
exports.PatcherProvider = PatcherProvider = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], PatcherProvider);
/**
 * The component that turns the model into an SVG DOM.
 * Uses a VDOM based on snabbdom.js for performance.
 */
let ModelViewer = class ModelViewer {
    constructor(modelRendererFactory, patcherProvider, postprocessors) {
        this.renderer = modelRendererFactory('main', postprocessors);
        this.patcher = patcherProvider.patcher;
    }
    update(model, cause) {
        var _a;
        this.logger.log(this, 'rendering', model);
        const newVDOM = (0, jsx_1.html)("div", { id: this.options.baseDiv }, this.renderer.renderElement(model));
        if (this.lastVDOM !== undefined) {
            const hadFocus = this.hasFocus();
            (0, vnode_utils_1.copyClassesFromVNode)(this.lastVDOM, newVDOM);
            this.lastVDOM = this.patcher.call(this, this.lastVDOM, newVDOM);
            this.restoreFocus(hadFocus);
        }
        else if (typeof document !== 'undefined') {
            let placeholder = null;
            if (this.options.shadowRoot) {
                const shadowRoot = (_a = document.getElementById(this.options.shadowRoot)) === null || _a === void 0 ? void 0 : _a.shadowRoot;
                if (shadowRoot) {
                    placeholder = shadowRoot.getElementById(this.options.baseDiv);
                }
            }
            else {
                placeholder = document.getElementById(this.options.baseDiv);
            }
            if (placeholder !== null) {
                if (typeof window !== 'undefined') {
                    window.addEventListener('resize', () => {
                        this.onWindowResize(newVDOM);
                    });
                }
                (0, vnode_utils_1.copyClassesFromElement)(placeholder, newVDOM);
                (0, vnode_utils_1.setClass)(newVDOM, this.options.baseClass, true);
                this.lastVDOM = this.patcher.call(this, placeholder, newVDOM);
            }
            else {
                this.logger.error(this, 'element not in DOM:', this.options.baseDiv);
            }
        }
        this.renderer.postUpdate(cause);
    }
    hasFocus() {
        if (typeof document !== 'undefined' && document.activeElement && this.lastVDOM.children && this.lastVDOM.children.length > 0) {
            const lastRootVNode = this.lastVDOM.children[0];
            if (typeof lastRootVNode === 'object') {
                const lastElement = lastRootVNode.elm;
                return document.activeElement === lastElement;
            }
        }
        return false;
    }
    restoreFocus(focus) {
        if (focus && this.lastVDOM.children && this.lastVDOM.children.length > 0) {
            const lastRootVNode = this.lastVDOM.children[0];
            if (typeof lastRootVNode === 'object') {
                const lastElement = lastRootVNode.elm;
                if (lastElement && typeof lastElement.focus === 'function')
                    lastElement.focus();
            }
        }
    }
    onWindowResize(vdom) {
        const baseDiv = document.getElementById(this.options.baseDiv);
        if (baseDiv !== null) {
            const newBounds = this.getBoundsInPage(baseDiv);
            this.actiondispatcher.dispatch(initialize_canvas_1.InitializeCanvasBoundsAction.create(newBounds));
        }
    }
    getBoundsInPage(element) {
        const bounds = element.getBoundingClientRect();
        const scroll = (0, browser_1.getWindowScroll)();
        return {
            x: bounds.left + scroll.x,
            y: bounds.top + scroll.y,
            width: bounds.width,
            height: bounds.height
        };
    }
};
exports.ModelViewer = ModelViewer;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ModelViewer.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], ModelViewer.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ModelViewer.prototype, "actiondispatcher", void 0);
exports.ModelViewer = ModelViewer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.ModelRendererFactory)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.PatcherProvider)),
    __param(2, (0, inversify_1.multiInject)(types_1.TYPES.IVNodePostprocessor)),
    __param(2, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Function, PatcherProvider, Array])
], ModelViewer);
/**
 * Viewer for the _hidden_ model. This serves as an intermediate step to compute bounds
 * of elements. The model is rendered in a section that is not visible to the user,
 * and then the bounds are extracted from the DOM.
 */
let HiddenModelViewer = class HiddenModelViewer {
    constructor(modelRendererFactory, patcherProvider, hiddenPostprocessors) {
        this.hiddenRenderer = modelRendererFactory('hidden', hiddenPostprocessors);
        this.patcher = patcherProvider.patcher;
    }
    update(hiddenModel, cause) {
        this.logger.log(this, 'rendering hidden');
        let newVDOM;
        if (hiddenModel.type === smodel_factory_1.EMPTY_ROOT.type) {
            newVDOM = (0, jsx_1.html)("div", { id: this.options.hiddenDiv });
        }
        else {
            const hiddenVNode = this.hiddenRenderer.renderElement(hiddenModel);
            if (hiddenVNode) {
                (0, vnode_utils_1.setAttr)(hiddenVNode, 'opacity', 0);
            }
            newVDOM = (0, jsx_1.html)("div", { id: this.options.hiddenDiv }, hiddenVNode);
        }
        if (this.lastHiddenVDOM !== undefined) {
            (0, vnode_utils_1.copyClassesFromVNode)(this.lastHiddenVDOM, newVDOM);
            this.lastHiddenVDOM = this.patcher.call(this, this.lastHiddenVDOM, newVDOM);
        }
        else {
            let placeholder = document.getElementById(this.options.hiddenDiv);
            if (placeholder === null) {
                placeholder = document.createElement('div');
                document.body.appendChild(placeholder);
            }
            else {
                (0, vnode_utils_1.copyClassesFromElement)(placeholder, newVDOM);
            }
            (0, vnode_utils_1.setClass)(newVDOM, this.options.baseClass, true);
            (0, vnode_utils_1.setClass)(newVDOM, this.options.hiddenClass, true);
            this.lastHiddenVDOM = this.patcher.call(this, placeholder, newVDOM);
        }
        this.hiddenRenderer.postUpdate(cause);
    }
};
exports.HiddenModelViewer = HiddenModelViewer;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], HiddenModelViewer.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], HiddenModelViewer.prototype, "logger", void 0);
exports.HiddenModelViewer = HiddenModelViewer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.ModelRendererFactory)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.PatcherProvider)),
    __param(2, (0, inversify_1.multiInject)(types_1.TYPES.HiddenVNodePostprocessor)),
    __param(2, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Function, PatcherProvider, Array])
], HiddenModelViewer);
let PopupModelViewer = class PopupModelViewer {
    constructor(modelRendererFactory, patcherProvider, popupPostprocessors) {
        this.modelRendererFactory = modelRendererFactory;
        this.popupRenderer = this.modelRendererFactory('popup', popupPostprocessors);
        this.patcher = patcherProvider.patcher;
    }
    update(model, cause) {
        this.logger.log(this, 'rendering popup', model);
        const popupClosed = model.type === smodel_factory_1.EMPTY_ROOT.type;
        let newVDOM;
        if (popupClosed) {
            newVDOM = (0, jsx_1.html)("div", { id: this.options.popupDiv });
        }
        else {
            const position = model.canvasBounds;
            const inlineStyle = {
                top: position.y + 'px',
                left: position.x + 'px'
            };
            newVDOM = (0, jsx_1.html)("div", { id: this.options.popupDiv, style: inlineStyle }, this.popupRenderer.renderElement(model));
        }
        if (this.lastPopupVDOM !== undefined) {
            (0, vnode_utils_1.copyClassesFromVNode)(this.lastPopupVDOM, newVDOM);
            (0, vnode_utils_1.setClass)(newVDOM, this.options.popupClosedClass, popupClosed);
            this.lastPopupVDOM = this.patcher.call(this, this.lastPopupVDOM, newVDOM);
        }
        else if (typeof document !== 'undefined') {
            let placeholder = document.getElementById(this.options.popupDiv);
            if (placeholder === null) {
                placeholder = document.createElement('div');
                document.body.appendChild(placeholder);
            }
            else {
                (0, vnode_utils_1.copyClassesFromElement)(placeholder, newVDOM);
            }
            (0, vnode_utils_1.setClass)(newVDOM, this.options.popupClass, true);
            (0, vnode_utils_1.setClass)(newVDOM, this.options.popupClosedClass, popupClosed);
            this.lastPopupVDOM = this.patcher.call(this, placeholder, newVDOM);
        }
        this.popupRenderer.postUpdate(cause);
    }
};
exports.PopupModelViewer = PopupModelViewer;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], PopupModelViewer.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], PopupModelViewer.prototype, "logger", void 0);
exports.PopupModelViewer = PopupModelViewer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.ModelRendererFactory)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.PatcherProvider)),
    __param(2, (0, inversify_1.multiInject)(types_1.TYPES.PopupVNodePostprocessor)),
    __param(2, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Function, PatcherProvider, Array])
], PopupModelViewer);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/vnode-postprocessor.js":
/*!*********************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/vnode-postprocessor.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FocusFixPostprocessor = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
let FocusFixPostprocessor = class FocusFixPostprocessor {
    decorate(vnode, element) {
        if (vnode.sel && vnode.sel.startsWith('svg'))
            // allows to set focus in Firefox
            (0, vnode_utils_1.setAttr)(vnode, 'tabindex', 0);
        return vnode;
    }
    postUpdate() {
    }
};
exports.FocusFixPostprocessor = FocusFixPostprocessor;
exports.FocusFixPostprocessor = FocusFixPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], FocusFixPostprocessor);


/***/ }),

/***/ "../node_modules/sprotty/lib/base/views/vnode-utils.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/base/views/vnode-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAttrs = exports.on = exports.mergeStyle = exports.copyClassesFromElement = exports.copyClassesFromVNode = exports.setNamespace = exports.setClass = exports.setAttr = void 0;
function setAttr(vnode, name, value) {
    getAttrs(vnode)[name] = value;
}
exports.setAttr = setAttr;
function setClass(vnode, name, value) {
    getClass(vnode)[name] = value;
}
exports.setClass = setClass;
function setNamespace(node, ns) {
    if (node.data === undefined)
        node.data = {};
    node.data.ns = ns;
    const children = node.children;
    if (children !== undefined) {
        for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (typeof child !== 'string')
                setNamespace(child, ns);
        }
    }
}
exports.setNamespace = setNamespace;
function copyClassesFromVNode(source, target) {
    const classList = getClass(source);
    Object.keys(classList).forEach(c => setClass(target, c, true));
}
exports.copyClassesFromVNode = copyClassesFromVNode;
function copyClassesFromElement(element, target) {
    const classList = element.classList;
    for (let i = 0; i < classList.length; i++) {
        const item = classList.item(i);
        if (item)
            setClass(target, item, true);
    }
}
exports.copyClassesFromElement = copyClassesFromElement;
function mergeStyle(vnode, style) {
    getData(vnode).style = Object.assign(Object.assign({}, (getData(vnode).style || {})), style);
}
exports.mergeStyle = mergeStyle;
function on(vnode, event, listener) {
    const val = getOn(vnode);
    if (val[event]) {
        throw new Error('EventListener for ' + event + ' already registered on VNode');
    }
    val[event] = listener;
}
exports.on = on;
function getAttrs(vnode) {
    const data = getData(vnode);
    if (!data.attrs)
        data.attrs = {};
    return data.attrs;
}
exports.getAttrs = getAttrs;
function getData(vnode) {
    if (!vnode.data)
        vnode.data = {};
    return vnode.data;
}
function getClass(vnode) {
    const data = getData(vnode);
    if (!data.class)
        data.class = {};
    return data.class;
}
function getOn(vnode) {
    const data = getData(vnode);
    if (!data.on)
        data.on = {};
    return data.on;
}


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/abstract-layout.js":
/*!**********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/abstract-layout.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractLayout = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let AbstractLayout = class AbstractLayout {
    layout(container, layouter) {
        const boundsData = layouter.getBoundsData(container);
        const options = this.getLayoutOptions(container);
        const childrenSize = this.getChildrenSize(container, options, layouter);
        const maxWidth = options.paddingFactor * (options.resizeContainer
            ? Math.max(childrenSize.width, options.minWidth)
            : Math.max(0, this.getFixedContainerBounds(container, options, layouter).width) - options.paddingLeft - options.paddingRight);
        const maxHeight = options.paddingFactor * (options.resizeContainer
            ? Math.max(childrenSize.height, options.minHeight)
            : Math.max(0, this.getFixedContainerBounds(container, options, layouter).height) - options.paddingTop - options.paddingBottom);
        if (maxWidth > 0 && maxHeight > 0) {
            const offset = this.layoutChildren(container, layouter, options, maxWidth, maxHeight);
            boundsData.bounds = this.getFinalContainerBounds(container, offset, options, maxWidth, maxHeight);
            boundsData.boundsChanged = true;
        }
    }
    getFinalContainerBounds(container, lastOffset, options, maxWidth, maxHeight) {
        return {
            x: container.bounds.x,
            y: container.bounds.y,
            width: Math.max(options.minWidth, maxWidth + options.paddingLeft + options.paddingRight),
            height: Math.max(options.minHeight, maxHeight + options.paddingTop + options.paddingBottom)
        };
    }
    getFixedContainerBounds(container, layoutOptions, layouter) {
        let currentContainer = container;
        while (true) {
            if ((0, model_1.isBoundsAware)(currentContainer)) {
                const bounds = currentContainer.bounds;
                if ((0, model_1.isLayoutContainer)(currentContainer) && layoutOptions.resizeContainer)
                    layouter.log.error(currentContainer, 'Resizable container found while detecting fixed bounds');
                if (geometry_1.Dimension.isValid(bounds))
                    return bounds;
            }
            if (currentContainer instanceof smodel_1.SChildElementImpl) {
                currentContainer = currentContainer.parent;
            }
            else {
                layouter.log.error(currentContainer, 'Cannot detect fixed bounds');
                return geometry_1.Bounds.EMPTY;
            }
        }
    }
    layoutChildren(container, layouter, containerOptions, maxWidth, maxHeight) {
        let currentOffset = {
            x: containerOptions.paddingLeft + 0.5 * (maxWidth - (maxWidth / containerOptions.paddingFactor)),
            y: containerOptions.paddingTop + 0.5 * (maxHeight - (maxHeight / containerOptions.paddingFactor))
        };
        container.children.forEach(child => {
            if ((0, model_1.isLayoutableChild)(child)) {
                const boundsData = layouter.getBoundsData(child);
                const bounds = boundsData.bounds;
                const childOptions = this.getChildLayoutOptions(child, containerOptions);
                if (bounds !== undefined && geometry_1.Dimension.isValid(bounds)) {
                    currentOffset = this.layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight);
                }
            }
        });
        return currentOffset;
    }
    getDx(hAlign, bounds, maxWidth) {
        switch (hAlign) {
            case 'left':
                return 0;
            case 'center':
                return 0.5 * (maxWidth - bounds.width);
            case 'right':
                return maxWidth - bounds.width;
        }
    }
    getDy(vAlign, bounds, maxHeight) {
        switch (vAlign) {
            case 'top':
                return 0;
            case 'center':
                return 0.5 * (maxHeight - bounds.height);
            case 'bottom':
                return maxHeight - bounds.height;
        }
    }
    getChildLayoutOptions(child, containerOptions) {
        const layoutOptions = child.layoutOptions;
        if (layoutOptions === undefined)
            return containerOptions;
        else
            return this.spread(containerOptions, layoutOptions);
    }
    getLayoutOptions(element) {
        let current = element;
        const allOptions = [];
        while (current !== undefined) {
            const layoutOptions = current.layoutOptions;
            if (layoutOptions !== undefined)
                allOptions.push(layoutOptions);
            if (current instanceof smodel_1.SChildElementImpl)
                current = current.parent;
            else
                break;
        }
        return allOptions.reverse().reduce((a, b) => { return this.spread(a, b); }, this.getDefaultLayoutOptions());
    }
};
exports.AbstractLayout = AbstractLayout;
exports.AbstractLayout = AbstractLayout = __decorate([
    (0, inversify_1.injectable)()
], AbstractLayout);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/bounds-manipulation.js":
/*!**************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/bounds-manipulation.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RequestBoundsCommand = exports.SetBoundsCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/bounds/model.js");
let SetBoundsCommand = class SetBoundsCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
        this.bounds = [];
    }
    execute(context) {
        this.action.bounds.forEach(b => {
            const element = context.root.index.getById(b.elementId);
            if (element && (0, model_1.isBoundsAware)(element)) {
                this.bounds.push({
                    element: element,
                    oldBounds: element.bounds,
                    newPosition: b.newPosition,
                    newSize: b.newSize
                });
            }
        });
        return this.redo(context);
    }
    undo(context) {
        this.bounds.forEach(b => b.element.bounds = b.oldBounds);
        return context.root;
    }
    redo(context) {
        this.bounds.forEach(b => {
            if (b.newPosition)
                b.element.bounds = Object.assign(Object.assign({}, b.newPosition), b.newSize);
            else
                // keep the position
                b.element.bounds = Object.assign({ x: b.element.bounds.x, y: b.element.bounds.y }, b.newSize);
        });
        return context.root;
    }
};
exports.SetBoundsCommand = SetBoundsCommand;
SetBoundsCommand.KIND = actions_1.SetBoundsAction.KIND;
exports.SetBoundsCommand = SetBoundsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetBoundsCommand);
let RequestBoundsCommand = class RequestBoundsCommand extends command_1.HiddenCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        return {
            model: context.modelFactory.createRoot(this.action.newRoot),
            modelChanged: true,
            cause: this.action
        };
    }
    get blockUntil() {
        return action => action.kind === actions_1.ComputedBoundsAction.KIND;
    }
};
exports.RequestBoundsCommand = RequestBoundsCommand;
RequestBoundsCommand.KIND = actions_1.RequestBoundsAction.KIND;
exports.RequestBoundsCommand = RequestBoundsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], RequestBoundsCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/di.config.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/di.config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const bounds_manipulation_1 = __webpack_require__(/*! ./bounds-manipulation */ "../node_modules/sprotty/lib/features/bounds/bounds-manipulation.js");
const hidden_bounds_updater_1 = __webpack_require__(/*! ./hidden-bounds-updater */ "../node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js");
const layout_1 = __webpack_require__(/*! ./layout */ "../node_modules/sprotty/lib/features/bounds/layout.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const hbox_layout_1 = __webpack_require__(/*! ./hbox-layout */ "../node_modules/sprotty/lib/features/bounds/hbox-layout.js");
const vbox_layout_1 = __webpack_require__(/*! ./vbox-layout */ "../node_modules/sprotty/lib/features/bounds/vbox-layout.js");
const stack_layout_1 = __webpack_require__(/*! ./stack-layout */ "../node_modules/sprotty/lib/features/bounds/stack-layout.js");
const boundsModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, bounds_manipulation_1.SetBoundsCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, bounds_manipulation_1.RequestBoundsCommand);
    bind(hidden_bounds_updater_1.HiddenBoundsUpdater).toSelf().inSingletonScope();
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(hidden_bounds_updater_1.HiddenBoundsUpdater);
    bind(types_1.TYPES.Layouter).to(layout_1.Layouter).inSingletonScope();
    bind(types_1.TYPES.LayoutRegistry).to(layout_1.LayoutRegistry).inSingletonScope();
    (0, layout_1.configureLayout)({ bind, isBound }, vbox_layout_1.VBoxLayouter.KIND, vbox_layout_1.VBoxLayouter);
    (0, layout_1.configureLayout)({ bind, isBound }, hbox_layout_1.HBoxLayouter.KIND, hbox_layout_1.HBoxLayouter);
    (0, layout_1.configureLayout)({ bind, isBound }, stack_layout_1.StackLayouter.KIND, stack_layout_1.StackLayouter);
});
exports["default"] = boundsModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/hbox-layout.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/hbox-layout.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HBoxLayouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const abstract_layout_1 = __webpack_require__(/*! ./abstract-layout */ "../node_modules/sprotty/lib/features/bounds/abstract-layout.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/bounds/model.js");
/**
 * Layouts children of a container in horizontal (left->right) direction.
 */
let HBoxLayouter = class HBoxLayouter extends abstract_layout_1.AbstractLayout {
    getChildrenSize(container, containerOptions, layouter) {
        let maxWidth = 0;
        let maxHeight = -1;
        let isFirst = true;
        container.children.forEach(child => {
            if ((0, model_1.isLayoutableChild)(child)) {
                const bounds = layouter.getBoundsData(child).bounds;
                if (bounds !== undefined && geometry_1.Dimension.isValid(bounds)) {
                    if (isFirst)
                        isFirst = false;
                    else
                        maxWidth += containerOptions.hGap;
                    maxWidth += bounds.width;
                    maxHeight = Math.max(maxHeight, bounds.height);
                }
            }
        });
        return {
            width: maxWidth,
            height: maxHeight
        };
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight) {
        const dy = this.getDy(childOptions.vAlign, bounds, maxHeight);
        boundsData.bounds = {
            x: currentOffset.x + child.bounds.x - bounds.x,
            y: containerOptions.paddingTop + child.bounds.y - bounds.y + dy,
            width: bounds.width,
            height: bounds.height
        };
        boundsData.boundsChanged = true;
        return {
            x: currentOffset.x + bounds.width + containerOptions.hGap,
            y: currentOffset.y
        };
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 5,
            paddingBottom: 5,
            paddingLeft: 5,
            paddingRight: 5,
            paddingFactor: 1,
            hGap: 1,
            vAlign: 'center',
            minWidth: 0,
            minHeight: 0
        };
    }
    spread(a, b) {
        return Object.assign(Object.assign({}, a), b);
    }
};
exports.HBoxLayouter = HBoxLayouter;
HBoxLayouter.KIND = 'hbox';
exports.HBoxLayouter = HBoxLayouter = __decorate([
    (0, inversify_1.injectable)()
], HBoxLayouter);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js":
/*!****************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATTR_BBOX_ELEMENT = exports.HiddenBoundsUpdater = exports.BoundsData = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "../node_modules/sprotty/lib/utils/browser.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const layout_1 = __webpack_require__(/*! ./layout */ "../node_modules/sprotty/lib/features/bounds/layout.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/bounds/model.js");
class BoundsData {
}
exports.BoundsData = BoundsData;
/**
 * Grabs the bounds from hidden SVG DOM elements, applies layouts and fires
 * ComputedBoundsActions.
 *
 * The actual bounds of an element can usually not be determined from the SModel
 * as they depend on the view implementation and CSS stylings. So the best way is
 * to grab them from a live (but hidden) SVG using getBBox().
 *
 * If an element is Alignable, and the top-left corner of its bounding box is not
 * the origin, we also issue a realign with the ComputedBoundsAction.
 */
let HiddenBoundsUpdater = class HiddenBoundsUpdater {
    constructor() {
        this.element2boundsData = new Map;
    }
    decorate(vnode, element) {
        if ((0, model_1.isSizeable)(element) || (0, model_1.isLayoutContainer)(element)) {
            this.element2boundsData.set(element, {
                vnode: vnode,
                bounds: element.bounds,
                boundsChanged: false,
                alignmentChanged: false
            });
        }
        if (element instanceof smodel_1.SModelRootImpl) {
            this.root = element;
        }
        return vnode;
    }
    postUpdate(cause) {
        if (cause === undefined || cause.kind !== actions_1.RequestBoundsAction.KIND) {
            return;
        }
        const request = cause;
        this.getBoundsFromDOM();
        this.layouter.layout(this.element2boundsData);
        const resizes = [];
        const alignments = [];
        this.element2boundsData.forEach((boundsData, element) => {
            if (boundsData.boundsChanged && boundsData.bounds !== undefined) {
                const resize = {
                    elementId: element.id,
                    newSize: {
                        width: boundsData.bounds.width,
                        height: boundsData.bounds.height
                    }
                };
                // don't copy position if the element is layouted by the server
                if (element instanceof smodel_1.SChildElementImpl && (0, model_1.isLayoutContainer)(element.parent)) {
                    resize.newPosition = {
                        x: boundsData.bounds.x,
                        y: boundsData.bounds.y,
                    };
                }
                resizes.push(resize);
            }
            if (boundsData.alignmentChanged && boundsData.alignment !== undefined) {
                alignments.push({
                    elementId: element.id,
                    newAlignment: boundsData.alignment
                });
            }
        });
        const revision = (this.root !== undefined) ? this.root.revision : undefined;
        this.actionDispatcher.dispatch(actions_1.ComputedBoundsAction.create(resizes, { revision, alignments, requestId: request.requestId }));
        this.element2boundsData.clear();
    }
    getBoundsFromDOM() {
        this.element2boundsData.forEach((boundsData, element) => {
            if (boundsData.bounds && (0, model_1.isSizeable)(element)) {
                const vnode = boundsData.vnode;
                if (vnode && vnode.elm) {
                    const boundingBox = this.getBounds(vnode.elm, element);
                    if ((0, model_1.isAlignable)(element) && !((0, geometry_1.almostEquals)(boundingBox.x, 0) && (0, geometry_1.almostEquals)(boundingBox.y, 0))) {
                        boundsData.alignment = {
                            x: -boundingBox.x,
                            y: -boundingBox.y
                        };
                        boundsData.alignmentChanged = true;
                    }
                    const newBounds = {
                        x: element.bounds.x,
                        y: element.bounds.y,
                        width: boundingBox.width,
                        height: boundingBox.height
                    };
                    if (!((0, geometry_1.almostEquals)(newBounds.x, element.bounds.x)
                        && (0, geometry_1.almostEquals)(newBounds.y, element.bounds.y)
                        && (0, geometry_1.almostEquals)(newBounds.width, element.bounds.width)
                        && (0, geometry_1.almostEquals)(newBounds.height, element.bounds.height))) {
                        boundsData.bounds = newBounds;
                        boundsData.boundsChanged = true;
                    }
                }
            }
        });
    }
    /**
     * Compute the bounds of the given DOM element. Override this method to customize how
     * the bounding box of a rendered view is determined.
     *
     * In case your Sprotty model element contains children that are rendered outside of
     * their parent, you can add the `ATTR_BBOX_ELEMENT` attribute to the SVG element
     * that shall be used to compute the bounding box.
     */
    getBounds(elm, element) {
        if (!(0, browser_1.isSVGGraphicsElement)(elm)) {
            this.logger.error(this, 'Not an SVG element:', elm);
            return geometry_1.Bounds.EMPTY;
        }
        if (elm.tagName === 'g') {
            for (const child of Array.from(elm.children)) {
                if (child.getAttribute(exports.ATTR_BBOX_ELEMENT) !== null) {
                    return this.getBounds(child, element);
                }
            }
        }
        const bounds = elm.getBBox();
        return {
            x: bounds.x,
            y: bounds.y,
            width: bounds.width,
            height: bounds.height
        };
    }
};
exports.HiddenBoundsUpdater = HiddenBoundsUpdater;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], HiddenBoundsUpdater.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], HiddenBoundsUpdater.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.Layouter),
    __metadata("design:type", layout_1.Layouter)
], HiddenBoundsUpdater.prototype, "layouter", void 0);
exports.HiddenBoundsUpdater = HiddenBoundsUpdater = __decorate([
    (0, inversify_1.injectable)()
], HiddenBoundsUpdater);
/**
 * Attribute name identifying the SVG element that determines the bounding box of a rendered view.
 * This can be used when a view creates a group of which only a part should contribute to the
 * bounding box computed by `HiddenBoundsUpdater`.
 */
exports.ATTR_BBOX_ELEMENT = 'bboxElement';


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/layout.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/layout.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.configureLayout = exports.StatefulLayouter = exports.Layouter = exports.LayoutRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "../node_modules/sprotty/lib/utils/registry.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "../node_modules/sprotty/lib/utils/inversify.js");
let LayoutRegistry = class LayoutRegistry extends registry_1.InstanceRegistry {
    constructor(layouts = []) {
        super();
        layouts.forEach(layout => {
            if (this.hasKey(layout.layoutKind)) {
                this.logger.warn('Layout kind is already defined: ', layout.layoutKind);
            }
            else {
                this.register(layout.layoutKind, layout.factory());
            }
        });
    }
};
exports.LayoutRegistry = LayoutRegistry;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], LayoutRegistry.prototype, "logger", void 0);
exports.LayoutRegistry = LayoutRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.LayoutRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], LayoutRegistry);
let Layouter = class Layouter {
    layout(element2boundsData) {
        new StatefulLayouter(element2boundsData, this.layoutRegistry, this.logger).layout();
    }
};
exports.Layouter = Layouter;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.LayoutRegistry),
    __metadata("design:type", LayoutRegistry)
], Layouter.prototype, "layoutRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], Layouter.prototype, "logger", void 0);
exports.Layouter = Layouter = __decorate([
    (0, inversify_1.injectable)()
], Layouter);
class StatefulLayouter {
    constructor(element2boundsData, layoutRegistry, log) {
        this.element2boundsData = element2boundsData;
        this.layoutRegistry = layoutRegistry;
        this.log = log;
        this.toBeLayouted = [];
        element2boundsData.forEach((data, element) => {
            if ((0, model_1.isLayoutContainer)(element))
                this.toBeLayouted.push(element);
        });
    }
    getBoundsData(element) {
        let boundsData = this.element2boundsData.get(element);
        let bounds = element.bounds;
        if ((0, model_1.isLayoutContainer)(element) && this.toBeLayouted.indexOf(element) >= 0) {
            bounds = this.doLayout(element);
        }
        if (!boundsData) {
            boundsData = {
                bounds: bounds,
                boundsChanged: false,
                alignmentChanged: false
            };
            this.element2boundsData.set(element, boundsData);
        }
        return boundsData;
    }
    layout() {
        while (this.toBeLayouted.length > 0) {
            const element = this.toBeLayouted[0];
            this.doLayout(element);
        }
    }
    doLayout(element) {
        const index = this.toBeLayouted.indexOf(element);
        if (index >= 0)
            this.toBeLayouted.splice(index, 1);
        const layout = this.layoutRegistry.get(element.layout);
        if (layout)
            layout.layout(element, this);
        const boundsData = this.element2boundsData.get(element);
        if (boundsData !== undefined && boundsData.bounds !== undefined) {
            return boundsData.bounds;
        }
        else {
            this.log.error(element, 'Layout failed');
            return geometry_1.Bounds.EMPTY;
        }
    }
}
exports.StatefulLayouter = StatefulLayouter;
function configureLayout(context, kind, constr) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Layouts be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.LayoutRegistration).toDynamicValue(ctx => ({
        layoutKind: kind,
        factory: () => ctx.container.get(constr)
    }));
}
exports.configureLayout = configureLayout;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/model.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/model.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SShapeElementImpl = exports.findChildrenAtPosition = exports.getAbsoluteClientBounds = exports.getAbsoluteBounds = exports.isAlignable = exports.isSizeable = exports.isLayoutableChild = exports.isLayoutContainer = exports.isBoundsAware = exports.alignFeature = exports.layoutableChildFeature = exports.layoutContainerFeature = exports.boundsFeature = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "../node_modules/sprotty/lib/utils/browser.js");
exports.boundsFeature = Symbol('boundsFeature');
exports.layoutContainerFeature = Symbol('layoutContainerFeature');
exports.layoutableChildFeature = Symbol('layoutableChildFeature');
exports.alignFeature = Symbol('alignFeature');
function isBoundsAware(element) {
    return 'bounds' in element;
}
exports.isBoundsAware = isBoundsAware;
function isLayoutContainer(element) {
    return isBoundsAware(element)
        && element.hasFeature(exports.layoutContainerFeature)
        && 'layout' in element;
}
exports.isLayoutContainer = isLayoutContainer;
function isLayoutableChild(element) {
    return isBoundsAware(element)
        && element.hasFeature(exports.layoutableChildFeature);
}
exports.isLayoutableChild = isLayoutableChild;
function isSizeable(element) {
    return element.hasFeature(exports.boundsFeature) && isBoundsAware(element);
}
exports.isSizeable = isSizeable;
function isAlignable(element) {
    return element.hasFeature(exports.alignFeature)
        && 'alignment' in element;
}
exports.isAlignable = isAlignable;
function getAbsoluteBounds(element) {
    const boundsAware = (0, smodel_utils_1.findParentByFeature)(element, isBoundsAware);
    if (boundsAware !== undefined) {
        let bounds = boundsAware.bounds;
        let current = boundsAware;
        while (current instanceof smodel_1.SChildElementImpl) {
            const parent = current.parent;
            bounds = parent.localToParent(bounds);
            current = parent;
        }
        return bounds;
    }
    else if (element instanceof smodel_1.SModelRootImpl) {
        const canvasBounds = element.canvasBounds;
        return { x: 0, y: 0, width: canvasBounds.width, height: canvasBounds.height };
    }
    else {
        return geometry_1.Bounds.EMPTY;
    }
}
exports.getAbsoluteBounds = getAbsoluteBounds;
/**
 * Returns the "client-absolute" bounds of the specified `element`.
 *
 * The client-absolute bounds are relative to the entire browser page.
 *
 * @param element The element to get the bounds for.
 * @param domHelper The dom helper to obtain the SVG element's id.
 * @param viewerOptions The viewer options to obtain sprotty's container div id.
 */
function getAbsoluteClientBounds(element, domHelper, viewerOptions) {
    let x = 0;
    let y = 0;
    let width = 0;
    let height = 0;
    const svgElementId = domHelper.createUniqueDOMElementId(element);
    const svgElement = document.getElementById(svgElementId);
    if (svgElement) {
        const rect = svgElement.getBoundingClientRect();
        const scroll = (0, browser_1.getWindowScroll)();
        x = rect.left + scroll.x;
        y = rect.top + scroll.y;
        width = rect.width;
        height = rect.height;
    }
    let container = document.getElementById(viewerOptions.baseDiv);
    if (container) {
        while (container.offsetParent instanceof HTMLElement
            && (container = container.offsetParent)) {
            x -= container.offsetLeft;
            y -= container.offsetTop;
        }
    }
    return { x, y, width, height };
}
exports.getAbsoluteClientBounds = getAbsoluteClientBounds;
function findChildrenAtPosition(parent, point) {
    const matches = [];
    doFindChildrenAtPosition(parent, point, matches);
    return matches;
}
exports.findChildrenAtPosition = findChildrenAtPosition;
function doFindChildrenAtPosition(parent, point, matches) {
    parent.children.forEach(child => {
        if (isBoundsAware(child) && geometry_1.Bounds.includes(child.bounds, point))
            matches.push(child);
        if (child instanceof smodel_1.SParentElementImpl) {
            const newPoint = child.parentToLocal(point);
            doFindChildrenAtPosition(child, newPoint, matches);
        }
    });
}
/**
 * Abstract class for elements with a position and a size.
 */
class SShapeElementImpl extends smodel_1.SChildElementImpl {
    constructor() {
        super(...arguments);
        this.position = geometry_1.Point.ORIGIN;
        this.size = geometry_1.Dimension.EMPTY;
    }
    get bounds() {
        return {
            x: this.position.x,
            y: this.position.y,
            width: this.size.width,
            height: this.size.height
        };
    }
    set bounds(newBounds) {
        this.position = {
            x: newBounds.x,
            y: newBounds.y
        };
        this.size = {
            width: newBounds.width,
            height: newBounds.height
        };
    }
    localToParent(point) {
        const result = {
            x: point.x + this.position.x,
            y: point.y + this.position.y,
            width: -1,
            height: -1
        };
        if ((0, geometry_1.isBounds)(point)) {
            result.width = point.width;
            result.height = point.height;
        }
        return result;
    }
    parentToLocal(point) {
        const result = {
            x: point.x - this.position.x,
            y: point.y - this.position.y,
            width: -1,
            height: -1
        };
        if ((0, geometry_1.isBounds)(point)) {
            result.width = point.width;
            result.height = point.height;
        }
        return result;
    }
}
exports.SShapeElementImpl = SShapeElementImpl;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/resize.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/resize.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResizeAnimation = void 0;
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "../node_modules/sprotty/lib/base/animations/animation.js");
class ResizeAnimation extends animation_1.Animation {
    constructor(model, elementResizes, context, reverse = false) {
        super(context);
        this.model = model;
        this.elementResizes = elementResizes;
        this.reverse = reverse;
    }
    tween(t) {
        this.elementResizes.forEach((elementResize) => {
            const element = elementResize.element;
            const newDimension = (this.reverse) ? {
                width: (1 - t) * elementResize.toDimension.width + t * elementResize.fromDimension.width,
                height: (1 - t) * elementResize.toDimension.height + t * elementResize.fromDimension.height
            } : {
                width: (1 - t) * elementResize.fromDimension.width + t * elementResize.toDimension.width,
                height: (1 - t) * elementResize.fromDimension.height + t * elementResize.toDimension.height
            };
            element.bounds = {
                x: element.bounds.x,
                y: element.bounds.y,
                width: newDimension.width,
                height: newDimension.height
            };
        });
        return this.model;
    }
}
exports.ResizeAnimation = ResizeAnimation;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/stack-layout.js":
/*!*******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/stack-layout.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StackLayouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const abstract_layout_1 = __webpack_require__(/*! ./abstract-layout */ "../node_modules/sprotty/lib/features/bounds/abstract-layout.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/bounds/model.js");
let StackLayouter = class StackLayouter extends abstract_layout_1.AbstractLayout {
    getChildrenSize(container, options, layouter) {
        let maxWidth = -1;
        let maxHeight = -1;
        container.children.forEach(child => {
            if ((0, model_1.isLayoutableChild)(child)) {
                const bounds = layouter.getBoundsData(child).bounds;
                if (bounds !== undefined && geometry_1.Dimension.isValid(bounds)) {
                    maxWidth = Math.max(maxWidth, bounds.width);
                    maxHeight = Math.max(maxHeight, bounds.height);
                }
            }
        });
        return {
            width: maxWidth,
            height: maxHeight
        };
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight) {
        const dx = this.getDx(childOptions.hAlign, bounds, maxWidth);
        const dy = this.getDy(childOptions.vAlign, bounds, maxHeight);
        boundsData.bounds = {
            x: containerOptions.paddingLeft + child.bounds.x - bounds.x + dx,
            y: containerOptions.paddingTop + child.bounds.y - bounds.y + dy,
            width: bounds.width,
            height: bounds.height
        };
        boundsData.boundsChanged = true;
        return currentOffset;
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 5,
            paddingBottom: 5,
            paddingLeft: 5,
            paddingRight: 5,
            paddingFactor: 1,
            hAlign: 'center',
            vAlign: 'center',
            minWidth: 0,
            minHeight: 0
        };
    }
    spread(a, b) {
        return Object.assign(Object.assign({}, a), b);
    }
};
exports.StackLayouter = StackLayouter;
StackLayouter.KIND = 'stack';
exports.StackLayouter = StackLayouter = __decorate([
    (0, inversify_1.injectable)()
], StackLayouter);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/vbox-layout.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/vbox-layout.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VBoxLayouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const abstract_layout_1 = __webpack_require__(/*! ./abstract-layout */ "../node_modules/sprotty/lib/features/bounds/abstract-layout.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/bounds/model.js");
/**
 * Layouts children of a container in vertical (top->bottom) direction.
 */
let VBoxLayouter = class VBoxLayouter extends abstract_layout_1.AbstractLayout {
    getChildrenSize(container, containerOptions, layouter) {
        let maxWidth = -1;
        let maxHeight = 0;
        let isFirst = true;
        container.children.forEach(child => {
            if ((0, model_1.isLayoutableChild)(child)) {
                const bounds = layouter.getBoundsData(child).bounds;
                if (bounds !== undefined && geometry_1.Dimension.isValid(bounds)) {
                    maxHeight += bounds.height;
                    if (isFirst)
                        isFirst = false;
                    else
                        maxHeight += containerOptions.vGap;
                    maxWidth = Math.max(maxWidth, bounds.width);
                }
            }
        });
        return {
            width: maxWidth,
            height: maxHeight
        };
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight) {
        const dx = this.getDx(childOptions.hAlign, bounds, maxWidth);
        boundsData.bounds = {
            x: containerOptions.paddingLeft + child.bounds.x - bounds.x + dx,
            y: currentOffset.y + child.bounds.y - bounds.y,
            width: bounds.width,
            height: bounds.height
        };
        boundsData.boundsChanged = true;
        return {
            x: currentOffset.x,
            y: currentOffset.y + bounds.height + containerOptions.vGap
        };
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 5,
            paddingBottom: 5,
            paddingLeft: 5,
            paddingRight: 5,
            paddingFactor: 1,
            vGap: 1,
            hAlign: 'center',
            minWidth: 0,
            minHeight: 0
        };
    }
    spread(a, b) {
        return Object.assign(Object.assign({}, a), b);
    }
};
exports.VBoxLayouter = VBoxLayouter;
VBoxLayouter.KIND = 'vbox';
exports.VBoxLayouter = VBoxLayouter = __decorate([
    (0, inversify_1.injectable)()
], VBoxLayouter);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/bounds/views.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/bounds/views.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShapeView = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/bounds/model.js");
let ShapeView = class ShapeView {
    /**
     * Check whether the given model element is in the current viewport. Use this method
     * in your `render` implementation to skip rendering in case the element is not visible.
     * This can greatly enhance performance for large models.
     */
    isVisible(model, context) {
        if (context.targetKind === 'hidden') {
            // Don't hide any element for hidden rendering
            return true;
        }
        if (!geometry_1.Dimension.isValid(model.bounds)) {
            // We should hide only if we know the element's bounds
            return true;
        }
        const ab = (0, model_1.getAbsoluteBounds)(model);
        const canvasBounds = model.root.canvasBounds;
        return ab.x <= canvasBounds.width
            && ab.x + ab.width >= 0
            && ab.y <= canvasBounds.height
            && ab.y + ab.height >= 0;
    }
};
exports.ShapeView = ShapeView;
exports.ShapeView = ShapeView = __decorate([
    (0, inversify_1.injectable)()
], ShapeView);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/button/button-handler.js":
/*!*********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/button/button-handler.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.configureButtonHandler = exports.ButtonHandlerRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "../node_modules/sprotty/lib/utils/registry.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "../node_modules/sprotty/lib/utils/inversify.js");
let ButtonHandlerRegistry = class ButtonHandlerRegistry extends registry_1.InstanceRegistry {
    constructor(buttonHandlerRegistrations) {
        super();
        buttonHandlerRegistrations.forEach(factory => this.register(factory.TYPE, factory.factory()));
    }
};
exports.ButtonHandlerRegistry = ButtonHandlerRegistry;
exports.ButtonHandlerRegistry = ButtonHandlerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IButtonHandlerRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], ButtonHandlerRegistry);
/**
 * Utility function to register a button handler for an button type.
 */
function configureButtonHandler(context, type, constr) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Button handlers should be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.IButtonHandlerRegistration).toDynamicValue(ctx => ({
        TYPE: type,
        factory: () => ctx.container.get(constr)
    }));
}
exports.configureButtonHandler = configureButtonHandler;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/button/di.config.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/button/di.config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const button_handler_1 = __webpack_require__(/*! ./button-handler */ "../node_modules/sprotty/lib/features/button/button-handler.js");
const buttonModule = new inversify_1.ContainerModule(bind => {
    bind(button_handler_1.ButtonHandlerRegistry).toSelf().inSingletonScope();
});
exports["default"] = buttonModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/button/model.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/button/model.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SButtonImpl = void 0;
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../fade/model */ "../node_modules/sprotty/lib/features/fade/model.js");
class SButtonImpl extends model_1.SShapeElementImpl {
    constructor() {
        super(...arguments);
        this.enabled = true;
    }
}
exports.SButtonImpl = SButtonImpl;
SButtonImpl.DEFAULT_FEATURES = [model_1.boundsFeature, model_1.layoutableChildFeature, model_2.fadeFeature];


/***/ }),

/***/ "../node_modules/sprotty/lib/features/command-palette/action-providers.js":
/*!********************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/command-palette/action-providers.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RevealNamedElementActionProvider = exports.CommandPaletteActionProviderRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const action_1 = __webpack_require__(/*! ../../base/actions/action */ "../node_modules/sprotty/lib/base/actions/action.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "../node_modules/sprotty/lib/utils/iterable.js");
const model_1 = __webpack_require__(/*! ../nameable/model */ "../node_modules/sprotty/lib/features/nameable/model.js");
let CommandPaletteActionProviderRegistry = class CommandPaletteActionProviderRegistry {
    constructor(actionProviders = []) {
        this.actionProviders = actionProviders;
    }
    getActions(root, text, lastMousePosition, index) {
        const actionLists = this.actionProviders.map(provider => provider.getActions(root, text, lastMousePosition, index));
        return Promise.all(actionLists).then(p => p.reduce((acc, promise) => promise !== undefined ? acc.concat(promise) : acc));
    }
};
exports.CommandPaletteActionProviderRegistry = CommandPaletteActionProviderRegistry;
exports.CommandPaletteActionProviderRegistry = CommandPaletteActionProviderRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.ICommandPaletteActionProvider)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], CommandPaletteActionProviderRegistry);
let RevealNamedElementActionProvider = class RevealNamedElementActionProvider {
    constructor(logger) {
        this.logger = logger;
    }
    getActions(root, text, lastMousePosition, index) {
        if (index !== undefined && index % 2 === 0)
            return Promise.resolve(this.createSelectActions(root));
        else
            return Promise.resolve([new action_1.LabeledAction("Select all", [actions_1.SelectAllAction.create()])]);
    }
    createSelectActions(modelRoot) {
        const nameables = (0, iterable_1.toArray)(modelRoot.index.all().filter(element => (0, model_1.isNameable)(element)));
        return nameables.map(nameable => new action_1.LabeledAction(`Reveal ${(0, model_1.name)(nameable)}`, [actions_1.SelectAction.create({ selectedElementsIDs: [nameable.id] }), actions_1.CenterAction.create([nameable.id])], 'eye'));
    }
};
exports.RevealNamedElementActionProvider = RevealNamedElementActionProvider;
exports.RevealNamedElementActionProvider = RevealNamedElementActionProvider = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.ILogger)),
    __metadata("design:paramtypes", [Object])
], RevealNamedElementActionProvider);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/command-palette/command-palette.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/command-palette/command-palette.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var CommandPalette_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandPaletteKeyListener = exports.CommandPalette = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const action_1 = __webpack_require__(/*! ../../base/actions/action */ "../node_modules/sprotty/lib/base/actions/action.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extensions/ui-extension */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension.js");
const ui_extension_registry_1 = __webpack_require__(/*! ../../base/ui-extensions/ui-extension-registry */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js");
const dom_helper_1 = __webpack_require__(/*! ../../base/views/dom-helper */ "../node_modules/sprotty/lib/base/views/dom-helper.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
const codicon_1 = __webpack_require__(/*! ../../utils/codicon */ "../node_modules/sprotty/lib/utils/codicon.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "../node_modules/sprotty/lib/utils/iterable.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const action_providers_1 = __webpack_require__(/*! ./action-providers */ "../node_modules/sprotty/lib/features/command-palette/action-providers.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const autocompleter_1 = __importDefault(__webpack_require__(/*! autocompleter */ "../node_modules/autocompleter/autocomplete.js"));
let CommandPalette = CommandPalette_1 = class CommandPalette extends ui_extension_1.AbstractUIExtension {
    constructor() {
        super(...arguments);
        this.loadingIndicatorClasses = (0, codicon_1.codiconCSSClasses)('loading', false, true, ['loading']);
        this.xOffset = 20;
        this.yOffset = 20;
        this.defaultWidth = 400;
        this.debounceWaitMs = 100;
        this.noCommandsMsg = "No commands available";
        this.paletteIndex = 0;
    }
    id() { return CommandPalette_1.ID; }
    containerClass() { return "command-palette"; }
    show(root, ...contextElementIds) {
        super.show(root, ...contextElementIds);
        this.paletteIndex = 0;
        this.contextActions = undefined;
        this.inputElement.value = "";
        this.autoCompleteResult = (0, autocompleter_1.default)(this.autocompleteSettings(root));
        this.inputElement.focus();
    }
    initializeContents(containerElement) {
        containerElement.style.position = "absolute";
        this.inputElement = document.createElement('input');
        this.inputElement.style.width = '100%';
        this.inputElement.addEventListener('keydown', (event) => this.hideIfEscapeEvent(event));
        this.inputElement.addEventListener('keydown', (event) => this.cylceIfInvokePaletteKey(event));
        this.inputElement.onblur = () => window.setTimeout(() => this.hide(), 200);
        containerElement.appendChild(this.inputElement);
    }
    hideIfEscapeEvent(event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            this.hide();
        }
    }
    cylceIfInvokePaletteKey(event) {
        if (CommandPalette_1.isInvokePaletteKey(event)) {
            this.cycle();
        }
    }
    cycle() {
        this.contextActions = undefined;
        this.paletteIndex++;
    }
    onBeforeShow(containerElement, root, ...selectedElementIds) {
        let x = this.xOffset;
        let y = this.yOffset;
        const selectedElements = (0, iterable_1.toArray)(root.index.all().filter(e => (0, model_2.isSelectable)(e) && e.selected));
        if (selectedElements.length === 1) {
            const bounds = (0, model_1.getAbsoluteClientBounds)(selectedElements[0], this.domHelper, this.viewerOptions);
            x += bounds.x + bounds.width;
            y += bounds.y;
        }
        else {
            const bounds = (0, model_1.getAbsoluteClientBounds)(root, this.domHelper, this.viewerOptions);
            x += bounds.x;
            y += bounds.y;
        }
        containerElement.style.left = `${x}px`;
        containerElement.style.top = `${y}px`;
        containerElement.style.width = `${this.defaultWidth}px`;
    }
    autocompleteSettings(root) {
        return {
            input: this.inputElement,
            emptyMsg: this.noCommandsMsg,
            className: "command-palette-suggestions",
            debounceWaitMs: this.debounceWaitMs,
            showOnFocus: true,
            minLength: -1,
            fetch: (text, update) => this.updateAutoCompleteActions(update, text, root),
            onSelect: (item) => this.onSelect(item),
            render: (item, currentValue) => this.renderLabeledActionSuggestion(item, currentValue),
            customize: (input, inputRect, container, maxHeight) => {
                this.customizeSuggestionContainer(container, inputRect, maxHeight);
            }
        };
    }
    onSelect(item) {
        this.executeAction(item);
        this.hide();
    }
    updateAutoCompleteActions(update, text, root) {
        this.onLoading();
        if (this.contextActions) {
            update(this.filterActions(text, this.contextActions));
            this.onLoaded('success');
        }
        else {
            this.actionProviderRegistry
                .getActions(root, text, this.mousePositionTracker.lastPositionOnDiagram, this.paletteIndex)
                .then(actions => {
                this.contextActions = actions;
                update(this.filterActions(text, actions));
                this.onLoaded('success');
            })
                .catch((reason) => {
                this.logger.error(this, "Failed to obtain actions from command palette action providers", reason);
                this.onLoaded('error');
            });
        }
    }
    onLoading() {
        if (this.loadingIndicator && this.containerElement.contains(this.loadingIndicator)) {
            return;
        }
        this.loadingIndicator = document.createElement('span');
        this.loadingIndicator.classList.add(...this.loadingIndicatorClasses);
        this.containerElement.appendChild(this.loadingIndicator);
    }
    onLoaded(success) {
        if (this.containerElement.contains(this.loadingIndicator)) {
            this.containerElement.removeChild(this.loadingIndicator);
        }
    }
    renderLabeledActionSuggestion(item, value) {
        const itemElement = document.createElement("div");
        const wordMatcher = espaceForRegExp(value).split(" ").join("|");
        const regex = new RegExp(wordMatcher, "gi");
        if (item.icon) {
            this.renderIcon(itemElement, item.icon);
        }
        if (value.length > 0) {
            itemElement.innerHTML += item.label.replace(regex, (match) => "<em>" + match + "</em>").replace(/ /g, '&nbsp;');
        }
        else {
            itemElement.innerHTML += item.label.replace(/ /g, '&nbsp;');
        }
        return itemElement;
    }
    renderIcon(itemElement, iconId) {
        itemElement.innerHTML += `<span class="icon ${this.getCodicon(iconId)}"></span>`;
    }
    getFontAwesomeIcon(iconId) {
        return `fa fa-${iconId}`;
    }
    getCodicon(iconId) {
        return (0, codicon_1.codiconCSSString)(iconId);
    }
    filterActions(filterText, actions) {
        return (0, iterable_1.toArray)(actions.filter(action => {
            const label = action.label.toLowerCase();
            const searchWords = filterText.split(' ');
            return searchWords.every(word => label.indexOf(word.toLowerCase()) !== -1);
        }));
    }
    customizeSuggestionContainer(container, inputRect, maxHeight) {
        // move container into our command palette container as this is already positioned correctly
        container.style.position = "fixed";
        if (this.containerElement) {
            this.containerElement.appendChild(container);
        }
    }
    hide() {
        super.hide();
        if (this.autoCompleteResult) {
            this.autoCompleteResult.destroy();
        }
    }
    executeAction(input) {
        this.actionDispatcherProvider()
            .then((actionDispatcher) => actionDispatcher.dispatchAll(toActionArray(input)))
            .catch((reason) => this.logger.error(this, 'No action dispatcher available to execute command palette action', reason));
    }
};
exports.CommandPalette = CommandPalette;
CommandPalette.ID = "command-palette";
CommandPalette.isInvokePaletteKey = (event) => (0, keyboard_1.matchesKeystroke)(event, 'Space', 'ctrl');
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcherProvider),
    __metadata("design:type", Function)
], CommandPalette.prototype, "actionDispatcherProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ICommandPaletteActionProviderRegistry),
    __metadata("design:type", action_providers_1.CommandPaletteActionProviderRegistry)
], CommandPalette.prototype, "actionProviderRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], CommandPalette.prototype, "viewerOptions", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.DOMHelper),
    __metadata("design:type", dom_helper_1.DOMHelper)
], CommandPalette.prototype, "domHelper", void 0);
__decorate([
    (0, inversify_1.inject)(mouse_tool_1.MousePositionTracker),
    __metadata("design:type", mouse_tool_1.MousePositionTracker)
], CommandPalette.prototype, "mousePositionTracker", void 0);
exports.CommandPalette = CommandPalette = CommandPalette_1 = __decorate([
    (0, inversify_1.injectable)()
], CommandPalette);
function toActionArray(input) {
    if ((0, action_1.isLabeledAction)(input)) {
        return input.actions;
    }
    else if ((0, actions_1.isAction)(input)) {
        return [input];
    }
    return [];
}
function espaceForRegExp(value) {
    return value.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
}
class CommandPaletteKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            return [ui_extension_registry_1.SetUIExtensionVisibilityAction.create({ extensionId: CommandPalette.ID, visible: false, contextElementsId: [] })];
        }
        else if (CommandPalette.isInvokePaletteKey(event)) {
            const selectedElements = (0, iterable_1.toArray)(element.index.all().filter(e => (0, model_2.isSelectable)(e) && e.selected).map(e => e.id));
            return [ui_extension_registry_1.SetUIExtensionVisibilityAction.create({ extensionId: CommandPalette.ID, visible: true, contextElementsId: selectedElements })];
        }
        return [];
    }
}
exports.CommandPaletteKeyListener = CommandPaletteKeyListener;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/command-palette/di.config.js":
/*!*************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/command-palette/di.config.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const action_providers_1 = __webpack_require__(/*! ./action-providers */ "../node_modules/sprotty/lib/features/command-palette/action-providers.js");
const command_palette_1 = __webpack_require__(/*! ./command-palette */ "../node_modules/sprotty/lib/features/command-palette/command-palette.js");
const commandPaletteModule = new inversify_1.ContainerModule((bind) => {
    bind(command_palette_1.CommandPalette).toSelf().inSingletonScope();
    bind(types_1.TYPES.IUIExtension).toService(command_palette_1.CommandPalette);
    bind(command_palette_1.CommandPaletteKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(command_palette_1.CommandPaletteKeyListener);
    bind(action_providers_1.CommandPaletteActionProviderRegistry).toSelf().inSingletonScope();
    bind(types_1.TYPES.ICommandPaletteActionProviderRegistry).toService(action_providers_1.CommandPaletteActionProviderRegistry);
});
exports["default"] = commandPaletteModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/context-menu/context-menu-service.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/context-menu/context-menu-service.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toAnchor = void 0;
function toAnchor(anchor) {
    return anchor instanceof HTMLElement ? { x: anchor.offsetLeft, y: anchor.offsetTop } : anchor;
}
exports.toAnchor = toAnchor;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/context-menu/di.config.js":
/*!**********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/context-menu/di.config.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const menu_providers_1 = __webpack_require__(/*! ./menu-providers */ "../node_modules/sprotty/lib/features/context-menu/menu-providers.js");
const mouse_listener_1 = __webpack_require__(/*! ./mouse-listener */ "../node_modules/sprotty/lib/features/context-menu/mouse-listener.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const contextMenuModule = new inversify_1.ContainerModule(bind => {
    bind(types_1.TYPES.IContextMenuServiceProvider).toProvider(ctx => {
        return () => {
            return new Promise((resolve, reject) => {
                if (ctx.container.isBound(types_1.TYPES.IContextMenuService)) {
                    resolve(ctx.container.get(types_1.TYPES.IContextMenuService));
                }
                else {
                    reject();
                }
            });
        };
    });
    bind(mouse_listener_1.ContextMenuMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(mouse_listener_1.ContextMenuMouseListener);
    bind(types_1.TYPES.IContextMenuProviderRegistry).to(menu_providers_1.ContextMenuProviderRegistry);
});
exports["default"] = contextMenuModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/context-menu/menu-providers.js":
/*!***************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/context-menu/menu-providers.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteContextMenuItemProvider = exports.ContextMenuProviderRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const delete_1 = __webpack_require__(/*! ../edit/delete */ "../node_modules/sprotty/lib/features/edit/delete.js");
const model_1 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
let ContextMenuProviderRegistry = class ContextMenuProviderRegistry {
    constructor(menuProviders = []) {
        this.menuProviders = menuProviders;
    }
    getItems(root, lastMousePosition) {
        const menues = this.menuProviders.map(provider => provider.getItems(root, lastMousePosition));
        return Promise.all(menues).then(this.flattenAndRestructure);
    }
    flattenAndRestructure(p) {
        let menuItems = p.reduce((acc, promise) => promise !== undefined ? acc.concat(promise) : acc, []);
        const menuItemsWithParentId = menuItems.filter(menuItem => menuItem.parentId);
        for (const menuItem of menuItemsWithParentId) {
            if (menuItem.parentId) {
                const fragments = menuItem.parentId.split('.');
                let matchingParent = undefined;
                let nextParents = menuItems;
                for (const fragment of fragments) {
                    matchingParent = nextParents.find(item => fragment === item.id);
                    if (matchingParent && matchingParent.children)
                        nextParents = matchingParent.children;
                }
                if (matchingParent) {
                    if (matchingParent.children) {
                        matchingParent.children.push(menuItem);
                    }
                    else {
                        matchingParent.children = [menuItem];
                    }
                    menuItems = menuItems.filter(item => item !== menuItem);
                }
            }
        }
        return menuItems;
    }
};
exports.ContextMenuProviderRegistry = ContextMenuProviderRegistry;
exports.ContextMenuProviderRegistry = ContextMenuProviderRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IContextMenuItemProvider)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], ContextMenuProviderRegistry);
let DeleteContextMenuItemProvider = class DeleteContextMenuItemProvider {
    getItems(root, lastMousePosition) {
        const selectedElements = Array.from(root.index.all().filter(model_1.isSelected).filter(delete_1.isDeletable));
        return Promise.resolve([
            {
                id: 'delete',
                label: 'Delete',
                sortString: 'd',
                group: 'edit',
                actions: [sprotty_protocol_1.DeleteElementAction.create(selectedElements.map(e => e.id))],
                isEnabled: () => selectedElements.length > 0
            }
        ]);
    }
};
exports.DeleteContextMenuItemProvider = DeleteContextMenuItemProvider;
exports.DeleteContextMenuItemProvider = DeleteContextMenuItemProvider = __decorate([
    (0, inversify_1.injectable)()
], DeleteContextMenuItemProvider);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/context-menu/mouse-listener.js":
/*!***************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/context-menu/mouse-listener.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContextMenuMouseListener = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const model_1 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const menu_providers_1 = __webpack_require__(/*! ./menu-providers */ "../node_modules/sprotty/lib/features/context-menu/menu-providers.js");
let ContextMenuMouseListener = class ContextMenuMouseListener extends mouse_tool_1.MouseListener {
    constructor(contextMenuService, menuProvider) {
        super();
        this.contextMenuService = contextMenuService;
        this.menuProvider = menuProvider;
    }
    contextMenu(target, event) {
        this.showContextMenu(target, event);
        return [];
    }
    async showContextMenu(target, event) {
        let menuService;
        try {
            menuService = await this.contextMenuService();
        }
        catch (rejected) {
            // IContextMenuService is not bound => do nothing
            return;
        }
        let isTargetSelected = false;
        const selectableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_1.isSelectable);
        if (selectableTarget) {
            isTargetSelected = selectableTarget.selected;
            selectableTarget.selected = true;
        }
        const root = target.root;
        const mousePosition = { x: event.x, y: event.y };
        if (target.id === root.id || (0, model_1.isSelected)(selectableTarget)) {
            const menuItems = await this.menuProvider.getItems(root, mousePosition);
            const restoreSelection = () => { if (selectableTarget)
                selectableTarget.selected = isTargetSelected; };
            menuService.show(menuItems, mousePosition, restoreSelection);
        }
        else {
            if ((0, model_1.isSelectable)(target)) {
                const options = { selectedElementsIDs: [target.id], deselectedElementsIDs: Array.from(root.index.all().filter(model_1.isSelected), (val) => { return val.id; }) };
                await this.actionDispatcher.dispatch(actions_1.SelectAction.create(options));
            }
            const items = await this.menuProvider.getItems(root, mousePosition);
            menuService.show(items, mousePosition);
        }
    }
};
exports.ContextMenuMouseListener = ContextMenuMouseListener;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ContextMenuMouseListener.prototype, "actionDispatcher", void 0);
exports.ContextMenuMouseListener = ContextMenuMouseListener = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.IContextMenuServiceProvider)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.IContextMenuProviderRegistry)),
    __metadata("design:paramtypes", [Function, menu_providers_1.ContextMenuProviderRegistry])
], ContextMenuMouseListener);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/decoration/decoration-placer.js":
/*!****************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/decoration/decoration-placer.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DecorationPlacer = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/decoration/model.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const model_2 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_3 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
let DecorationPlacer = class DecorationPlacer {
    decorate(vnode, element) {
        if ((0, model_1.isDecoration)(element)) {
            const position = this.getPosition(element);
            const translate = 'translate(' + position.x + ', ' + position.y + ')';
            (0, vnode_utils_1.setAttr)(vnode, 'transform', translate);
        }
        return vnode;
    }
    getPosition(element) {
        if (element instanceof smodel_1.SChildElementImpl && element.parent instanceof model_3.SRoutableElementImpl) {
            const route = this.edgeRouterRegistry.route(element.parent);
            if (route.length > 1) {
                const index = Math.floor(0.5 * (route.length - 1));
                const offset = (0, model_2.isSizeable)(element)
                    ? {
                        x: -0.5 * element.bounds.width,
                        y: -0.5 * element.bounds.width
                    }
                    : sprotty_protocol_1.Point.ORIGIN;
                return {
                    x: 0.5 * (route[index].x + route[index + 1].x) + offset.x,
                    y: 0.5 * (route[index].y + route[index + 1].y) + offset.y
                };
            }
        }
        if ((0, model_2.isSizeable)(element))
            return {
                x: -0.666 * element.bounds.width,
                y: -0.666 * element.bounds.height
            };
        return sprotty_protocol_1.Point.ORIGIN;
    }
    postUpdate() {
    }
};
exports.DecorationPlacer = DecorationPlacer;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], DecorationPlacer.prototype, "edgeRouterRegistry", void 0);
exports.DecorationPlacer = DecorationPlacer = __decorate([
    (0, inversify_1.injectable)()
], DecorationPlacer);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/decoration/di.config.js":
/*!********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/decoration/di.config.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const view_1 = __webpack_require__(/*! ../../base/views/view */ "../node_modules/sprotty/lib/base/views/view.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/decoration/model.js");
const views_1 = __webpack_require__(/*! ./views */ "../node_modules/sprotty/lib/features/decoration/views.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const decoration_placer_1 = __webpack_require__(/*! ./decoration-placer */ "../node_modules/sprotty/lib/features/decoration/decoration-placer.js");
const decorationModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, view_1.configureModelElement)({ bind, isBound }, 'marker', model_1.SIssueMarkerImpl, views_1.IssueMarkerView);
    bind(decoration_placer_1.DecorationPlacer).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(decoration_placer_1.DecorationPlacer);
});
exports["default"] = decorationModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/decoration/model.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/decoration/model.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SIssue = exports.SIssueMarker = exports.SIssueMarkerImpl = exports.SDecoration = exports.isDecoration = exports.decorationFeature = void 0;
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../hover/model */ "../node_modules/sprotty/lib/features/hover/model.js");
exports.decorationFeature = Symbol('decorationFeature');
function isDecoration(e) {
    return e.hasFeature(exports.decorationFeature);
}
exports.isDecoration = isDecoration;
class SDecoration extends model_1.SShapeElementImpl {
}
exports.SDecoration = SDecoration;
SDecoration.DEFAULT_FEATURES = [exports.decorationFeature, model_1.boundsFeature, model_2.hoverFeedbackFeature, model_2.popupFeature];
class SIssueMarkerImpl extends SDecoration {
}
exports.SIssueMarkerImpl = SIssueMarkerImpl;
/** @deprecated Use SIssueMarkerImpl instead. */
exports.SIssueMarker = SIssueMarkerImpl;
/**
 * @deprecated Use the definition from `sprotty-protocol` instead.
 */
class SIssue {
}
exports.SIssue = SIssue;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/decoration/views.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/decoration/views.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IssueMarkerView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "../node_modules/sprotty/lib/lib/jsx.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let IssueMarkerView = class IssueMarkerView {
    render(marker, context) {
        const scale = 16 / 1792;
        const trafo = `scale(${scale}, ${scale})`;
        const maxSeverity = this.getMaxSeverity(marker);
        const group = (0, jsx_1.svg)("g", { "class-sprotty-issue": true },
            (0, jsx_1.svg)("g", { transform: trafo },
                (0, jsx_1.svg)("path", { d: this.getPath(maxSeverity) })));
        (0, vnode_utils_1.setClass)(group, 'sprotty-' + maxSeverity, true);
        return group;
    }
    getMaxSeverity(marker) {
        let currentSeverity = 'info';
        for (const severity of marker.issues.map(s => s.severity)) {
            if (severity === 'error' || (severity === 'warning' && currentSeverity === 'info'))
                currentSeverity = severity;
        }
        return currentSeverity;
    }
    getPath(severity) {
        switch (severity) {
            case 'error':
            case 'warning':
                // eslint-disable-next-line max-len
                return "M768 128q209 0 385.5 103t279.5 279.5 103 385.5-103 385.5-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103zm128 1247v-190q0-14-9-23.5t-22-9.5h-192q-13 0-23 10t-10 23v190q0 13 10 23t23 10h192q13 0 22-9.5t9-23.5zm-2-344l18-621q0-12-10-18-10-8-24-8h-220q-14 0-24 8-10 6-10 18l17 621q0 10 10 17.5t24 7.5h185q14 0 23.5-7.5t10.5-17.5z";
            case 'info':
                // eslint-disable-next-line max-len
                return "M1024 1376v-160q0-14-9-23t-23-9h-96v-512q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v160q0 14 9 23t23 9h96v320h-96q-14 0-23 9t-9 23v160q0 14 9 23t23 9h448q14 0 23-9t9-23zm-128-896v-160q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v160q0 14 9 23t23 9h192q14 0 23-9t9-23zm640 416q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z";
        }
    }
};
exports.IssueMarkerView = IssueMarkerView;
exports.IssueMarkerView = IssueMarkerView = __decorate([
    (0, inversify_1.injectable)()
], IssueMarkerView);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-intersection/di.config.js":
/*!***************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-intersection/di.config.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const intersection_finder_1 = __webpack_require__(/*! ../edge-intersection/intersection-finder */ "../node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js");
const edgeIntersectionModule = new inversify_1.ContainerModule(bind => {
    bind(intersection_finder_1.IntersectionFinder).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRoutePostprocessor).toService(intersection_finder_1.IntersectionFinder);
});
exports["default"] = edgeIntersectionModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntersectionFinder = exports.BY_DESCENDING_X_THEN_DESCENDING_Y = exports.BY_X_THEN_DESCENDING_Y = exports.BY_DESCENDING_X_THEN_Y = exports.BY_X_THEN_Y = exports.isIntersectingRoutedPoint = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const tinyqueue_1 = __importDefault(__webpack_require__(/*! tinyqueue */ "../node_modules/tinyqueue/index.js"));
const sweepline_1 = __webpack_require__(/*! ./sweepline */ "../node_modules/sprotty/lib/features/edge-intersection/sweepline.js");
function isIntersectingRoutedPoint(routedPoint) {
    return routedPoint !== undefined && 'intersections' in routedPoint && 'kind' in routedPoint;
}
exports.isIntersectingRoutedPoint = isIntersectingRoutedPoint;
const BY_X_THEN_Y = (a, b) => {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return a.intersectionPoint.y - b.intersectionPoint.y;
    }
    return a.intersectionPoint.x - b.intersectionPoint.x;
};
exports.BY_X_THEN_Y = BY_X_THEN_Y;
const BY_DESCENDING_X_THEN_Y = (a, b) => {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return a.intersectionPoint.y - b.intersectionPoint.y;
    }
    return b.intersectionPoint.x - a.intersectionPoint.x;
};
exports.BY_DESCENDING_X_THEN_Y = BY_DESCENDING_X_THEN_Y;
const BY_X_THEN_DESCENDING_Y = (a, b) => {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return b.intersectionPoint.y - a.intersectionPoint.y;
    }
    return a.intersectionPoint.x - b.intersectionPoint.x;
};
exports.BY_X_THEN_DESCENDING_Y = BY_X_THEN_DESCENDING_Y;
const BY_DESCENDING_X_THEN_DESCENDING_Y = (a, b) => {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return b.intersectionPoint.y - a.intersectionPoint.y;
    }
    return b.intersectionPoint.x - a.intersectionPoint.x;
};
exports.BY_DESCENDING_X_THEN_DESCENDING_Y = BY_DESCENDING_X_THEN_DESCENDING_Y;
/**
 * Finds intersections among edges and updates routed points to reflect those intersections.
 *
 * This only yields correct intersections among straight line segments and doesn't work with bezier curves.
 */
let IntersectionFinder = class IntersectionFinder {
    /**
     * Finds all intersections in the specified `routing` and replaces the `RoutedPoints` that are
     * intersecting by adding intersection information to routing points (@see `IntersectingRoutedPoints`).
     * @param routing the edge routing to find intersections for and update.
     */
    apply(routing) {
        const intersections = this.find(routing);
        this.addToRouting(intersections, routing);
    }
    /**
     * Finds the intersections in the specified `routing` and returns them.
     * @param routing the edge routing to find intersections for and update.
     * @returns the identified intersections.
     */
    find(routing) {
        const eventQueue = new tinyqueue_1.default(undefined, sweepline_1.checkWhichEventIsLeft);
        routing.routes.forEach((route, routeId) => {
            if (this.isSupportedRoute(route)) {
                (0, sweepline_1.addRoute)(routeId, route, eventQueue);
            }
        });
        return (0, sweepline_1.runSweep)(eventQueue);
    }
    /**
     * Specifies whether or not a specific route should be included in this intersection search or not.
     *
     * As this intersection finder only supports linear line segments, this method only returns `true`
     * for routes that only contain routed points, which are either 'source', 'target' or 'linear'.
     */
    isSupportedRoute(route) {
        return route.find(point => point.kind !== 'source' && point.kind !== 'target' && point.kind !== 'linear') === undefined;
    }
    addToRouting(intersections, routing) {
        for (const intersection of intersections) {
            const routable1 = routing.get(intersection.routable1);
            const routable2 = routing.get(intersection.routable2);
            this.addIntersectionToRoutedPoint(intersection, routable1, intersection.segmentIndex1);
            this.addIntersectionToRoutedPoint(intersection, routable2, intersection.segmentIndex2);
        }
    }
    addIntersectionToRoutedPoint(intersection, routedPoint, segmentIndex) {
        if (routedPoint && routedPoint.length > segmentIndex) {
            const segment = routedPoint[segmentIndex + 1];
            if (isIntersectingRoutedPoint(segment)) {
                segment.intersections.push(intersection);
            }
            else {
                const intersectingRoutedPoint = Object.assign(Object.assign({}, segment), { intersections: [intersection] });
                routedPoint[segmentIndex + 1] = intersectingRoutedPoint;
            }
        }
    }
};
exports.IntersectionFinder = IntersectionFinder;
exports.IntersectionFinder = IntersectionFinder = __decorate([
    (0, inversify_1.injectable)()
], IntersectionFinder);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-intersection/sweepline.js":
/*!***************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-intersection/sweepline.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.intersectionOfSegments = exports.getSegmentIndex = exports.checkWhichSegmentHasRightEndpointFirst = exports.runSweep = exports.Segment = exports.SweepEvent = exports.checkWhichEventIsLeft = exports.addRoute = void 0;
/********************************************************************************
 * Copyright (c) 2019 Rowan Winsemius and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
// Based on the sweepline implementation at https://github.com/rowanwins/sweepline-intersections
// which is published under the terms of MIT, but has been adapted to the use case of sprotty.
const tinyqueue_1 = __importDefault(__webpack_require__(/*! tinyqueue */ "../node_modules/tinyqueue/index.js"));
const geometry_1 = __webpack_require__(/*! ../../utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js");
/*
 * The algorithm implemented in this module is loosely based on the Bentley-Ottmann algorithm for
 * finding intersection among line segments in `O((n+k) log n)`, whereas `n` is the number of line
 * segments and `k` is the number of intersections.
 * The underlying idea is to use a imaginary sweep line that moves over the x/y plane and testing
 * only the line segments for intersection that the sweepline currently crosses, instead of
 * testing all segment with each other, which would be `O(n^2)`.
 * It does so by generating a prioritized event queue for start and end events of the line segments
 * and working its way through the queue (i.e., sweeping).
 * More information can be found at https://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm
 * In contrast to the original Bently-Ottmann algorithm, the implementation below does not use a tree
 * data structure to store the segments in order to simplify the implementation.
 * See also https://github.com/rowanwins/sweepline-intersections#algorithm-notes
 */
/**
 * Add the specified `route` to the event `queue` from left to right.
 * @param routeId id of the route.
 * @param route the route as array of points.
 * @param queue the queue to add the route to.
 */
function addRoute(routeId, route, queue) {
    if (route.length < 1)
        return;
    let currentPoint = route[0];
    let nextPoint = undefined;
    for (let i = 0; i < route.length - 1; i++) {
        nextPoint = route[i + 1];
        const e1 = new SweepEvent(routeId, currentPoint, i);
        const e2 = new SweepEvent(routeId, nextPoint, i + 1);
        e1.otherEvent = e2;
        e2.otherEvent = e1;
        if (checkWhichEventIsLeft(e1, e2) > 0) {
            e2.isLeftEndpoint = true;
            e1.isLeftEndpoint = false;
        }
        else {
            e1.isLeftEndpoint = true;
            e2.isLeftEndpoint = false;
        }
        queue.push(e1);
        queue.push(e2);
        currentPoint = nextPoint;
    }
}
exports.addRoute = addRoute;
/**
 * Returns which of the two events is left.
 * This is used to classify the endpoints of a segment when generating the
 * event queue.
 */
function checkWhichEventIsLeft(e1, e2) {
    if (e1.point.x > e2.point.x)
        return 1;
    if (e1.point.x < e2.point.x)
        return -1;
    if (e1.point.y !== e2.point.y)
        return e1.point.y > e2.point.y ? 1 : -1;
    return 1;
}
exports.checkWhichEventIsLeft = checkWhichEventIsLeft;
/**
 * An event -- or with other words a start or end point of a segment -- in the context
 * of the event queue for the sweep.
 *
 * Stores the original Sprotty `edgeId` and the segment index of this segment in the edge
 * to keep track of which edge and segment this event originated from.
 */
class SweepEvent {
    constructor(edgeId, point, segmentIndex) {
        this.edgeId = edgeId;
        this.point = point;
        this.segmentIndex = segmentIndex;
    }
}
exports.SweepEvent = SweepEvent;
/**
 * A line segment consists of a start and a stop event.
 */
class Segment {
    constructor(event) {
        this.leftSweepEvent = event;
        this.rightSweepEvent = event.otherEvent;
    }
}
exports.Segment = Segment;
/**
 * Performs the main sweep algorithm on the specified event queue.
 *
 * An empty priority queue is created to store segments encountered.
 * An item is removed from the priority queue if the vertex is the left endpoint
 * of a segment, we test it against every other segment in the segment queue for
 * intersections with any intersection recorded. We then add the vertex (and it's
 * associated right endpoint) to the segment queue.
 * If we encounter a right endpoint we remove the first item from the segment queue.
 *
 * Each pair of segments are only tested once. And only segments that overlap on the
 * x plane are tested against each other.
 *
 * @param eventQueue the event queue.
 * @returns the identified intersections.
 */
function runSweep(eventQueue) {
    const intersectionPoints = [];
    const outQueue = new tinyqueue_1.default([], checkWhichSegmentHasRightEndpointFirst);
    while (eventQueue.length) {
        const event = eventQueue.pop();
        if (event === null || event === void 0 ? void 0 : event.isLeftEndpoint) {
            const segment = new Segment(event);
            for (let i = 0; i < outQueue.data.length; i++) {
                const otherSegment = outQueue.data[i];
                const intersection = intersectionOfSegments(segment, otherSegment);
                if (intersection) {
                    intersectionPoints.push({
                        routable1: event.edgeId,
                        routable2: otherSegment.leftSweepEvent.edgeId,
                        segmentIndex1: getSegmentIndex(segment),
                        segmentIndex2: getSegmentIndex(otherSegment),
                        intersectionPoint: intersection
                    });
                }
            }
            outQueue.push(segment);
        }
        else if ((event === null || event === void 0 ? void 0 : event.isLeftEndpoint) === false) {
            outQueue.pop();
        }
    }
    return intersectionPoints;
}
exports.runSweep = runSweep;
/**
 * Specifies which of the two specified segments has a right endpoint first.
 * Used as a comparator to sort the event queue.
 */
function checkWhichSegmentHasRightEndpointFirst(seg1, seg2) {
    if (seg1.rightSweepEvent.point.x > seg2.rightSweepEvent.point.x)
        return 1;
    if (seg1.rightSweepEvent.point.x < seg2.rightSweepEvent.point.x)
        return -1;
    if (seg1.rightSweepEvent.point.y !== seg2.rightSweepEvent.point.y)
        return seg1.rightSweepEvent.point.y < seg2.rightSweepEvent.point.y ? 1 : -1;
    return 1;
}
exports.checkWhichSegmentHasRightEndpointFirst = checkWhichSegmentHasRightEndpointFirst;
function getSegmentIndex(segment) {
    return Math.min(segment.leftSweepEvent.segmentIndex, segment.rightSweepEvent.segmentIndex);
}
exports.getSegmentIndex = getSegmentIndex;
/**
 * Tests whether two segments intersect and returns the intersection point if existing.
 */
function intersectionOfSegments(seg1, seg2) {
    if (seg1.leftSweepEvent.edgeId === seg2.leftSweepEvent.edgeId) {
        return undefined;
    }
    const seg1Line = new geometry_1.PointToPointLine(seg1.leftSweepEvent.point, seg1.rightSweepEvent.point);
    const seg2Line = new geometry_1.PointToPointLine(seg2.leftSweepEvent.point, seg2.rightSweepEvent.point);
    return seg1Line.intersection(seg2Line);
}
exports.intersectionOfSegments = intersectionOfSegments;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-junction/di.config.js":
/*!***********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-junction/di.config.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const junction_finder_1 = __webpack_require__(/*! ./junction-finder */ "../node_modules/sprotty/lib/features/edge-junction/junction-finder.js");
const junction_postprocessor_1 = __webpack_require__(/*! ./junction-postprocessor */ "../node_modules/sprotty/lib/features/edge-junction/junction-postprocessor.js");
const edgeJunctionModule = new inversify_1.ContainerModule(bind => {
    bind(junction_finder_1.JunctionFinder).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRoutePostprocessor).toService(junction_finder_1.JunctionFinder);
    bind(junction_postprocessor_1.JunctionPostProcessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(junction_postprocessor_1.JunctionPostProcessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(junction_postprocessor_1.JunctionPostProcessor);
});
exports["default"] = edgeJunctionModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-junction/junction-finder.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-junction/junction-finder.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JunctionFinder = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sgraph_1 = __webpack_require__(/*! ../../graph/sgraph */ "../node_modules/sprotty/lib/graph/sgraph.js");
/**
 * Finds junction points in the edge routes. A junction point is a point where two or more edges split.
 * This excludes the source and target points of the edges.
 *
 * Only works with straight line segments.
 */
let JunctionFinder = class JunctionFinder {
    constructor() {
        /** Map of edges as SEdgeImpl for faster lookup by id */
        this.edgesMap = new Map();
        /** Map of unique edges ids with the same source */
        this.sourcesMap = new Map();
        /** Map of unique edges ids with the same target */
        this.targetsMap = new Map();
    }
    apply(routing, parent) {
        this.findJunctions(routing, parent);
    }
    findJunctions(routing, parent) {
        // gather all edges from the parent
        const edges = Array.from(parent.index.all().filter(child => child instanceof sgraph_1.SEdgeImpl));
        // populate the maps for faster lookup
        edges.forEach(edge => {
            this.edgesMap.set(edge.id, edge);
            const sameSources = this.sourcesMap.get(edge.sourceId);
            if (sameSources) {
                sameSources.add(edge.id);
            }
            else {
                this.sourcesMap.set(edge.sourceId, new Set([edge.id]));
            }
            const sameTargets = this.targetsMap.get(edge.targetId);
            if (sameTargets) {
                sameTargets.add(edge.id);
            }
            else {
                this.targetsMap.set(edge.targetId, new Set([edge.id]));
            }
        });
        routing.routes.forEach((route, routeId) => {
            // for each route we find the corresponding edge from the edges map by matching the route id and the edge id
            const edge = this.edgesMap.get(routeId);
            if (!edge) {
                return;
            }
            // find the junction points for edges with the same source
            this.findJunctionPointsWithSameSource(edge, route, routing);
            // find the junction points for edges with the same target
            this.findJunctionPointsWithSameTarget(edge, route, routing);
        });
    }
    /**
     * Finds the junction points of routes with the same source
     */
    findJunctionPointsWithSameSource(edge, route, routing) {
        // get an array of edge/route ids with the same source as the current edge, excluding the current edge
        const sourcesSet = this.sourcesMap.get(edge.sourceId);
        if (!sourcesSet) {
            return;
        }
        const otherRoutesIds = Array.from(sourcesSet).filter(id => id !== edge.id);
        const otherRoutes = otherRoutesIds.map(id => routing.get(id)).filter(r => r !== undefined);
        for (const otherRoute of otherRoutes) {
            // finds the index where the two routes diverge
            const junctionIndex = this.getJunctionIndex(route, otherRoute);
            // if no junction point has been found (i.e. the routes are identical)
            // or if the junction point is the first point of the routes (i.e the routes diverge at the source)
            // we can skip this route
            if (junctionIndex === -1 || junctionIndex === 0) {
                continue;
            }
            this.setJunctionPoints(route, otherRoute, junctionIndex);
        }
    }
    /**
     * Finds the junction points of routes with the same target
     */
    findJunctionPointsWithSameTarget(edge, route, routing) {
        // get an array of edge/route ids with the same target as the current edge, excluding the current edge
        const targetsSet = this.targetsMap.get(edge.targetId);
        if (!targetsSet) {
            return;
        }
        const otherRoutesIds = Array.from(targetsSet).filter(id => id !== edge.id);
        const otherRoutes = otherRoutesIds.map(id => routing.get(id)).filter(r => r !== undefined);
        // we reverse the route so that the target is considered the source for the algorithm
        route.reverse();
        for (const otherRoute of otherRoutes) {
            // we reverse the other route so that the target is considered the source for the algorithm
            otherRoute.reverse();
            // finds the index where the two routes diverge
            const junctionIndex = this.getJunctionIndex(route, otherRoute);
            // if no junction point has been found (i.e. the routes are identical)
            // or if the junction point is the first point of the routes (i.e the routes diverge at the source)
            // we can skip this route
            if (junctionIndex === -1 || junctionIndex === 0) {
                continue;
            }
            this.setJunctionPoints(route, otherRoute, junctionIndex);
            // we reverse the other route back to its original order
            otherRoute.reverse();
        }
        // we reverse the route back to their original order
        route.reverse();
    }
    /**
     * Set the junction points of two routes according to the segments direction.
     * If the segments have different directions, the junction point is the previous common point.
     * If the segments have the same direction, the junction point is the point with the greatest or lowest value axis value depending on the direction.
     */
    setJunctionPoints(route, otherRoute, junctionIndex) {
        const firstSegmentDirection = this.getSegmentDirection(route[junctionIndex - 1], route[junctionIndex]);
        const secondSegmentDirection = this.getSegmentDirection(otherRoute[junctionIndex - 1], otherRoute[junctionIndex]);
        // if the two segments have different directions, then the previous common point is the junction point
        if (firstSegmentDirection !== secondSegmentDirection) {
            this.setPreviousPointAsJunction(route, otherRoute, junctionIndex);
        }
        else { // the two segments have the same direction
            if (firstSegmentDirection === 'left' || firstSegmentDirection === 'right') {
                // if the segments are going horizontally, but their y values are different, then the previous common point is the junction point
                if (route[junctionIndex].y !== otherRoute[junctionIndex].y) {
                    this.setPreviousPointAsJunction(route, otherRoute, junctionIndex);
                    return;
                }
                // depending on the direction, the junction point is the point with the greatest or lowest x value
                route[junctionIndex].isJunction = firstSegmentDirection === 'left' ?
                    route[junctionIndex].x > otherRoute[junctionIndex].x
                    : route[junctionIndex].x < otherRoute[junctionIndex].x;
                otherRoute[junctionIndex].isJunction = firstSegmentDirection === 'left' ?
                    otherRoute[junctionIndex].x > route[junctionIndex].x
                    : otherRoute[junctionIndex].x < route[junctionIndex].x;
            }
            else {
                // if the segments are going vertically, but their x values are different, then the previous common point is the junction point
                if (route[junctionIndex].x !== otherRoute[junctionIndex].x) {
                    this.setPreviousPointAsJunction(route, otherRoute, junctionIndex);
                    return;
                }
                // depending on the direction, the junction point is the point with the greatest or lowest y value
                route[junctionIndex].isJunction = firstSegmentDirection === 'up' ?
                    route[junctionIndex].y > otherRoute[junctionIndex].y
                    : route[junctionIndex].y < otherRoute[junctionIndex].y;
                otherRoute[junctionIndex].isJunction = firstSegmentDirection === 'up' ?
                    otherRoute[junctionIndex].y > route[junctionIndex].y
                    : otherRoute[junctionIndex].y < route[junctionIndex].y;
            }
        }
    }
    /**
     * Set the previous point as a junction point.
     * This is used when two segments have the same direction but the other axis is different.
     * For example if the routes are going in opposite directions, or if the route don't split orthogonally.
     */
    setPreviousPointAsJunction(route, sameSourceRoute, junctionIndex) {
        route[junctionIndex - 1].isJunction = true;
        sameSourceRoute[junctionIndex - 1].isJunction = true;
    }
    /**
     * Get the main direction of a segment.
     * The main direction is the axis with the greatest difference between the two points.
     */
    getSegmentDirection(firstPoint, secondPoint) {
        const dX = secondPoint.x - firstPoint.x;
        const dY = secondPoint.y - firstPoint.y;
        let mainDirection = 'horizontal';
        if (Math.abs(dX) < Math.abs(dY)) {
            mainDirection = 'vertical';
        }
        if (mainDirection === 'horizontal') {
            if (dX > 0) {
                return 'right';
            }
            else {
                return 'left';
            }
        }
        else {
            if (dY > 0) {
                return 'down';
            }
            else {
                return 'up';
            }
        }
    }
    /**
     * Finds the index where two routes diverge.
     * Returns -1 if no divergence can be found.
     */
    getJunctionIndex(firstRoute, secondRoute) {
        let idx = 0;
        while (idx < firstRoute.length && idx < secondRoute.length) {
            if (firstRoute[idx].x !== secondRoute[idx].x
                || firstRoute[idx].y !== secondRoute[idx].y) {
                return idx;
            }
            idx++;
        }
        return -1;
    }
};
exports.JunctionFinder = JunctionFinder;
exports.JunctionFinder = JunctionFinder = __decorate([
    (0, inversify_1.injectable)()
], JunctionFinder);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-junction/junction-postprocessor.js":
/*!************************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-junction/junction-postprocessor.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JunctionPostProcessor = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const model_source_1 = __webpack_require__(/*! ../../model-source/model-source */ "../node_modules/sprotty/lib/model-source/model-source.js");
/**
 * Finds all junction points in the first SVG group element (diagram root level) and moves them to the end of the SVG.
 * This ensures that junction points are rendered on top of all other elements.
 */
let JunctionPostProcessor = class JunctionPostProcessor {
    constructor() {
        this.isFirstRender = true;
    }
    decorate(vnode, element) {
        return vnode;
    }
    postUpdate(cause) {
        // if the model has changed, we need to remove the junction points from the previous model
        if (this.currentModel !== this.modelSource.model) {
            this.isFirstRender = true;
        }
        // if the cause of the update is a RequestBoundsAction (from the hidden model)
        // and we are rendering the diagram for the first time (not from an update or setting the same model again)
        // we need to remove the junction points from the previous model
        if ((cause === null || cause === void 0 ? void 0 : cause.kind) === sprotty_protocol_1.RequestBoundsAction.KIND && this.isFirstRender) {
            const junctionPointsInHiddenDiv = document.querySelectorAll(`#${this.viewerOptions.hiddenDiv} > svg > g > g.sprotty-junction`);
            junctionPointsInHiddenDiv.forEach(e => e.remove());
            const junctionPointsInBaseDiv = document.querySelectorAll(`#${this.viewerOptions.baseDiv} > svg > g > g.sprotty-junction`);
            junctionPointsInBaseDiv.forEach(e => e.remove());
        }
        const hiddenSvg = document.querySelector(`#${this.viewerOptions.hiddenDiv} > svg > g`);
        const baseSvg = document.querySelector(`#${this.viewerOptions.baseDiv} > svg > g`);
        // move junction points to the end of the SVG in the hidden div
        if (hiddenSvg) {
            const junctionGroups = Array.from(document.querySelectorAll(`#${this.viewerOptions.hiddenDiv} > svg > g > g > g.sprotty-junction`));
            junctionGroups.forEach(junctionGroup => {
                junctionGroup.remove();
            });
            hiddenSvg.append(...junctionGroups);
        }
        // move junction points to the end of the SVG in the base div
        if (baseSvg) {
            const junctionGroups = Array.from(document.querySelectorAll(`#${this.viewerOptions.baseDiv} > svg > g > g > g.sprotty-junction`));
            junctionGroups.forEach(junctionGroup => {
                junctionGroup.remove();
            });
            baseSvg.append(...junctionGroups);
        }
        // update the current model
        this.currentModel = this.modelSource.model;
        // after the first render, we don't need to remove the junction points anymore
        this.isFirstRender = false;
    }
};
exports.JunctionPostProcessor = JunctionPostProcessor;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], JunctionPostProcessor.prototype, "viewerOptions", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ModelSource),
    __metadata("design:type", model_source_1.ModelSource)
], JunctionPostProcessor.prototype, "modelSource", void 0);
exports.JunctionPostProcessor = JunctionPostProcessor = __decorate([
    (0, inversify_1.injectable)()
], JunctionPostProcessor);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-layout/di.config.js":
/*!*********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-layout/di.config.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const edge_layout_1 = __webpack_require__(/*! ./edge-layout */ "../node_modules/sprotty/lib/features/edge-layout/edge-layout.js");
const edgeLayoutModule = new inversify_1.ContainerModule(bind => {
    bind(edge_layout_1.EdgeLayoutPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(edge_layout_1.EdgeLayoutPostprocessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(edge_layout_1.EdgeLayoutPostprocessor);
});
exports["default"] = edgeLayoutModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-layout/edge-layout.js":
/*!***********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-layout/edge-layout.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EdgeLayoutPostprocessor = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const sgraph_1 = __webpack_require__(/*! ../../graph/sgraph */ "../node_modules/sprotty/lib/graph/sgraph.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/edge-layout/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const model_3 = __webpack_require__(/*! ../move/model */ "../node_modules/sprotty/lib/features/move/model.js");
let EdgeLayoutPostprocessor = class EdgeLayoutPostprocessor {
    /**
     * Decorates the vnode with the appropriate transformation based on the element's placement and bounds.
     * @param vnode - The vnode to decorate.
     * @param element - The SModelElementImpl to decorate.
     * @returns The decorated vnode.
     */
    decorate(vnode, element) {
        var _a, _b, _c, _d;
        if ((0, model_2.isEdgeLayoutable)(element) && element.parent instanceof sgraph_1.SEdgeImpl) {
            if (element.bounds !== geometry_1.Bounds.EMPTY) {
                const actualBounds = element.bounds;
                const hasOwnPlacement = (0, model_2.checkEdgePlacement)(element);
                const placement = this.getEdgePlacement(element);
                const edge = element.parent;
                const position = Math.min(1, Math.max(0, placement.position));
                const router = this.edgeRouterRegistry.get(edge.routerKind);
                // point on edge derived from edgePlacement.position
                const pointOnEdge = router.pointAt(edge, position);
                let transform = '';
                // get the relative position on segment. This can be later changed if the moveMode is set to 'edge'.
                let derivativeOnEdge = router.derivativeAt(edge, position);
                ;
                // Check if edgeplacement is set. If not the label is freely movable if movefeature is enabled for such labels.
                if (pointOnEdge) {
                    if (hasOwnPlacement) {
                        switch (placement.moveMode) {
                            case 'edge':
                                // Find orthogonal intersection point on edge and use it as the label's position
                                const orthogonalPoint = router.findOrthogonalIntersection(edge, geometry_1.Point.add(pointOnEdge, actualBounds));
                                if (orthogonalPoint) {
                                    derivativeOnEdge = orthogonalPoint.derivative;
                                    transform += `translate(${orthogonalPoint.point.x}, ${orthogonalPoint.point.y})`;
                                }
                                break;
                            case 'free':
                                // Calculation of potential free movement. Just add the actual bounds to the point on edge.
                                transform += `translate(${((_a = pointOnEdge === null || pointOnEdge === void 0 ? void 0 : pointOnEdge.x) !== null && _a !== void 0 ? _a : 0) + actualBounds.x}, ${((_b = pointOnEdge === null || pointOnEdge === void 0 ? void 0 : pointOnEdge.y) !== null && _b !== void 0 ? _b : 0) + actualBounds.y})`;
                                ;
                                break;
                            case 'none':
                                transform += `translate(${pointOnEdge.x}, ${pointOnEdge.y})`;
                                break;
                            default:
                                this.logger.error({}, 'No moveMode set for edge label. Skipping edge placement.');
                                break;
                        }
                        if (derivativeOnEdge) {
                            const angle = (0, geometry_1.toDegrees)(Math.atan2(derivativeOnEdge.y, derivativeOnEdge.x));
                            if (placement.rotate) {
                                let flippedAngle = angle;
                                // Flip angle if it exceeds 90 degrees
                                if (Math.abs(angle) > 90) {
                                    if (angle < 0)
                                        flippedAngle += 180;
                                    else if (angle > 0)
                                        flippedAngle -= 180;
                                }
                                transform += ` rotate(${flippedAngle})`;
                                // Get rotated alignment based on flipped angle
                                const alignment = this.getRotatedAlignment(element, placement, flippedAngle !== angle);
                                transform += ` translate(${alignment.x}, ${alignment.y})`;
                            }
                            else {
                                // Get alignment based on angle
                                const alignment = this.getAlignment(element, placement, angle);
                                transform += ` translate(${alignment.x}, ${alignment.y})`;
                            }
                        }
                    }
                    else {
                        // if the element is moveable and no placement is specified, the label is freely movable (i.e. moveMode = 'free').
                        // Otherwise it is fixed to its position (i.e. moveMode = 'none').
                        if ((0, model_3.isMoveable)(element)) {
                            transform += `translate(${((_c = pointOnEdge === null || pointOnEdge === void 0 ? void 0 : pointOnEdge.x) !== null && _c !== void 0 ? _c : 0) + actualBounds.x}, ${((_d = pointOnEdge === null || pointOnEdge === void 0 ? void 0 : pointOnEdge.y) !== null && _d !== void 0 ? _d : 0) + actualBounds.y})`;
                            ;
                        }
                        else {
                            transform += `translate(${pointOnEdge.x}, ${pointOnEdge.y})`;
                        }
                    }
                }
                (0, vnode_utils_1.setAttr)(vnode, 'transform', transform);
            }
        }
        return vnode;
    }
    getRotatedAlignment(element, placement, flip) {
        let x = (0, model_1.isAlignable)(element) ? element.alignment.x : 0;
        let y = (0, model_1.isAlignable)(element) ? element.alignment.y : 0;
        const bounds = element.bounds;
        if (placement.side === 'on')
            return { x: x - 0.5 * bounds.height, y: y - 0.5 * bounds.height };
        if (flip) {
            if (placement.position < 0.3333333)
                x -= bounds.width + placement.offset;
            else if (placement.position < 0.6666666)
                x -= 0.5 * bounds.width;
            else
                x += placement.offset;
            switch (placement.side) {
                case 'left':
                case 'bottom':
                    y -= placement.offset + bounds.height;
                    break;
                case 'right':
                case 'top':
                    y += placement.offset;
            }
        }
        else {
            if (placement.position < 0.3333333)
                x += placement.offset;
            else if (placement.position < 0.6666666)
                x -= 0.5 * bounds.width;
            else
                x -= bounds.width + placement.offset;
            switch (placement.side) {
                case 'right':
                case 'bottom':
                    y += -placement.offset - bounds.height;
                    break;
                case 'left':
                case 'top':
                    y += placement.offset;
            }
        }
        return { x, y };
    }
    getEdgePlacement(element) {
        let current = element;
        const allPlacements = [];
        while (current !== undefined) {
            const placement = current.edgePlacement;
            if (placement !== undefined)
                allPlacements.push(placement);
            if (current instanceof smodel_1.SChildElementImpl)
                current = current.parent;
            else
                break;
        }
        const edgePlacement = allPlacements.reverse().reduce((a, b) => { return Object.assign(Object.assign({}, a), b); }, model_2.DEFAULT_EDGE_PLACEMENT);
        if (!edgePlacement.moveMode) {
            edgePlacement.moveMode = (0, model_3.isMoveable)(element) ? 'edge' : 'none';
        }
        return edgePlacement;
    }
    getAlignment(label, placement, angle) {
        const bounds = label.bounds;
        const x = (0, model_1.isAlignable)(label) ? label.alignment.x - bounds.width : 0;
        const y = (0, model_1.isAlignable)(label) ? label.alignment.y - bounds.height : 0;
        if (placement.side === 'on') {
            return { x: x + 0.5 * bounds.width, y: y + 0.5 * bounds.height };
        }
        const quadrant = this.getQuadrant(angle);
        const midLeft = { x: placement.offset, y: y + 0.5 * bounds.height };
        const topLeft = { x: placement.offset, y: y + bounds.height + placement.offset };
        const topRight = { x: -bounds.width - placement.offset, y: y + bounds.height + placement.offset };
        const midRight = { x: -bounds.width - placement.offset, y: y + 0.5 * bounds.height };
        const bottomRight = { x: -bounds.width - placement.offset, y: y - placement.offset };
        const bottomLeft = { x: placement.offset, y: y - placement.offset };
        switch (placement.side) {
            case 'left':
                switch (quadrant.orientation) {
                    case 'west':
                        return geometry_1.Point.linear(topLeft, topRight, quadrant.position);
                    case 'north':
                        return geometry_1.Point.linear(topRight, bottomRight, quadrant.position);
                    case 'east':
                        return geometry_1.Point.linear(bottomRight, bottomLeft, quadrant.position);
                    case 'south':
                        return geometry_1.Point.linear(bottomLeft, topLeft, quadrant.position);
                }
                break;
            case 'right':
                switch (quadrant.orientation) {
                    case 'west':
                        return geometry_1.Point.linear(bottomRight, bottomLeft, quadrant.position);
                    case 'north':
                        return geometry_1.Point.linear(bottomLeft, topLeft, quadrant.position);
                    case 'east':
                        return geometry_1.Point.linear(topLeft, topRight, quadrant.position);
                    case 'south':
                        return geometry_1.Point.linear(topRight, bottomRight, quadrant.position);
                }
                break;
            case 'top':
                switch (quadrant.orientation) {
                    case 'west':
                        return geometry_1.Point.linear(bottomRight, bottomLeft, quadrant.position);
                    case 'north':
                        return this.linearFlip(bottomLeft, midLeft, midRight, bottomRight, quadrant.position);
                    case 'east':
                        return geometry_1.Point.linear(bottomRight, bottomLeft, quadrant.position);
                    case 'south':
                        return this.linearFlip(bottomLeft, midLeft, midRight, bottomRight, quadrant.position);
                }
                break;
            case 'bottom':
                switch (quadrant.orientation) {
                    case 'west':
                        return geometry_1.Point.linear(topLeft, topRight, quadrant.position);
                    case 'north':
                        return this.linearFlip(topRight, midRight, midLeft, topLeft, quadrant.position);
                    case 'east':
                        return geometry_1.Point.linear(topLeft, topRight, quadrant.position);
                    case 'south':
                        return this.linearFlip(topRight, midRight, midLeft, topLeft, quadrant.position);
                }
                break;
        }
        return { x: 0, y: 0 };
    }
    getQuadrant(angle) {
        if (Math.abs(angle) > 135)
            return { orientation: 'west', position: (angle > 0 ? angle - 135 : angle + 225) / 90 };
        else if (angle < -45)
            return { orientation: 'north', position: (angle + 135) / 90 };
        else if (angle < 45)
            return { orientation: 'east', position: (angle + 45) / 90 };
        else
            return { orientation: 'south', position: (angle - 45) / 90 };
    }
    linearFlip(p0, p1, p2, p3, position) {
        return position < 0.5 ? geometry_1.Point.linear(p0, p1, 2 * position) : geometry_1.Point.linear(p2, p3, 2 * position - 1);
    }
    postUpdate() { }
};
exports.EdgeLayoutPostprocessor = EdgeLayoutPostprocessor;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], EdgeLayoutPostprocessor.prototype, "edgeRouterRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], EdgeLayoutPostprocessor.prototype, "logger", void 0);
exports.EdgeLayoutPostprocessor = EdgeLayoutPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], EdgeLayoutPostprocessor);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edge-layout/model.js":
/*!*****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edge-layout/model.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_EDGE_PLACEMENT = exports.EdgePlacement = exports.checkEdgePlacement = exports.isEdgeLayoutable = exports.edgeLayoutFeature = void 0;
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
exports.edgeLayoutFeature = Symbol('edgeLayout');
function isEdgeLayoutable(element) {
    return element instanceof smodel_1.SChildElementImpl
        && element.parent instanceof model_2.SRoutableElementImpl
        && (0, model_1.isBoundsAware)(element)
        && element.hasFeature(exports.edgeLayoutFeature);
}
exports.isEdgeLayoutable = isEdgeLayoutable;
function checkEdgePlacement(element) {
    return 'edgePlacement' in element;
}
exports.checkEdgePlacement = checkEdgePlacement;
/**
 * @deprecated Use EdgePlacement from sprotty-protocol instead
 */
class EdgePlacement extends Object {
}
exports.EdgePlacement = EdgePlacement;
exports.DEFAULT_EDGE_PLACEMENT = {
    rotate: true,
    side: 'top',
    position: 0.5,
    offset: 7
};


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/create-on-drag.js":
/*!*******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/create-on-drag.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isCreatingOnDrag = exports.creatingOnDragFeature = void 0;
exports.creatingOnDragFeature = Symbol('creatingOnDragFeature');
function isCreatingOnDrag(element) {
    return element.hasFeature(exports.creatingOnDragFeature) && element.createAction !== undefined;
}
exports.isCreatingOnDrag = isCreatingOnDrag;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/create.js":
/*!***********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/create.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateElementCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
let CreateElementCommand = class CreateElementCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const container = context.root.index.getById(this.action.containerId);
        if (container instanceof smodel_1.SParentElementImpl) {
            this.container = container;
            this.newElement = context.modelFactory.createElement(this.action.elementSchema);
            this.container.add(this.newElement);
        }
        return context.root;
    }
    undo(context) {
        this.container.remove(this.newElement);
        return context.root;
    }
    redo(context) {
        this.container.add(this.newElement);
        return context.root;
    }
};
exports.CreateElementCommand = CreateElementCommand;
CreateElementCommand.KIND = actions_1.CreateElementAction.KIND;
exports.CreateElementCommand = CreateElementCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], CreateElementCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/delete.js":
/*!***********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/delete.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteElementCommand = exports.ResolvedDelete = exports.isDeletable = exports.deletableFeature = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
exports.deletableFeature = Symbol('deletableFeature');
function isDeletable(element) {
    return element instanceof smodel_1.SChildElementImpl && element.hasFeature(exports.deletableFeature);
}
exports.isDeletable = isDeletable;
class ResolvedDelete {
}
exports.ResolvedDelete = ResolvedDelete;
let DeleteElementCommand = class DeleteElementCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.resolvedDeletes = [];
    }
    execute(context) {
        const index = context.root.index;
        for (const id of this.action.elementIds) {
            const element = index.getById(id);
            if (element && isDeletable(element)) {
                this.resolvedDeletes.push({ child: element, parent: element.parent });
                element.parent.remove(element);
            }
        }
        return context.root;
    }
    undo(context) {
        for (const resolvedDelete of this.resolvedDeletes)
            resolvedDelete.parent.add(resolvedDelete.child);
        return context.root;
    }
    redo(context) {
        for (const resolvedDelete of this.resolvedDeletes)
            resolvedDelete.parent.remove(resolvedDelete.child);
        return context.root;
    }
};
exports.DeleteElementCommand = DeleteElementCommand;
DeleteElementCommand.KIND = actions_1.DeleteElementAction.KIND;
exports.DeleteElementCommand = DeleteElementCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], DeleteElementCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/di.config.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/di.config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.labelEditUiModule = exports.labelEditModule = exports.edgeEditModule = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const action_handler_1 = __webpack_require__(/*! ../../base/actions/action-handler */ "../node_modules/sprotty/lib/base/actions/action-handler.js");
const view_1 = __webpack_require__(/*! ../../base/views/view */ "../node_modules/sprotty/lib/base/views/view.js");
const model_1 = __webpack_require__(/*! ../../features/routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const svg_views_1 = __webpack_require__(/*! ../../lib/svg-views */ "../node_modules/sprotty/lib/lib/svg-views.js");
const delete_1 = __webpack_require__(/*! ./delete */ "../node_modules/sprotty/lib/features/edit/delete.js");
const edit_label_1 = __webpack_require__(/*! ./edit-label */ "../node_modules/sprotty/lib/features/edit/edit-label.js");
const edit_label_ui_1 = __webpack_require__(/*! ./edit-label-ui */ "../node_modules/sprotty/lib/features/edit/edit-label-ui.js");
const edit_routing_1 = __webpack_require__(/*! ./edit-routing */ "../node_modules/sprotty/lib/features/edit/edit-routing.js");
const reconnect_1 = __webpack_require__(/*! ./reconnect */ "../node_modules/sprotty/lib/features/edit/reconnect.js");
exports.edgeEditModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, command_registration_1.configureCommand)(context, edit_routing_1.SwitchEditModeCommand);
    (0, command_registration_1.configureCommand)(context, reconnect_1.ReconnectCommand);
    (0, command_registration_1.configureCommand)(context, delete_1.DeleteElementCommand);
    (0, view_1.configureModelElement)(context, 'dangling-anchor', model_1.SDanglingAnchorImpl, svg_views_1.EmptyGroupView);
});
exports.labelEditModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(edit_label_1.EditLabelMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(edit_label_1.EditLabelMouseListener);
    bind(edit_label_1.EditLabelKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(edit_label_1.EditLabelKeyListener);
    (0, command_registration_1.configureCommand)({ bind, isBound }, edit_label_1.ApplyLabelEditCommand);
});
exports.labelEditUiModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, action_handler_1.configureActionHandler)(context, edit_label_1.EditLabelAction.KIND, edit_label_ui_1.EditLabelActionHandler);
    bind(edit_label_ui_1.EditLabelUI).toSelf().inSingletonScope();
    bind(types_1.TYPES.IUIExtension).toService(edit_label_ui_1.EditLabelUI);
});


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/edit-label-ui.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/edit-label-ui.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EditLabelUI_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditLabelUI = exports.EditLabelActionHandler = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extensions/ui-extension */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension.js");
const ui_extension_registry_1 = __webpack_require__(/*! ../../base/ui-extensions/ui-extension-registry */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js");
const dom_helper_1 = __webpack_require__(/*! ../../base/views/dom-helper */ "../node_modules/sprotty/lib/base/views/dom-helper.js");
const commit_model_1 = __webpack_require__(/*! ../../model-source/commit-model */ "../node_modules/sprotty/lib/model-source/commit-model.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const zoom_1 = __webpack_require__(/*! ../viewport/zoom */ "../node_modules/sprotty/lib/features/viewport/zoom.js");
const edit_label_1 = __webpack_require__(/*! ./edit-label */ "../node_modules/sprotty/lib/features/edit/edit-label.js");
const model_2 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/edit/model.js");
/** Shows a UI extension for editing a label on emitted `EditLabelAction`s. */
let EditLabelActionHandler = class EditLabelActionHandler {
    handle(action) {
        if ((0, edit_label_1.isEditLabelAction)(action)) {
            return ui_extension_registry_1.SetUIExtensionVisibilityAction.create({ extensionId: EditLabelUI.ID, visible: true, contextElementsId: [action.labelId] });
        }
    }
};
exports.EditLabelActionHandler = EditLabelActionHandler;
exports.EditLabelActionHandler = EditLabelActionHandler = __decorate([
    (0, inversify_1.injectable)()
], EditLabelActionHandler);
let EditLabelUI = EditLabelUI_1 = class EditLabelUI extends ui_extension_1.AbstractUIExtension {
    constructor() {
        super(...arguments);
        this.validationTimeout = undefined;
        this.isActive = false;
        this.blockApplyEditOnInvalidInput = true;
        this.isCurrentLabelValid = true;
    }
    id() { return EditLabelUI_1.ID; }
    containerClass() { return 'label-edit'; }
    get labelId() { return this.label ? this.label.id : 'unknown'; }
    initializeContents(containerElement) {
        containerElement.style.position = 'absolute';
        this.inputElement = document.createElement('input');
        this.textAreaElement = document.createElement('textarea');
        [this.inputElement, this.textAreaElement].forEach((element) => {
            element.onkeydown = event => this.applyLabelEditOnEvent(event, 'Enter');
            this.configureAndAdd(element, containerElement);
        });
    }
    configureAndAdd(element, containerElement) {
        element.style.visibility = 'hidden';
        element.style.position = 'absolute';
        element.style.top = '0px';
        element.style.left = '0px';
        element.addEventListener('keydown', (event) => this.hideIfEscapeEvent(event));
        element.addEventListener('keyup', (event) => this.validateLabelIfContentChange(event, element.value));
        element.addEventListener('blur', () => window.setTimeout(() => this.applyLabelEdit(), 200));
        containerElement.appendChild(element);
    }
    get editControl() {
        if (this.label && this.label.isMultiLine) {
            return this.textAreaElement;
        }
        return this.inputElement;
    }
    hideIfEscapeEvent(event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            this.hide();
        }
    }
    applyLabelEditOnEvent(event, code, ...modifiers) {
        if ((0, keyboard_1.matchesKeystroke)(event, code ? code : 'Enter', ...modifiers)) {
            event.preventDefault();
            this.applyLabelEdit();
        }
    }
    validateLabelIfContentChange(event, value) {
        if (this.previousLabelContent === undefined || this.previousLabelContent !== value) {
            this.previousLabelContent = value;
            this.performLabelValidation(event, this.editControl.value);
        }
    }
    async applyLabelEdit() {
        var _a;
        if (!this.isActive) {
            return;
        }
        if (((_a = this.label) === null || _a === void 0 ? void 0 : _a.text) === this.editControl.value) {
            // no action necessary
            this.hide();
            return;
        }
        if (this.blockApplyEditOnInvalidInput) {
            const result = await this.validateLabel(this.editControl.value);
            if ('error' === result.severity) {
                this.editControl.focus();
                return;
            }
        }
        this.actionDispatcherProvider()
            .then((actionDispatcher) => actionDispatcher.dispatchAll([actions_1.ApplyLabelEditAction.create(this.labelId, this.editControl.value), commit_model_1.CommitModelAction.create()]))
            .catch((reason) => this.logger.error(this, 'No action dispatcher available to execute apply label edit action', reason));
        this.hide();
    }
    performLabelValidation(event, value) {
        if (this.validationTimeout) {
            window.clearTimeout(this.validationTimeout);
        }
        this.validationTimeout = window.setTimeout(() => this.validateLabel(value), 200);
    }
    async validateLabel(value) {
        if (this.labelValidator && this.label) {
            try {
                const result = await this.labelValidator.validate(value, this.label);
                this.isCurrentLabelValid = 'error' !== result.severity;
                this.showValidationResult(result);
                return result;
            }
            catch (reason) {
                this.logger.error(this, 'Error validating edited label', reason);
            }
        }
        this.isCurrentLabelValid = true;
        return { severity: 'ok', message: undefined };
    }
    showValidationResult(result) {
        this.clearValidationResult();
        if (this.validationDecorator) {
            this.validationDecorator.decorate(this.editControl, result);
        }
    }
    clearValidationResult() {
        if (this.validationDecorator) {
            this.validationDecorator.dispose(this.editControl);
        }
    }
    show(root, ...contextElementIds) {
        if (!hasEditableLabel(contextElementIds, root) || this.isActive) {
            return;
        }
        super.show(root, ...contextElementIds);
        this.isActive = true;
    }
    hide() {
        this.editControl.style.visibility = 'hidden';
        super.hide();
        this.clearValidationResult();
        this.isActive = false;
        this.isCurrentLabelValid = true;
        this.previousLabelContent = undefined;
        if (this.labelElement) {
            this.labelElement.style.visibility = 'visible';
        }
    }
    onBeforeShow(containerElement, root, ...contextElementIds) {
        this.label = getEditableLabels(contextElementIds, root)[0];
        this.previousLabelContent = this.label.text;
        this.setPosition(containerElement);
        this.applyTextContents();
        this.applyFontStyling();
        this.editControl.style.visibility = 'visible';
        this.editControl.focus();
    }
    setPosition(containerElement) {
        let x = 0;
        let y = 0;
        let width = 100;
        let height = 20;
        if (this.label) {
            const zoom = (0, zoom_1.getZoom)(this.label);
            const bounds = (0, model_1.getAbsoluteClientBounds)(this.label, this.domHelper, this.viewerOptions);
            x = bounds.x + (this.label.editControlPositionCorrection ? this.label.editControlPositionCorrection.x : 0) * zoom;
            y = bounds.y + (this.label.editControlPositionCorrection ? this.label.editControlPositionCorrection.y : 0) * zoom;
            height = (this.label.editControlDimension ? this.label.editControlDimension.height : height) * zoom;
            width = (this.label.editControlDimension ? this.label.editControlDimension.width : width) * zoom;
        }
        containerElement.style.left = `${x}px`;
        containerElement.style.top = `${y}px`;
        containerElement.style.width = `${width}px`;
        this.editControl.style.width = `${width}px`;
        containerElement.style.height = `${height}px`;
        this.editControl.style.height = `${height}px`;
    }
    applyTextContents() {
        if (this.label) {
            this.editControl.value = this.label.text;
            if (this.editControl instanceof HTMLTextAreaElement) {
                this.editControl.selectionStart = 0;
                this.editControl.selectionEnd = 0;
                this.editControl.scrollTop = 0;
                this.editControl.scrollLeft = 0;
            }
            else {
                this.editControl.setSelectionRange(0, this.editControl.value.length);
            }
        }
    }
    applyFontStyling() {
        if (this.label) {
            this.labelElement = document.getElementById(this.domHelper.createUniqueDOMElementId(this.label));
            if (this.labelElement) {
                this.labelElement.style.visibility = 'hidden';
                const style = window.getComputedStyle(this.labelElement);
                this.editControl.style.font = style.font;
                this.editControl.style.fontStyle = style.fontStyle;
                this.editControl.style.fontFamily = style.fontFamily;
                this.editControl.style.fontSize = scaledFont(style.fontSize, (0, zoom_1.getZoom)(this.label));
                this.editControl.style.fontWeight = style.fontWeight;
                this.editControl.style.lineHeight = style.lineHeight;
            }
        }
    }
};
exports.EditLabelUI = EditLabelUI;
EditLabelUI.ID = 'editLabelUi';
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcherProvider),
    __metadata("design:type", Function)
], EditLabelUI.prototype, "actionDispatcherProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], EditLabelUI.prototype, "viewerOptions", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.DOMHelper),
    __metadata("design:type", dom_helper_1.DOMHelper)
], EditLabelUI.prototype, "domHelper", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IEditLabelValidator),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], EditLabelUI.prototype, "labelValidator", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IEditLabelValidationDecorator),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], EditLabelUI.prototype, "validationDecorator", void 0);
exports.EditLabelUI = EditLabelUI = EditLabelUI_1 = __decorate([
    (0, inversify_1.injectable)()
], EditLabelUI);
function hasEditableLabel(contextElementIds, root) {
    return getEditableLabels(contextElementIds, root).length === 1;
}
function getEditableLabels(contextElementIds, root) {
    return contextElementIds.map(id => root.index.getById(id)).filter(model_2.isEditableLabel);
}
function scaledFont(font, zoom) {
    return font.replace(/\d+(\.\d+)?/, (match) => {
        return String(Number.parseInt(match, 10) * zoom);
    });
}


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/edit-label.js":
/*!***************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/edit-label.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getEditableLabel = exports.EditLabelKeyListener = exports.EditLabelMouseListener = exports.ApplyLabelEditCommand = exports.ResolvedLabelEdit = exports.isApplyLabelEditAction = exports.isEditLabelAction = exports.EditLabelAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js");
const model_1 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "../node_modules/sprotty/lib/utils/iterable.js");
const model_2 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/edit/model.js");
var EditLabelAction;
(function (EditLabelAction) {
    EditLabelAction.KIND = 'EditLabel';
    function create(labelId) {
        return {
            kind: EditLabelAction.KIND,
            labelId
        };
    }
    EditLabelAction.create = create;
})(EditLabelAction || (exports.EditLabelAction = EditLabelAction = {}));
function isEditLabelAction(element) {
    return (0, actions_1.isAction)(element) && element.kind === EditLabelAction.KIND && 'labelId' in element;
}
exports.isEditLabelAction = isEditLabelAction;
function isApplyLabelEditAction(element) {
    return (0, actions_1.isAction)(element) && element.kind === actions_1.ApplyLabelEditAction.KIND && 'labelId' in element && 'text' in element;
}
exports.isApplyLabelEditAction = isApplyLabelEditAction;
class ResolvedLabelEdit {
}
exports.ResolvedLabelEdit = ResolvedLabelEdit;
let ApplyLabelEditCommand = class ApplyLabelEditCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const index = context.root.index;
        const label = index.getById(this.action.labelId);
        if (label && (0, model_2.isEditableLabel)(label)) {
            this.resolvedLabelEdit = { label, oldLabel: label.text, newLabel: this.action.text };
            label.text = this.action.text;
        }
        return context.root;
    }
    undo(context) {
        if (this.resolvedLabelEdit) {
            this.resolvedLabelEdit.label.text = this.resolvedLabelEdit.oldLabel;
        }
        return context.root;
    }
    redo(context) {
        if (this.resolvedLabelEdit) {
            this.resolvedLabelEdit.label.text = this.resolvedLabelEdit.newLabel;
        }
        return context.root;
    }
};
exports.ApplyLabelEditCommand = ApplyLabelEditCommand;
ApplyLabelEditCommand.KIND = actions_1.ApplyLabelEditAction.KIND;
exports.ApplyLabelEditCommand = ApplyLabelEditCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ApplyLabelEditCommand);
class EditLabelMouseListener extends mouse_tool_1.MouseListener {
    doubleClick(target, event) {
        const editableLabel = getEditableLabel(target);
        if (editableLabel) {
            return [EditLabelAction.create(editableLabel.id)];
        }
        return [];
    }
}
exports.EditLabelMouseListener = EditLabelMouseListener;
class EditLabelKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'F2')) {
            const editableLabels = (0, iterable_1.toArray)(element.index.all()
                .filter(e => (0, model_1.isSelectable)(e) && e.selected)).map(getEditableLabel)
                .filter((e) => e !== undefined);
            if (editableLabels.length === 1) {
                return [EditLabelAction.create(editableLabels[0].id)];
            }
        }
        return [];
    }
}
exports.EditLabelKeyListener = EditLabelKeyListener;
function getEditableLabel(element) {
    if ((0, model_2.isEditableLabel)(element)) {
        return element;
    }
    else if ((0, model_2.isWithEditableLabel)(element) && element.editableLabel) {
        return element.editableLabel;
    }
    return undefined;
}
exports.getEditableLabel = getEditableLabel;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/edit-routing.js":
/*!*****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/edit-routing.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SwitchEditModeCommand = exports.SwitchEditModeAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const model_1 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
const model_2 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/edit/model.js");
var SwitchEditModeAction;
(function (SwitchEditModeAction) {
    SwitchEditModeAction.KIND = "switchEditMode";
    function create(options) {
        var _a, _b;
        return {
            kind: SwitchEditModeAction.KIND,
            elementsToActivate: (_a = options.elementsToActivate) !== null && _a !== void 0 ? _a : [],
            elementsToDeactivate: (_b = options.elementsToDeactivate) !== null && _b !== void 0 ? _b : []
        };
    }
    SwitchEditModeAction.create = create;
})(SwitchEditModeAction || (exports.SwitchEditModeAction = SwitchEditModeAction = {}));
let SwitchEditModeCommand = class SwitchEditModeCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.elementsToActivate = [];
        this.elementsToDeactivate = [];
        this.handlesToRemove = [];
    }
    execute(context) {
        const index = context.root.index;
        this.action.elementsToActivate.forEach(id => {
            const element = index.getById(id);
            if (element !== undefined)
                this.elementsToActivate.push(element);
        });
        this.action.elementsToDeactivate.forEach(id => {
            const element = index.getById(id);
            if (element !== undefined)
                this.elementsToDeactivate.push(element);
            if (element instanceof model_1.SRoutingHandleImpl && element.parent instanceof model_1.SRoutableElementImpl) {
                const parent = element.parent;
                if (this.shouldRemoveHandle(element, parent)) {
                    this.handlesToRemove.push({ handle: element, parent });
                    this.elementsToDeactivate.push(parent);
                    this.elementsToActivate.push(parent);
                }
            }
        });
        return this.doExecute(context);
    }
    doExecute(context) {
        this.handlesToRemove.forEach(entry => {
            entry.point = entry.parent.routingPoints.splice(entry.handle.pointIndex, 1)[0];
        });
        this.elementsToDeactivate.forEach(element => {
            if (element instanceof model_1.SRoutableElementImpl)
                element.removeAll(child => child instanceof model_1.SRoutingHandleImpl);
            else if (element instanceof model_1.SRoutingHandleImpl) {
                element.editMode = false;
                if (element.danglingAnchor) {
                    if (element.parent instanceof model_1.SRoutableElementImpl && element.danglingAnchor.original) {
                        if (element.parent.source === element.danglingAnchor)
                            element.parent.sourceId = element.danglingAnchor.original.id;
                        else if (element.parent.target === element.danglingAnchor)
                            element.parent.targetId = element.danglingAnchor.original.id;
                        element.danglingAnchor.parent.remove(element.danglingAnchor);
                        element.danglingAnchor = undefined;
                    }
                }
            }
        });
        this.elementsToActivate.forEach(element => {
            if ((0, model_2.canEditRouting)(element) && element instanceof smodel_1.SParentElementImpl) {
                const router = this.edgeRouterRegistry.get(element.routerKind);
                router.createRoutingHandles(element);
            }
            else if (element instanceof model_1.SRoutingHandleImpl)
                element.editMode = true;
        });
        return context.root;
    }
    shouldRemoveHandle(handle, parent) {
        if (handle.kind === 'junction') {
            const route = this.edgeRouterRegistry.route(parent);
            return route.find(rp => rp.pointIndex === handle.pointIndex) === undefined;
        }
        return false;
    }
    undo(context) {
        this.handlesToRemove.forEach(entry => {
            if (entry.point !== undefined)
                entry.parent.routingPoints.splice(entry.handle.pointIndex, 0, entry.point);
        });
        this.elementsToActivate.forEach(element => {
            if (element instanceof model_1.SRoutableElementImpl)
                element.removeAll(child => child instanceof model_1.SRoutingHandleImpl);
            else if (element instanceof model_1.SRoutingHandleImpl)
                element.editMode = false;
        });
        this.elementsToDeactivate.forEach(element => {
            if ((0, model_2.canEditRouting)(element)) {
                const router = this.edgeRouterRegistry.get(element.routerKind);
                router.createRoutingHandles(element);
            }
            else if (element instanceof model_1.SRoutingHandleImpl)
                element.editMode = true;
        });
        return context.root;
    }
    redo(context) {
        return this.doExecute(context);
    }
};
exports.SwitchEditModeCommand = SwitchEditModeCommand;
SwitchEditModeCommand.KIND = SwitchEditModeAction.KIND;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], SwitchEditModeCommand.prototype, "edgeRouterRegistry", void 0);
exports.SwitchEditModeCommand = SwitchEditModeCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SwitchEditModeCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/model.js":
/*!**********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/model.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isWithEditableLabel = exports.withEditLabelFeature = exports.isEditableLabel = exports.editLabelFeature = exports.canEditRouting = exports.editFeature = void 0;
const model_1 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
exports.editFeature = Symbol('editFeature');
function canEditRouting(element) {
    return element instanceof model_1.SRoutableElementImpl && element.hasFeature(exports.editFeature);
}
exports.canEditRouting = canEditRouting;
exports.editLabelFeature = Symbol('editLabelFeature');
function isEditableLabel(element) {
    return 'text' in element && element.hasFeature(exports.editLabelFeature);
}
exports.isEditableLabel = isEditableLabel;
exports.withEditLabelFeature = Symbol('withEditLabelFeature');
function isWithEditableLabel(element) {
    return 'editableLabel' in element && element.hasFeature(exports.withEditLabelFeature);
}
exports.isWithEditableLabel = isWithEditableLabel;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/edit/reconnect.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/edit/reconnect.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReconnectCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const model_1 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
let ReconnectCommand = class ReconnectCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.doExecute(context);
        return context.root;
    }
    doExecute(context) {
        const index = context.root.index;
        const edge = index.getById(this.action.routableId);
        if (edge instanceof model_1.SRoutableElementImpl) {
            const router = this.edgeRouterRegistry.get(edge.routerKind);
            const before = router.takeSnapshot(edge);
            router.applyReconnect(edge, this.action.newSourceId, this.action.newTargetId);
            const after = router.takeSnapshot(edge);
            this.memento = {
                edge: edge,
                before,
                after
            };
        }
    }
    undo(context) {
        if (this.memento) {
            const router = this.edgeRouterRegistry.get(this.memento.edge.routerKind);
            router.applySnapshot(this.memento.edge, this.memento.before);
        }
        return context.root;
    }
    redo(context) {
        if (this.memento) {
            const router = this.edgeRouterRegistry.get(this.memento.edge.routerKind);
            router.applySnapshot(this.memento.edge, this.memento.after);
        }
        return context.root;
    }
};
exports.ReconnectCommand = ReconnectCommand;
ReconnectCommand.KIND = actions_1.ReconnectAction.KIND;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], ReconnectCommand.prototype, "edgeRouterRegistry", void 0);
exports.ReconnectCommand = ReconnectCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ReconnectCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/expand/di.config.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/expand/di.config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const button_handler_1 = __webpack_require__(/*! ../button/button-handler */ "../node_modules/sprotty/lib/features/button/button-handler.js");
const expand_1 = __webpack_require__(/*! ./expand */ "../node_modules/sprotty/lib/features/expand/expand.js");
const expandModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, button_handler_1.configureButtonHandler)({ bind, isBound }, expand_1.ExpandButtonHandler.TYPE, expand_1.ExpandButtonHandler);
});
exports["default"] = expandModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/expand/expand.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/expand/expand.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpandButtonHandler = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/expand/model.js");
let ExpandButtonHandler = class ExpandButtonHandler {
    buttonPressed(button) {
        const expandable = (0, smodel_utils_1.findParentByFeature)(button, model_1.isExpandable);
        if (expandable !== undefined) {
            return [actions_1.CollapseExpandAction.create({
                    expandIds: expandable.expanded ? [] : [expandable.id],
                    collapseIds: expandable.expanded ? [expandable.id] : []
                })];
        }
        else {
            return [];
        }
    }
};
exports.ExpandButtonHandler = ExpandButtonHandler;
ExpandButtonHandler.TYPE = 'button:expand';
exports.ExpandButtonHandler = ExpandButtonHandler = __decorate([
    (0, inversify_1.injectable)()
], ExpandButtonHandler);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/expand/model.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/expand/model.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isExpandable = exports.expandFeature = void 0;
exports.expandFeature = Symbol('expandFeature');
function isExpandable(element) {
    return element.hasFeature(exports.expandFeature) && 'expanded' in element;
}
exports.isExpandable = isExpandable;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/expand/views.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/expand/views.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpandButtonView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "../node_modules/sprotty/lib/lib/jsx.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/expand/model.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let ExpandButtonView = class ExpandButtonView {
    render(button, context) {
        const expandable = (0, smodel_utils_1.findParentByFeature)(button, model_1.isExpandable);
        const path = (expandable !== undefined && expandable.expanded)
            ? 'M 1,5 L 8,12 L 15,5 Z'
            : 'M 1,8 L 8,15 L 8,1 Z';
        return (0, jsx_1.svg)("g", { "class-sprotty-button": "{true}", "class-enabled": "{button.enabled}" },
            (0, jsx_1.svg)("rect", { x: 0, y: 0, width: 16, height: 16, opacity: 0 }),
            (0, jsx_1.svg)("path", { d: path }));
    }
};
exports.ExpandButtonView = ExpandButtonView;
exports.ExpandButtonView = ExpandButtonView = __decorate([
    (0, inversify_1.injectable)()
], ExpandButtonView);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/export/di.config.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/export/di.config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const export_1 = __webpack_require__(/*! ./export */ "../node_modules/sprotty/lib/features/export/export.js");
const svg_exporter_1 = __webpack_require__(/*! ./svg-exporter */ "../node_modules/sprotty/lib/features/export/svg-exporter.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const exportSvgModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(export_1.ExportSvgKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(export_1.ExportSvgKeyListener);
    bind(export_1.ExportSvgPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(export_1.ExportSvgPostprocessor);
    (0, command_registration_1.configureCommand)({ bind, isBound }, export_1.ExportSvgCommand);
    bind(types_1.TYPES.SvgExporter).to(svg_exporter_1.SvgExporter).inSingletonScope();
});
exports["default"] = exportSvgModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/export/export.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/export/export.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExportSvgPostprocessor = exports.ExportSvgCommand = exports.RequestExportSvgAction = exports.ExportSvgKeyListener = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const model_1 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js");
const model_2 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/export/model.js");
const svg_exporter_1 = __webpack_require__(/*! ./svg-exporter */ "../node_modules/sprotty/lib/features/export/svg-exporter.js");
const model_3 = __webpack_require__(/*! ../viewport/model */ "../node_modules/sprotty/lib/features/viewport/model.js");
const model_4 = __webpack_require__(/*! ../hover/model */ "../node_modules/sprotty/lib/features/hover/model.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
let ExportSvgKeyListener = class ExportSvgKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyE', 'ctrlCmd', 'shift'))
            return [RequestExportSvgAction.create()];
        else
            return [];
    }
};
exports.ExportSvgKeyListener = ExportSvgKeyListener;
exports.ExportSvgKeyListener = ExportSvgKeyListener = __decorate([
    (0, inversify_1.injectable)()
], ExportSvgKeyListener);
var RequestExportSvgAction;
(function (RequestExportSvgAction) {
    RequestExportSvgAction.KIND = 'requestExportSvg';
    function create(options = {}) {
        return {
            kind: RequestExportSvgAction.KIND,
            requestId: (0, actions_1.generateRequestId)(),
            options
        };
    }
    RequestExportSvgAction.create = create;
})(RequestExportSvgAction || (exports.RequestExportSvgAction = RequestExportSvgAction = {}));
let ExportSvgCommand = class ExportSvgCommand extends command_1.HiddenCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        if ((0, model_2.isExportable)(context.root)) {
            const root = context.modelFactory.createRoot(context.root);
            if ((0, model_2.isExportable)(root)) {
                if ((0, model_3.isViewport)(root)) {
                    root.zoom = 1;
                    root.scroll = { x: 0, y: 0 };
                }
                root.index.all().forEach(element => {
                    if ((0, model_1.isSelectable)(element) && element.selected)
                        element.selected = false;
                    if ((0, model_4.isHoverable)(element) && element.hoverFeedback)
                        element.hoverFeedback = false;
                });
                return {
                    model: root,
                    modelChanged: true,
                    cause: this.action
                };
            }
        }
        return {
            model: context.root,
            modelChanged: false
        };
    }
};
exports.ExportSvgCommand = ExportSvgCommand;
ExportSvgCommand.KIND = RequestExportSvgAction.KIND;
exports.ExportSvgCommand = ExportSvgCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ExportSvgCommand);
let ExportSvgPostprocessor = class ExportSvgPostprocessor {
    decorate(vnode, element) {
        if (element instanceof smodel_1.SModelRootImpl)
            this.root = element;
        return vnode;
    }
    postUpdate(cause) {
        if (this.root && cause !== undefined && cause.kind === RequestExportSvgAction.KIND) {
            this.svgExporter.export(this.root, cause);
        }
    }
};
exports.ExportSvgPostprocessor = ExportSvgPostprocessor;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.SvgExporter),
    __metadata("design:type", svg_exporter_1.SvgExporter)
], ExportSvgPostprocessor.prototype, "svgExporter", void 0);
exports.ExportSvgPostprocessor = ExportSvgPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], ExportSvgPostprocessor);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/export/model.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/export/model.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isExportable = exports.exportFeature = void 0;
exports.exportFeature = Symbol('exportFeature');
function isExportable(element) {
    return element.hasFeature(exports.exportFeature);
}
exports.isExportable = isExportable;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/export/svg-export-postprocessor.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/export/svg-export-postprocessor.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "../node_modules/sprotty/lib/features/export/svg-exporter.js":
/*!*******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/export/svg-exporter.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SvgExporter = exports.ExportSvgAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const action_dispatcher_1 = __webpack_require__(/*! ../../base/actions/action-dispatcher */ "../node_modules/sprotty/lib/base/actions/action-dispatcher.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
var ExportSvgAction;
(function (ExportSvgAction) {
    ExportSvgAction.KIND = 'exportSvg';
    function create(svg, requestId, options) {
        return {
            kind: ExportSvgAction.KIND,
            svg,
            responseId: requestId,
            options
        };
    }
    ExportSvgAction.create = create;
})(ExportSvgAction || (exports.ExportSvgAction = ExportSvgAction = {}));
let SvgExporter = class SvgExporter {
    constructor() {
        this.postprocessors = [];
    }
    export(root, request) {
        var _a;
        if (typeof document !== 'undefined') {
            const hiddenDiv = document.getElementById(this.options.hiddenDiv);
            if (hiddenDiv === null) {
                this.log.warn(this, `Element with id ${this.options.hiddenDiv} not found. Nothing to export.`);
                return;
            }
            const svgElement = hiddenDiv.querySelector('svg');
            if (svgElement === null) {
                this.log.warn(this, `No svg element found in ${this.options.hiddenDiv} div. Nothing to export.`);
                return;
            }
            const svg = this.createSvg(svgElement, root, (_a = request === null || request === void 0 ? void 0 : request.options) !== null && _a !== void 0 ? _a : {}, request);
            this.actionDispatcher.dispatch(ExportSvgAction.create(svg, request ? request.requestId : '', request === null || request === void 0 ? void 0 : request.options));
        }
    }
    createSvg(svgElementOrig, root, options, cause) {
        const serializer = new XMLSerializer();
        const svgCopy = serializer.serializeToString(svgElementOrig);
        const iframe = document.createElement('iframe');
        document.body.appendChild(iframe);
        if (!iframe.contentWindow)
            throw new Error('IFrame has no contentWindow');
        const docCopy = iframe.contentWindow.document;
        docCopy.open();
        docCopy.write(svgCopy);
        docCopy.close();
        const svgElementNew = docCopy.querySelector('svg');
        svgElementNew.removeAttribute('opacity');
        if (!(options === null || options === void 0 ? void 0 : options.skipCopyStyles)) {
            // inline-size copied from sprotty-hidden svg shrinks the svg so it is not visible.
            this.copyStyles(svgElementOrig, svgElementNew, ['width', 'height', 'opacity', 'inline-size']);
        }
        svgElementNew.setAttribute('version', '1.1');
        const bounds = this.getBounds(root, docCopy);
        svgElementNew.setAttribute('viewBox', `${bounds.x} ${bounds.y} ${bounds.width} ${bounds.height}`);
        svgElementNew.setAttribute('width', `${bounds.width}`);
        svgElementNew.setAttribute('height', `${bounds.height}`);
        this.postprocessors.forEach(postprocessor => {
            postprocessor.postUpdate(svgElementNew, cause);
        });
        const svgCode = serializer.serializeToString(svgElementNew);
        document.body.removeChild(iframe);
        return svgCode;
    }
    copyStyles(source, target, skippedProperties) {
        const sourceStyle = getComputedStyle(source);
        const targetStyle = getComputedStyle(target);
        let diffStyle = '';
        for (let i = 0; i < sourceStyle.length; i++) {
            const key = sourceStyle[i];
            if (skippedProperties.indexOf(key) === -1) {
                const value = sourceStyle.getPropertyValue(key);
                if (targetStyle.getPropertyValue(key) !== value) {
                    diffStyle += key + ':' + value + ';';
                }
            }
        }
        if (diffStyle !== '')
            target.setAttribute('style', diffStyle);
        // IE doesn't return anything on source.children
        for (let i = 0; i < source.childNodes.length; ++i) {
            const sourceChild = source.childNodes[i];
            const targetChild = target.childNodes[i];
            if (sourceChild instanceof Element)
                this.copyStyles(sourceChild, targetChild, []);
        }
    }
    getBounds(root, document) {
        const svgElement = document.querySelector('svg');
        if (svgElement) {
            return svgElement.getBBox();
        }
        const allBounds = [geometry_1.Bounds.EMPTY];
        root.children.forEach(element => {
            if ((0, model_1.isBoundsAware)(element)) {
                allBounds.push(element.bounds);
            }
        });
        return allBounds.reduce((one, two) => geometry_1.Bounds.combine(one, two));
    }
};
exports.SvgExporter = SvgExporter;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], SvgExporter.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", action_dispatcher_1.ActionDispatcher)
], SvgExporter.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], SvgExporter.prototype, "log", void 0);
__decorate([
    (0, inversify_1.multiInject)(types_1.TYPES.ISvgExportPostprocessor),
    (0, inversify_1.optional)(),
    __metadata("design:type", Array)
], SvgExporter.prototype, "postprocessors", void 0);
exports.SvgExporter = SvgExporter = __decorate([
    (0, inversify_1.injectable)()
], SvgExporter);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/fade/di.config.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/fade/di.config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const fade_1 = __webpack_require__(/*! ./fade */ "../node_modules/sprotty/lib/features/fade/fade.js");
const fadeModule = new inversify_1.ContainerModule(bind => {
    bind(fade_1.ElementFader).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(fade_1.ElementFader);
});
exports["default"] = fadeModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/fade/fade.js":
/*!*********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/fade/fade.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElementFader = exports.FadeAnimation = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "../node_modules/sprotty/lib/base/animations/animation.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/fade/model.js");
class FadeAnimation extends animation_1.Animation {
    constructor(model, elementFades, context, removeAfterFadeOut = false) {
        super(context);
        this.model = model;
        this.elementFades = elementFades;
        this.removeAfterFadeOut = removeAfterFadeOut;
    }
    tween(t, context) {
        for (const elementFade of this.elementFades) {
            const element = elementFade.element;
            if (elementFade.type === 'in') {
                element.opacity = t;
            }
            else if (elementFade.type === 'out') {
                element.opacity = 1 - t;
                if (t === 1 && this.removeAfterFadeOut && element instanceof smodel_1.SChildElementImpl) {
                    element.parent.remove(element);
                }
            }
        }
        return this.model;
    }
}
exports.FadeAnimation = FadeAnimation;
let ElementFader = class ElementFader {
    decorate(vnode, element) {
        if ((0, model_1.isFadeable)(element) && element.opacity !== 1) {
            (0, vnode_utils_1.setAttr)(vnode, 'opacity', element.opacity);
        }
        return vnode;
    }
    postUpdate() {
    }
};
exports.ElementFader = ElementFader;
exports.ElementFader = ElementFader = __decorate([
    (0, inversify_1.injectable)()
], ElementFader);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/fade/model.js":
/*!**********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/fade/model.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isFadeable = exports.fadeFeature = void 0;
exports.fadeFeature = Symbol('fadeFeature');
function isFadeable(element) {
    return element.hasFeature(exports.fadeFeature) && element['opacity'] !== undefined;
}
exports.isFadeable = isFadeable;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/hover/di.config.js":
/*!***************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/hover/di.config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const hover_1 = __webpack_require__(/*! ./hover */ "../node_modules/sprotty/lib/features/hover/hover.js");
const popup_position_updater_1 = __webpack_require__(/*! ./popup-position-updater */ "../node_modules/sprotty/lib/features/hover/popup-position-updater.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const action_handler_1 = __webpack_require__(/*! ../../base/actions/action-handler */ "../node_modules/sprotty/lib/base/actions/action-handler.js");
const center_fit_1 = __webpack_require__(/*! ../viewport/center-fit */ "../node_modules/sprotty/lib/features/viewport/center-fit.js");
const viewport_1 = __webpack_require__(/*! ../viewport/viewport */ "../node_modules/sprotty/lib/features/viewport/viewport.js");
const move_1 = __webpack_require__(/*! ../move/move */ "../node_modules/sprotty/lib/features/move/move.js");
const hoverModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(popup_position_updater_1.PopupPositionUpdater).toSelf().inSingletonScope();
    bind(types_1.TYPES.PopupVNodePostprocessor).toService(popup_position_updater_1.PopupPositionUpdater);
    bind(hover_1.HoverMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(hover_1.HoverMouseListener);
    bind(hover_1.PopupHoverMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.PopupMouseListener).toService(hover_1.PopupHoverMouseListener);
    bind(hover_1.HoverKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(hover_1.HoverKeyListener);
    bind(types_1.TYPES.HoverState).toConstantValue({
        mouseOverTimer: undefined,
        mouseOutTimer: undefined,
        popupOpen: false,
        previousPopupElement: undefined
    });
    bind(hover_1.ClosePopupActionHandler).toSelf().inSingletonScope();
    const context = { bind, isBound };
    (0, command_registration_1.configureCommand)(context, hover_1.HoverFeedbackCommand);
    (0, command_registration_1.configureCommand)(context, hover_1.SetPopupModelCommand);
    (0, action_handler_1.configureActionHandler)(context, hover_1.SetPopupModelCommand.KIND, hover_1.ClosePopupActionHandler);
    (0, action_handler_1.configureActionHandler)(context, center_fit_1.FitToScreenCommand.KIND, hover_1.ClosePopupActionHandler);
    (0, action_handler_1.configureActionHandler)(context, center_fit_1.CenterCommand.KIND, hover_1.ClosePopupActionHandler);
    (0, action_handler_1.configureActionHandler)(context, viewport_1.SetViewportCommand.KIND, hover_1.ClosePopupActionHandler);
    (0, action_handler_1.configureActionHandler)(context, move_1.MoveCommand.KIND, hover_1.ClosePopupActionHandler);
});
exports["default"] = hoverModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/hover/hover.js":
/*!***********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/hover/hover.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClosePopupActionHandler = exports.HoverKeyListener = exports.PopupHoverMouseListener = exports.HoverMouseListener = exports.AbstractHoverMouseListener = exports.SetPopupModelCommand = exports.HoverFeedbackCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const smodel_factory_1 = __webpack_require__(/*! ../../base/model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/hover/model.js");
let HoverFeedbackCommand = class HoverFeedbackCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const model = context.root;
        const modelElement = model.index.getById(this.action.mouseoverElement);
        if (modelElement) {
            if ((0, model_2.isHoverable)(modelElement)) {
                modelElement.hoverFeedback = this.action.mouseIsOver;
            }
        }
        return this.redo(context);
    }
    undo(context) {
        return context.root;
    }
    redo(context) {
        return context.root;
    }
};
exports.HoverFeedbackCommand = HoverFeedbackCommand;
HoverFeedbackCommand.KIND = actions_1.HoverFeedbackAction.KIND;
exports.HoverFeedbackCommand = HoverFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], HoverFeedbackCommand);
let SetPopupModelCommand = class SetPopupModelCommand extends command_1.PopupCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.oldRoot = context.root;
        this.newRoot = context.modelFactory.createRoot(this.action.newRoot);
        return this.newRoot;
    }
    undo(context) {
        return this.oldRoot;
    }
    redo(context) {
        return this.newRoot;
    }
};
exports.SetPopupModelCommand = SetPopupModelCommand;
SetPopupModelCommand.KIND = actions_1.SetPopupModelAction.KIND;
exports.SetPopupModelCommand = SetPopupModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetPopupModelCommand);
class AbstractHoverMouseListener extends mouse_tool_1.MouseListener {
    mouseDown(target, event) {
        this.mouseIsDown = true;
        return [];
    }
    mouseUp(target, event) {
        this.mouseIsDown = false;
        return [];
    }
    stopMouseOutTimer() {
        if (this.state.mouseOutTimer !== undefined) {
            window.clearTimeout(this.state.mouseOutTimer);
            this.state.mouseOutTimer = undefined;
        }
    }
    startMouseOutTimer() {
        this.stopMouseOutTimer();
        return new Promise((resolve) => {
            this.state.mouseOutTimer = window.setTimeout(() => {
                this.state.popupOpen = false;
                this.state.previousPopupElement = undefined;
                resolve(actions_1.SetPopupModelAction.create({ type: smodel_factory_1.EMPTY_ROOT.type, id: smodel_factory_1.EMPTY_ROOT.id }));
            }, this.options.popupCloseDelay);
        });
    }
    stopMouseOverTimer() {
        if (this.state.mouseOverTimer !== undefined) {
            window.clearTimeout(this.state.mouseOverTimer);
            this.state.mouseOverTimer = undefined;
        }
    }
}
exports.AbstractHoverMouseListener = AbstractHoverMouseListener;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], AbstractHoverMouseListener.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.HoverState),
    __metadata("design:type", Object)
], AbstractHoverMouseListener.prototype, "state", void 0);
let HoverMouseListener = class HoverMouseListener extends AbstractHoverMouseListener {
    computePopupBounds(target, mousePosition) {
        // Default position: below the mouse cursor
        let offset = { x: -5, y: 20 };
        const targetBounds = (0, model_1.getAbsoluteBounds)(target);
        const canvasBounds = target.root.canvasBounds;
        const boundsInWindow = geometry_1.Bounds.translate(targetBounds, canvasBounds);
        const distRight = boundsInWindow.x + boundsInWindow.width - mousePosition.x;
        const distBottom = boundsInWindow.y + boundsInWindow.height - mousePosition.y;
        if (distBottom <= distRight && this.allowSidePosition(target, 'below', distBottom)) {
            // Put the popup below the target element
            offset = { x: -5, y: Math.round(distBottom + 5) };
        }
        else if (distRight <= distBottom && this.allowSidePosition(target, 'right', distRight)) {
            // Put the popup right of the target element
            offset = { x: Math.round(distRight + 5), y: -5 };
        }
        let leftPopupPosition = mousePosition.x + offset.x;
        const canvasRightBorderPosition = canvasBounds.x + canvasBounds.width;
        if (leftPopupPosition > canvasRightBorderPosition) {
            leftPopupPosition = canvasRightBorderPosition;
        }
        let topPopupPosition = mousePosition.y + offset.y;
        const canvasBottomBorderPosition = canvasBounds.y + canvasBounds.height;
        if (topPopupPosition > canvasBottomBorderPosition) {
            topPopupPosition = canvasBottomBorderPosition;
        }
        return { x: leftPopupPosition, y: topPopupPosition, width: -1, height: -1 };
    }
    allowSidePosition(target, side, distance) {
        return !(target instanceof smodel_1.SModelRootImpl) && distance <= 150;
    }
    startMouseOverTimer(target, event) {
        this.stopMouseOverTimer();
        return new Promise((resolve) => {
            this.state.mouseOverTimer = window.setTimeout(() => {
                const popupBounds = this.computePopupBounds(target, { x: event.pageX, y: event.pageY });
                resolve(actions_1.RequestPopupModelAction.create({ elementId: target.id, bounds: popupBounds }));
                this.state.popupOpen = true;
                this.state.previousPopupElement = target;
            }, this.options.popupOpenDelay);
        });
    }
    mouseOver(target, event) {
        const result = [];
        if (!this.mouseIsDown) {
            const popupTarget = (0, smodel_utils_1.findParent)(target, model_2.hasPopupFeature);
            if (this.state.popupOpen && (popupTarget === undefined ||
                this.state.previousPopupElement !== undefined && this.state.previousPopupElement.id !== popupTarget.id)) {
                result.push(this.startMouseOutTimer());
            }
            else {
                this.stopMouseOverTimer();
                this.stopMouseOutTimer();
            }
            if (popupTarget !== undefined &&
                (this.state.previousPopupElement === undefined || this.state.previousPopupElement.id !== popupTarget.id)) {
                result.push(this.startMouseOverTimer(popupTarget, event));
            }
            if (this.lastHoverFeedbackElementId) {
                result.push(actions_1.HoverFeedbackAction.create({ mouseoverElement: this.lastHoverFeedbackElementId, mouseIsOver: false }));
                this.lastHoverFeedbackElementId = undefined;
            }
            const hoverTarget = (0, smodel_utils_1.findParentByFeature)(target, model_2.isHoverable);
            if (hoverTarget !== undefined) {
                result.push(actions_1.HoverFeedbackAction.create({ mouseoverElement: hoverTarget.id, mouseIsOver: true }));
                this.lastHoverFeedbackElementId = hoverTarget.id;
            }
        }
        return result;
    }
    mouseOut(target, event) {
        const result = [];
        if (!this.mouseIsDown) {
            const elementUnderMouse = this.getElementFromEventPosition(event);
            if (!this.isSprottyPopup(elementUnderMouse)) {
                if (this.state.popupOpen) {
                    const popupTarget = (0, smodel_utils_1.findParent)(target, model_2.hasPopupFeature);
                    if (this.state.previousPopupElement !== undefined && popupTarget !== undefined
                        && this.state.previousPopupElement.id === popupTarget.id)
                        result.push(this.startMouseOutTimer());
                }
                this.stopMouseOverTimer();
                const hoverTarget = (0, smodel_utils_1.findParentByFeature)(target, model_2.isHoverable);
                if (hoverTarget !== undefined) {
                    result.push(actions_1.HoverFeedbackAction.create({ mouseoverElement: hoverTarget.id, mouseIsOver: false }));
                    if (this.lastHoverFeedbackElementId && this.lastHoverFeedbackElementId !== hoverTarget.id) {
                        result.push(actions_1.HoverFeedbackAction.create({ mouseoverElement: this.lastHoverFeedbackElementId, mouseIsOver: false }));
                    }
                    this.lastHoverFeedbackElementId = undefined;
                }
            }
        }
        return result;
    }
    getElementFromEventPosition(event) {
        return document.elementFromPoint(event.x, event.y);
    }
    isSprottyPopup(element) {
        return element
            ? (element.id === this.options.popupDiv
                || (!!element.parentElement && this.isSprottyPopup(element.parentElement)))
            : false;
    }
    mouseMove(target, event) {
        const result = [];
        if (!this.mouseIsDown) {
            if (this.state.previousPopupElement !== undefined && this.closeOnMouseMove(this.state.previousPopupElement, event)) {
                result.push(this.startMouseOutTimer());
            }
            const popupTarget = (0, smodel_utils_1.findParent)(target, model_2.hasPopupFeature);
            if (popupTarget !== undefined && (this.state.previousPopupElement === undefined
                || this.state.previousPopupElement.id !== popupTarget.id)) {
                result.push(this.startMouseOverTimer(popupTarget, event));
            }
        }
        return result;
    }
    closeOnMouseMove(target, event) {
        return target instanceof smodel_1.SModelRootImpl;
    }
};
exports.HoverMouseListener = HoverMouseListener;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], HoverMouseListener.prototype, "options", void 0);
exports.HoverMouseListener = HoverMouseListener = __decorate([
    (0, inversify_1.injectable)()
], HoverMouseListener);
let PopupHoverMouseListener = class PopupHoverMouseListener extends AbstractHoverMouseListener {
    mouseOut(target, event) {
        return [this.startMouseOutTimer()];
    }
    mouseOver(target, event) {
        this.stopMouseOutTimer();
        this.stopMouseOverTimer();
        return [];
    }
};
exports.PopupHoverMouseListener = PopupHoverMouseListener;
exports.PopupHoverMouseListener = PopupHoverMouseListener = __decorate([
    (0, inversify_1.injectable)()
], PopupHoverMouseListener);
class HoverKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            return [actions_1.SetPopupModelAction.create({ type: smodel_factory_1.EMPTY_ROOT.type, id: smodel_factory_1.EMPTY_ROOT.id })];
        }
        return [];
    }
}
exports.HoverKeyListener = HoverKeyListener;
let ClosePopupActionHandler = class ClosePopupActionHandler {
    constructor() {
        this.popupOpen = false;
    }
    handle(action) {
        if (action.kind === SetPopupModelCommand.KIND) {
            this.popupOpen = action.newRoot.type !== smodel_factory_1.EMPTY_ROOT.type;
        }
        else if (this.popupOpen) {
            return actions_1.SetPopupModelAction.create({ id: smodel_factory_1.EMPTY_ROOT.id, type: smodel_factory_1.EMPTY_ROOT.type });
        }
    }
};
exports.ClosePopupActionHandler = ClosePopupActionHandler;
exports.ClosePopupActionHandler = ClosePopupActionHandler = __decorate([
    (0, inversify_1.injectable)()
], ClosePopupActionHandler);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/hover/model.js":
/*!***********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/hover/model.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hasPopupFeature = exports.popupFeature = exports.isHoverable = exports.hoverFeedbackFeature = void 0;
exports.hoverFeedbackFeature = Symbol('hoverFeedbackFeature');
function isHoverable(element) {
    return element.hasFeature(exports.hoverFeedbackFeature);
}
exports.isHoverable = isHoverable;
exports.popupFeature = Symbol('popupFeature');
function hasPopupFeature(element) {
    return element.hasFeature(exports.popupFeature);
}
exports.hasPopupFeature = hasPopupFeature;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/hover/popup-position-updater.js":
/*!****************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/hover/popup-position-updater.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupPositionUpdater = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
let PopupPositionUpdater = class PopupPositionUpdater {
    decorate(vnode, element) {
        return vnode;
    }
    postUpdate() {
        const popupDiv = document.getElementById(this.options.popupDiv);
        if (popupDiv !== null && typeof window !== 'undefined') {
            const boundingClientRect = popupDiv.getBoundingClientRect();
            if (window.innerHeight < boundingClientRect.height + boundingClientRect.top) {
                popupDiv.style.top = (window.pageYOffset + window.innerHeight - boundingClientRect.height - 5) + 'px';
            }
            if (window.innerWidth < boundingClientRect.left + boundingClientRect.width) {
                popupDiv.style.left = (window.pageXOffset + window.innerWidth - boundingClientRect.width - 5) + 'px';
            }
            if (boundingClientRect.left < 0) {
                popupDiv.style.left = '0px';
            }
            if (boundingClientRect.top < 0) {
                popupDiv.style.top = '0px';
            }
        }
    }
};
exports.PopupPositionUpdater = PopupPositionUpdater;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], PopupPositionUpdater.prototype, "options", void 0);
exports.PopupPositionUpdater = PopupPositionUpdater = __decorate([
    (0, inversify_1.injectable)()
], PopupPositionUpdater);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/move/di.config.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/move/di.config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const move_1 = __webpack_require__(/*! ./move */ "../node_modules/sprotty/lib/features/move/move.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const moveModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(move_1.MoveMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(move_1.MoveMouseListener);
    (0, command_registration_1.configureCommand)({ bind, isBound }, move_1.MoveCommand);
    bind(move_1.LocationPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(move_1.LocationPostprocessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(move_1.LocationPostprocessor);
});
exports["default"] = moveModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/move/model.js":
/*!**********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/move/model.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isMoveable = exports.isLocateable = exports.moveFeature = void 0;
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "../node_modules/sprotty-protocol/lib/utils/object.js");
exports.moveFeature = Symbol('moveFeature');
function isLocateable(element) {
    return (0, object_1.hasOwnProperty)(element, 'position');
}
exports.isLocateable = isLocateable;
function isMoveable(element) {
    return element.hasFeature(exports.moveFeature) && isLocateable(element);
}
exports.isMoveable = isMoveable;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/move/move.js":
/*!*********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/move/move.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var MoveCommand_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocationPostprocessor = exports.MoveMouseListener = exports.MorphEdgesAnimation = exports.MoveAnimation = exports.MoveCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "../node_modules/sprotty/lib/base/animations/animation.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const sgraph_1 = __webpack_require__(/*! ../../graph/sgraph */ "../node_modules/sprotty/lib/graph/sgraph.js");
const commit_model_1 = __webpack_require__(/*! ../../model-source/commit-model */ "../node_modules/sprotty/lib/model-source/commit-model.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const create_on_drag_1 = __webpack_require__(/*! ../edit/create-on-drag */ "../node_modules/sprotty/lib/features/edit/create-on-drag.js");
const edit_routing_1 = __webpack_require__(/*! ../edit/edit-routing */ "../node_modules/sprotty/lib/features/edit/edit-routing.js");
const reconnect_1 = __webpack_require__(/*! ../edit/reconnect */ "../node_modules/sprotty/lib/features/edit/reconnect.js");
const model_2 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
const model_3 = __webpack_require__(/*! ../edge-layout/model */ "../node_modules/sprotty/lib/features/edge-layout/model.js");
const model_4 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const model_5 = __webpack_require__(/*! ../viewport/model */ "../node_modules/sprotty/lib/features/viewport/model.js");
const model_6 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/move/model.js");
let MoveCommand = MoveCommand_1 = class MoveCommand extends command_1.MergeableCommand {
    constructor(action) {
        super();
        this.action = action;
        this.resolvedMoves = new Map;
        this.edgeMementi = [];
        this.stoppableCommandKey = MoveCommand_1.KIND;
    }
    // stop the execution of the CompoundAnimation started below
    stopExecution() {
        if (this.animation) {
            this.animation.stop();
            this.animation = undefined;
        }
    }
    execute(context) {
        const index = context.root.index;
        const edge2handleMoves = new Map();
        const attachedEdgeShifts = new Map();
        this.action.moves.forEach(move => {
            const element = index.getById(move.elementId);
            if (element instanceof model_2.SRoutingHandleImpl && this.edgeRouterRegistry) {
                const edge = element.parent;
                if (edge instanceof model_2.SRoutableElementImpl) {
                    const resolvedMove = this.resolveHandleMove(element, edge, move);
                    if (resolvedMove) {
                        let movesByEdge = edge2handleMoves.get(edge);
                        if (!movesByEdge) {
                            movesByEdge = [];
                            edge2handleMoves.set(edge, movesByEdge);
                        }
                        movesByEdge.push(resolvedMove);
                    }
                }
            }
            else if (element && (0, model_6.isLocateable)(element)) {
                const resolvedMove = this.resolveElementMove(element, move);
                if (resolvedMove) {
                    this.resolvedMoves.set(resolvedMove.element.id, resolvedMove);
                    if (this.edgeRouterRegistry) {
                        const handleEdges = (el) => {
                            index.getAttachedElements(el).forEach(edge => {
                                if (edge instanceof model_2.SRoutableElementImpl && !this.isChildOfMovedElements(edge)) {
                                    const existingDelta = attachedEdgeShifts.get(edge);
                                    const newDelta = geometry_1.Point.subtract(resolvedMove.toPosition, resolvedMove.fromPosition);
                                    const delta = (existingDelta)
                                        ? geometry_1.Point.linear(existingDelta, newDelta, 0.5)
                                        : newDelta;
                                    attachedEdgeShifts.set(edge, delta);
                                }
                            });
                        };
                        const handleEdgesForChildren = (el) => {
                            if ((0, smodel_1.isParent)(el)) {
                                el.children.forEach(childEl => {
                                    if (childEl instanceof smodel_1.SModelElementImpl) {
                                        if (childEl instanceof model_2.SConnectableElementImpl) {
                                            handleEdges(childEl);
                                        }
                                        handleEdgesForChildren(childEl);
                                    }
                                });
                            }
                        };
                        handleEdgesForChildren(element);
                        handleEdges(element);
                    }
                }
            }
        });
        this.doMove(edge2handleMoves, attachedEdgeShifts);
        if (this.action.animate) {
            this.undoMove();
            return (this.animation = new animation_1.CompoundAnimation(context.root, context, [
                new MoveAnimation(context.root, this.resolvedMoves, context, false),
                new MorphEdgesAnimation(context.root, this.edgeMementi, context, false)
            ])).start();
        }
        return context.root;
    }
    resolveHandleMove(handle, edge, move) {
        let fromPosition = move.fromPosition;
        if (!fromPosition) {
            const router = this.edgeRouterRegistry.get(edge.routerKind);
            fromPosition = router.getHandlePosition(edge, router.route(edge), handle);
        }
        if (fromPosition)
            return {
                handle,
                fromPosition,
                toPosition: move.toPosition
            };
        return undefined;
    }
    resolveElementMove(element, move) {
        const fromPosition = move.fromPosition
            || { x: element.position.x, y: element.position.y };
        return {
            element,
            fromPosition,
            toPosition: move.toPosition
        };
    }
    doMove(edge2move, attachedEdgeShifts) {
        this.resolvedMoves.forEach(res => {
            res.element.position = res.toPosition;
        });
        // reset edges to state before
        edge2move.forEach((moves, edge) => {
            const router = this.edgeRouterRegistry.get(edge.routerKind);
            const before = router.takeSnapshot(edge);
            router.applyHandleMoves(edge, moves);
            const after = router.takeSnapshot(edge);
            this.edgeMementi.push({ edge, before, after });
        });
        attachedEdgeShifts.forEach((delta, edge) => {
            if (!edge2move.get(edge)) {
                const router = this.edgeRouterRegistry.get(edge.routerKind);
                const before = router.takeSnapshot(edge);
                if (this.isAttachedEdge(edge)) {
                    // move the entire edge when both source and target are moved
                    edge.routingPoints = edge.routingPoints.map(rp => geometry_1.Point.add(rp, delta));
                }
                else {
                    // add/remove RPs according to the new source/target positions
                    const updateHandles = (0, model_4.isSelectable)(edge) && edge.selected;
                    router.cleanupRoutingPoints(edge, edge.routingPoints, updateHandles, this.action.finished);
                }
                const after = router.takeSnapshot(edge);
                this.edgeMementi.push({ edge, before, after });
            }
        });
    }
    isChildOfMovedElements(el) {
        const parent = el.parent;
        if (Array.from(this.resolvedMoves.values()).map(rm => rm.element.id).includes(parent.id)) {
            return true;
        }
        if (parent instanceof smodel_1.SChildElementImpl) {
            return this.isChildOfMovedElements(parent);
        }
        return false;
    }
    ;
    // tests if the edge is attached to the moved element directly or to on of their children
    isAttachedEdge(edge) {
        const source = edge.source;
        const target = edge.target;
        const checkMovedElementsAndChildren = (sourceOrTarget) => {
            return Boolean(this.resolvedMoves.get(sourceOrTarget.id)) || this.isChildOfMovedElements(sourceOrTarget);
        };
        return Boolean(source &&
            target &&
            checkMovedElementsAndChildren(source) &&
            checkMovedElementsAndChildren(target));
    }
    undoMove() {
        this.resolvedMoves.forEach(res => {
            res.element.position = res.fromPosition;
        });
        this.edgeMementi.forEach(memento => {
            const router = this.edgeRouterRegistry.get(memento.edge.routerKind);
            router.applySnapshot(memento.edge, memento.before);
        });
    }
    undo(context) {
        return new animation_1.CompoundAnimation(context.root, context, [
            new MoveAnimation(context.root, this.resolvedMoves, context, true),
            new MorphEdgesAnimation(context.root, this.edgeMementi, context, true)
        ]).start();
    }
    redo(context) {
        return new animation_1.CompoundAnimation(context.root, context, [
            new MoveAnimation(context.root, this.resolvedMoves, context, false),
            new MorphEdgesAnimation(context.root, this.edgeMementi, context, false)
        ]).start();
    }
    merge(other, context) {
        if (!this.action.animate && other instanceof MoveCommand_1) {
            other.resolvedMoves.forEach((otherMove, otherElementId) => {
                const existingMove = this.resolvedMoves.get(otherElementId);
                if (existingMove) {
                    existingMove.toPosition = otherMove.toPosition;
                }
                else {
                    this.resolvedMoves.set(otherElementId, otherMove);
                }
            });
            other.edgeMementi.forEach(otherMemento => {
                const existingMemento = this.edgeMementi.find(edgeMemento => edgeMemento.edge.id === otherMemento.edge.id);
                if (existingMemento) {
                    existingMemento.after = otherMemento.after;
                }
                else {
                    this.edgeMementi.push(otherMemento);
                }
            });
            return true;
        }
        else if (other instanceof reconnect_1.ReconnectCommand) {
            const otherMemento = other.memento;
            if (otherMemento) {
                const existingMemento = this.edgeMementi.find(edgeMemento => edgeMemento.edge.id === otherMemento.edge.id);
                if (existingMemento) {
                    existingMemento.after = otherMemento.after;
                }
                else {
                    this.edgeMementi.push(otherMemento);
                }
            }
            return true;
        }
        return false;
    }
};
exports.MoveCommand = MoveCommand;
MoveCommand.KIND = actions_1.MoveAction.KIND;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], MoveCommand.prototype, "edgeRouterRegistry", void 0);
exports.MoveCommand = MoveCommand = MoveCommand_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], MoveCommand);
class MoveAnimation extends animation_1.Animation {
    constructor(model, elementMoves, context, reverse = false) {
        super(context);
        this.model = model;
        this.elementMoves = elementMoves;
        this.reverse = reverse;
    }
    tween(t) {
        this.elementMoves.forEach((elementMove) => {
            if (this.reverse) {
                elementMove.element.position = {
                    x: (1 - t) * elementMove.toPosition.x + t * elementMove.fromPosition.x,
                    y: (1 - t) * elementMove.toPosition.y + t * elementMove.fromPosition.y
                };
            }
            else {
                elementMove.element.position = {
                    x: (1 - t) * elementMove.fromPosition.x + t * elementMove.toPosition.x,
                    y: (1 - t) * elementMove.fromPosition.y + t * elementMove.toPosition.y
                };
            }
        });
        return this.model;
    }
}
exports.MoveAnimation = MoveAnimation;
class MorphEdgesAnimation extends animation_1.Animation {
    constructor(model, originalMementi, context, reverse = false) {
        super(context);
        this.model = model;
        this.reverse = reverse;
        this.expanded = [];
        originalMementi.forEach(edgeMemento => {
            const start = this.reverse ? edgeMemento.after : edgeMemento.before;
            const end = this.reverse ? edgeMemento.before : edgeMemento.after;
            const startRoute = start.routedPoints;
            const endRoute = end.routedPoints;
            const maxRoutingPoints = Math.max(startRoute.length, endRoute.length);
            this.expanded.push({
                startExpandedRoute: this.growToSize(startRoute, maxRoutingPoints),
                endExpandedRoute: this.growToSize(endRoute, maxRoutingPoints),
                memento: edgeMemento
            });
        });
    }
    midPoint(edgeMemento) {
        const edge = edgeMemento.edge;
        const source = edgeMemento.edge.source;
        const target = edgeMemento.edge.target;
        return geometry_1.Point.linear((0, smodel_utils_1.translatePoint)(geometry_1.Bounds.center(source.bounds), source.parent, edge.parent), (0, smodel_utils_1.translatePoint)(geometry_1.Bounds.center(target.bounds), target.parent, edge.parent), 0.5);
    }
    start() {
        this.expanded.forEach(morph => {
            morph.memento.edge.removeAll(e => e instanceof model_2.SRoutingHandleImpl);
        });
        return super.start();
    }
    tween(t) {
        if (t === 1) {
            this.expanded.forEach(morph => {
                const memento = morph.memento;
                if (this.reverse)
                    memento.before.router.applySnapshot(memento.edge, memento.before);
                else
                    memento.after.router.applySnapshot(memento.edge, memento.after);
            });
        }
        else {
            this.expanded.forEach(morph => {
                const newRoutingPoints = [];
                // ignore source and target anchor
                for (let i = 1; i < morph.startExpandedRoute.length - 1; ++i)
                    newRoutingPoints.push(geometry_1.Point.linear(morph.startExpandedRoute[i], morph.endExpandedRoute[i], t));
                const closestSnapshot = t < 0.5 ? morph.memento.before : morph.memento.after;
                const newSnapshot = Object.assign(Object.assign({}, closestSnapshot), { routingPoints: newRoutingPoints, routingHandles: [] });
                closestSnapshot.router.applySnapshot(morph.memento.edge, newSnapshot);
            });
        }
        return this.model;
    }
    growToSize(route, targetSize) {
        const diff = targetSize - route.length;
        if (diff <= 0)
            return route;
        const result = [];
        result.push(route[0]);
        const deltaDiff = 1 / (diff + 1);
        const deltaSmaller = 1 / (route.length - 1);
        let nextInsertion = 1;
        for (let i = 1; i < route.length; ++i) {
            const pos = deltaSmaller * i;
            let insertions = 0;
            while (pos > (nextInsertion + insertions) * deltaDiff)
                ++insertions;
            nextInsertion += insertions;
            for (let j = 0; j < insertions; ++j) {
                const p = geometry_1.Point.linear(route[i - 1], route[i], (j + 1) / (insertions + 1));
                result.push(p);
            }
            result.push(route[i]);
        }
        return result;
    }
}
exports.MorphEdgesAnimation = MorphEdgesAnimation;
class MoveMouseListener extends mouse_tool_1.MouseListener {
    constructor() {
        super(...arguments);
        this.hasDragged = false;
        this.elementId2startPos = new Map();
    }
    mouseDown(target, event) {
        if (event.button === 0) {
            const moveable = (0, smodel_utils_1.findParentByFeature)(target, model_6.isMoveable);
            const isRoutingHandle = target instanceof model_2.SRoutingHandleImpl;
            if (moveable !== undefined || isRoutingHandle || (0, create_on_drag_1.isCreatingOnDrag)(target)) {
                this.startDragPosition = { x: event.pageX, y: event.pageY };
            }
            else {
                this.startDragPosition = undefined;
            }
            this.hasDragged = false;
            if ((0, create_on_drag_1.isCreatingOnDrag)(target)) {
                return this.startCreatingOnDrag(target, event);
            }
            else if (isRoutingHandle) {
                return this.activateRoutingHandle(target, event);
            }
        }
        return [];
    }
    startCreatingOnDrag(target, event) {
        const result = [];
        result.push(actions_1.SelectAllAction.create({ select: false }));
        result.push(target.createAction(model_2.edgeInProgressID));
        result.push(actions_1.SelectAction.create({ selectedElementsIDs: [model_2.edgeInProgressID] }));
        result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToActivate: [model_2.edgeInProgressID] }));
        result.push(actions_1.SelectAction.create({ selectedElementsIDs: [model_2.edgeInProgressTargetHandleID] }));
        result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToActivate: [model_2.edgeInProgressTargetHandleID] }));
        return result;
    }
    activateRoutingHandle(target, event) {
        return [edit_routing_1.SwitchEditModeAction.create({ elementsToActivate: [target.id] })];
    }
    mouseMove(target, event) {
        const result = [];
        if (event.buttons === 0)
            this.mouseUp(target, event);
        else if (this.startDragPosition) {
            if (this.elementId2startPos.size === 0) {
                this.collectStartPositions(target.root);
            }
            this.hasDragged = true;
            const moveAction = this.getElementMoves(target, event, false);
            if (moveAction)
                result.push(moveAction);
        }
        return result;
    }
    collectStartPositions(root) {
        const selectedElements = new Set(root.index.all()
            .filter(element => (0, model_4.isSelectable)(element) && element.selected));
        selectedElements.forEach(element => {
            if (!this.isChildOfSelected(selectedElements, element)) {
                if ((0, model_6.isMoveable)(element))
                    this.elementId2startPos.set(element.id, element.position);
                else if (element instanceof model_2.SRoutingHandleImpl) {
                    const position = this.getHandlePosition(element);
                    if (position)
                        this.elementId2startPos.set(element.id, position);
                }
            }
        });
    }
    isChildOfSelected(selectedElements, element) {
        while (element instanceof smodel_1.SChildElementImpl) {
            element = element.parent;
            if ((0, model_6.isMoveable)(element) && selectedElements.has(element)) {
                return true;
            }
        }
        return false;
    }
    getElementMoves(target, event, isFinished) {
        if (!this.startDragPosition)
            return undefined;
        const elementMoves = [];
        const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_5.isViewport);
        const zoom = viewport ? viewport.zoom : 1;
        const delta = {
            x: (event.pageX - this.startDragPosition.x) / zoom,
            y: (event.pageY - this.startDragPosition.y) / zoom
        };
        this.elementId2startPos.forEach((startPosition, elementId) => {
            const element = target.root.index.getById(elementId);
            if (element) {
                const move = this.createElementMove(element, startPosition, delta, event);
                if (move) {
                    elementMoves.push(move);
                }
            }
        });
        if (elementMoves.length > 0)
            return actions_1.MoveAction.create(elementMoves, { animate: false, finished: isFinished });
        else
            return undefined;
    }
    createElementMove(element, startPosition, delta, event) {
        const toPosition = this.snap({
            x: startPosition.x + delta.x,
            y: startPosition.y + delta.y
        }, element, !event.shiftKey);
        if ((0, model_6.isMoveable)(element)) {
            return {
                elementId: element.id,
                elementType: element.type,
                fromPosition: {
                    x: element.position.x,
                    y: element.position.y
                },
                toPosition
            };
        }
        else if (element instanceof model_2.SRoutingHandleImpl) {
            const point = this.getHandlePosition(element);
            if (point !== undefined) {
                return {
                    elementId: element.id,
                    elementType: element.type,
                    fromPosition: point,
                    toPosition
                };
            }
        }
        return undefined;
    }
    snap(position, element, isSnap) {
        if (isSnap && this.snapper)
            return this.snapper.snap(position, element);
        else
            return position;
    }
    getHandlePosition(handle) {
        if (this.edgeRouterRegistry) {
            const parent = handle.parent;
            if (!(parent instanceof model_2.SRoutableElementImpl))
                return undefined;
            const router = this.edgeRouterRegistry.get(parent.routerKind);
            const route = router.route(parent);
            return router.getHandlePosition(parent, route, handle);
        }
        return undefined;
    }
    mouseEnter(target, event) {
        if (target instanceof smodel_1.SModelRootImpl && event.buttons === 0 && !this.startDragPosition)
            this.mouseUp(target, event);
        return [];
    }
    mouseUp(target, event) {
        const result = [];
        if (this.startDragPosition) {
            const moveAction = this.getElementMoves(target, event, true);
            if (moveAction) {
                result.push(moveAction);
            }
            target.root.index.all().forEach(element => {
                if (element instanceof model_2.SRoutingHandleImpl) {
                    result.push(...this.deactivateRoutingHandle(element, target, event));
                }
            });
        }
        if (!result.some(a => a.kind === actions_1.ReconnectAction.KIND)) {
            const edgeInProgress = target.root.index.getById(model_2.edgeInProgressID);
            if (edgeInProgress instanceof smodel_1.SChildElementImpl) {
                result.push(this.deleteEdgeInProgress(edgeInProgress));
            }
        }
        if (this.hasDragged) {
            result.push(commit_model_1.CommitModelAction.create());
        }
        this.hasDragged = false;
        this.startDragPosition = undefined;
        this.elementId2startPos.clear();
        return result;
    }
    deactivateRoutingHandle(element, target, event) {
        const result = [];
        const parent = element.parent;
        if (parent instanceof model_2.SRoutableElementImpl && element.danglingAnchor) {
            const handlePos = this.getHandlePosition(element);
            if (handlePos) {
                const handlePosAbs = (0, smodel_utils_1.translatePoint)(handlePos, element.parent, element.root);
                const newEnd = (0, model_1.findChildrenAtPosition)(target.root, handlePosAbs)
                    .find(e => (0, model_2.isConnectable)(e) && e.canConnect(parent, element.kind));
                if (newEnd && this.hasDragged) {
                    result.push(actions_1.ReconnectAction.create({
                        routableId: element.parent.id,
                        newSourceId: element.kind === 'source' ? newEnd.id : parent.sourceId,
                        newTargetId: element.kind === 'target' ? newEnd.id : parent.targetId
                    }));
                }
            }
        }
        if (element.editMode) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToDeactivate: [element.id] }));
        }
        return result;
    }
    deleteEdgeInProgress(edgeInProgress) {
        const deleteIds = [];
        deleteIds.push(model_2.edgeInProgressID);
        edgeInProgress.children.forEach(c => {
            if (c instanceof model_2.SRoutingHandleImpl && c.danglingAnchor)
                deleteIds.push(c.danglingAnchor.id);
        });
        return actions_1.DeleteElementAction.create(deleteIds);
    }
    decorate(vnode, element) {
        return vnode;
    }
}
exports.MoveMouseListener = MoveMouseListener;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], MoveMouseListener.prototype, "edgeRouterRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ISnapper),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], MoveMouseListener.prototype, "snapper", void 0);
let LocationPostprocessor = class LocationPostprocessor {
    decorate(vnode, element) {
        if ((0, model_3.isEdgeLayoutable)(element) && element.parent instanceof sgraph_1.SEdgeImpl) {
            // The element is handled by EdgeLayoutDecorator
            return vnode;
        }
        let translate = '';
        if ((0, model_6.isLocateable)(element) && element instanceof smodel_1.SChildElementImpl && element.parent !== undefined) {
            const pos = element.position;
            if (pos.x !== 0 || pos.y !== 0) {
                translate = 'translate(' + pos.x + ', ' + pos.y + ')';
            }
        }
        if ((0, model_1.isAlignable)(element)) {
            const ali = element.alignment;
            if (ali.x !== 0 || ali.y !== 0) {
                if (translate.length > 0) {
                    translate += ' ';
                }
                translate += 'translate(' + ali.x + ', ' + ali.y + ')';
            }
        }
        if (translate.length > 0) {
            (0, vnode_utils_1.setAttr)(vnode, 'transform', translate);
        }
        return vnode;
    }
    postUpdate() {
    }
};
exports.LocationPostprocessor = LocationPostprocessor;
exports.LocationPostprocessor = LocationPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], LocationPostprocessor);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/move/snap.js":
/*!*********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/move/snap.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CenterGridSnapper = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
/**
 * A simple snapper that snaps the center of nodes and routing points to a grid.
 */
let CenterGridSnapper = class CenterGridSnapper {
    get gridX() {
        return 10;
    }
    get gridY() {
        return 10;
    }
    snap(position, element) {
        if (element && (0, model_1.isBoundsAware)(element))
            return {
                x: Math.round((position.x + 0.5 * element.bounds.width) / this.gridX) * this.gridX - 0.5 * element.bounds.width,
                y: Math.round((position.y + 0.5 * element.bounds.height) / this.gridY) * this.gridY - 0.5 * element.bounds.height
            };
        else
            return {
                x: Math.round(position.x / this.gridX) * this.gridX,
                y: Math.round(position.y / this.gridY) * this.gridY
            };
    }
};
exports.CenterGridSnapper = CenterGridSnapper;
exports.CenterGridSnapper = CenterGridSnapper = __decorate([
    (0, inversify_1.injectable)()
], CenterGridSnapper);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/nameable/model.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/nameable/model.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.name = exports.isNameable = exports.nameFeature = void 0;
exports.nameFeature = Symbol('nameableFeature');
function isNameable(element) {
    return element.hasFeature(exports.nameFeature);
}
exports.isNameable = isNameable;
function name(element) {
    if (isNameable(element)) {
        return element.name;
    }
    else {
        return undefined;
    }
}
exports.name = name;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/open/di.config.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/open/di.config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const open_1 = __webpack_require__(/*! ./open */ "../node_modules/sprotty/lib/features/open/open.js");
const openModule = new inversify_1.ContainerModule(bind => {
    bind(open_1.OpenMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(open_1.OpenMouseListener);
});
exports["default"] = openModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/open/model.js":
/*!**********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/open/model.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isOpenable = exports.openFeature = void 0;
exports.openFeature = Symbol('openFeature');
function isOpenable(element) {
    return element.hasFeature(exports.openFeature);
}
exports.isOpenable = isOpenable;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/open/open.js":
/*!*********************************************************!*\
  !*** ../node_modules/sprotty/lib/features/open/open.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpenMouseListener = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/open/model.js");
class OpenMouseListener extends mouse_tool_1.MouseListener {
    doubleClick(target, event) {
        const openableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_1.isOpenable);
        if (openableTarget !== undefined) {
            return [actions_1.OpenAction.create(openableTarget.id)];
        }
        return [];
    }
}
exports.OpenMouseListener = OpenMouseListener;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/projection/model.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/projection/model.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getModelBounds = exports.getProjectedBounds = exports.getProjections = exports.isProjectable = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "../node_modules/sprotty-protocol/lib/utils/object.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
function isProjectable(arg) {
    return (0, object_1.hasOwnProperty)(arg, 'projectionCssClasses');
}
exports.isProjectable = isProjectable;
/**
 * Gather all projections of elements contained in the given parent element.
 */
function getProjections(parent) {
    let result;
    for (const child of parent.children) {
        if (isProjectable(child) && child.projectionCssClasses.length > 0) {
            const projectedBounds = getProjectedBounds(child);
            if (projectedBounds) {
                const projection = {
                    elementId: child.id,
                    projectedBounds,
                    cssClasses: child.projectionCssClasses
                };
                if (result) {
                    result.push(projection);
                }
                else {
                    result = [projection];
                }
            }
        }
        if (child.children.length > 0) {
            const childProj = getProjections(child);
            if (childProj) {
                if (result) {
                    result.push(...childProj);
                }
                else {
                    result = childProj;
                }
            }
        }
    }
    return result;
}
exports.getProjections = getProjections;
/**
 * Compute the projected bounds of the given model element, that is the absolute position in the diagram.
 */
function getProjectedBounds(model) {
    const parent = model.parent;
    if (model.projectedBounds) {
        let bounds = model.projectedBounds;
        if ((0, model_1.isBoundsAware)(parent)) {
            bounds = (0, smodel_utils_1.transformToRootBounds)(parent, bounds);
        }
        return bounds;
    }
    else if ((0, model_1.isBoundsAware)(model)) {
        let bounds = model.bounds;
        bounds = (0, smodel_utils_1.transformToRootBounds)(parent, bounds);
        return bounds;
    }
    return undefined;
}
exports.getProjectedBounds = getProjectedBounds;
const MAX_COORD = 1000000000;
/**
 * Determine the total bounds of a model; this takes the viewport into consideration
 * so it can be shown in the projections.
 */
function getModelBounds(model) {
    let minX = MAX_COORD;
    let minY = MAX_COORD;
    let maxX = -MAX_COORD;
    let maxY = -MAX_COORD;
    const bounds = (0, model_1.isBoundsAware)(model) ? model.bounds : undefined;
    if (bounds && geometry_1.Dimension.isValid(bounds)) {
        // Get the bounds directly from the model if it returns a valid size
        minX = bounds.x;
        minY = bounds.y;
        maxX = minX + bounds.width;
        maxY = minY + bounds.height;
    }
    else {
        // Determine the min. / max coordinates of top-level model elements
        // Note that this approach is slower, so provide valid bounds to speed up the process.
        for (const element of model.children) {
            if ((0, model_1.isBoundsAware)(element)) {
                const b = element.bounds;
                minX = Math.min(minX, b.x);
                minY = Math.min(minY, b.y);
                maxX = Math.max(maxX, b.x + b.width);
                maxY = Math.max(maxY, b.y + b.height);
            }
        }
    }
    // Enlarge the bounds by the current viewport to ensure it always fits into the projection
    minX = Math.min(minX, model.scroll.x);
    minY = Math.min(minY, model.scroll.y);
    maxX = Math.max(maxX, model.scroll.x + model.canvasBounds.width / model.zoom);
    maxY = Math.max(maxY, model.scroll.y + model.canvasBounds.height / model.zoom);
    if (minX < maxX && minY < maxY) {
        return {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY
        };
    }
    return undefined;
}
exports.getModelBounds = getModelBounds;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/projection/views.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/projection/views.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectedViewportView = void 0;
/** @jsx html */
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "../node_modules/sprotty/lib/lib/jsx.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "../node_modules/snabbdom/build/index.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/projection/model.js");
/**
 * Special viewport root view that renders horizontal and vertical projection bars for quick navigation.
 */
let ProjectedViewportView = class ProjectedViewportView {
    render(model, context, args) {
        const rootNode = (0, jsx_1.html)("div", { "class-sprotty-root": true },
            this.renderSvg(model, context, args),
            this.renderProjections(model, context, args));
        (0, vnode_utils_1.setAttr)(rootNode, 'tabindex', 0); // make root div focus-able
        return rootNode;
    }
    renderSvg(model, context, args) {
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        const ns = 'http://www.w3.org/2000/svg';
        return (0, snabbdom_1.h)('svg', { ns }, (0, snabbdom_1.h)('g', { ns, attrs: { transform } }, context.renderChildren(model)));
    }
    renderProjections(model, context, args) {
        var _a;
        if (model.zoom <= 0) {
            return [];
        }
        const modelBounds = (0, model_1.getModelBounds)(model);
        if (!modelBounds) {
            return [];
        }
        const projections = (_a = (0, model_1.getProjections)(model)) !== null && _a !== void 0 ? _a : [];
        return [
            this.renderProjectionBar(projections, model, modelBounds, 'vertical'),
            this.renderProjectionBar(projections, model, modelBounds, 'horizontal')
        ];
    }
    renderProjectionBar(projections, model, modelBounds, orientation) {
        const params = { modelBounds, orientation };
        // NOTE: Here we assume that the projection bars have the same size as the diagram canvas, i.e. they are drawn as overlay above the canvas.
        params.factor = orientation === 'horizontal' ? model.canvasBounds.width / modelBounds.width : model.canvasBounds.height / modelBounds.height;
        params.zoomedFactor = params.factor / model.zoom;
        return (0, jsx_1.html)("div", { "class-sprotty-projection-bar": true, "class-horizontal": orientation === 'horizontal', "class-vertical": orientation === 'vertical' },
            this.renderViewport(model, params),
            projections.map(p => this.renderProjection(p, model, params)));
    }
    renderViewport(model, params) {
        let canvasSize, viewportPos;
        if (params.orientation === 'horizontal') {
            canvasSize = model.canvasBounds.width;
            viewportPos = (model.scroll.x - params.modelBounds.x) * params.factor;
        }
        else {
            canvasSize = model.canvasBounds.height;
            viewportPos = (model.scroll.y - params.modelBounds.y) * params.factor;
        }
        let viewportSize = canvasSize * params.zoomedFactor;
        if (viewportPos < 0) {
            viewportSize += viewportPos;
            viewportPos = 0;
        }
        else if (viewportPos > canvasSize) {
            viewportPos = canvasSize;
        }
        if (viewportSize < 0) {
            viewportSize = 0;
        }
        else if (viewportPos + viewportSize > canvasSize) {
            viewportSize = canvasSize - viewportPos;
        }
        const style = params.orientation === 'horizontal' ? {
            left: `${viewportPos}px`,
            width: `${viewportSize}px`
        } : {
            top: `${viewportPos}px`,
            height: `${viewportSize}px`
        };
        return (0, jsx_1.html)("div", { "class-sprotty-viewport": true, style: style });
    }
    renderProjection(projection, model, params) {
        let canvasSize, projPos, projSize;
        if (params.orientation === 'horizontal') {
            canvasSize = model.canvasBounds.width;
            projPos = (projection.projectedBounds.x - params.modelBounds.x) * params.factor;
            projSize = projection.projectedBounds.width * params.factor;
        }
        else {
            canvasSize = model.canvasBounds.height;
            projPos = (projection.projectedBounds.y - params.modelBounds.y) * params.factor;
            projSize = projection.projectedBounds.height * params.factor;
        }
        if (projPos < 0) {
            projSize += projPos;
            projPos = 0;
        }
        else if (projPos > canvasSize) {
            projPos = canvasSize;
        }
        if (projSize < 0) {
            projSize = 0;
        }
        else if (projPos + projSize > canvasSize) {
            projSize = canvasSize - projPos;
        }
        const style = params.orientation === 'horizontal' ? {
            left: `${projPos}px`,
            width: `${projSize}px`
        } : {
            top: `${projPos}px`,
            height: `${projSize}px`
        };
        const result = (0, jsx_1.html)("div", { id: `${params.orientation}-projection:${projection.elementId}`, "class-sprotty-projection": true, style: style });
        projection.cssClasses.forEach(cl => (0, vnode_utils_1.setClass)(result, cl, true));
        return result;
    }
};
exports.ProjectedViewportView = ProjectedViewportView;
exports.ProjectedViewportView = ProjectedViewportView = __decorate([
    (0, inversify_1.injectable)()
], ProjectedViewportView);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/abstract-edge-router.js":
/*!****************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/abstract-edge-router.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractEdgeRouter = exports.DefaultAnchors = exports.Side = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/routing/model.js");
const anchor_1 = __webpack_require__(/*! ./anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js");
const model_2 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/routing/model.js");
var Side;
(function (Side) {
    Side[Side["RIGHT"] = 0] = "RIGHT";
    Side[Side["LEFT"] = 1] = "LEFT";
    Side[Side["TOP"] = 2] = "TOP";
    Side[Side["BOTTOM"] = 3] = "BOTTOM";
})(Side || (exports.Side = Side = {}));
class DefaultAnchors {
    constructor(element, edgeParent, kind) {
        this.element = element;
        this.kind = kind;
        const bounds = element.bounds;
        this.bounds = (0, smodel_utils_1.translateBounds)(bounds, element.parent, edgeParent);
        this.left = { x: this.bounds.x, y: this.bounds.y + 0.5 * this.bounds.height, kind };
        this.right = { x: this.bounds.x + this.bounds.width, y: this.bounds.y + 0.5 * this.bounds.height, kind };
        this.top = { x: this.bounds.x + 0.5 * this.bounds.width, y: this.bounds.y, kind };
        this.bottom = { x: this.bounds.x + 0.5 * this.bounds.width, y: this.bounds.y + this.bounds.height, kind };
    }
    get(side) {
        return this[Side[side].toLowerCase()];
    }
    getNearestSide(point) {
        const leftDistance = geometry_1.Point.euclideanDistance(point, this.left);
        const rightDistance = geometry_1.Point.euclideanDistance(point, this.right);
        const topDistance = geometry_1.Point.euclideanDistance(point, this.top);
        const bottomDistance = geometry_1.Point.euclideanDistance(point, this.bottom);
        let currentNearestSide = Side.LEFT;
        let currentMinDist = leftDistance;
        if (rightDistance < currentMinDist) {
            currentMinDist = rightDistance;
            currentNearestSide = Side.RIGHT;
        }
        if (topDistance < currentMinDist) {
            currentMinDist = topDistance;
            currentNearestSide = Side.TOP;
        }
        if (bottomDistance < currentMinDist) {
            currentMinDist = bottomDistance;
            currentNearestSide = Side.BOTTOM;
        }
        return currentNearestSide;
    }
}
exports.DefaultAnchors = DefaultAnchors;
let AbstractEdgeRouter = class AbstractEdgeRouter {
    findOrthogonalIntersection(edge, point) {
        const calcOrthogonalIntersectionForSegment = (p1, p2) => {
            // Calculate the direction vector d of the edge and vector pq from p1 to point q
            const d = geometry_1.Point.subtract(p2, p1);
            const pq = geometry_1.Point.subtract(point, p1);
            // Calculate the scalar t for the direction vector d
            const t = geometry_1.Point.dotProduct(pq, d) / geometry_1.Point.dotProduct(d, d);
            // Check if the intersection point lies on the edge segment
            if (t >= 0 && t <= 1) {
                // Calculate and return the intersection point x
                return geometry_1.Point.linear(p1, p2, t);
            }
            else if (t < 0) {
                return p1;
            }
            else {
                return p2;
            }
        };
        // Calculate the intersection for each segment of the edge and return the closest one
        const routedPoints = this.route(edge);
        let intersectionPoint = routedPoints[0];
        let index = 0;
        for (let i = 0; i < routedPoints.length - 1; ++i) {
            const intersection = calcOrthogonalIntersectionForSegment(routedPoints[i], routedPoints[i + 1]);
            if (geometry_1.Point.euclideanDistance(point, intersection) < geometry_1.Point.euclideanDistance(point, intersectionPoint)) {
                intersectionPoint = intersection;
                index = i;
            }
        }
        const derivative = geometry_1.Point.subtract(routedPoints[index + 1], routedPoints[index]);
        return { point: intersectionPoint, derivative };
    }
    pointAt(edge, t) {
        const segments = this.calculateSegment(edge, t);
        if (!segments)
            return undefined;
        const { segmentStart, segmentEnd, lambda } = segments;
        return geometry_1.Point.linear(segmentStart, segmentEnd, lambda);
    }
    derivativeAt(edge, t) {
        const segments = this.calculateSegment(edge, t);
        if (!segments)
            return undefined;
        const { segmentStart, segmentEnd } = segments;
        return {
            x: segmentEnd.x - segmentStart.x,
            y: segmentEnd.y - segmentStart.y
        };
    }
    calculateSegment(edge, t) {
        if (t < 0 || t > 1)
            return undefined;
        const routedPoints = this.route(edge);
        if (routedPoints.length < 2)
            return undefined;
        const segmentLengths = [];
        let totalLength = 0;
        for (let i = 0; i < routedPoints.length - 1; ++i) {
            segmentLengths[i] = geometry_1.Point.euclideanDistance(routedPoints[i], routedPoints[i + 1]);
            totalLength += segmentLengths[i];
        }
        let currentLenght = 0;
        const tAsLenght = t * totalLength;
        for (let i = 0; i < routedPoints.length - 1; ++i) {
            const newLength = currentLenght + segmentLengths[i];
            // avoid division by (almost) zero
            if (segmentLengths[i] > 1E-8) {
                if (newLength >= tAsLenght) {
                    const lambda = Math.max(0, (tAsLenght - currentLenght)) / segmentLengths[i];
                    return {
                        segmentStart: routedPoints[i],
                        segmentEnd: routedPoints[i + 1],
                        lambda
                    };
                }
            }
            currentLenght = newLength;
        }
        return {
            segmentEnd: routedPoints.pop(),
            segmentStart: routedPoints.pop(),
            lambda: 1
        };
    }
    addHandle(edge, kind, type, routingPointIndex) {
        const handle = new model_1.SRoutingHandleImpl();
        handle.kind = kind;
        handle.pointIndex = routingPointIndex;
        handle.type = type;
        if (kind === 'target' && edge.id === model_1.edgeInProgressID)
            handle.id = model_1.edgeInProgressTargetHandleID;
        edge.add(handle);
        return handle;
    }
    getHandlePosition(edge, route, handle) {
        switch (handle.kind) {
            case 'source':
                if (edge.source instanceof model_1.SDanglingAnchorImpl)
                    return edge.source.position;
                else
                    return route[0];
            case 'target':
                if (edge.target instanceof model_1.SDanglingAnchorImpl)
                    return edge.target.position;
                else {
                    return route[route.length - 1];
                }
            default:
                const position = this.getInnerHandlePosition(edge, route, handle);
                if (position !== undefined)
                    return position;
                if (handle.pointIndex >= 0 && handle.pointIndex < edge.routingPoints.length)
                    return edge.routingPoints[handle.pointIndex];
        }
        return undefined;
    }
    findRouteSegment(edge, route, handleIndex) {
        const getIndex = (rp) => {
            if (rp.pointIndex !== undefined)
                return rp.pointIndex;
            else if (rp.kind === 'target')
                return edge.routingPoints.length;
            else
                return -2;
        };
        let start, end;
        for (const rp of route) {
            const i = getIndex(rp);
            if (i <= handleIndex && (start === undefined || i > getIndex(start)))
                start = rp;
            if (i > handleIndex && (end === undefined || i < getIndex(end)))
                end = rp;
        }
        return { start, end };
    }
    getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection = 0) {
        const translatedRefPoint = (0, smodel_utils_1.translatePoint)(refPoint, refContainer, connectable.parent);
        const anchorComputer = this.getAnchorComputer(connectable);
        const strokeCorrection = 0.5 * connectable.strokeWidth;
        const anchor = anchorComputer.getAnchor(connectable, translatedRefPoint, anchorCorrection + strokeCorrection);
        return (0, smodel_utils_1.translatePoint)(anchor, connectable.parent, edge.parent);
    }
    getAnchorComputer(connectable) {
        return this.anchorRegistry.get(this.kind, connectable.anchorKind);
    }
    applyHandleMoves(edge, moves) {
        const remainingMoves = moves.slice();
        moves.forEach(move => {
            const handle = move.handle;
            if (handle.kind === 'source' && !(edge.source instanceof model_1.SDanglingAnchorImpl)) {
                // detach source
                const anchor = new model_1.SDanglingAnchorImpl();
                anchor.id = edge.id + '_dangling-source';
                anchor.original = edge.source;
                anchor.position = move.toPosition;
                handle.root.add(anchor);
                handle.danglingAnchor = anchor;
                edge.sourceId = anchor.id;
            }
            else if (handle.kind === 'target' && !(edge.target instanceof model_1.SDanglingAnchorImpl)) {
                // detach target
                const anchor = new model_1.SDanglingAnchorImpl();
                anchor.id = edge.id + '_dangling-target';
                anchor.original = edge.target;
                anchor.position = move.toPosition;
                handle.root.add(anchor);
                handle.danglingAnchor = anchor;
                edge.targetId = anchor.id;
            }
            if (handle.danglingAnchor) {
                handle.danglingAnchor.position = move.toPosition;
                remainingMoves.splice(remainingMoves.indexOf(move), 1);
            }
        });
        if (remainingMoves.length > 0)
            this.applyInnerHandleMoves(edge, remainingMoves);
        this.cleanupRoutingPoints(edge, edge.routingPoints, true, true);
    }
    cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints) {
        const sourceAnchors = new DefaultAnchors(edge.source, edge.parent, "source");
        const targetAnchors = new DefaultAnchors(edge.target, edge.parent, "target");
        this.resetRoutingPointsOnReconnect(edge, routingPoints, updateHandles, sourceAnchors, targetAnchors);
    }
    resetRoutingPointsOnReconnect(edge, routingPoints, updateHandles, sourceAnchors, targetAnchors) {
        if (routingPoints.length === 0 || edge.source instanceof model_1.SDanglingAnchorImpl || edge.target instanceof model_1.SDanglingAnchorImpl) {
            const options = this.getOptions(edge);
            const corners = this.calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options);
            routingPoints.splice(0, routingPoints.length, ...corners);
            if (updateHandles) {
                let maxPointIndex = -2;
                edge.children.forEach(child => {
                    if (child instanceof model_1.SRoutingHandleImpl) {
                        if (child.kind === 'target')
                            child.pointIndex = routingPoints.length;
                        else if (child.kind === 'line' && child.pointIndex >= routingPoints.length)
                            edge.remove(child);
                        else
                            maxPointIndex = Math.max(child.pointIndex, maxPointIndex);
                    }
                });
                for (let i = maxPointIndex; i < routingPoints.length - 1; ++i)
                    this.addHandle(edge, 'manhattan-50%', 'volatile-routing-point', i);
            }
            return true;
        }
        return false;
    }
    applyReconnect(edge, newSourceId, newTargetId) {
        let hasChanged = false;
        if (newSourceId) {
            const newSource = edge.root.index.getById(newSourceId);
            if (newSource instanceof model_2.SConnectableElementImpl) {
                edge.sourceId = newSource.id;
                hasChanged = true;
            }
        }
        if (newTargetId) {
            const newTarget = edge.root.index.getById(newTargetId);
            if (newTarget instanceof model_2.SConnectableElementImpl) {
                edge.targetId = newTarget.id;
                hasChanged = true;
            }
        }
        if (hasChanged) {
            // reset attached elements in index
            edge.index.remove(edge);
            if (edge.id === model_1.edgeInProgressID) {
                // create a proper edge id after connecting the edge in progress
                const idGen = (counter) => `${edge.sourceId}_to_${edge.targetId}_${counter}`;
                let idx = 0;
                let newId = idGen(idx);
                while (edge.index.getById(newId) !== undefined) {
                    newId = idGen(++idx);
                }
                edge.id = newId;
                const progressTargetHandle = edge.children.find(child => child.id === model_1.edgeInProgressTargetHandleID);
                if (progressTargetHandle instanceof model_1.SRoutingHandleImpl) {
                    // remove in progress target handle
                    edge.remove(progressTargetHandle);
                    if (progressTargetHandle.danglingAnchor) {
                        // remove dangling anchor
                        progressTargetHandle.danglingAnchor.parent.remove(progressTargetHandle.danglingAnchor);
                    }
                }
            }
            edge.index.add(edge);
            if (this.getSelfEdgeIndex(edge) > -1) {
                edge.routingPoints = [];
                this.cleanupRoutingPoints(edge, edge.routingPoints, true, true);
            }
        }
    }
    takeSnapshot(edge) {
        return {
            routingPoints: edge.routingPoints.slice(),
            routingHandles: edge.children
                .filter(child => child instanceof model_1.SRoutingHandleImpl)
                .map(child => child),
            routedPoints: this.route(edge),
            router: this,
            source: edge.source,
            target: edge.target
        };
    }
    applySnapshot(edge, snapshot) {
        edge.routingPoints = snapshot.routingPoints;
        edge.removeAll(child => child instanceof model_1.SRoutingHandleImpl);
        edge.routerKind = snapshot.router.kind;
        snapshot.routingHandles.forEach(handle => edge.add(handle));
        if (snapshot.source)
            edge.sourceId = snapshot.source.id;
        if (snapshot.target)
            edge.targetId = snapshot.target.id;
        // update index
        edge.root.index.remove(edge);
        edge.root.index.add(edge);
    }
    calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options) {
        const selfEdgeIndex = this.getSelfEdgeIndex(edge);
        if (selfEdgeIndex >= 0) {
            const standardDist = options.standardDistance;
            const delta = options.selfEdgeOffset * Math.min(sourceAnchors.bounds.width, sourceAnchors.bounds.height);
            switch (selfEdgeIndex % 4) {
                case 0:
                    return [
                        { x: sourceAnchors.get(Side.RIGHT).x + standardDist, y: sourceAnchors.get(Side.RIGHT).y + delta },
                        { x: sourceAnchors.get(Side.RIGHT).x + standardDist, y: sourceAnchors.get(Side.BOTTOM).y + standardDist },
                        { x: sourceAnchors.get(Side.BOTTOM).x + delta, y: sourceAnchors.get(Side.BOTTOM).y + standardDist },
                    ];
                case 1:
                    return [
                        { x: sourceAnchors.get(Side.BOTTOM).x - delta, y: sourceAnchors.get(Side.BOTTOM).y + standardDist },
                        { x: sourceAnchors.get(Side.LEFT).x - standardDist, y: sourceAnchors.get(Side.BOTTOM).y + standardDist },
                        { x: sourceAnchors.get(Side.LEFT).x - standardDist, y: sourceAnchors.get(Side.LEFT).y + delta },
                    ];
                case 2:
                    return [
                        { x: sourceAnchors.get(Side.LEFT).x - standardDist, y: sourceAnchors.get(Side.LEFT).y - delta },
                        { x: sourceAnchors.get(Side.LEFT).x - standardDist, y: sourceAnchors.get(Side.TOP).y - standardDist },
                        { x: sourceAnchors.get(Side.TOP).x - delta, y: sourceAnchors.get(Side.TOP).y - standardDist },
                    ];
                case 3:
                    return [
                        { x: sourceAnchors.get(Side.TOP).x + delta, y: sourceAnchors.get(Side.TOP).y - standardDist },
                        { x: sourceAnchors.get(Side.RIGHT).x + standardDist, y: sourceAnchors.get(Side.TOP).y - standardDist },
                        { x: sourceAnchors.get(Side.RIGHT).x + standardDist, y: sourceAnchors.get(Side.RIGHT).y - delta },
                    ];
            }
        }
        return [];
    }
    getSelfEdgeIndex(edge) {
        if (!edge.source || edge.source !== edge.target)
            return -1;
        return edge.source.outgoingEdges
            .filter(otherEdge => otherEdge.target === edge.source)
            .indexOf(edge);
    }
    commitRoute(edge, routedPoints) {
        const newRoutingPoints = [];
        for (let i = 1; i < routedPoints.length - 1; ++i)
            newRoutingPoints.push({ x: routedPoints[i].x, y: routedPoints[i].y });
        edge.routingPoints = newRoutingPoints;
    }
};
exports.AbstractEdgeRouter = AbstractEdgeRouter;
__decorate([
    (0, inversify_1.inject)(anchor_1.AnchorComputerRegistry),
    __metadata("design:type", anchor_1.AnchorComputerRegistry)
], AbstractEdgeRouter.prototype, "anchorRegistry", void 0);
exports.AbstractEdgeRouter = AbstractEdgeRouter = __decorate([
    (0, inversify_1.injectable)()
], AbstractEdgeRouter);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/anchor.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/anchor.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnchorComputerRegistry = exports.RECTANGULAR_ANCHOR_KIND = exports.ELLIPTIC_ANCHOR_KIND = exports.DIAMOND_ANCHOR_KIND = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "../node_modules/sprotty/lib/utils/registry.js");
exports.DIAMOND_ANCHOR_KIND = 'diamond';
exports.ELLIPTIC_ANCHOR_KIND = 'elliptic';
exports.RECTANGULAR_ANCHOR_KIND = 'rectangular';
let AnchorComputerRegistry = class AnchorComputerRegistry extends registry_1.InstanceRegistry {
    constructor(anchors) {
        super();
        anchors.forEach(anchor => this.register(anchor.kind, anchor));
    }
    get defaultAnchorKind() {
        return exports.RECTANGULAR_ANCHOR_KIND;
    }
    get(routerKind, anchorKind) {
        return super.get(`${routerKind}:${anchorKind || this.defaultAnchorKind}`);
    }
};
exports.AnchorComputerRegistry = AnchorComputerRegistry;
exports.AnchorComputerRegistry = AnchorComputerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IAnchorComputer)),
    __metadata("design:paramtypes", [Array])
], AnchorComputerRegistry);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/bezier-anchors.js":
/*!**********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/bezier-anchors.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BezierDiamondAnchor = exports.BezierRectangleAnchor = exports.BezierEllipseAnchor = void 0;
const anchor_1 = __webpack_require__(/*! ./anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const polyline_anchors_1 = __webpack_require__(/*! ./polyline-anchors */ "../node_modules/sprotty/lib/features/routing/polyline-anchors.js");
const bezier_edge_router_1 = __webpack_require__(/*! ./bezier-edge-router */ "../node_modules/sprotty/lib/features/routing/bezier-edge-router.js");
let BezierEllipseAnchor = class BezierEllipseAnchor extends polyline_anchors_1.EllipseAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
};
exports.BezierEllipseAnchor = BezierEllipseAnchor;
exports.BezierEllipseAnchor = BezierEllipseAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierEllipseAnchor);
let BezierRectangleAnchor = class BezierRectangleAnchor extends polyline_anchors_1.RectangleAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
};
exports.BezierRectangleAnchor = BezierRectangleAnchor;
exports.BezierRectangleAnchor = BezierRectangleAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierRectangleAnchor);
let BezierDiamondAnchor = class BezierDiamondAnchor extends polyline_anchors_1.DiamondAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.DIAMOND_ANCHOR_KIND;
    }
};
exports.BezierDiamondAnchor = BezierDiamondAnchor;
exports.BezierDiamondAnchor = BezierDiamondAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierDiamondAnchor);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/bezier-edge-router.js":
/*!**************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/bezier-edge-router.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var BezierEdgeRouter_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddRemoveBezierSegmentCommand = exports.AddRemoveBezierSegmentAction = exports.BezierMouseListener = exports.BezierEdgeRouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ./routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
const abstract_edge_router_1 = __webpack_require__(/*! ./abstract-edge-router */ "../node_modules/sprotty/lib/features/routing/abstract-edge-router.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
let BezierEdgeRouter = BezierEdgeRouter_1 = class BezierEdgeRouter extends abstract_edge_router_1.AbstractEdgeRouter {
    get kind() {
        return BezierEdgeRouter_1.KIND;
    }
    route(edge) {
        if (!edge.source || !edge.target)
            return [];
        const rpCount = edge.routingPoints.length;
        const source = edge.source;
        const target = edge.target;
        const result = [];
        result.push({ kind: 'source', x: 0, y: 0 });
        if (rpCount === 0) {
            // initial values
            const [h1, h2] = this.createDefaultBezierHandles(source.position, target.position);
            result.push({ kind: 'bezier-control-after', x: h1.x, y: h1.y, pointIndex: 0 });
            result.push({ kind: 'bezier-control-before', x: h2.x, y: h2.y, pointIndex: 1 });
            edge.routingPoints.push(h1);
            edge.routingPoints.push(h2);
        }
        else if (rpCount >= 2) {
            for (let i = 0; i < rpCount; i++) {
                const p = edge.routingPoints[i];
                if (i % 3 === 0) {
                    result.push({ kind: 'bezier-control-after', x: p.x, y: p.y, pointIndex: i });
                }
                if ((i + 1) % 3 === 0) {
                    result.push({ kind: 'bezier-junction', x: p.x, y: p.y, pointIndex: i });
                }
                else if ((i + 2) % 3 === 0) {
                    result.push({ kind: 'bezier-control-before', x: p.x, y: p.y, pointIndex: i });
                }
            }
        }
        result.push({ kind: 'target', x: 0, y: 0 });
        // use "ends" of edge as reference or next bezier-junction
        const p0 = rpCount > 2 ? edge.routingPoints[2] : target.position;
        const pn = rpCount > 2 ? edge.routingPoints[edge.routingPoints.length - 3] : source.position;
        const sourceAnchor = this.getTranslatedAnchor(source, p0, target.parent, edge, edge.sourceAnchorCorrection);
        const targetAnchor = this.getTranslatedAnchor(target, pn, source.parent, edge, edge.targetAnchorCorrection);
        result[0] = { kind: 'source', x: sourceAnchor.x, y: sourceAnchor.y };
        result[result.length - 1] = { kind: 'target', x: targetAnchor.x, y: targetAnchor.y };
        return result;
    }
    createDefaultBezierHandles(relH1, relH2) {
        const h1 = {
            x: relH1.x - BezierEdgeRouter_1.DEFAULT_BEZIER_HANDLE_OFFSET,
            y: relH1.y
        };
        const h2 = {
            x: relH2.x + BezierEdgeRouter_1.DEFAULT_BEZIER_HANDLE_OFFSET,
            y: relH2.y
        };
        return [h1, h2];
    }
    createRoutingHandles(edge) {
        // route ensure there are at least 2 routed points
        this.route(edge);
        this.rebuildHandles(edge);
    }
    rebuildHandles(edge) {
        this.addHandle(edge, 'source', 'routing-point', -2);
        this.addHandle(edge, 'bezier-control-after', 'bezier-routing-point', 0);
        this.addHandle(edge, 'bezier-add', 'bezier-create-routing-point', 0);
        const rpCount = edge.routingPoints.length;
        if (rpCount > 2) {
            for (let i = 1; i < rpCount - 1; i += 3) {
                this.addHandle(edge, 'bezier-control-before', 'bezier-routing-point', i);
                // Add two circle for add/remove segments
                this.addHandle(edge, 'bezier-add', 'bezier-create-routing-point', i + 1);
                this.addHandle(edge, 'bezier-junction', 'routing-point', i + 1);
                this.addHandle(edge, 'bezier-remove', 'bezier-remove-routing-point', i + 1);
                this.addHandle(edge, 'bezier-control-after', 'bezier-routing-point', i + 2);
                // re-position control-pairs
                this.moveBezierControlPair(edge.routingPoints[i], i, edge);
            }
        }
        this.addHandle(edge, 'bezier-control-before', 'bezier-routing-point', rpCount - 1);
        this.addHandle(edge, 'target', 'routing-point', -1);
    }
    getInnerHandlePosition(edge, route, handle) {
        if (handle.kind === 'bezier-control-before' || handle.kind === 'bezier-junction' || handle.kind === 'bezier-control-after') {
            for (let i = 0; i < route.length; i++) {
                const p = route[i];
                if (p.pointIndex === handle.pointIndex && p.kind === handle.kind)
                    return p;
            }
        }
        else if (handle.kind === 'bezier-add') {
            const ctrlPoint = this.findBezierControl(edge, route, handle.pointIndex);
            return { x: ctrlPoint.x, y: ctrlPoint.y + 12.5 };
        }
        else if (handle.kind === 'bezier-remove') {
            const ctrlPoint = this.findBezierControl(edge, route, handle.pointIndex);
            return { x: ctrlPoint.x, y: ctrlPoint.y - 12.5 };
        }
        return undefined;
    }
    findBezierControl(edge, route, handleIndex) {
        let result = { x: route[0].x, y: route[0].y };
        if (handleIndex > 0) {
            for (const rp of route) {
                if (rp.pointIndex !== undefined && rp.pointIndex === handleIndex && rp.kind === 'bezier-junction') {
                    result = { x: rp.x, y: rp.y };
                    break;
                }
            }
        }
        return result;
    }
    applyHandleMoves(edge, moves) {
        moves.forEach(move => {
            const handle = move.handle;
            let orgPosition = { x: 0, y: 0 };
            let relativePos, newControlPos, ctrlPointIndex;
            const moveToPos = move.toPosition;
            switch (handle.kind) {
                case 'bezier-control-before':
                case 'bezier-control-after':
                    // find potential other handle/rp and move
                    this.moveBezierControlPair(moveToPos, move.handle.pointIndex, edge);
                    break;
                case 'bezier-junction':
                    const index = handle.pointIndex;
                    if (index >= 0 && index < edge.routingPoints.length) {
                        ctrlPointIndex = index - 1;
                        orgPosition = edge.routingPoints[index];
                        relativePos = edge.routingPoints[ctrlPointIndex];
                        newControlPos = this.calcRelativeMove(orgPosition, moveToPos, relativePos);
                        edge.routingPoints[index] = moveToPos;
                        this.moveBezierControlPair(newControlPos, ctrlPointIndex, edge);
                    }
                    break;
                case 'source':
                    ctrlPointIndex = 0;
                    relativePos = edge.routingPoints[ctrlPointIndex];
                    if (!(edge.source instanceof model_1.SDanglingAnchorImpl)) {
                        // detach source
                        const anchor = new model_1.SDanglingAnchorImpl();
                        anchor.id = edge.id + '_dangling-source';
                        anchor.original = edge.source;
                        anchor.position = move.toPosition;
                        handle.root.add(anchor);
                        handle.danglingAnchor = anchor;
                        edge.sourceId = anchor.id;
                        if (edge.source)
                            orgPosition = edge.source.position;
                    }
                    else if (handle.danglingAnchor) {
                        orgPosition = handle.danglingAnchor.position;
                        handle.danglingAnchor.position = moveToPos;
                    }
                    newControlPos = this.calcRelativeMove(orgPosition, moveToPos, relativePos);
                    this.moveBezierControlPair(newControlPos, ctrlPointIndex, edge);
                    break;
                case 'target':
                    ctrlPointIndex = edge.routingPoints.length - 1;
                    relativePos = edge.routingPoints[ctrlPointIndex];
                    if (!(edge.target instanceof model_1.SDanglingAnchorImpl)) {
                        // detach target
                        const anchor = new model_1.SDanglingAnchorImpl();
                        anchor.id = edge.id + '_dangling-target';
                        anchor.original = edge.target;
                        anchor.position = moveToPos;
                        handle.root.add(anchor);
                        handle.danglingAnchor = anchor;
                        edge.targetId = anchor.id;
                        if (edge.target)
                            orgPosition = edge.target.position;
                    }
                    else if (handle.danglingAnchor) {
                        orgPosition = handle.danglingAnchor.position;
                        handle.danglingAnchor.position = moveToPos;
                    }
                    newControlPos = this.calcRelativeMove(orgPosition, moveToPos, relativePos);
                    this.moveBezierControlPair(newControlPos, ctrlPointIndex, edge);
                    break;
                default:
                    break;
            }
        });
    }
    applyInnerHandleMoves(edge, moves) {
        // not required
    }
    getOptions(edge) {
        return {
            minimalPointDistance: 2,
            standardDistance: 0.1,
            selfEdgeOffset: 20
        };
    }
    calcRelativeMove(oldPos, newPos, relativePoint) {
        return {
            x: relativePoint.x - (oldPos.x - newPos.x),
            y: relativePoint.y - (oldPos.y - newPos.y)
        };
    }
    createNewBezierSegment(index, edge) {
        const routingPoints = edge.routingPoints;
        let bezierJunctionPos, start, end;
        if (routingPoints.length === 2) {
            start = routingPoints[index < 0 ? 0 : index];
            end = routingPoints[routingPoints.length - 1];
            bezierJunctionPos = (0, geometry_1.centerOfLine)(start, end);
        }
        else {
            start = routingPoints[index];
            end = routingPoints[index + 2];
            bezierJunctionPos = (0, geometry_1.centerOfLine)(start, end);
        }
        const [h1, h2] = this.createDefaultBezierHandles(bezierJunctionPos, bezierJunctionPos);
        routingPoints.splice(index + 1, 0, h1);
        routingPoints.splice(index + 2, 0, bezierJunctionPos);
        routingPoints.splice(index + 3, 0, h2);
        // ensure handles are correctly positioned
        this.moveBezierControlPair(h1, index + 1, edge);
        // simple solution for now: just rebuildHandles
        edge.removeAll(c => c instanceof model_1.SRoutingHandleImpl);
        this.rebuildHandles(edge);
    }
    removeBezierSegment(index, edge) {
        const routingPoints = edge.routingPoints;
        routingPoints.splice(index - 1, 3);
        // simple solution for now: just rebuildHandles
        edge.removeAll(c => c instanceof model_1.SRoutingHandleImpl);
        this.rebuildHandles(edge);
    }
    moveBezierControlPair(newPos, ctrlPointIndex, edge) {
        if (ctrlPointIndex >= 0 && ctrlPointIndex < edge.routingPoints.length) {
            // find neighbors
            const before = ctrlPointIndex - 1;
            const after = ctrlPointIndex + 1;
            // this is the first control or the last control => nothing to do further
            if (before < 0 || after === edge.routingPoints.length) {
                edge.routingPoints[ctrlPointIndex] = newPos;
            }
            else {
                // behind bezier-junction
                if (ctrlPointIndex % 3 === 0) {
                    this.setBezierMirror(edge, newPos, ctrlPointIndex, false);
                    // before bezier-junction
                }
                else if ((ctrlPointIndex + 2) % 3 === 0) {
                    this.setBezierMirror(edge, newPos, ctrlPointIndex, true);
                }
            }
        }
    }
    setBezierMirror(edge, newPos, pointIndex, before) {
        edge.routingPoints[pointIndex] = newPos;
        const jct = edge.routingPoints[before ? (pointIndex + 1) : (pointIndex - 1)];
        edge.routingPoints[before ? (pointIndex + 2) : (pointIndex - 2)] = {
            x: jct.x - (newPos.x - jct.x),
            y: jct.y - (newPos.y - jct.y)
        };
    }
};
exports.BezierEdgeRouter = BezierEdgeRouter;
BezierEdgeRouter.KIND = 'bezier';
BezierEdgeRouter.DEFAULT_BEZIER_HANDLE_OFFSET = 25;
exports.BezierEdgeRouter = BezierEdgeRouter = BezierEdgeRouter_1 = __decorate([
    (0, inversify_1.injectable)()
], BezierEdgeRouter);
/**
 * Reacts on mouseDown events if the target kind is bezier-add or bezier-remove
 */
class BezierMouseListener extends mouse_tool_1.MouseListener {
    mouseDown(target, event) {
        const result = [];
        if (target instanceof model_1.SRoutingHandleImpl && (target.kind === 'bezier-add' || target.kind === 'bezier-remove')) {
            if (target.type === 'bezier-create-routing-point') {
                result.push(AddRemoveBezierSegmentAction.create('add', target.id));
            }
            else if (target.type === 'bezier-remove-routing-point') {
                result.push(AddRemoveBezierSegmentAction.create('remove', target.id));
            }
        }
        return result;
    }
}
exports.BezierMouseListener = BezierMouseListener;
;
var AddRemoveBezierSegmentAction;
(function (AddRemoveBezierSegmentAction) {
    AddRemoveBezierSegmentAction.KIND = 'addRemoveBezierSegment';
    function create(actionTask, targetId) {
        return {
            kind: AddRemoveBezierSegmentAction.KIND,
            actionTask,
            targetId
        };
    }
    AddRemoveBezierSegmentAction.create = create;
})(AddRemoveBezierSegmentAction || (exports.AddRemoveBezierSegmentAction = AddRemoveBezierSegmentAction = {}));
let AddRemoveBezierSegmentCommand = class AddRemoveBezierSegmentCommand extends command_1.Command {
    constructor(action, edgeRouterRegistry) {
        super();
        this.action = action;
        this.edgeRouterRegistry = edgeRouterRegistry;
    }
    execute(context) {
        const index = context.root.index;
        const target = index.getById(this.action.targetId);
        if (this.edgeRouterRegistry && target instanceof model_1.SRoutingHandleImpl) {
            const raw = this.edgeRouterRegistry.get(target.parent.routerKind);
            if (raw instanceof BezierEdgeRouter) {
                const router = raw;
                for (const child of context.root.children) {
                    if (child.id === target.parent.id) {
                        if (this.action.actionTask === 'add') {
                            router.createNewBezierSegment(target.pointIndex, child);
                        }
                        else if (this.action.actionTask === 'remove') {
                            router.removeBezierSegment(target.pointIndex, child);
                        }
                        break;
                    }
                }
            }
        }
        return context.root;
    }
    undo(context) {
        throw new Error('Method not implemented.');
    }
    redo(context) {
        throw new Error('Method not implemented.');
    }
};
exports.AddRemoveBezierSegmentCommand = AddRemoveBezierSegmentCommand;
AddRemoveBezierSegmentCommand.KIND = AddRemoveBezierSegmentAction.KIND;
exports.AddRemoveBezierSegmentCommand = AddRemoveBezierSegmentCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __param(1, (0, inversify_1.inject)(routing_1.EdgeRouterRegistry)),
    __metadata("design:paramtypes", [Object, routing_1.EdgeRouterRegistry])
], AddRemoveBezierSegmentCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/di.config.js":
/*!*****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/di.config.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const manhattan_edge_router_1 = __webpack_require__(/*! ./manhattan-edge-router */ "../node_modules/sprotty/lib/features/routing/manhattan-edge-router.js");
const polyline_edge_router_1 = __webpack_require__(/*! ./polyline-edge-router */ "../node_modules/sprotty/lib/features/routing/polyline-edge-router.js");
const manhattan_anchors_1 = __webpack_require__(/*! ./manhattan-anchors */ "../node_modules/sprotty/lib/features/routing/manhattan-anchors.js");
const polyline_anchors_1 = __webpack_require__(/*! ./polyline-anchors */ "../node_modules/sprotty/lib/features/routing/polyline-anchors.js");
const anchor_1 = __webpack_require__(/*! ./anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js");
const routing_1 = __webpack_require__(/*! ./routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
const bezier_edge_router_1 = __webpack_require__(/*! ./bezier-edge-router */ "../node_modules/sprotty/lib/features/routing/bezier-edge-router.js");
const bezier_anchors_1 = __webpack_require__(/*! ./bezier-anchors */ "../node_modules/sprotty/lib/features/routing/bezier-anchors.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const routingModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(routing_1.EdgeRouterRegistry).toSelf().inSingletonScope();
    bind(anchor_1.AnchorComputerRegistry).toSelf().inSingletonScope();
    bind(manhattan_edge_router_1.ManhattanEdgeRouter).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRouter).toService(manhattan_edge_router_1.ManhattanEdgeRouter);
    bind(manhattan_anchors_1.ManhattanEllipticAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(manhattan_anchors_1.ManhattanEllipticAnchor);
    bind(manhattan_anchors_1.ManhattanRectangularAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(manhattan_anchors_1.ManhattanRectangularAnchor);
    bind(manhattan_anchors_1.ManhattanDiamondAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(manhattan_anchors_1.ManhattanDiamondAnchor);
    bind(polyline_edge_router_1.PolylineEdgeRouter).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRouter).toService(polyline_edge_router_1.PolylineEdgeRouter);
    bind(polyline_anchors_1.EllipseAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(polyline_anchors_1.EllipseAnchor);
    bind(polyline_anchors_1.RectangleAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(polyline_anchors_1.RectangleAnchor);
    bind(polyline_anchors_1.DiamondAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(polyline_anchors_1.DiamondAnchor);
    bind(bezier_edge_router_1.BezierEdgeRouter).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRouter).toService(bezier_edge_router_1.BezierEdgeRouter);
    bind(bezier_anchors_1.BezierEllipseAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(bezier_anchors_1.BezierEllipseAnchor);
    bind(bezier_anchors_1.BezierRectangleAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(bezier_anchors_1.BezierRectangleAnchor);
    bind(bezier_anchors_1.BezierDiamondAnchor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).toService(bezier_anchors_1.BezierDiamondAnchor);
    (0, command_registration_1.configureCommand)({ bind, isBound }, bezier_edge_router_1.AddRemoveBezierSegmentCommand);
});
exports["default"] = routingModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/manhattan-anchors.js":
/*!*************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/manhattan-anchors.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ManhattanRectangularAnchor_1, ManhattanDiamondAnchor_1, ManhattanEllipticAnchor_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManhattanEllipticAnchor = exports.ManhattanDiamondAnchor = exports.ManhattanRectangularAnchor = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const geometry_2 = __webpack_require__(/*! ../../utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js");
const anchor_1 = __webpack_require__(/*! ./anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js");
const manhattan_edge_router_1 = __webpack_require__(/*! ./manhattan-edge-router */ "../node_modules/sprotty/lib/features/routing/manhattan-edge-router.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let ManhattanRectangularAnchor = ManhattanRectangularAnchor_1 = class ManhattanRectangularAnchor {
    get kind() {
        return ManhattanRectangularAnchor_1.KIND;
    }
    getAnchor(connectable, refPoint, offset) {
        const b = connectable.bounds;
        if (b.width <= 0 || b.height <= 0) {
            return b;
        }
        const bounds = {
            x: b.x - offset,
            y: b.y - offset,
            width: b.width + 2 * offset,
            height: b.height + 2 * offset
        };
        if (refPoint.x >= bounds.x && bounds.x + bounds.width >= refPoint.x) {
            if (refPoint.y < bounds.y + 0.5 * bounds.height)
                return { x: refPoint.x, y: bounds.y };
            else
                return { x: refPoint.x, y: bounds.y + bounds.height };
        }
        if (refPoint.y >= bounds.y && bounds.y + bounds.height >= refPoint.y) {
            if (refPoint.x < bounds.x + 0.5 * bounds.width)
                return { x: bounds.x, y: refPoint.y };
            else
                return { x: bounds.x + bounds.width, y: refPoint.y };
        }
        return geometry_1.Bounds.center(bounds);
    }
};
exports.ManhattanRectangularAnchor = ManhattanRectangularAnchor;
ManhattanRectangularAnchor.KIND = manhattan_edge_router_1.ManhattanEdgeRouter.KIND + ':' + anchor_1.RECTANGULAR_ANCHOR_KIND;
exports.ManhattanRectangularAnchor = ManhattanRectangularAnchor = ManhattanRectangularAnchor_1 = __decorate([
    (0, inversify_1.injectable)()
], ManhattanRectangularAnchor);
let ManhattanDiamondAnchor = ManhattanDiamondAnchor_1 = class ManhattanDiamondAnchor {
    get kind() {
        return ManhattanDiamondAnchor_1.KIND;
    }
    getAnchor(connectable, refPoint, offset = 0) {
        const b = connectable.bounds;
        if (b.width <= 0 || b.height <= 0) {
            return b;
        }
        const bounds = {
            x: b.x - offset,
            y: b.y - offset,
            width: b.width + 2 * offset,
            height: b.height + 2 * offset
        };
        const c = geometry_1.Bounds.center(bounds);
        let outline = undefined;
        let refLine = undefined;
        if (refPoint.x >= bounds.x && refPoint.x <= bounds.x + bounds.width) {
            if (bounds.x + 0.5 * bounds.width >= refPoint.x) {
                refLine = new geometry_2.PointToPointLine(refPoint, { x: refPoint.x, y: c.y });
                if (refPoint.y < c.y)
                    outline = new geometry_2.PointToPointLine({ x: bounds.x, y: c.y }, { x: c.x, y: bounds.y });
                else
                    outline = new geometry_2.PointToPointLine({ x: bounds.x, y: c.y }, { x: c.x, y: bounds.y + bounds.height });
            }
            else {
                refLine = new geometry_2.PointToPointLine(refPoint, { x: refPoint.x, y: c.y });
                if (refPoint.y < c.y)
                    outline = new geometry_2.PointToPointLine({ x: bounds.x + bounds.width, y: c.y }, { x: c.x, y: bounds.y });
                else
                    outline = new geometry_2.PointToPointLine({ x: bounds.x + bounds.width, y: c.y }, { x: c.x, y: bounds.y + bounds.height });
            }
        }
        else if (refPoint.y >= bounds.y && refPoint.y <= bounds.y + bounds.height) {
            if (bounds.y + 0.5 * bounds.height >= refPoint.y) {
                refLine = new geometry_2.PointToPointLine(refPoint, { x: c.x, y: refPoint.y });
                if (refPoint.x < c.x)
                    outline = new geometry_2.PointToPointLine({ x: bounds.x, y: c.y }, { x: c.x, y: bounds.y });
                else
                    outline = new geometry_2.PointToPointLine({ x: bounds.x + bounds.width, y: c.y }, { x: c.x, y: bounds.y });
            }
            else {
                refLine = new geometry_2.PointToPointLine(refPoint, { x: c.x, y: refPoint.y });
                if (refPoint.x < c.x)
                    outline = new geometry_2.PointToPointLine({ x: bounds.x, y: c.y }, { x: c.x, y: bounds.y + bounds.height });
                else
                    outline = new geometry_2.PointToPointLine({ x: bounds.x + bounds.width, y: c.y }, { x: c.x, y: bounds.y + bounds.height });
            }
        }
        if (!!refLine && !!outline)
            return (0, geometry_2.intersection)(outline, refLine);
        else
            return c;
    }
};
exports.ManhattanDiamondAnchor = ManhattanDiamondAnchor;
ManhattanDiamondAnchor.KIND = manhattan_edge_router_1.ManhattanEdgeRouter.KIND + ':' + anchor_1.DIAMOND_ANCHOR_KIND;
exports.ManhattanDiamondAnchor = ManhattanDiamondAnchor = ManhattanDiamondAnchor_1 = __decorate([
    (0, inversify_1.injectable)()
], ManhattanDiamondAnchor);
let ManhattanEllipticAnchor = ManhattanEllipticAnchor_1 = class ManhattanEllipticAnchor {
    get kind() {
        return ManhattanEllipticAnchor_1.KIND;
    }
    getAnchor(connectable, refPoint, offset = 0) {
        const b = connectable.bounds;
        if (b.width <= 0 || b.height <= 0) {
            return b;
        }
        const bounds = {
            x: b.x - offset,
            y: b.y - offset,
            width: b.width + 2 * offset,
            height: b.height + 2 * offset
        };
        const c = geometry_1.Bounds.center(bounds);
        const refRelative = geometry_1.Point.subtract(refPoint, c);
        let x = c.x;
        let y = c.y;
        if (refPoint.x >= bounds.x && bounds.x + bounds.width >= refPoint.x) {
            x += refRelative.x;
            const dy = 0.5 * bounds.height * Math.sqrt(1 - (refRelative.x * refRelative.x) / (0.25 * bounds.width * bounds.width));
            if (refRelative.y < 0)
                y -= dy;
            else
                y += dy;
        }
        else if (refPoint.y >= bounds.y && bounds.y + bounds.height >= refPoint.y) {
            y += refRelative.y;
            const dx = 0.5 * bounds.width * Math.sqrt(1 - (refRelative.y * refRelative.y) / (0.25 * bounds.height * bounds.height));
            if (refRelative.x < 0)
                x -= dx;
            else
                x += dx;
        }
        return { x, y };
    }
};
exports.ManhattanEllipticAnchor = ManhattanEllipticAnchor;
ManhattanEllipticAnchor.KIND = manhattan_edge_router_1.ManhattanEdgeRouter.KIND + ':' + anchor_1.ELLIPTIC_ANCHOR_KIND;
exports.ManhattanEllipticAnchor = ManhattanEllipticAnchor = ManhattanEllipticAnchor_1 = __decorate([
    (0, inversify_1.injectable)()
], ManhattanEllipticAnchor);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/manhattan-edge-router.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/manhattan-edge-router.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManhattanEdgeRouter = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const abstract_edge_router_1 = __webpack_require__(/*! ./abstract-edge-router */ "../node_modules/sprotty/lib/features/routing/abstract-edge-router.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/routing/model.js");
class ManhattanEdgeRouter extends abstract_edge_router_1.AbstractEdgeRouter {
    get kind() {
        return ManhattanEdgeRouter.KIND;
    }
    getOptions(edge) {
        return {
            standardDistance: 20,
            minimalPointDistance: 3,
            selfEdgeOffset: 0.25
        };
    }
    route(edge) {
        if (!edge.source || !edge.target)
            return [];
        const routedCorners = this.createRoutedCorners(edge);
        const sourceRefPoint = routedCorners[0]
            || (0, smodel_utils_1.translatePoint)(geometry_1.Bounds.center(edge.target.bounds), edge.target.parent, edge.parent);
        const sourceAnchor = this.getTranslatedAnchor(edge.source, sourceRefPoint, edge.parent, edge, edge.sourceAnchorCorrection);
        const targetRefPoint = routedCorners[routedCorners.length - 1]
            || (0, smodel_utils_1.translatePoint)(geometry_1.Bounds.center(edge.source.bounds), edge.source.parent, edge.parent);
        const targetAnchor = this.getTranslatedAnchor(edge.target, targetRefPoint, edge.parent, edge, edge.targetAnchorCorrection);
        if (!sourceAnchor || !targetAnchor)
            return [];
        const routedPoints = [];
        routedPoints.push(Object.assign({ kind: 'source' }, sourceAnchor));
        routedCorners.forEach(corner => routedPoints.push(corner));
        routedPoints.push(Object.assign({ kind: 'target' }, targetAnchor));
        return routedPoints;
    }
    createRoutedCorners(edge) {
        const sourceAnchors = new abstract_edge_router_1.DefaultAnchors(edge.source, edge.parent, 'source');
        const targetAnchors = new abstract_edge_router_1.DefaultAnchors(edge.target, edge.parent, 'target');
        if (edge.routingPoints.length > 0) {
            const routingPointsCopy = edge.routingPoints.slice();
            this.cleanupRoutingPoints(edge, routingPointsCopy, false, true);
            if (routingPointsCopy.length > 0)
                return routingPointsCopy.map((routingPoint, index) => {
                    return Object.assign({ kind: 'linear', pointIndex: index }, routingPoint);
                });
        }
        const options = this.getOptions(edge);
        const corners = this.calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options);
        return corners.map(corner => {
            return Object.assign({ kind: 'linear' }, corner);
        });
    }
    createRoutingHandles(edge) {
        const routedPoints = this.route(edge);
        this.commitRoute(edge, routedPoints);
        if (routedPoints.length > 0) {
            this.addHandle(edge, 'source', 'routing-point', -2);
            for (let i = 0; i < routedPoints.length - 1; ++i)
                this.addHandle(edge, 'manhattan-50%', 'volatile-routing-point', i - 1);
            this.addHandle(edge, 'target', 'routing-point', routedPoints.length - 2);
        }
    }
    getInnerHandlePosition(edge, route, handle) {
        const fraction = this.getFraction(handle.kind);
        if (fraction !== undefined) {
            const { start, end } = this.findRouteSegment(edge, route, handle.pointIndex);
            if (start !== undefined && end !== undefined)
                return geometry_1.Point.linear(start, end, fraction);
        }
        return undefined;
    }
    getFraction(kind) {
        switch (kind) {
            case 'manhattan-50%': return 0.5;
            default: return undefined;
        }
    }
    applyInnerHandleMoves(edge, moves) {
        const route = this.route(edge);
        const routingPoints = edge.routingPoints;
        const minimalPointDistance = this.getOptions(edge).minimalPointDistance;
        moves.forEach(move => {
            const handle = move.handle;
            const index = handle.pointIndex;
            const correctedX = this.correctX(routingPoints, index, move.toPosition.x, minimalPointDistance);
            const correctedY = this.correctY(routingPoints, index, move.toPosition.y, minimalPointDistance);
            switch (handle.kind) {
                case 'manhattan-50%':
                    if (index < 0) {
                        if (routingPoints.length === 0) {
                            routingPoints.push({ x: correctedX, y: correctedY });
                            handle.pointIndex = 0;
                        }
                        else if ((0, geometry_1.almostEquals)(route[0].x, route[1].x)) {
                            this.alignX(routingPoints, 0, correctedX);
                        }
                        else {
                            this.alignY(routingPoints, 0, correctedY);
                        }
                    }
                    else if (index < routingPoints.length - 1) {
                        if ((0, geometry_1.almostEquals)(routingPoints[index].x, routingPoints[index + 1].x)) {
                            this.alignX(routingPoints, index, correctedX);
                            this.alignX(routingPoints, index + 1, correctedX);
                        }
                        else {
                            this.alignY(routingPoints, index, correctedY);
                            this.alignY(routingPoints, index + 1, correctedY);
                        }
                    }
                    else {
                        if ((0, geometry_1.almostEquals)(route[route.length - 2].x, route[route.length - 1].x)) {
                            this.alignX(routingPoints, routingPoints.length - 1, correctedX);
                        }
                        else {
                            this.alignY(routingPoints, routingPoints.length - 1, correctedY);
                        }
                    }
                    break;
            }
        });
    }
    correctX(routingPoints, index, x, minimalPointDistance) {
        if (index > 0 && Math.abs(x - routingPoints[index - 1].x) < minimalPointDistance)
            return routingPoints[index - 1].x;
        else if (index < routingPoints.length - 2 && Math.abs(x - routingPoints[index + 2].x) < minimalPointDistance)
            return routingPoints[index + 2].x;
        else
            return x;
    }
    alignX(routingPoints, index, x) {
        if (index >= 0 && index < routingPoints.length)
            routingPoints[index] = {
                x,
                y: routingPoints[index].y
            };
    }
    correctY(routingPoints, index, y, minimalPointDistance) {
        if (index > 0 && Math.abs(y - routingPoints[index - 1].y) < minimalPointDistance)
            return routingPoints[index - 1].y;
        else if (index < routingPoints.length - 2 && Math.abs(y - routingPoints[index + 2].y) < minimalPointDistance)
            return routingPoints[index + 2].y;
        else
            return y;
    }
    alignY(routingPoints, index, y) {
        if (index >= 0 && index < routingPoints.length)
            routingPoints[index] = {
                x: routingPoints[index].x,
                y
            };
    }
    cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints) {
        const sourceAnchors = new abstract_edge_router_1.DefaultAnchors(edge.source, edge.parent, "source");
        const targetAnchors = new abstract_edge_router_1.DefaultAnchors(edge.target, edge.parent, "target");
        if (this.resetRoutingPointsOnReconnect(edge, routingPoints, updateHandles, sourceAnchors, targetAnchors))
            return;
        // delete leading RPs inside the bounds of the source
        for (let i = 0; i < routingPoints.length; ++i)
            if (geometry_1.Bounds.includes(sourceAnchors.bounds, routingPoints[i])) {
                routingPoints.splice(0, 1);
                if (updateHandles) {
                    this.removeHandle(edge, -1);
                }
            }
            else {
                break;
            }
        // delete trailing RPs inside the bounds of the target
        for (let i = routingPoints.length - 1; i >= 0; --i)
            if (geometry_1.Bounds.includes(targetAnchors.bounds, routingPoints[i])) {
                routingPoints.splice(i, 1);
                if (updateHandles) {
                    this.removeHandle(edge, i);
                }
            }
            else {
                break;
            }
        if (routingPoints.length >= 2) {
            const options = this.getOptions(edge);
            for (let i = routingPoints.length - 2; i >= 0; --i) {
                if (geometry_1.Point.manhattanDistance(routingPoints[i], routingPoints[i + 1]) < options.minimalPointDistance) {
                    routingPoints.splice(i, 2);
                    --i;
                    if (updateHandles) {
                        this.removeHandle(edge, i - 1);
                        this.removeHandle(edge, i);
                    }
                }
            }
        }
        if (addRoutingPoints) {
            this.addAdditionalCorner(edge, routingPoints, sourceAnchors, targetAnchors, updateHandles);
            this.addAdditionalCorner(edge, routingPoints, targetAnchors, sourceAnchors, updateHandles);
            this.manhattanify(edge, routingPoints);
        }
    }
    removeHandle(edge, pointIndex) {
        const toBeRemoved = [];
        edge.children.forEach(child => {
            if (child instanceof model_1.SRoutingHandleImpl) {
                if (child.pointIndex > pointIndex)
                    --child.pointIndex;
                else if (child.pointIndex === pointIndex)
                    toBeRemoved.push(child);
            }
        });
        toBeRemoved.forEach(child => edge.remove(child));
    }
    addAdditionalCorner(edge, routingPoints, currentAnchors, otherAnchors, updateHandles) {
        if (routingPoints.length === 0)
            return;
        const refPoint = currentAnchors.kind === 'source' ? routingPoints[0] : routingPoints[routingPoints.length - 1];
        const index = currentAnchors.kind === 'source' ? 0 : routingPoints.length;
        const shiftIndex = index - (currentAnchors.kind === 'source' ? 1 : 0);
        let isHorizontal;
        if (routingPoints.length > 1) {
            isHorizontal = index === 0
                ? (0, geometry_1.almostEquals)(routingPoints[0].x, routingPoints[1].x)
                : (0, geometry_1.almostEquals)(routingPoints[routingPoints.length - 1].x, routingPoints[routingPoints.length - 2].x);
        }
        else {
            const nearestSide = otherAnchors.getNearestSide(refPoint);
            isHorizontal = nearestSide === abstract_edge_router_1.Side.TOP || nearestSide === abstract_edge_router_1.Side.BOTTOM;
        }
        if (isHorizontal) {
            if (refPoint.y < currentAnchors.get(abstract_edge_router_1.Side.TOP).y || refPoint.y > currentAnchors.get(abstract_edge_router_1.Side.BOTTOM).y) {
                const newPoint = { x: currentAnchors.get(abstract_edge_router_1.Side.TOP).x, y: refPoint.y };
                routingPoints.splice(index, 0, newPoint);
                if (updateHandles) {
                    edge.children.forEach(child => {
                        if (child instanceof model_1.SRoutingHandleImpl && child.pointIndex >= shiftIndex)
                            ++child.pointIndex;
                    });
                    this.addHandle(edge, 'manhattan-50%', 'volatile-routing-point', shiftIndex);
                }
            }
        }
        else {
            if (refPoint.x < currentAnchors.get(abstract_edge_router_1.Side.LEFT).x || refPoint.x > currentAnchors.get(abstract_edge_router_1.Side.RIGHT).x) {
                const newPoint = { x: refPoint.x, y: currentAnchors.get(abstract_edge_router_1.Side.LEFT).y };
                routingPoints.splice(index, 0, newPoint);
                if (updateHandles) {
                    edge.children.forEach(child => {
                        if (child instanceof model_1.SRoutingHandleImpl && child.pointIndex >= shiftIndex)
                            ++child.pointIndex;
                    });
                    this.addHandle(edge, 'manhattan-50%', 'volatile-routing-point', shiftIndex);
                }
            }
        }
    }
    /**
     * Add artificial routing points to keep all angles rectilinear.
     *
     * This makes edge morphing look a lot smoother, where RP positions are interpolated
     * linearly probably resulting in non-rectilinear angles. We don't add handles for
     * these additional RPs.
     */
    manhattanify(edge, routingPoints) {
        for (let i = 1; i < routingPoints.length; ++i) {
            const isVertical = Math.abs(routingPoints[i - 1].x - routingPoints[i].x) < 1;
            const isHorizontal = Math.abs(routingPoints[i - 1].y - routingPoints[i].y) < 1;
            if (!isVertical && !isHorizontal) {
                routingPoints.splice(i, 0, {
                    x: routingPoints[i - 1].x,
                    y: routingPoints[i].y
                });
                ++i;
            }
        }
    }
    calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options) {
        const selfEdge = super.calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options);
        if (selfEdge.length > 0)
            return selfEdge;
        const bestAnchors = this.getBestConnectionAnchors(edge, sourceAnchors, targetAnchors, options);
        const sourceSide = bestAnchors.source;
        const targetSide = bestAnchors.target;
        const corners = [];
        const startPoint = sourceAnchors.get(sourceSide);
        let endPoint = targetAnchors.get(targetSide);
        switch (sourceSide) {
            case abstract_edge_router_1.Side.RIGHT:
                switch (targetSide) {
                    case abstract_edge_router_1.Side.BOTTOM:
                        corners.push({ x: endPoint.x, y: startPoint.y });
                        break;
                    case abstract_edge_router_1.Side.TOP:
                        corners.push({ x: endPoint.x, y: startPoint.y });
                        break;
                    case abstract_edge_router_1.Side.RIGHT:
                        corners.push({ x: Math.max(startPoint.x, endPoint.x) + 1.5 * options.standardDistance, y: startPoint.y });
                        corners.push({ x: Math.max(startPoint.x, endPoint.x) + 1.5 * options.standardDistance, y: endPoint.y });
                        break;
                    case abstract_edge_router_1.Side.LEFT:
                        if (endPoint.y !== startPoint.y) {
                            corners.push({ x: (startPoint.x + endPoint.x) / 2, y: startPoint.y });
                            corners.push({ x: (startPoint.x + endPoint.x) / 2, y: endPoint.y });
                        }
                        break;
                }
                break;
            case abstract_edge_router_1.Side.LEFT:
                switch (targetSide) {
                    case abstract_edge_router_1.Side.BOTTOM:
                        corners.push({ x: endPoint.x, y: startPoint.y });
                        break;
                    case abstract_edge_router_1.Side.TOP:
                        corners.push({ x: endPoint.x, y: startPoint.y });
                        break;
                    default:
                        endPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
                        if (endPoint.y !== startPoint.y) {
                            corners.push({ x: (startPoint.x + endPoint.x) / 2, y: startPoint.y });
                            corners.push({ x: (startPoint.x + endPoint.x) / 2, y: endPoint.y });
                        }
                        break;
                }
                break;
            case abstract_edge_router_1.Side.TOP:
                switch (targetSide) {
                    case abstract_edge_router_1.Side.RIGHT:
                        if ((endPoint.x - startPoint.x) > 0) {
                            corners.push({ x: startPoint.x, y: startPoint.y - options.standardDistance });
                            corners.push({ x: endPoint.x + 1.5 * options.standardDistance, y: startPoint.y - options.standardDistance });
                            corners.push({ x: endPoint.x + 1.5 * options.standardDistance, y: endPoint.y });
                        }
                        else {
                            corners.push({ x: startPoint.x, y: endPoint.y });
                        }
                        break;
                    case abstract_edge_router_1.Side.LEFT:
                        if ((endPoint.x - startPoint.x) < 0) {
                            corners.push({ x: startPoint.x, y: startPoint.y - options.standardDistance });
                            corners.push({ x: endPoint.x - 1.5 * options.standardDistance, y: startPoint.y - options.standardDistance });
                            corners.push({ x: endPoint.x - 1.5 * options.standardDistance, y: endPoint.y });
                        }
                        else {
                            corners.push({ x: startPoint.x, y: endPoint.y });
                        }
                        break;
                    case abstract_edge_router_1.Side.TOP:
                        corners.push({ x: startPoint.x, y: Math.min(startPoint.y, endPoint.y) - 1.5 * options.standardDistance });
                        corners.push({ x: endPoint.x, y: Math.min(startPoint.y, endPoint.y) - 1.5 * options.standardDistance });
                        break;
                    case abstract_edge_router_1.Side.BOTTOM:
                        if (endPoint.x !== startPoint.x) {
                            corners.push({ x: startPoint.x, y: (startPoint.y + endPoint.y) / 2 });
                            corners.push({ x: endPoint.x, y: (startPoint.y + endPoint.y) / 2 });
                        }
                        break;
                }
                break;
            case abstract_edge_router_1.Side.BOTTOM:
                switch (targetSide) {
                    case abstract_edge_router_1.Side.RIGHT:
                        if ((endPoint.x - startPoint.x) > 0) {
                            corners.push({ x: startPoint.x, y: startPoint.y + options.standardDistance });
                            corners.push({ x: endPoint.x + 1.5 * options.standardDistance, y: startPoint.y + options.standardDistance });
                            corners.push({ x: endPoint.x + 1.5 * options.standardDistance, y: endPoint.y });
                        }
                        else {
                            corners.push({ x: startPoint.x, y: endPoint.y });
                        }
                        break;
                    case abstract_edge_router_1.Side.LEFT:
                        if ((endPoint.x - startPoint.x) < 0) {
                            corners.push({ x: startPoint.x, y: startPoint.y + options.standardDistance });
                            corners.push({ x: endPoint.x - 1.5 * options.standardDistance, y: startPoint.y + options.standardDistance });
                            corners.push({ x: endPoint.x - 1.5 * options.standardDistance, y: endPoint.y });
                        }
                        else {
                            corners.push({ x: startPoint.x, y: endPoint.y });
                        }
                        break;
                    default:
                        endPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
                        if (endPoint.x !== startPoint.x) {
                            corners.push({ x: startPoint.x, y: (startPoint.y + endPoint.y) / 2 });
                            corners.push({ x: endPoint.x, y: (startPoint.y + endPoint.y) / 2 });
                        }
                        break;
                }
                break;
        }
        return corners;
    }
    getBestConnectionAnchors(edge, sourceAnchors, targetAnchors, options) {
        // distance is enough
        let sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.RIGHT);
        let targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if ((targetPoint.x - sourcePoint.x) > options.standardDistance)
            return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.LEFT };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.LEFT);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if ((sourcePoint.x - targetPoint.x) > options.standardDistance)
            return { source: abstract_edge_router_1.Side.LEFT, target: abstract_edge_router_1.Side.RIGHT };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.TOP);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        if ((sourcePoint.y - targetPoint.y) > options.standardDistance)
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.BOTTOM };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
        if ((targetPoint.y - sourcePoint.y) > options.standardDistance)
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.TOP };
        // One additional point
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.RIGHT);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
        if (((targetPoint.x - sourcePoint.x) > 0.5 * options.standardDistance) && ((targetPoint.y - sourcePoint.y) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.TOP };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        if (((targetPoint.x - sourcePoint.x) > 0.5 * options.standardDistance) && ((sourcePoint.y - targetPoint.y) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.BOTTOM };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.LEFT);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        if (((sourcePoint.x - targetPoint.x) > 0.5 * options.standardDistance) && ((sourcePoint.y - targetPoint.y) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.LEFT, target: abstract_edge_router_1.Side.BOTTOM };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
        if (((sourcePoint.x - targetPoint.x) > 0.5 * options.standardDistance) && ((targetPoint.y - sourcePoint.y) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.LEFT, target: abstract_edge_router_1.Side.TOP };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.TOP);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (((sourcePoint.y - targetPoint.y) > 0.5 * options.standardDistance) && ((sourcePoint.x - targetPoint.x) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.RIGHT };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if (((sourcePoint.y - targetPoint.y) > 0.5 * options.standardDistance) && ((targetPoint.x - sourcePoint.x) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.LEFT };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (((targetPoint.y - sourcePoint.y) > 0.5 * options.standardDistance) && ((sourcePoint.x - targetPoint.x) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.RIGHT };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if (((targetPoint.y - sourcePoint.y) > 0.5 * options.standardDistance) && ((targetPoint.x - sourcePoint.x) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.LEFT };
        // Two points
        // priority NN >> EE >> NE >> NW >> SE >> SW
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.TOP);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint)) {
            if ((sourcePoint.y - targetPoint.y) < 0) {
                if (Math.abs(sourcePoint.x - targetPoint.x) > ((sourceAnchors.bounds.width + options.standardDistance) / 2))
                    return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.TOP };
            }
            else {
                if (Math.abs(sourcePoint.x - targetPoint.x) > (targetAnchors.bounds.width / 2))
                    return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.TOP };
            }
        }
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.RIGHT);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint)) {
            if ((sourcePoint.x - targetPoint.x) > 0) {
                if (Math.abs(sourcePoint.y - targetPoint.y) > ((sourceAnchors.bounds.height + options.standardDistance) / 2))
                    return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.RIGHT };
            }
            else if (Math.abs(sourcePoint.y - targetPoint.y) > (targetAnchors.bounds.height / 2))
                return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.RIGHT };
        }
        // Secondly, judge NE NW is available
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.TOP);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint))
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.RIGHT };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint))
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.LEFT };
        // Finally, judge SE SW is available
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint))
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.RIGHT };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint))
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.LEFT };
        // Only to return to the
        return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.BOTTOM };
    }
}
exports.ManhattanEdgeRouter = ManhattanEdgeRouter;
ManhattanEdgeRouter.KIND = 'manhattan';


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/model.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/model.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.edgeInProgressTargetHandleID = exports.edgeInProgressID = exports.SDanglingAnchorImpl = exports.SRoutingHandleImpl = exports.SConnectableElementImpl = exports.getRouteBounds = exports.getAbsoluteRouteBounds = exports.isConnectable = exports.connectableFeature = exports.SRoutableElementImpl = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const delete_1 = __webpack_require__(/*! ../edit/delete */ "../node_modules/sprotty/lib/features/edit/delete.js");
const model_2 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const model_3 = __webpack_require__(/*! ../hover/model */ "../node_modules/sprotty/lib/features/hover/model.js");
const model_4 = __webpack_require__(/*! ../move/model */ "../node_modules/sprotty/lib/features/move/model.js");
class SRoutableElementImpl extends smodel_1.SChildElementImpl {
    constructor() {
        super(...arguments);
        this.routingPoints = [];
    }
    get source() {
        return this.index.getById(this.sourceId);
    }
    get target() {
        return this.index.getById(this.targetId);
    }
    get bounds() {
        // this should also work for splines, which have the convex hull property
        return this.routingPoints.reduce((bounds, routingPoint) => geometry_1.Bounds.combine(bounds, {
            x: routingPoint.x,
            y: routingPoint.y,
            width: 0,
            height: 0
        }), geometry_1.Bounds.EMPTY);
    }
}
exports.SRoutableElementImpl = SRoutableElementImpl;
exports.connectableFeature = Symbol('connectableFeature');
function isConnectable(element) {
    return element.hasFeature(exports.connectableFeature) && element.canConnect;
}
exports.isConnectable = isConnectable;
function getAbsoluteRouteBounds(model, route = model.routingPoints) {
    let bounds = getRouteBounds(route);
    let current = model;
    while (current instanceof smodel_1.SChildElementImpl) {
        const parent = current.parent;
        bounds = parent.localToParent(bounds);
        current = parent;
    }
    return bounds;
}
exports.getAbsoluteRouteBounds = getAbsoluteRouteBounds;
function getRouteBounds(route) {
    const bounds = { x: NaN, y: NaN, width: 0, height: 0 };
    for (const point of route) {
        if (isNaN(bounds.x)) {
            bounds.x = point.x;
            bounds.y = point.y;
        }
        else {
            if (point.x < bounds.x) {
                bounds.width += bounds.x - point.x;
                bounds.x = point.x;
            }
            else if (point.x > bounds.x + bounds.width) {
                bounds.width = point.x - bounds.x;
            }
            if (point.y < bounds.y) {
                bounds.height += bounds.y - point.y;
                bounds.y = point.y;
            }
            else if (point.y > bounds.y + bounds.height) {
                bounds.height = point.y - bounds.y;
            }
        }
    }
    return bounds;
}
exports.getRouteBounds = getRouteBounds;
/**
 * A connectable element is one that can have outgoing and incoming edges, i.e. it can be the source
 * or target element of an edge. There are two kinds of connectable elements: nodes (`SNode`) and
 * ports (`SPort`). A node represents a main entity, while a port is a connection point inside a node.
 */
class SConnectableElementImpl extends model_1.SShapeElementImpl {
    constructor() {
        super(...arguments);
        this.strokeWidth = 0;
    }
    get anchorKind() {
        return undefined;
    }
    /**
     * The incoming edges of this connectable element. They are resolved by the index, which must
     * be an `SGraphIndex` for efficient lookup.
     */
    get incomingEdges() {
        const allEdges = this.index.all().filter(e => e instanceof SRoutableElementImpl);
        return allEdges.filter(e => e.targetId === this.id);
    }
    /**
     * The outgoing edges of this connectable element. They are resolved by the index, which must
     * be an `SGraphIndex` for efficient lookup.
     */
    get outgoingEdges() {
        const allEdges = this.index.all().filter(e => e instanceof SRoutableElementImpl);
        return allEdges.filter(e => e.sourceId === this.id);
    }
    canConnect(routable, role) {
        return true;
    }
}
exports.SConnectableElementImpl = SConnectableElementImpl;
class SRoutingHandleImpl extends smodel_1.SChildElementImpl {
    constructor() {
        super(...arguments);
        /** Whether the routing point is being dragged. */
        this.editMode = false;
        this.hoverFeedback = false;
        this.selected = false;
    }
    /**
     * SRoutingHandles are created using the constructor, so we hard-wire the
     * default features
     */
    hasFeature(feature) {
        return SRoutingHandleImpl.DEFAULT_FEATURES.indexOf(feature) !== -1;
    }
}
exports.SRoutingHandleImpl = SRoutingHandleImpl;
SRoutingHandleImpl.DEFAULT_FEATURES = [model_2.selectFeature, model_4.moveFeature, model_3.hoverFeedbackFeature];
class SDanglingAnchorImpl extends SConnectableElementImpl {
    constructor() {
        super();
        this.type = 'dangling-anchor';
        this.size = { width: 0, height: 0 };
    }
}
exports.SDanglingAnchorImpl = SDanglingAnchorImpl;
SDanglingAnchorImpl.DEFAULT_FEATURES = [delete_1.deletableFeature];
exports.edgeInProgressID = 'edge-in-progress';
exports.edgeInProgressTargetHandleID = exports.edgeInProgressID + '-target-anchor';


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/polyline-anchors.js":
/*!************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/polyline-anchors.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiamondAnchor = exports.RectangleAnchor = exports.EllipseAnchor = void 0;
const anchor_1 = __webpack_require__(/*! ./anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js");
const geometry_1 = __webpack_require__(/*! ../../utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const polyline_edge_router_1 = __webpack_require__(/*! ./polyline-edge-router */ "../node_modules/sprotty/lib/features/routing/polyline-edge-router.js");
const geometry_2 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
let EllipseAnchor = class EllipseAnchor {
    get kind() {
        return polyline_edge_router_1.PolylineEdgeRouter.KIND + ':' + anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
    getAnchor(connectable, refPoint, offset = 0) {
        const bounds = connectable.bounds;
        const c = geometry_2.Bounds.center(bounds);
        const dx = c.x - refPoint.x;
        const dy = c.y - refPoint.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        const normX = (dx / distance) || 0;
        const normY = (dy / distance) || 0;
        return {
            x: c.x - normX * (0.5 * bounds.width + offset),
            y: c.y - normY * (0.5 * bounds.height + offset)
        };
    }
};
exports.EllipseAnchor = EllipseAnchor;
exports.EllipseAnchor = EllipseAnchor = __decorate([
    (0, inversify_1.injectable)()
], EllipseAnchor);
let RectangleAnchor = class RectangleAnchor {
    get kind() {
        return polyline_edge_router_1.PolylineEdgeRouter.KIND + ':' + anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
    getAnchor(connectable, refPoint, offset = 0) {
        const bounds = connectable.bounds;
        const c = geometry_2.Bounds.center(bounds);
        const finder = new NearestPointFinder(c, refPoint);
        if (!(0, geometry_2.almostEquals)(c.y, refPoint.y)) {
            const xTop = this.getXIntersection(bounds.y, c, refPoint);
            if (xTop >= bounds.x && xTop <= bounds.x + bounds.width)
                finder.addCandidate(xTop, bounds.y - offset);
            const xBottom = this.getXIntersection(bounds.y + bounds.height, c, refPoint);
            if (xBottom >= bounds.x && xBottom <= bounds.x + bounds.width)
                finder.addCandidate(xBottom, bounds.y + bounds.height + offset);
        }
        if (!(0, geometry_2.almostEquals)(c.x, refPoint.x)) {
            const yLeft = this.getYIntersection(bounds.x, c, refPoint);
            if (yLeft >= bounds.y && yLeft <= bounds.y + bounds.height)
                finder.addCandidate(bounds.x - offset, yLeft);
            const yRight = this.getYIntersection(bounds.x + bounds.width, c, refPoint);
            if (yRight >= bounds.y && yRight <= bounds.y + bounds.height)
                finder.addCandidate(bounds.x + bounds.width + offset, yRight);
        }
        return finder.best;
    }
    getXIntersection(yIntersection, centerPoint, point) {
        const t = (yIntersection - centerPoint.y) / (point.y - centerPoint.y);
        return (point.x - centerPoint.x) * t + centerPoint.x;
    }
    getYIntersection(xIntersection, centerPoint, point) {
        const t = (xIntersection - centerPoint.x) / (point.x - centerPoint.x);
        return (point.y - centerPoint.y) * t + centerPoint.y;
    }
};
exports.RectangleAnchor = RectangleAnchor;
exports.RectangleAnchor = RectangleAnchor = __decorate([
    (0, inversify_1.injectable)()
], RectangleAnchor);
class NearestPointFinder {
    constructor(centerPoint, refPoint) {
        this.centerPoint = centerPoint;
        this.refPoint = refPoint;
        this.currentDist = -1;
    }
    addCandidate(x, y) {
        const dx = this.refPoint.x - x;
        const dy = this.refPoint.y - y;
        const dist = dx * dx + dy * dy;
        if (this.currentDist < 0 || dist < this.currentDist) {
            this.currentBest = {
                x: x,
                y: y
            };
            this.currentDist = dist;
        }
    }
    get best() {
        if (this.currentBest === undefined)
            return this.centerPoint;
        else
            return this.currentBest;
    }
}
let DiamondAnchor = class DiamondAnchor {
    get kind() {
        return polyline_edge_router_1.PolylineEdgeRouter.KIND + ':' + anchor_1.DIAMOND_ANCHOR_KIND;
    }
    getAnchor(connectable, refPoint, offset) {
        const bounds = connectable.bounds;
        const referenceLine = new geometry_1.PointToPointLine(geometry_2.Bounds.center(bounds), refPoint);
        const closestDiamondSide = new geometry_1.Diamond(bounds).closestSideLine(refPoint);
        const anchorPoint = (0, geometry_1.intersection)(closestDiamondSide, referenceLine);
        return geometry_2.Point.shiftTowards(anchorPoint, refPoint, offset);
    }
};
exports.DiamondAnchor = DiamondAnchor;
exports.DiamondAnchor = DiamondAnchor = __decorate([
    (0, inversify_1.injectable)()
], DiamondAnchor);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/polyline-edge-router.js":
/*!****************************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/polyline-edge-router.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var PolylineEdgeRouter_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PolylineEdgeRouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/routing/model.js");
const anchor_1 = __webpack_require__(/*! ./anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js");
const abstract_edge_router_1 = __webpack_require__(/*! ./abstract-edge-router */ "../node_modules/sprotty/lib/features/routing/abstract-edge-router.js");
let PolylineEdgeRouter = PolylineEdgeRouter_1 = class PolylineEdgeRouter extends abstract_edge_router_1.AbstractEdgeRouter {
    get kind() {
        return PolylineEdgeRouter_1.KIND;
    }
    getOptions(edge) {
        return {
            minimalPointDistance: 2,
            removeAngleThreshold: 0.1,
            standardDistance: 20,
            selfEdgeOffset: 0.25
        };
    }
    route(edge) {
        const source = edge.source;
        const target = edge.target;
        if (source === undefined || target === undefined) {
            return [];
        }
        let sourceAnchor;
        let targetAnchor;
        const options = this.getOptions(edge);
        const routingPoints = edge.routingPoints.length > 0
            ? edge.routingPoints
            : [];
        this.cleanupRoutingPoints(edge, routingPoints, false, false);
        const rpCount = routingPoints !== undefined ? routingPoints.length : 0;
        if (rpCount === 0) {
            // Use the target center as start anchor reference
            const startRef = geometry_1.Bounds.center(target.bounds);
            sourceAnchor = this.getTranslatedAnchor(source, startRef, target.parent, edge, edge.sourceAnchorCorrection);
            // Use the source center as end anchor reference
            const endRef = geometry_1.Bounds.center(source.bounds);
            targetAnchor = this.getTranslatedAnchor(target, endRef, source.parent, edge, edge.targetAnchorCorrection);
        }
        else {
            // Use the first routing point as start anchor reference
            const p0 = routingPoints[0];
            sourceAnchor = this.getTranslatedAnchor(source, p0, edge.parent, edge, edge.sourceAnchorCorrection);
            // Use the last routing point as end anchor reference
            const pn = routingPoints[rpCount - 1];
            targetAnchor = this.getTranslatedAnchor(target, pn, edge.parent, edge, edge.targetAnchorCorrection);
        }
        const result = [];
        result.push({ kind: 'source', x: sourceAnchor.x, y: sourceAnchor.y });
        for (let i = 0; i < rpCount; i++) {
            const p = routingPoints[i];
            if (i > 0 && i < rpCount - 1
                || i === 0 && geometry_1.Point.maxDistance(sourceAnchor, p) >= options.minimalPointDistance + (edge.sourceAnchorCorrection || 0)
                || i === rpCount - 1 && geometry_1.Point.maxDistance(p, targetAnchor) >= options.minimalPointDistance + (edge.targetAnchorCorrection || 0)) {
                result.push({ kind: 'linear', x: p.x, y: p.y, pointIndex: i });
            }
        }
        result.push({ kind: 'target', x: targetAnchor.x, y: targetAnchor.y });
        return this.filterEditModeHandles(result, edge, options);
    }
    /**
     * Remove routed points that are in edit mode and for which the angle between the preceding and
     * following points falls below a threshold.
     */
    filterEditModeHandles(route, edge, options) {
        if (edge.children.length === 0)
            return route;
        let i = 0;
        while (i < route.length) {
            const curr = route[i];
            if (curr.pointIndex !== undefined) {
                const handle = edge.children.find(child => child instanceof model_1.SRoutingHandleImpl && child.kind === 'junction' && child.pointIndex === curr.pointIndex);
                if (handle !== undefined && handle.editMode && i > 0 && i < route.length - 1) {
                    const prev = route[i - 1], next = route[i + 1];
                    const prevDiff = { x: prev.x - curr.x, y: prev.y - curr.y };
                    const nextDiff = { x: next.x - curr.x, y: next.y - curr.y };
                    const angle = (0, geometry_1.angleBetweenPoints)(prevDiff, nextDiff);
                    if (Math.abs(Math.PI - angle) < options.removeAngleThreshold) {
                        route.splice(i, 1);
                        continue;
                    }
                }
            }
            i++;
        }
        return route;
    }
    createRoutingHandles(edge) {
        const rpCount = edge.routingPoints.length;
        this.addHandle(edge, 'source', 'routing-point', -2);
        this.addHandle(edge, 'line', 'volatile-routing-point', -1);
        for (let i = 0; i < rpCount; i++) {
            this.addHandle(edge, 'junction', 'routing-point', i);
            this.addHandle(edge, 'line', 'volatile-routing-point', i);
        }
        this.addHandle(edge, 'target', 'routing-point', rpCount);
    }
    getInnerHandlePosition(edge, route, handle) {
        if (handle.kind === 'line') {
            const { start, end } = this.findRouteSegment(edge, route, handle.pointIndex);
            if (start !== undefined && end !== undefined)
                return (0, geometry_1.centerOfLine)(start, end);
        }
        return undefined;
    }
    applyInnerHandleMoves(edge, moves) {
        moves.forEach(move => {
            const handle = move.handle;
            const points = edge.routingPoints;
            let index = handle.pointIndex;
            if (handle.kind === 'line') {
                // Upgrade to a proper routing point
                handle.kind = 'junction';
                handle.type = 'routing-point';
                points.splice(index + 1, 0, move.fromPosition || points[Math.max(index, 0)]);
                edge.children.forEach(child => {
                    if (child instanceof model_1.SRoutingHandleImpl && (child === handle || child.pointIndex > index))
                        child.pointIndex++;
                });
                this.addHandle(edge, 'line', 'volatile-routing-point', index);
                index++;
                this.addHandle(edge, 'line', 'volatile-routing-point', index);
            }
            if (index >= 0 && index < points.length) {
                points[index] = move.toPosition;
            }
        });
    }
};
exports.PolylineEdgeRouter = PolylineEdgeRouter;
PolylineEdgeRouter.KIND = 'polyline';
__decorate([
    (0, inversify_1.inject)(anchor_1.AnchorComputerRegistry),
    __metadata("design:type", anchor_1.AnchorComputerRegistry)
], PolylineEdgeRouter.prototype, "anchorRegistry", void 0);
exports.PolylineEdgeRouter = PolylineEdgeRouter = PolylineEdgeRouter_1 = __decorate([
    (0, inversify_1.injectable)()
], PolylineEdgeRouter);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/routing.js":
/*!***************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/routing.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EdgeRouting = exports.EdgeRouterRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const view_1 = __webpack_require__(/*! ../../base/views/view */ "../node_modules/sprotty/lib/base/views/view.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "../node_modules/sprotty/lib/utils/registry.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/routing/model.js");
const polyline_edge_router_1 = __webpack_require__(/*! ./polyline-edge-router */ "../node_modules/sprotty/lib/features/routing/polyline-edge-router.js");
function isMultipleEdgesRouter(router) {
    return router.routeAll !== undefined;
}
let EdgeRouterRegistry = class EdgeRouterRegistry extends registry_1.InstanceRegistry {
    constructor(edgeRouters) {
        super();
        edgeRouters.forEach(router => this.register(router.kind, router));
    }
    get defaultKind() {
        return polyline_edge_router_1.PolylineEdgeRouter.KIND;
    }
    get(kind) {
        return super.get(kind || this.defaultKind);
    }
    /**
     * Computes the routes of all edges contained by the specified `parent`.
     * After all routes are available, it'll apply the registered `EdgeRoutePostProcessors`.
     * @param parent the parent to traverse for edges
     * @returns the routes of all edges that are children of `parent`
     */
    routeAllChildren(parent) {
        const routing = this.doRouteAllChildren(parent);
        for (const postProcessor of this.postProcessors) {
            postProcessor.apply(routing, parent);
        }
        return routing;
    }
    /**
     * Recursively traverses the children of `parent`, collects children grouped by router kind,
     * and then routes them either.
     * @param parent the parent to traverse for edges
     * @returns the routes of all edges that are children of `parent`
     */
    doRouteAllChildren(parent) {
        const routing = new EdgeRouting();
        const routersEdges = new Map();
        const elementsToProcess = [parent];
        while (elementsToProcess.length > 0) {
            const element = elementsToProcess.shift();
            for (const child of element.children) {
                if (child instanceof model_1.SRoutableElementImpl) {
                    const routerKind = child.routerKind || this.defaultKind;
                    if (routersEdges.has(routerKind)) {
                        routersEdges.get(routerKind).push(child);
                    }
                    else {
                        routersEdges.set(routerKind, [child]);
                    }
                }
                if (child instanceof smodel_1.SParentElementImpl) {
                    elementsToProcess.push(child);
                }
            }
        }
        routersEdges.forEach((edges, routerKind) => {
            const childRouter = this.get(routerKind);
            if (isMultipleEdgesRouter(childRouter)) {
                routing.setAll(childRouter.routeAll(edges, parent));
            }
            else {
                for (const edge of edges) {
                    routing.set(edge.id, this.route(edge));
                }
            }
        });
        return routing;
    }
    /**
     * Computes or obtains the route of a single edge.
     * @param edge the edge to be routed
     * @param args arguments that may contain an `EdgeRouting` already
     * @returns the route of the specified `edge`
     */
    route(edge, args) {
        const edgeRouting = (0, view_1.findArgValue)(args, 'edgeRouting');
        if (edgeRouting) {
            const route = edgeRouting.get(edge.id);
            if (route) {
                return route;
            }
        }
        const router = this.get(edge.routerKind);
        return router.route(edge);
    }
};
exports.EdgeRouterRegistry = EdgeRouterRegistry;
__decorate([
    (0, inversify_1.multiInject)(types_1.TYPES.IEdgeRoutePostprocessor),
    (0, inversify_1.optional)(),
    __metadata("design:type", Array)
], EdgeRouterRegistry.prototype, "postProcessors", void 0);
exports.EdgeRouterRegistry = EdgeRouterRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IEdgeRouter)),
    __metadata("design:paramtypes", [Array])
], EdgeRouterRegistry);
/**
 * Map of edges and their computed routes.
 */
class EdgeRouting {
    constructor() {
        this.routesMap = new Map();
    }
    set(routableId, route) {
        this.routesMap.set(routableId, route);
    }
    setAll(otherRoutes) {
        otherRoutes.routes.forEach((route, routableId) => this.set(routableId, route));
    }
    get(routableId) {
        return this.routesMap.get(routableId);
    }
    get routes() {
        return this.routesMap;
    }
}
exports.EdgeRouting = EdgeRouting;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/routing/views.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/routing/views.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoutableView = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/routing/model.js");
let RoutableView = class RoutableView {
    /**
     * Check whether the given model element is in the current viewport. Use this method
     * in your `render` implementation to skip rendering in case the element is not visible.
     * This can greatly enhance performance for large models.
     */
    isVisible(model, route, context) {
        if (context.targetKind === 'hidden') {
            // Don't hide any element for hidden rendering
            return true;
        }
        if (route.length === 0) {
            // We should hide only if we know the element's route
            return true;
        }
        const ab = (0, model_1.getAbsoluteRouteBounds)(model, route);
        const canvasBounds = model.root.canvasBounds;
        return ab.x <= canvasBounds.width
            && ab.x + ab.width >= 0
            && ab.y <= canvasBounds.height
            && ab.y + ab.height >= 0;
    }
};
exports.RoutableView = RoutableView;
exports.RoutableView = RoutableView = __decorate([
    (0, inversify_1.injectable)()
], RoutableView);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/select/di.config.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/select/di.config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const select_1 = __webpack_require__(/*! ./select */ "../node_modules/sprotty/lib/features/select/select.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const selectModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, select_1.SelectCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, select_1.SelectAllCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, select_1.GetSelectionCommand);
    bind(select_1.SelectKeyboardListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(select_1.SelectKeyboardListener);
    bind(select_1.SelectMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(select_1.SelectMouseListener);
});
exports["default"] = selectModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/select/model.js":
/*!************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/select/model.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isSelected = exports.isSelectable = exports.selectFeature = void 0;
exports.selectFeature = Symbol('selectFeature');
function isSelectable(element) {
    return element.hasFeature(exports.selectFeature);
}
exports.isSelectable = isSelectable;
function isSelected(element) {
    return element !== undefined && isSelectable(element) && element.selected;
}
exports.isSelected = isSelected;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/select/select.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/select/select.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectKeyboardListener = exports.GetSelectionCommand = exports.SelectMouseListener = exports.SelectAllCommand = exports.SelectCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const request_command_1 = __webpack_require__(/*! ../../base/commands/request-command */ "../node_modules/sprotty/lib/base/commands/request-command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "../node_modules/sprotty/lib/utils/browser.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "../node_modules/sprotty/lib/utils/iterable.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js");
const button_handler_1 = __webpack_require__(/*! ../button/button-handler */ "../node_modules/sprotty/lib/features/button/button-handler.js");
const model_1 = __webpack_require__(/*! ../button/model */ "../node_modules/sprotty/lib/features/button/model.js");
const edit_routing_1 = __webpack_require__(/*! ../edit/edit-routing */ "../node_modules/sprotty/lib/features/edit/edit-routing.js");
const model_2 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const model_3 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const scroll_1 = __webpack_require__(/*! ../viewport/scroll */ "../node_modules/sprotty/lib/features/viewport/scroll.js");
const model_4 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/select/model.js");
let SelectCommand = class SelectCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.selected = [];
        this.deselected = [];
    }
    execute(context) {
        const model = context.root;
        this.action.selectedElementsIDs.forEach(id => {
            const element = model.index.getById(id);
            if (element instanceof smodel_1.SChildElementImpl && (0, model_4.isSelectable)(element)) {
                this.selected.push(element);
            }
        });
        this.action.deselectedElementsIDs.forEach(id => {
            const element = model.index.getById(id);
            if (element instanceof smodel_1.SChildElementImpl && (0, model_4.isSelectable)(element)) {
                this.deselected.push(element);
            }
        });
        return this.redo(context);
    }
    undo(context) {
        for (const element of this.selected) {
            element.selected = false;
        }
        for (const element of this.deselected) {
            element.selected = true;
        }
        return context.root;
    }
    redo(context) {
        for (const element of this.deselected) {
            element.selected = false;
        }
        for (const element of this.selected) {
            element.selected = true;
        }
        return context.root;
    }
};
exports.SelectCommand = SelectCommand;
SelectCommand.KIND = actions_1.SelectAction.KIND;
exports.SelectCommand = SelectCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SelectCommand);
let SelectAllCommand = class SelectAllCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.previousSelection = {};
    }
    execute(context) {
        this.selectAll(context.root, this.action.select);
        return context.root;
    }
    selectAll(element, newState) {
        if ((0, model_4.isSelectable)(element)) {
            this.previousSelection[element.id] = element.selected;
            element.selected = newState;
        }
        for (const child of element.children) {
            this.selectAll(child, newState);
        }
    }
    undo(context) {
        const index = context.root.index;
        Object.keys(this.previousSelection).forEach(id => {
            const element = index.getById(id);
            if (element !== undefined && (0, model_4.isSelectable)(element))
                element.selected = this.previousSelection[id];
        });
        return context.root;
    }
    redo(context) {
        this.selectAll(context.root, this.action.select);
        return context.root;
    }
};
exports.SelectAllCommand = SelectAllCommand;
SelectAllCommand.KIND = actions_1.SelectAllAction.KIND;
exports.SelectAllCommand = SelectAllCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SelectAllCommand);
class SelectMouseListener extends mouse_tool_1.MouseListener {
    constructor() {
        super(...arguments);
        this.wasSelected = false;
        this.hasDragged = false;
        this.isMouseDown = false;
    }
    mouseDown(target, event) {
        if (event.button !== 0) {
            return [];
        }
        this.isMouseDown = true;
        const buttonHandled = this.handleButton(target, event);
        if (buttonHandled) {
            return buttonHandled;
        }
        const selectableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_4.isSelectable);
        if (selectableTarget !== undefined || target instanceof smodel_1.SModelRootImpl) {
            this.hasDragged = false;
        }
        if (selectableTarget !== undefined) {
            let deselectedElements = [];
            // multi-selection?
            if (!(0, browser_1.isCtrlOrCmd)(event)) {
                deselectedElements = this.collectElementsToDeselect(target, selectableTarget);
            }
            if (!selectableTarget.selected) {
                this.wasSelected = false;
                return this.handleSelectTarget(selectableTarget, deselectedElements, event);
            }
            else if ((0, browser_1.isCtrlOrCmd)(event)) {
                this.wasSelected = false;
                return this.handleDeselectTarget(selectableTarget, event);
            }
            else {
                this.wasSelected = true;
            }
        }
        return [];
    }
    collectElementsToDeselect(target, selectableTarget) {
        return (0, iterable_1.toArray)(target.root.index.all()
            .filter(element => (0, model_4.isSelectable)(element) && element.selected
            && !(selectableTarget instanceof model_2.SRoutingHandleImpl && element === selectableTarget.parent)));
    }
    handleButton(target, event) {
        if (this.buttonHandlerRegistry !== undefined && target instanceof model_1.SButtonImpl && target.enabled) {
            const buttonHandler = this.buttonHandlerRegistry.get(target.type);
            if (buttonHandler !== undefined) {
                return buttonHandler.buttonPressed(target);
            }
        }
        return undefined;
    }
    handleSelectTarget(selectableTarget, deselectedElements, event) {
        const result = [];
        result.push(actions_1.SelectAction.create({ selectedElementsIDs: [selectableTarget.id], deselectedElementsIDs: deselectedElements.map(e => e.id) }));
        result.push(actions_1.BringToFrontAction.create([selectableTarget.id]));
        const routableDeselect = deselectedElements.filter(e => e instanceof model_3.SRoutableElementImpl).map(e => e.id);
        if (selectableTarget instanceof model_3.SRoutableElementImpl) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToActivate: [selectableTarget.id], elementsToDeactivate: routableDeselect }));
        }
        else if (routableDeselect.length > 0) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToDeactivate: routableDeselect }));
        }
        return result;
    }
    handleDeselectTarget(selectableTarget, event) {
        const result = [];
        result.push(actions_1.SelectAction.create({ selectedElementsIDs: [], deselectedElementsIDs: [selectableTarget.id] }));
        if (selectableTarget instanceof model_3.SRoutableElementImpl) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToDeactivate: [selectableTarget.id] }));
        }
        return result;
    }
    handleDeselectAll(deselectedElements, event) {
        const result = [];
        result.push(actions_1.SelectAction.create({ selectedElementsIDs: [], deselectedElementsIDs: deselectedElements.map(e => e.id) }));
        const routableDeselect = deselectedElements.filter(e => e instanceof model_3.SRoutableElementImpl).map(e => e.id);
        if (routableDeselect.length > 0) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToDeactivate: routableDeselect }));
        }
        return result;
    }
    mouseMove(target, event) {
        this.hasDragged = this.isMouseDown;
        return [];
    }
    mouseUp(target, event) {
        if (event.button === 0) {
            if (!this.hasDragged) {
                const selectableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_4.isSelectable);
                if (selectableTarget !== undefined) {
                    if (this.wasSelected) {
                        return [actions_1.SelectAction.create({ selectedElementsIDs: [selectableTarget.id], deselectedElementsIDs: [] })];
                    }
                }
                else if ((target instanceof smodel_1.SModelRootImpl && !(0, scroll_1.findViewportScrollbar)(event)) || !(target instanceof smodel_1.SModelRootImpl)) {
                    // Mouse up on everything that's not root or root but not over ViewPort's scroll bars > deselect all
                    return this.handleDeselectAll(this.collectElementsToDeselect(target, undefined), event);
                }
            }
        }
        this.isMouseDown = false;
        this.hasDragged = false;
        return [];
    }
    decorate(vnode, element) {
        const selectableTarget = (0, smodel_utils_1.findParentByFeature)(element, model_4.isSelectable);
        if (selectableTarget !== undefined) {
            (0, vnode_utils_1.setClass)(vnode, 'selected', selectableTarget.selected);
        }
        return vnode;
    }
}
exports.SelectMouseListener = SelectMouseListener;
__decorate([
    (0, inversify_1.inject)(button_handler_1.ButtonHandlerRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", button_handler_1.ButtonHandlerRegistry)
], SelectMouseListener.prototype, "buttonHandlerRegistry", void 0);
let GetSelectionCommand = class GetSelectionCommand extends request_command_1.ModelRequestCommand {
    constructor(action) {
        super();
        this.action = action;
        this.previousSelection = {};
    }
    retrieveResult(context) {
        const selection = context.root.index.all()
            .filter(e => (0, model_4.isSelectable)(e) && e.selected)
            .map(e => e.id);
        return actions_1.SelectionResult.create((0, iterable_1.toArray)(selection), this.action.requestId);
    }
};
exports.GetSelectionCommand = GetSelectionCommand;
GetSelectionCommand.KIND = actions_1.GetSelectionAction.KIND;
exports.GetSelectionCommand = GetSelectionCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], GetSelectionCommand);
class SelectKeyboardListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyA', 'ctrlCmd')) {
            return [actions_1.SelectAllAction.create()];
        }
        return [];
    }
}
exports.SelectKeyboardListener = SelectKeyboardListener;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/undo-redo/di.config.js":
/*!*******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/undo-redo/di.config.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const undo_redo_1 = __webpack_require__(/*! ./undo-redo */ "../node_modules/sprotty/lib/features/undo-redo/undo-redo.js");
const undoRedoModule = new inversify_1.ContainerModule(bind => {
    bind(undo_redo_1.UndoRedoKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(undo_redo_1.UndoRedoKeyListener);
});
exports["default"] = undoRedoModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/undo-redo/undo-redo.js":
/*!*******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/undo-redo/undo-redo.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UndoRedoKeyListener = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "../node_modules/sprotty/lib/utils/browser.js");
class UndoRedoKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyZ', 'ctrlCmd'))
            return [actions_1.UndoAction.create()];
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyZ', 'ctrlCmd', 'shift') || (!(0, browser_1.isMac)() && (0, keyboard_1.matchesKeystroke)(event, 'KeyY', 'ctrlCmd')))
            return [actions_1.RedoAction.create()];
        return [];
    }
}
exports.UndoRedoKeyListener = UndoRedoKeyListener;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/update/di.config.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/update/di.config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const update_model_1 = __webpack_require__(/*! ./update-model */ "../node_modules/sprotty/lib/features/update/update-model.js");
const updateModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, update_model_1.UpdateModelCommand);
});
exports["default"] = updateModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/update/model-matching.js":
/*!*********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/update/model-matching.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyMatches = exports.ModelMatcher = exports.forEachMatch = void 0;
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
function forEachMatch(matchResult, callback) {
    Object.keys(matchResult).forEach(id => callback(id, matchResult[id]));
}
exports.forEachMatch = forEachMatch;
class ModelMatcher {
    match(left, right) {
        const result = {};
        this.matchLeft(left, result);
        this.matchRight(right, result);
        return result;
    }
    matchLeft(element, result, parentId) {
        let match = result[element.id];
        if (match !== undefined) {
            match.left = element;
            match.leftParentId = parentId;
        }
        else {
            match = {
                left: element,
                leftParentId: parentId
            };
            result[element.id] = match;
        }
        if ((0, smodel_1.isParent)(element)) {
            for (const child of element.children) {
                this.matchLeft(child, result, element.id);
            }
        }
    }
    matchRight(element, result, parentId) {
        let match = result[element.id];
        if (match !== undefined) {
            match.right = element;
            match.rightParentId = parentId;
        }
        else {
            match = {
                right: element,
                rightParentId: parentId
            };
            result[element.id] = match;
        }
        if ((0, smodel_1.isParent)(element)) {
            for (const child of element.children) {
                this.matchRight(child, result, element.id);
            }
        }
    }
}
exports.ModelMatcher = ModelMatcher;
function applyMatches(root, matches, index) {
    if (root instanceof smodel_1.SModelRootImpl) {
        index = root.index;
    }
    else if (index === undefined) {
        index = new sprotty_protocol_1.SModelIndex();
        index.add(root);
    }
    for (const match of matches) {
        let newElementInserted = false;
        if (match.left !== undefined && match.leftParentId !== undefined) {
            const parent = index.getById(match.leftParentId);
            if (parent !== undefined && parent.children !== undefined) {
                const i = parent.children.indexOf(match.left);
                if (i >= 0) {
                    if (match.right !== undefined && match.leftParentId === match.rightParentId) {
                        parent.children.splice(i, 1, match.right);
                        newElementInserted = true;
                    }
                    else {
                        parent.children.splice(i, 1);
                    }
                }
                index.remove(match.left);
            }
        }
        if (!newElementInserted && match.right !== undefined && match.rightParentId !== undefined) {
            const parent = index.getById(match.rightParentId);
            if (parent !== undefined) {
                if (parent.children === undefined)
                    parent.children = [];
                parent.children.push(match.right);
            }
        }
    }
}
exports.applyMatches = applyMatches;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/update/update-model.js":
/*!*******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/update/update-model.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateModelCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "../node_modules/sprotty/lib/base/animations/animation.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const fade_1 = __webpack_require__(/*! ../fade/fade */ "../node_modules/sprotty/lib/features/fade/fade.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const move_1 = __webpack_require__(/*! ../move/move */ "../node_modules/sprotty/lib/features/move/move.js");
const model_1 = __webpack_require__(/*! ../fade/model */ "../node_modules/sprotty/lib/features/fade/model.js");
const model_2 = __webpack_require__(/*! ../move/model */ "../node_modules/sprotty/lib/features/move/model.js");
const model_3 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const viewport_root_1 = __webpack_require__(/*! ../viewport/viewport-root */ "../node_modules/sprotty/lib/features/viewport/viewport-root.js");
const model_4 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const model_matching_1 = __webpack_require__(/*! ./model-matching */ "../node_modules/sprotty/lib/features/update/model-matching.js");
const resize_1 = __webpack_require__(/*! ../bounds/resize */ "../node_modules/sprotty/lib/features/bounds/resize.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const model_5 = __webpack_require__(/*! ../viewport/model */ "../node_modules/sprotty/lib/features/viewport/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
const model_6 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
let UpdateModelCommand = class UpdateModelCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        let newRoot;
        if (this.action.newRoot !== undefined) {
            newRoot = context.modelFactory.createRoot(this.action.newRoot);
        }
        else {
            newRoot = context.modelFactory.createRoot(context.root);
            if (this.action.matches !== undefined)
                this.applyMatches(newRoot, this.action.matches, context);
        }
        this.oldRoot = context.root;
        this.newRoot = newRoot;
        return this.performUpdate(this.oldRoot, this.newRoot, context);
    }
    performUpdate(oldRoot, newRoot, context) {
        if ((this.action.animate === undefined || this.action.animate) && oldRoot.id === newRoot.id) {
            let matchResult;
            if (this.action.matches === undefined) {
                const matcher = new model_matching_1.ModelMatcher();
                matchResult = matcher.match(oldRoot, newRoot);
            }
            else {
                matchResult = this.convertToMatchResult(this.action.matches, oldRoot, newRoot);
            }
            const animationOrRoot = this.computeAnimation(newRoot, matchResult, context);
            if (animationOrRoot instanceof animation_1.Animation)
                return animationOrRoot.start();
            else
                return animationOrRoot;
        }
        else {
            if (oldRoot.type === newRoot.type && geometry_1.Dimension.isValid(oldRoot.canvasBounds))
                newRoot.canvasBounds = oldRoot.canvasBounds;
            if ((0, model_5.isViewport)(oldRoot) && (0, model_5.isViewport)(newRoot)) {
                newRoot.zoom = oldRoot.zoom;
                newRoot.scroll = oldRoot.scroll;
            }
            return newRoot;
        }
    }
    applyMatches(root, matches, context) {
        const index = root.index;
        for (const match of matches) {
            if (match.left !== undefined) {
                const element = index.getById(match.left.id);
                if (element instanceof smodel_1.SChildElementImpl)
                    element.parent.remove(element);
            }
        }
        for (const match of matches) {
            if (match.right !== undefined) {
                const element = context.modelFactory.createElement(match.right);
                let parent;
                if (match.rightParentId !== undefined)
                    parent = index.getById(match.rightParentId);
                if (parent instanceof smodel_1.SParentElementImpl)
                    parent.add(element);
                else
                    root.add(element);
            }
        }
    }
    convertToMatchResult(matches, leftRoot, rightRoot) {
        const result = {};
        for (const match of matches) {
            const converted = {};
            let id = undefined;
            if (match.left !== undefined) {
                id = match.left.id;
                converted.left = leftRoot.index.getById(id);
                converted.leftParentId = match.leftParentId;
            }
            if (match.right !== undefined) {
                id = match.right.id;
                converted.right = rightRoot.index.getById(id);
                converted.rightParentId = match.rightParentId;
            }
            if (id !== undefined)
                result[id] = converted;
        }
        return result;
    }
    computeAnimation(newRoot, matchResult, context) {
        const animationData = {
            fades: []
        };
        (0, model_matching_1.forEachMatch)(matchResult, (id, match) => {
            if (match.left !== undefined && match.right !== undefined) {
                // The element is still there, but may have been moved
                this.updateElement(match.left, match.right, animationData);
            }
            else if (match.right !== undefined) {
                // An element has been added
                const right = match.right;
                if ((0, model_1.isFadeable)(right)) {
                    right.opacity = 0;
                    animationData.fades.push({
                        element: right,
                        type: 'in'
                    });
                }
            }
            else if (match.left instanceof smodel_1.SChildElementImpl) {
                // An element has been removed
                const left = match.left;
                if ((0, model_1.isFadeable)(left) && match.leftParentId !== undefined) {
                    if (!(0, smodel_utils_1.containsSome)(newRoot, left)) {
                        const parent = newRoot.index.getById(match.leftParentId);
                        if (parent instanceof smodel_1.SParentElementImpl) {
                            const leftCopy = context.modelFactory.createElement(left);
                            parent.add(leftCopy);
                            animationData.fades.push({
                                element: leftCopy,
                                type: 'out'
                            });
                        }
                    }
                }
            }
        });
        const animations = this.createAnimations(animationData, newRoot, context);
        if (animations.length >= 2) {
            return new animation_1.CompoundAnimation(newRoot, context, animations);
        }
        else if (animations.length === 1) {
            return animations[0];
        }
        else {
            return newRoot;
        }
    }
    updateElement(left, right, animationData) {
        if ((0, model_2.isLocateable)(left) && (0, model_2.isLocateable)(right)) {
            const leftPos = left.position;
            const rightPos = right.position;
            if (!(0, geometry_1.almostEquals)(leftPos.x, rightPos.x) || !(0, geometry_1.almostEquals)(leftPos.y, rightPos.y)) {
                if (animationData.moves === undefined)
                    animationData.moves = [];
                animationData.moves.push({
                    element: right,
                    fromPosition: leftPos,
                    toPosition: rightPos
                });
                right.position = leftPos;
            }
        }
        if ((0, model_3.isSizeable)(left) && (0, model_3.isSizeable)(right)) {
            if (!geometry_1.Dimension.isValid(right.bounds)) {
                right.bounds = {
                    x: right.bounds.x,
                    y: right.bounds.y,
                    width: left.bounds.width,
                    height: left.bounds.height
                };
            }
            else if (!(0, geometry_1.almostEquals)(left.bounds.width, right.bounds.width)
                || !(0, geometry_1.almostEquals)(left.bounds.height, right.bounds.height)) {
                if (animationData.resizes === undefined)
                    animationData.resizes = [];
                animationData.resizes.push({
                    element: right,
                    fromDimension: {
                        width: left.bounds.width,
                        height: left.bounds.height,
                    },
                    toDimension: {
                        width: right.bounds.width,
                        height: right.bounds.height,
                    }
                });
            }
        }
        if (left instanceof model_6.SRoutableElementImpl && right instanceof model_6.SRoutableElementImpl && this.edgeRouterRegistry) {
            if (animationData.edgeMementi === undefined)
                animationData.edgeMementi = [];
            animationData.edgeMementi.push({
                edge: right,
                before: this.takeSnapshot(left),
                after: this.takeSnapshot(right),
            });
        }
        if ((0, model_4.isSelectable)(left) && (0, model_4.isSelectable)(right)) {
            right.selected = left.selected;
        }
        if (left instanceof smodel_1.SModelRootImpl && right instanceof smodel_1.SModelRootImpl) {
            right.canvasBounds = left.canvasBounds;
        }
        if (left instanceof viewport_root_1.ViewportRootElementImpl && right instanceof viewport_root_1.ViewportRootElementImpl) {
            right.scroll = left.scroll;
            right.zoom = left.zoom;
        }
    }
    takeSnapshot(edge) {
        const router = this.edgeRouterRegistry.get(edge.routerKind);
        return router.takeSnapshot(edge);
    }
    createAnimations(data, root, context) {
        const animations = [];
        if (data.fades.length > 0) {
            animations.push(new fade_1.FadeAnimation(root, data.fades, context, true));
        }
        if (data.moves !== undefined && data.moves.length > 0) {
            const movesMap = new Map;
            for (const move of data.moves) {
                movesMap.set(move.element.id, move);
            }
            animations.push(new move_1.MoveAnimation(root, movesMap, context, false));
        }
        if (data.resizes !== undefined && data.resizes.length > 0) {
            const resizesMap = new Map;
            for (const resize of data.resizes) {
                resizesMap.set(resize.element.id, resize);
            }
            animations.push(new resize_1.ResizeAnimation(root, resizesMap, context, false));
        }
        if (data.edgeMementi !== undefined && data.edgeMementi.length > 0) {
            animations.push(new move_1.MorphEdgesAnimation(root, data.edgeMementi, context, false));
        }
        return animations;
    }
    undo(context) {
        return this.performUpdate(this.newRoot, this.oldRoot, context);
    }
    redo(context) {
        return this.performUpdate(this.oldRoot, this.newRoot, context);
    }
};
exports.UpdateModelCommand = UpdateModelCommand;
UpdateModelCommand.KIND = actions_1.UpdateModelAction.KIND;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], UpdateModelCommand.prototype, "edgeRouterRegistry", void 0);
exports.UpdateModelCommand = UpdateModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], UpdateModelCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/viewport/center-fit.js":
/*!*******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/viewport/center-fit.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CenterKeyboardListener = exports.FitToScreenCommand = exports.CenterCommand = exports.BoundsAwareViewportCommand = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "../node_modules/sprotty/lib/utils/keyboard.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const viewport_1 = __webpack_require__(/*! ./viewport */ "../node_modules/sprotty/lib/features/viewport/viewport.js");
const model_3 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/viewport/model.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
let BoundsAwareViewportCommand = class BoundsAwareViewportCommand extends command_1.Command {
    constructor(animate) {
        super();
        this.animate = animate;
    }
    initialize(model) {
        if (!(0, model_3.isViewport)(model)) {
            return;
        }
        this.oldViewport = {
            scroll: model.scroll,
            zoom: model.zoom
        };
        const allBounds = [];
        this.getElementIds().forEach(id => {
            const element = model.index.getById(id);
            if (element && (0, model_1.isBoundsAware)(element)) {
                allBounds.push(this.boundsInViewport(element, element.bounds, model));
            }
        });
        if (allBounds.length === 0) {
            model.index.all().forEach(element => {
                if ((0, model_2.isSelectable)(element) && element.selected && (0, model_1.isBoundsAware)(element)) {
                    allBounds.push(this.boundsInViewport(element, element.bounds, model));
                }
            });
        }
        if (allBounds.length === 0) {
            model.index.all().forEach(element => {
                if ((0, model_1.isBoundsAware)(element)) {
                    allBounds.push(this.boundsInViewport(element, element.bounds, model));
                }
            });
        }
        if (allBounds.length !== 0) {
            const bounds = allBounds.reduce((b0, b1) => geometry_1.Bounds.combine(b0, b1));
            if (geometry_1.Dimension.isValid(bounds)) {
                const newViewport = this.getNewViewport(bounds, model);
                if (newViewport) {
                    const { zoomLimits, horizontalScrollLimits, verticalScrollLimits } = this.viewerOptions;
                    this.newViewport = (0, model_3.limitViewport)(newViewport, model.canvasBounds, horizontalScrollLimits, verticalScrollLimits, zoomLimits);
                }
            }
        }
    }
    boundsInViewport(element, bounds, viewport) {
        if (element instanceof smodel_1.SChildElementImpl && element.parent !== viewport)
            return this.boundsInViewport(element.parent, element.parent.localToParent(bounds), viewport);
        else
            return bounds;
    }
    execute(context) {
        this.initialize(context.root);
        return this.redo(context);
    }
    undo(context) {
        const model = context.root;
        if ((0, model_3.isViewport)(model) && this.newViewport !== undefined && !this.equal(this.newViewport, this.oldViewport)) {
            if (this.animate)
                return new viewport_1.ViewportAnimation(model, this.newViewport, this.oldViewport, context).start();
            else {
                model.scroll = this.oldViewport.scroll;
                model.zoom = this.oldViewport.zoom;
            }
        }
        return model;
    }
    redo(context) {
        const model = context.root;
        if ((0, model_3.isViewport)(model) && this.newViewport !== undefined && !this.equal(this.newViewport, this.oldViewport)) {
            if (this.animate) {
                return new viewport_1.ViewportAnimation(model, this.oldViewport, this.newViewport, context).start();
            }
            else {
                model.scroll = this.newViewport.scroll;
                model.zoom = this.newViewport.zoom;
            }
        }
        return model;
    }
    equal(vp1, vp2) {
        return (0, geometry_1.almostEquals)(vp1.zoom, vp2.zoom) && (0, geometry_1.almostEquals)(vp1.scroll.x, vp2.scroll.x) && (0, geometry_1.almostEquals)(vp1.scroll.y, vp2.scroll.y);
    }
};
exports.BoundsAwareViewportCommand = BoundsAwareViewportCommand;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], BoundsAwareViewportCommand.prototype, "viewerOptions", void 0);
exports.BoundsAwareViewportCommand = BoundsAwareViewportCommand = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [Boolean])
], BoundsAwareViewportCommand);
let CenterCommand = class CenterCommand extends BoundsAwareViewportCommand {
    constructor(action) {
        super(action.animate);
        this.action = action;
    }
    getElementIds() {
        return this.action.elementIds;
    }
    getNewViewport(bounds, model) {
        if (!geometry_1.Dimension.isValid(model.canvasBounds)) {
            return undefined;
        }
        let zoom = 1;
        if (this.action.retainZoom && (0, model_3.isViewport)(model)) {
            zoom = model.zoom;
        }
        else if (this.action.zoomScale) {
            zoom = this.action.zoomScale;
        }
        const c = geometry_1.Bounds.center(bounds);
        return {
            scroll: {
                x: c.x - 0.5 * model.canvasBounds.width / zoom,
                y: c.y - 0.5 * model.canvasBounds.height / zoom
            },
            zoom: zoom
        };
    }
};
exports.CenterCommand = CenterCommand;
CenterCommand.KIND = actions_1.CenterAction.KIND;
exports.CenterCommand = CenterCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], CenterCommand);
let FitToScreenCommand = class FitToScreenCommand extends BoundsAwareViewportCommand {
    constructor(action) {
        super(action.animate);
        this.action = action;
    }
    getElementIds() {
        return this.action.elementIds;
    }
    getNewViewport(bounds, model) {
        if (!geometry_1.Dimension.isValid(model.canvasBounds)) {
            return undefined;
        }
        const c = geometry_1.Bounds.center(bounds);
        const delta = this.action.padding === undefined
            ? 0
            : 2 * this.action.padding;
        let zoom = Math.min(model.canvasBounds.width / (bounds.width + delta), model.canvasBounds.height / (bounds.height + delta));
        if (this.action.maxZoom !== undefined)
            zoom = Math.min(zoom, this.action.maxZoom);
        if (zoom === Infinity) {
            zoom = 1;
        }
        return {
            scroll: {
                x: c.x - 0.5 * model.canvasBounds.width / zoom,
                y: c.y - 0.5 * model.canvasBounds.height / zoom
            },
            zoom: zoom
        };
    }
};
exports.FitToScreenCommand = FitToScreenCommand;
FitToScreenCommand.KIND = actions_1.FitToScreenAction.KIND;
exports.FitToScreenCommand = FitToScreenCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], FitToScreenCommand);
class CenterKeyboardListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyC', 'ctrlCmd', 'shift'))
            return [actions_1.CenterAction.create([])];
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyF', 'ctrlCmd', 'shift'))
            return [actions_1.FitToScreenAction.create([])];
        return [];
    }
}
exports.CenterKeyboardListener = CenterKeyboardListener;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/viewport/di.config.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/viewport/di.config.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const center_fit_1 = __webpack_require__(/*! ./center-fit */ "../node_modules/sprotty/lib/features/viewport/center-fit.js");
const viewport_1 = __webpack_require__(/*! ./viewport */ "../node_modules/sprotty/lib/features/viewport/viewport.js");
const scroll_1 = __webpack_require__(/*! ./scroll */ "../node_modules/sprotty/lib/features/viewport/scroll.js");
const zoom_1 = __webpack_require__(/*! ./zoom */ "../node_modules/sprotty/lib/features/viewport/zoom.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const viewportModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, center_fit_1.CenterCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, center_fit_1.FitToScreenCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, viewport_1.SetViewportCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, viewport_1.GetViewportCommand);
    bind(center_fit_1.CenterKeyboardListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(center_fit_1.CenterKeyboardListener);
    bind(scroll_1.ScrollMouseListener).toSelf().inSingletonScope();
    bind(zoom_1.ZoomMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(scroll_1.ScrollMouseListener);
    bind(types_1.TYPES.MouseListener).toService(zoom_1.ZoomMouseListener);
});
exports["default"] = viewportModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/viewport/model.js":
/*!**************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/viewport/model.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.limitViewport = exports.isViewport = exports.viewportFeature = void 0;
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const geometry_1 = __webpack_require__(/*! ../../utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js");
exports.viewportFeature = Symbol('viewportFeature');
/**
 * Determine whether the given model element has a viewport.
 */
function isViewport(element) {
    return element instanceof smodel_1.SModelRootImpl
        && element.hasFeature(exports.viewportFeature)
        && 'zoom' in element
        && 'scroll' in element;
}
exports.isViewport = isViewport;
/**
 * Apply limits to the given viewport.
 */
function limitViewport(viewport, canvasBounds, horizontalScrollLimits, verticalScrollLimits, zoomLimits) {
    if (canvasBounds && !sprotty_protocol_1.Dimension.isValid(canvasBounds)) {
        canvasBounds = undefined;
    }
    // Limit the zoom factor
    let zoom = zoomLimits ? (0, geometry_1.limit)(viewport.zoom, zoomLimits) : viewport.zoom;
    if (canvasBounds && horizontalScrollLimits) {
        const minZoom = canvasBounds.width / (horizontalScrollLimits.max - horizontalScrollLimits.min);
        if (zoom < minZoom) {
            zoom = minZoom;
        }
    }
    if (canvasBounds && verticalScrollLimits) {
        const minZoom = canvasBounds.height / (verticalScrollLimits.max - verticalScrollLimits.min);
        if (zoom < minZoom) {
            zoom = minZoom;
        }
    }
    // Limit the horizontal scroll position
    let scrollX;
    if (horizontalScrollLimits) {
        const min = horizontalScrollLimits.min;
        const max = canvasBounds ? horizontalScrollLimits.max - canvasBounds.width / zoom : horizontalScrollLimits.max;
        scrollX = (0, geometry_1.limit)(viewport.scroll.x, { min, max });
    }
    else {
        scrollX = viewport.scroll.x;
    }
    // Limit the vertical scroll position
    let scrollY;
    if (verticalScrollLimits) {
        const min = verticalScrollLimits.min;
        const max = canvasBounds ? verticalScrollLimits.max - canvasBounds.height / zoom : verticalScrollLimits.max;
        scrollY = (0, geometry_1.limit)(viewport.scroll.y, { min, max });
    }
    else {
        scrollY = viewport.scroll.y;
    }
    return { scroll: { x: scrollX, y: scrollY }, zoom };
}
exports.limitViewport = limitViewport;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/viewport/scroll.js":
/*!***************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/viewport/scroll.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findViewportScrollbar = exports.ScrollMouseListener = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/viewport/model.js");
const model_2 = __webpack_require__(/*! ../move/model */ "../node_modules/sprotty/lib/features/move/model.js");
const model_3 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const model_4 = __webpack_require__(/*! ../projection/model */ "../node_modules/sprotty/lib/features/projection/model.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "../node_modules/sprotty/lib/utils/browser.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
class ScrollMouseListener extends mouse_tool_1.MouseListener {
    constructor() {
        super(...arguments);
        this.scrollbarMouseDownDelay = 200;
    }
    mouseDown(target, event) {
        const moveable = (0, smodel_utils_1.findParentByFeature)(target, model_2.isMoveable);
        if (moveable === undefined && !(target instanceof model_3.SRoutingHandleImpl)) {
            const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
            if (viewport) {
                this.lastScrollPosition = { x: event.pageX, y: event.pageY };
                this.scrollbar = this.getScrollbar(event);
                if (this.scrollbar) {
                    window.clearTimeout(this.scrollbarMouseDownTimeout);
                    return this.moveScrollBar(viewport, event, this.scrollbar, true)
                        .map(action => new Promise(resolve => {
                        this.scrollbarMouseDownTimeout = window.setTimeout(() => resolve(action), this.scrollbarMouseDownDelay);
                    }));
                }
            }
            else {
                this.lastScrollPosition = undefined;
                this.scrollbar = undefined;
            }
        }
        return [];
    }
    mouseMove(target, event) {
        if (event.buttons === 0) {
            return this.mouseUp(target, event);
        }
        if (this.scrollbar) {
            window.clearTimeout(this.scrollbarMouseDownTimeout);
            const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
            if (viewport) {
                return this.moveScrollBar(viewport, event, this.scrollbar);
            }
        }
        if (this.lastScrollPosition) {
            const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
            if (viewport) {
                return this.dragCanvas(viewport, event, this.lastScrollPosition);
            }
        }
        return [];
    }
    mouseEnter(target, event) {
        if (target instanceof smodel_1.SModelRootImpl && event.buttons === 0) {
            this.mouseUp(target, event);
        }
        return [];
    }
    mouseUp(target, event) {
        this.lastScrollPosition = undefined;
        this.scrollbar = undefined;
        return [];
    }
    doubleClick(target, event) {
        const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
        if (viewport) {
            const scrollbar = this.getScrollbar(event);
            if (scrollbar) {
                window.clearTimeout(this.scrollbarMouseDownTimeout);
                const targetElement = this.findClickTarget(scrollbar, event);
                let elementId;
                if (targetElement && targetElement.id.startsWith('horizontal-projection:')) {
                    elementId = targetElement.id.substring('horizontal-projection:'.length);
                }
                else if (targetElement && targetElement.id.startsWith('vertical-projection:')) {
                    elementId = targetElement.id.substring('vertical-projection:'.length);
                }
                if (elementId) {
                    return [actions_1.CenterAction.create([elementId], { animate: true, retainZoom: true })];
                }
            }
        }
        return [];
    }
    dragCanvas(model, event, lastScrollPosition) {
        let dx = (event.pageX - lastScrollPosition.x) / model.zoom;
        if (dx > 0 && (0, geometry_1.almostEquals)(model.scroll.x, this.viewerOptions.horizontalScrollLimits.min)
            || dx < 0 && (0, geometry_1.almostEquals)(model.scroll.x, this.viewerOptions.horizontalScrollLimits.max - model.canvasBounds.width / model.zoom)) {
            dx = 0;
        }
        let dy = (event.pageY - lastScrollPosition.y) / model.zoom;
        if (dy > 0 && (0, geometry_1.almostEquals)(model.scroll.y, this.viewerOptions.verticalScrollLimits.min)
            || dy < 0 && (0, geometry_1.almostEquals)(model.scroll.y, this.viewerOptions.verticalScrollLimits.max - model.canvasBounds.height / model.zoom)) {
            dy = 0;
        }
        if (dx === 0 && dy === 0) {
            return [];
        }
        const newViewport = {
            scroll: {
                x: model.scroll.x - dx,
                y: model.scroll.y - dy,
            },
            zoom: model.zoom
        };
        this.lastScrollPosition = { x: event.pageX, y: event.pageY };
        return [actions_1.SetViewportAction.create(model.id, newViewport, { animate: false })];
    }
    moveScrollBar(model, event, scrollbar, animate = false) {
        const modelBounds = (0, model_4.getModelBounds)(model);
        if (!modelBounds || model.zoom <= 0) {
            return [];
        }
        const scrollbarRect = scrollbar.getBoundingClientRect();
        let newScroll;
        if (this.getScrollbarOrientation(scrollbar) === 'horizontal') {
            if (scrollbarRect.width <= 0) {
                return [];
            }
            const viewportSize = (model.canvasBounds.width / (model.zoom * modelBounds.width)) * scrollbarRect.width;
            let position = event.clientX - scrollbarRect.x - viewportSize / 2;
            if (position < 0) {
                position = 0;
            }
            else if (position > scrollbarRect.width - viewportSize) {
                position = scrollbarRect.width - viewportSize;
            }
            newScroll = {
                x: modelBounds.x + (position / scrollbarRect.width) * modelBounds.width,
                y: model.scroll.y
            };
            if (newScroll.x < this.viewerOptions.horizontalScrollLimits.min) {
                newScroll.x = this.viewerOptions.horizontalScrollLimits.min;
            }
            else if (newScroll.x > this.viewerOptions.horizontalScrollLimits.max - model.canvasBounds.width / model.zoom) {
                newScroll.x = this.viewerOptions.horizontalScrollLimits.max - model.canvasBounds.width / model.zoom;
            }
            if ((0, geometry_1.almostEquals)(newScroll.x, model.scroll.x)) {
                return [];
            }
        }
        else {
            if (scrollbarRect.height <= 0) {
                return [];
            }
            const viewportSize = (model.canvasBounds.height / (model.zoom * modelBounds.height)) * scrollbarRect.height;
            let position = event.clientY - scrollbarRect.y - viewportSize / 2;
            if (position < 0) {
                position = 0;
            }
            else if (position > scrollbarRect.height - viewportSize) {
                position = scrollbarRect.height - viewportSize;
            }
            newScroll = {
                x: model.scroll.x,
                y: modelBounds.y + (position / scrollbarRect.height) * modelBounds.height
            };
            if (newScroll.y < this.viewerOptions.verticalScrollLimits.min) {
                newScroll.y = this.viewerOptions.verticalScrollLimits.min;
            }
            else if (newScroll.y > this.viewerOptions.verticalScrollLimits.max - model.canvasBounds.height / model.zoom) {
                newScroll.y = this.viewerOptions.verticalScrollLimits.max - model.canvasBounds.height / model.zoom;
            }
            if ((0, geometry_1.almostEquals)(newScroll.y, model.scroll.y)) {
                return [];
            }
        }
        return [actions_1.SetViewportAction.create(model.id, { scroll: newScroll, zoom: model.zoom }, { animate })];
    }
    getScrollbar(event) {
        return findViewportScrollbar(event);
    }
    getScrollbarOrientation(scrollbar) {
        if (scrollbar.classList.contains('horizontal')) {
            return 'horizontal';
        }
        else {
            return 'vertical';
        }
    }
    findClickTarget(scrollbar, event) {
        const matching = Array.from(scrollbar.children).filter(child => child.id && child.classList.contains('sprotty-projection') && (0, browser_1.hitsMouseEvent)(child, event));
        if (matching.length > 0) {
            return matching[matching.length - 1];
        }
        return undefined;
    }
}
exports.ScrollMouseListener = ScrollMouseListener;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ScrollMouseListener.prototype, "viewerOptions", void 0);
function findViewportScrollbar(event) {
    let element = event.target;
    while (element) {
        if (element.classList && element.classList.contains('sprotty-projection-bar')) {
            return element;
        }
        element = element.parentElement;
    }
    return undefined;
}
exports.findViewportScrollbar = findViewportScrollbar;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/viewport/viewport-root.js":
/*!**********************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/viewport/viewport-root.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewportRootElementImpl = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/viewport/model.js");
const model_2 = __webpack_require__(/*! ../export/model */ "../node_modules/sprotty/lib/features/export/model.js");
/**
 * Model root element that defines a viewport, so it transforms the coordinate system with
 * a `scroll` translation and a `zoom` scaling.
 */
class ViewportRootElementImpl extends smodel_1.SModelRootImpl {
    constructor(index) {
        super(index);
        this.scroll = { x: 0, y: 0 };
        this.zoom = 1;
        this.position = geometry_1.Point.ORIGIN;
        this.size = geometry_1.Dimension.EMPTY;
    }
    get bounds() {
        return {
            x: this.position.x,
            y: this.position.y,
            width: this.size.width,
            height: this.size.height
        };
    }
    set bounds(newBounds) {
        this.position = {
            x: newBounds.x,
            y: newBounds.y
        };
        this.size = {
            width: newBounds.width,
            height: newBounds.height
        };
    }
    localToParent(point) {
        const result = {
            x: (point.x - this.scroll.x) * this.zoom,
            y: (point.y - this.scroll.y) * this.zoom,
            width: -1,
            height: -1
        };
        if ((0, geometry_1.isBounds)(point)) {
            result.width = point.width * this.zoom;
            result.height = point.height * this.zoom;
        }
        return result;
    }
    parentToLocal(point) {
        const result = {
            x: (point.x / this.zoom) + this.scroll.x,
            y: (point.y / this.zoom) + this.scroll.y,
            width: -1,
            height: -1
        };
        if ((0, geometry_1.isBounds)(point) && geometry_1.Dimension.isValid(point)) {
            result.width = point.width / this.zoom;
            result.height = point.height / this.zoom;
        }
        return result;
    }
}
exports.ViewportRootElementImpl = ViewportRootElementImpl;
ViewportRootElementImpl.DEFAULT_FEATURES = [model_1.viewportFeature, model_2.exportFeature];


/***/ }),

/***/ "../node_modules/sprotty/lib/features/viewport/viewport.js":
/*!*****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/viewport/viewport.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var SetViewportCommand_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewportAnimation = exports.GetViewportCommand = exports.SetViewportCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "../node_modules/sprotty/lib/base/animations/animation.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/viewport/model.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const request_command_1 = __webpack_require__(/*! ../../base/commands/request-command */ "../node_modules/sprotty/lib/base/commands/request-command.js");
let SetViewportCommand = SetViewportCommand_1 = class SetViewportCommand extends command_1.MergeableCommand {
    constructor(action) {
        super();
        this.action = action;
        this.newViewport = action.newViewport;
    }
    execute(context) {
        const model = context.root;
        const element = model.index.getById(this.action.elementId);
        if (element && (0, model_1.isViewport)(element)) {
            this.element = element;
            this.oldViewport = {
                scroll: this.element.scroll,
                zoom: this.element.zoom,
            };
            const { zoomLimits, horizontalScrollLimits, verticalScrollLimits } = this.viewerOptions;
            this.newViewport = (0, model_1.limitViewport)(this.newViewport, model.canvasBounds, horizontalScrollLimits, verticalScrollLimits, zoomLimits);
            return this.setViewport(element, this.oldViewport, this.newViewport, context);
        }
        return context.root;
    }
    setViewport(element, oldViewport, newViewport, context) {
        if (element && (0, model_1.isViewport)(element)) {
            if (this.action.animate) {
                return new ViewportAnimation(element, oldViewport, newViewport, context).start();
            }
            else {
                element.scroll = newViewport.scroll;
                element.zoom = newViewport.zoom;
            }
        }
        return context.root;
    }
    undo(context) {
        return this.setViewport(this.element, this.newViewport, this.oldViewport, context);
    }
    redo(context) {
        return this.setViewport(this.element, this.oldViewport, this.newViewport, context);
    }
    merge(command, context) {
        if (!this.action.animate && command instanceof SetViewportCommand_1 && this.element === command.element) {
            this.newViewport = command.newViewport;
            return true;
        }
        return false;
    }
};
exports.SetViewportCommand = SetViewportCommand;
SetViewportCommand.KIND = actions_1.SetViewportAction.KIND;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], SetViewportCommand.prototype, "viewerOptions", void 0);
exports.SetViewportCommand = SetViewportCommand = SetViewportCommand_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetViewportCommand);
let GetViewportCommand = class GetViewportCommand extends request_command_1.ModelRequestCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    retrieveResult(context) {
        const elem = context.root;
        let viewport;
        if ((0, model_1.isViewport)(elem)) {
            viewport = { scroll: elem.scroll, zoom: elem.zoom };
        }
        else {
            viewport = { scroll: geometry_1.Point.ORIGIN, zoom: 1 };
        }
        return actions_1.ViewportResult.create(viewport, elem.canvasBounds, this.action.requestId);
    }
};
exports.GetViewportCommand = GetViewportCommand;
GetViewportCommand.KIND = actions_1.GetViewportAction.KIND;
exports.GetViewportCommand = GetViewportCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], GetViewportCommand);
class ViewportAnimation extends animation_1.Animation {
    constructor(element, oldViewport, newViewport, context) {
        super(context);
        this.element = element;
        this.oldViewport = oldViewport;
        this.newViewport = newViewport;
        this.context = context;
        this.zoomFactor = Math.log(newViewport.zoom / oldViewport.zoom);
    }
    tween(t, context) {
        this.element.scroll = {
            x: (1 - t) * this.oldViewport.scroll.x + t * this.newViewport.scroll.x,
            y: (1 - t) * this.oldViewport.scroll.y + t * this.newViewport.scroll.y
        };
        this.element.zoom = this.oldViewport.zoom * Math.exp(t * this.zoomFactor);
        return context.root;
    }
}
exports.ViewportAnimation = ViewportAnimation;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/viewport/zoom.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/viewport/zoom.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ZoomMouseListener = exports.getZoom = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "../node_modules/sprotty/lib/utils/browser.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/features/viewport/model.js");
const geometry_2 = __webpack_require__(/*! ../../utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js");
function getZoom(label) {
    let zoom = 1;
    const viewport = (0, smodel_utils_1.findParentByFeature)(label, model_1.isViewport);
    if (viewport) {
        zoom = viewport.zoom;
    }
    return zoom;
}
exports.getZoom = getZoom;
class ZoomMouseListener extends mouse_tool_1.MouseListener {
    wheel(target, event) {
        const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
        if (!viewport) {
            return [];
        }
        const newViewport = this.isScrollMode(event) ? this.processScroll(viewport, event) : this.processZoom(viewport, target, event);
        if (newViewport) {
            return [actions_1.SetViewportAction.create(viewport.id, newViewport, { animate: false })];
        }
        return [];
    }
    isScrollMode(event) {
        return event.altKey;
    }
    processScroll(viewport, event) {
        return {
            scroll: {
                x: viewport.scroll.x + event.deltaX,
                y: viewport.scroll.y + event.deltaY
            },
            zoom: viewport.zoom
        };
    }
    processZoom(viewport, target, event) {
        const zoomFactor = this.getZoomFactor(event);
        if (zoomFactor > 1 && (0, geometry_1.almostEquals)(viewport.zoom, this.viewerOptions.zoomLimits.max)
            || zoomFactor < 1 && (0, geometry_1.almostEquals)(viewport.zoom, this.viewerOptions.zoomLimits.min)) {
            return;
        }
        // 'limitViewport' used by 'SetViewportCommand' will set the zoom to the min max level
        // so we need to do this here to to avoid 'jumps' of the diagram based on the viewport.scroll
        const zoom = (0, geometry_2.limit)(viewport.zoom * zoomFactor, this.viewerOptions.zoomLimits);
        const viewportOffset = this.getViewportOffset(target.root, event);
        const offsetFactor = 1.0 / zoom - 1.0 / viewport.zoom;
        return {
            scroll: {
                x: viewport.scroll.x - offsetFactor * viewportOffset.x,
                y: viewport.scroll.y - offsetFactor * viewportOffset.y
            },
            zoom
        };
    }
    getViewportOffset(root, event) {
        const canvasBounds = root.canvasBounds;
        const windowScroll = (0, browser_1.getWindowScroll)();
        return {
            x: event.clientX + windowScroll.x - canvasBounds.x,
            y: event.clientY + windowScroll.y - canvasBounds.y
        };
    }
    getZoomFactor(event) {
        if (event.deltaMode === event.DOM_DELTA_PAGE)
            return Math.exp(-event.deltaY * 0.5);
        else if (event.deltaMode === event.DOM_DELTA_LINE)
            return Math.exp(-event.deltaY * 0.05);
        else // deltaMode === DOM_DELTA_PIXEL
            return Math.exp(-event.deltaY * 0.005);
    }
}
exports.ZoomMouseListener = ZoomMouseListener;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ZoomMouseListener.prototype, "viewerOptions", void 0);


/***/ }),

/***/ "../node_modules/sprotty/lib/features/zorder/di.config.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/zorder/di.config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const zorder_1 = __webpack_require__(/*! ./zorder */ "../node_modules/sprotty/lib/features/zorder/zorder.js");
const zorderModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, zorder_1.BringToFrontCommand);
});
exports["default"] = zorderModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/features/zorder/zorder.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/features/zorder/zorder.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BringToFrontCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "../node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const model_1 = __webpack_require__(/*! ../routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
let BringToFrontCommand = class BringToFrontCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.selected = [];
    }
    execute(context) {
        const model = context.root;
        this.action.elementIDs.forEach(id => {
            const element = model.index.getById(id);
            if (element instanceof model_1.SRoutableElementImpl) {
                if (element.source)
                    this.addToSelection(element.source);
                if (element.target)
                    this.addToSelection(element.target);
            }
            if (element instanceof smodel_1.SChildElementImpl) {
                this.addToSelection(element);
            }
            this.includeConnectedEdges(element);
        });
        return this.redo(context);
    }
    includeConnectedEdges(element) {
        if (element instanceof model_1.SConnectableElementImpl) {
            element.incomingEdges.forEach(edge => this.addToSelection(edge));
            element.outgoingEdges.forEach(edge => this.addToSelection(edge));
        }
        if (element instanceof smodel_1.SParentElementImpl) {
            for (const child of element.children) {
                this.includeConnectedEdges(child);
            }
        }
    }
    addToSelection(element) {
        this.selected.push({
            element: element,
            index: element.parent.children.indexOf(element)
        });
    }
    undo(context) {
        for (let i = this.selected.length - 1; i >= 0; i--) {
            const selection = this.selected[i];
            const element = selection.element;
            element.parent.move(element, selection.index);
        }
        return context.root;
    }
    redo(context) {
        for (let i = 0; i < this.selected.length; i++) {
            this.bringToFront(this.selected[i]);
        }
        return context.root;
    }
    bringToFront(selection) {
        const element = selection.element;
        const childrenLength = element.parent.children.length;
        element.parent.move(element, childrenLength - 1);
    }
};
exports.BringToFrontCommand = BringToFrontCommand;
BringToFrontCommand.KIND = actions_1.BringToFrontAction.KIND;
exports.BringToFrontCommand = BringToFrontCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], BringToFrontCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/graph/sgraph.js":
/*!***************************************************!*\
  !*** ../node_modules/sprotty/lib/graph/sgraph.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SGraphIndex = exports.SCompartmentImpl = exports.SLabelImpl = exports.SEdgeImpl = exports.SPortImpl = exports.SNodeImpl = exports.SGraphImpl = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ../features/bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../features/edge-layout/model */ "../node_modules/sprotty/lib/features/edge-layout/model.js");
const delete_1 = __webpack_require__(/*! ../features/edit/delete */ "../node_modules/sprotty/lib/features/edit/delete.js");
const model_3 = __webpack_require__(/*! ../features/edit/model */ "../node_modules/sprotty/lib/features/edit/model.js");
const model_4 = __webpack_require__(/*! ../features/fade/model */ "../node_modules/sprotty/lib/features/fade/model.js");
const model_5 = __webpack_require__(/*! ../features/hover/model */ "../node_modules/sprotty/lib/features/hover/model.js");
const model_6 = __webpack_require__(/*! ../features/move/model */ "../node_modules/sprotty/lib/features/move/model.js");
const model_7 = __webpack_require__(/*! ../features/routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const model_8 = __webpack_require__(/*! ../features/select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const viewport_root_1 = __webpack_require__(/*! ../features/viewport/viewport-root */ "../node_modules/sprotty/lib/features/viewport/viewport-root.js");
const iterable_1 = __webpack_require__(/*! ../utils/iterable */ "../node_modules/sprotty/lib/utils/iterable.js");
/**
 * Root element for graph-like models.
 */
class SGraphImpl extends viewport_root_1.ViewportRootElementImpl {
    constructor(index = new SGraphIndex()) {
        super(index);
    }
}
exports.SGraphImpl = SGraphImpl;
/**
 * Model element class for nodes, which are the main entities in a graph. A node can be connected to
 * another node via an SEdge. Such a connection can be direct, i.e. the node is the source or target of
 * the edge, or indirect through a port, i.e. it contains an SPort which is the source or target of the edge.
 */
class SNodeImpl extends model_7.SConnectableElementImpl {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.hoverFeedback = false;
        this.opacity = 1;
    }
    canConnect(routable, role) {
        return this.children.find(c => c instanceof SPortImpl) === undefined;
    }
    get incomingEdges() {
        const index = this.index;
        if (index instanceof SGraphIndex) {
            return index.getIncomingEdges(this);
        }
        const allEdges = this.index.all().filter(e => e instanceof SEdgeImpl);
        return allEdges.filter(e => e.targetId === this.id);
    }
    get outgoingEdges() {
        const index = this.index;
        if (index instanceof SGraphIndex) {
            return index.getOutgoingEdges(this);
        }
        const allEdges = this.index.all().filter(e => e instanceof SEdgeImpl);
        return allEdges.filter(e => e.sourceId === this.id);
    }
}
exports.SNodeImpl = SNodeImpl;
SNodeImpl.DEFAULT_FEATURES = [model_7.connectableFeature, delete_1.deletableFeature, model_8.selectFeature, model_1.boundsFeature,
    model_6.moveFeature, model_1.layoutContainerFeature, model_4.fadeFeature, model_5.hoverFeedbackFeature, model_5.popupFeature];
/**
 * A port is a connection point for edges. It should always be contained in an SNode.
 */
class SPortImpl extends model_7.SConnectableElementImpl {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.hoverFeedback = false;
        this.opacity = 1;
    }
    get incomingEdges() {
        const index = this.index;
        if (index instanceof SGraphIndex) {
            return index.getIncomingEdges(this);
        }
        return super.incomingEdges.filter(e => e instanceof SEdgeImpl);
    }
    get outgoingEdges() {
        const index = this.index;
        if (index instanceof SGraphIndex) {
            return index.getOutgoingEdges(this);
        }
        return super.outgoingEdges.filter(e => e instanceof SEdgeImpl);
    }
}
exports.SPortImpl = SPortImpl;
SPortImpl.DEFAULT_FEATURES = [model_7.connectableFeature, model_8.selectFeature, model_1.boundsFeature, model_4.fadeFeature,
    model_5.hoverFeedbackFeature];
/**
 * Model element class for edges, which are the connectors in a graph. An edge has a source and a target,
 * each of which can be either a node or a port. The source and target elements are referenced via their
 * ids and can be resolved with the index stored in the root element.
 */
class SEdgeImpl extends model_7.SRoutableElementImpl {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.hoverFeedback = false;
        this.opacity = 1;
    }
}
exports.SEdgeImpl = SEdgeImpl;
SEdgeImpl.DEFAULT_FEATURES = [model_3.editFeature, delete_1.deletableFeature, model_8.selectFeature, model_4.fadeFeature,
    model_5.hoverFeedbackFeature];
/**
 * A label can be attached to a node, edge, or port, and contains some text to be rendered in its view.
 */
class SLabelImpl extends model_1.SShapeElementImpl {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.alignment = geometry_1.Point.ORIGIN;
        this.opacity = 1;
    }
}
exports.SLabelImpl = SLabelImpl;
SLabelImpl.DEFAULT_FEATURES = [model_1.boundsFeature, model_1.alignFeature, model_1.layoutableChildFeature,
    model_2.edgeLayoutFeature, model_4.fadeFeature];
/**
 * A compartment is used to group multiple child elements such as labels of a node. Usually a `vbox`
 * or `hbox` layout is used to arrange these children.
 */
class SCompartmentImpl extends model_1.SShapeElementImpl {
    constructor() {
        super(...arguments);
        this.opacity = 1;
    }
}
exports.SCompartmentImpl = SCompartmentImpl;
SCompartmentImpl.DEFAULT_FEATURES = [model_1.boundsFeature, model_1.layoutContainerFeature, model_1.layoutableChildFeature,
    model_4.fadeFeature];
/**
 * A specialized model index that tracks outgoing and incoming edges.
 */
class SGraphIndex extends smodel_1.ModelIndexImpl {
    constructor() {
        super(...arguments);
        this.outgoing = new Map;
        this.incoming = new Map;
    }
    add(element) {
        super.add(element);
        if (element instanceof SEdgeImpl) {
            // Register the edge in the outgoing map
            if (element.sourceId) {
                const sourceArr = this.outgoing.get(element.sourceId);
                if (sourceArr === undefined)
                    this.outgoing.set(element.sourceId, [element]);
                else
                    sourceArr.push(element);
            }
            // Register the edge in the incoming map
            if (element.targetId) {
                const targetArr = this.incoming.get(element.targetId);
                if (targetArr === undefined)
                    this.incoming.set(element.targetId, [element]);
                else
                    targetArr.push(element);
            }
        }
    }
    remove(element) {
        super.remove(element);
        if (element instanceof SEdgeImpl) {
            // Remove the edge from the outgoing map
            const sourceArr = this.outgoing.get(element.sourceId);
            if (sourceArr !== undefined) {
                const index = sourceArr.indexOf(element);
                if (index >= 0) {
                    if (sourceArr.length === 1)
                        this.outgoing.delete(element.sourceId);
                    else
                        sourceArr.splice(index, 1);
                }
            }
            // Remove the edge from the incoming map
            const targetArr = this.incoming.get(element.targetId);
            if (targetArr !== undefined) {
                const index = targetArr.indexOf(element);
                if (index >= 0) {
                    if (targetArr.length === 1)
                        this.incoming.delete(element.targetId);
                    else
                        targetArr.splice(index, 1);
                }
            }
        }
    }
    getAttachedElements(element) {
        return new iterable_1.FluentIterableImpl(() => ({
            outgoing: this.outgoing.get(element.id),
            incoming: this.incoming.get(element.id),
            nextOutgoingIndex: 0,
            nextIncomingIndex: 0
        }), (state) => {
            let index = state.nextOutgoingIndex;
            if (state.outgoing !== undefined && index < state.outgoing.length) {
                state.nextOutgoingIndex = index + 1;
                return { done: false, value: state.outgoing[index] };
            }
            index = state.nextIncomingIndex;
            if (state.incoming !== undefined) {
                // Filter out self-loops: edges that are both outgoing and incoming
                while (index < state.incoming.length) {
                    const edge = state.incoming[index];
                    if (edge.sourceId !== edge.targetId) {
                        state.nextIncomingIndex = index + 1;
                        return { done: false, value: edge };
                    }
                    index++;
                }
            }
            return { done: true, value: undefined };
        });
    }
    getIncomingEdges(element) {
        return this.incoming.get(element.id) || [];
    }
    getOutgoingEdges(element) {
        return this.outgoing.get(element.id) || [];
    }
}
exports.SGraphIndex = SGraphIndex;


/***/ }),

/***/ "../node_modules/sprotty/lib/graph/views.js":
/*!**************************************************!*\
  !*** ../node_modules/sprotty/lib/graph/views.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SBezierControlHandleView = exports.SBezierCreateHandleView = exports.SCompartmentView = exports.SLabelView = exports.SRoutingHandleView = exports.BezierCurveEdgeView = exports.PolylineEdgeViewWithGapsOnIntersections = exports.JumpingPolylineEdgeView = exports.PolylineEdgeView = exports.SGraphView = void 0;
/** @jsx svg */
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "../node_modules/sprotty-protocol/lib/utils/model-utils.js");
const vnode_utils_1 = __webpack_require__(/*! ../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const views_1 = __webpack_require__(/*! ../features/bounds/views */ "../node_modules/sprotty/lib/features/bounds/views.js");
const intersection_finder_1 = __webpack_require__(/*! ../features/edge-intersection/intersection-finder */ "../node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js");
const model_1 = __webpack_require__(/*! ../features/edge-layout/model */ "../node_modules/sprotty/lib/features/edge-layout/model.js");
const model_2 = __webpack_require__(/*! ../features/routing/model */ "../node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../features/routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js");
const views_2 = __webpack_require__(/*! ../features/routing/views */ "../node_modules/sprotty/lib/features/routing/views.js");
const jsx_1 = __webpack_require__(/*! ../lib/jsx */ "../node_modules/sprotty/lib/lib/jsx.js");
const geometry_2 = __webpack_require__(/*! ../utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js");
/**
 * IView component that turns an SGraph element and its children into a tree of virtual DOM elements.
 */
let SGraphView = class SGraphView {
    render(model, context) {
        const edgeRouting = this.edgeRouterRegistry.routeAllChildren(model);
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        return (0, jsx_1.svg)("svg", { "class-sprotty-graph": true },
            (0, jsx_1.svg)("g", { transform: transform }, context.renderChildren(model, { edgeRouting })));
    }
};
exports.SGraphView = SGraphView;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], SGraphView.prototype, "edgeRouterRegistry", void 0);
exports.SGraphView = SGraphView = __decorate([
    (0, inversify_1.injectable)()
], SGraphView);
let PolylineEdgeView = class PolylineEdgeView extends views_2.RoutableView {
    render(edge, context, args) {
        const route = this.edgeRouterRegistry.route(edge, args);
        if (route.length === 0) {
            return this.renderDanglingEdge("Cannot compute route", edge, context);
        }
        if (!this.isVisible(edge, route, context)) {
            if (edge.children.length === 0) {
                return undefined;
            }
            // The children of an edge are not necessarily inside the bounding box of the route,
            // so we need to render a group to ensure the children have a chance to be rendered.
            return (0, jsx_1.svg)("g", null, context.renderChildren(edge, { route }));
        }
        return (0, jsx_1.svg)("g", { "class-sprotty-edge": true, "class-mouseover": edge.hoverFeedback },
            this.renderLine(edge, route, context, args),
            this.renderAdditionals(edge, route, context),
            this.renderJunctionPoints(edge, route, context, args),
            context.renderChildren(edge, { route }));
    }
    renderJunctionPoints(edge, route, context, args) {
        const radius = 5;
        const junctionPoints = [];
        for (let i = 1; i < route.length; i++) {
            if (route[i].isJunction) {
                junctionPoints.push((0, jsx_1.svg)("circle", { cx: route[i].x, cy: route[i].y, r: radius }));
            }
        }
        if (junctionPoints.length > 0) {
            return (0, jsx_1.svg)("g", { "class-sprotty-junction": true }, junctionPoints);
        }
        return undefined;
    }
    renderLine(edge, segments, context, args) {
        const firstPoint = segments[0];
        let path = `M ${firstPoint.x},${firstPoint.y}`;
        for (let i = 1; i < segments.length; i++) {
            const p = segments[i];
            path += ` L ${p.x},${p.y}`;
        }
        return (0, jsx_1.svg)("path", { d: path });
    }
    renderAdditionals(edge, segments, context) {
        // here we need to render the control points?
        return [];
    }
    renderDanglingEdge(message, edge, context) {
        return (0, jsx_1.svg)("text", { "class-sprotty-edge-dangling": true, title: message }, "?");
    }
};
exports.PolylineEdgeView = PolylineEdgeView;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], PolylineEdgeView.prototype, "edgeRouterRegistry", void 0);
exports.PolylineEdgeView = PolylineEdgeView = __decorate([
    (0, inversify_1.injectable)()
], PolylineEdgeView);
/**
 * A `PolylineEdgeView` that renders jumps over intersections.
 *
 * In order to find intersections, `IntersectionFinder` needs to be configured as a `TYPES.IEdgeRoutePostprocessor`
 * so that that intersections are declared as `IntersectingRoutedPoint` in the computed routes.
 *
 * This view only draws correct line jumps for intersections among straight line segments and doesn't work with bezier curves.
 *
 * @see IntersectionFinder
 * @see IntersectingRoutedPoint
 * @see EdgeRouterRegistry
 */
let JumpingPolylineEdgeView = class JumpingPolylineEdgeView extends PolylineEdgeView {
    constructor() {
        super(...arguments);
        this.jumpOffsetBefore = 5;
        this.jumpOffsetAfter = 5;
        this.skipOffsetBefore = 3;
        this.skipOffsetAfter = 2;
    }
    renderLine(edge, segments, context, args) {
        let path = '';
        for (let i = 0; i < segments.length; i++) {
            const p = segments[i];
            if (i === 0) {
                path = `M ${p.x},${p.y}`;
            }
            if ((0, intersection_finder_1.isIntersectingRoutedPoint)(p)) {
                path += this.intersectionPath(edge, segments, p, args);
            }
            if (i !== 0) {
                path += ` L ${p.x},${p.y}`;
            }
        }
        return (0, jsx_1.svg)("path", { d: path });
    }
    /**
     * Returns a path that takes the intersections into account by drawing a line jump or a gap for intersections on that path.
     */
    intersectionPath(edge, segments, intersectingPoint, args) {
        if (intersectingPoint.intersections.length < 1) {
            return '';
        }
        const segment = this.getLineSegment(edge, intersectingPoint.intersections[0], args, segments);
        const intersections = this.getIntersectionsSortedBySegmentDirection(segment, intersectingPoint);
        let path = '';
        for (const intersection of intersections) {
            const otherLineSegment = this.getOtherLineSegment(edge, intersection, args);
            if (otherLineSegment === undefined) {
                continue;
            }
            const currentLineSegment = this.getLineSegment(edge, intersection, args, segments);
            const intersectionPoint = intersection.intersectionPoint;
            if (this.shouldDrawLineJumpOnIntersection(currentLineSegment, otherLineSegment)) {
                path += this.createJumpPath(intersectionPoint, currentLineSegment);
            }
            else if (this.shouldDrawLineGapOnIntersection(currentLineSegment, otherLineSegment)) {
                path += this.createGapPath(intersectionPoint, currentLineSegment);
            }
        }
        return path;
    }
    /**
     * Returns the intersections sorted by the direction of the `lineSegment`.
     *
     * The coordinate system goes from left to right and top to bottom.
     * Thus, x increases to the right and y increases downwards.
     *
     * We need to draw the intersections in the order of the direction of the line segment.
     * To draw a line pointing north, we need to order intersections by Y in a descending order.
     * To draw a line pointing south, we need to order intersections by Y in an ascending order.
     */
    getIntersectionsSortedBySegmentDirection(lineSegment, intersectingPoint) {
        switch (lineSegment.direction) {
            case 'north':
            case 'north-east':
                return intersectingPoint.intersections.sort(intersection_finder_1.BY_X_THEN_DESCENDING_Y);
            case 'south':
            case 'south-east':
            case 'east':
                return intersectingPoint.intersections.sort(intersection_finder_1.BY_X_THEN_Y);
            case 'south-west':
            case 'west':
                return intersectingPoint.intersections.sort(intersection_finder_1.BY_DESCENDING_X_THEN_Y);
            case 'north-west':
                return intersectingPoint.intersections.sort(intersection_finder_1.BY_DESCENDING_X_THEN_DESCENDING_Y);
        }
    }
    /**
     * Whether or not to draw a line jump on an intersection for the `currentLineSegment`.
     * This should usually be inverse of `shouldDrawLineGapOnIntersection()`.
     */
    shouldDrawLineJumpOnIntersection(currentLineSegment, otherLineSegment) {
        return Math.abs(currentLineSegment.slopeOrMax) < Math.abs(otherLineSegment.slopeOrMax);
    }
    /**
     * Whether or not to draw a line gap on an intersection for the `currentLineSegment`.
     * This should usually be inverse of `shouldDrawLineJumpOnIntersection()`.
     */
    shouldDrawLineGapOnIntersection(currentLineSegment, otherLineSegment) {
        return !this.shouldDrawLineJumpOnIntersection(currentLineSegment, otherLineSegment);
    }
    getLineSegment(edge, intersection, args, segments) {
        const route = segments ? segments : this.edgeRouterRegistry.route(edge, args);
        const index = intersection.routable1 === edge.id ? intersection.segmentIndex1 : intersection.segmentIndex2;
        return new geometry_2.PointToPointLine(route[index], route[index + 1]);
    }
    getOtherLineSegment(currentEdge, intersection, args) {
        const otherEdgeId = intersection.routable1 === currentEdge.id ? intersection.routable2 : intersection.routable1;
        const otherEdge = currentEdge.index.getById(otherEdgeId);
        if (!(otherEdge instanceof model_2.SRoutableElementImpl)) {
            return undefined;
        }
        return this.getLineSegment(otherEdge, intersection, args);
    }
    createJumpPath(intersectionPoint, lineSegment) {
        const anchorBefore = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p1, this.jumpOffsetBefore);
        const anchorAfter = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p2, this.jumpOffsetAfter);
        const rotation = lineSegment.p1.x < lineSegment.p2.x ? 1 : 0;
        return ` L ${anchorBefore.x},${anchorBefore.y} A 1,1 0,0 ${rotation} ${anchorAfter.x},${anchorAfter.y}`;
    }
    createGapPath(intersectionPoint, lineSegment) {
        let offsetBefore;
        let offsetAfter;
        if (intersectionPoint.y < lineSegment.p1.y) {
            offsetBefore = -this.skipOffsetBefore;
            offsetAfter = this.jumpOffsetAfter + this.skipOffsetAfter;
        }
        else {
            offsetBefore = this.jumpOffsetBefore + this.skipOffsetAfter;
            offsetAfter = -this.skipOffsetBefore;
        }
        const anchorBefore = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p1, offsetBefore);
        const anchorAfter = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p2, offsetAfter);
        return ` L ${anchorBefore.x},${anchorBefore.y} M ${anchorAfter.x},${anchorAfter.y}`;
    }
};
exports.JumpingPolylineEdgeView = JumpingPolylineEdgeView;
exports.JumpingPolylineEdgeView = JumpingPolylineEdgeView = __decorate([
    (0, inversify_1.injectable)()
], JumpingPolylineEdgeView);
/**
 * A `PolylineEdgeView` that renders gaps on intersections.
 *
 * In order to find intersections, `IntersectionFinder` needs to be configured as a `TYPES.IEdgeRoutePostprocessor`
 * so that that intersections are declared as `IntersectingRoutedPoint` in the computed routes.
 *
 * This view only draws correct gaps for intersections among straight line segments and doesn't work with bezier curves.
 *
 * @see IntersectionFinder
 * @see IntersectingRoutedPoint
 * @see EdgeRouterRegistry
 */
let PolylineEdgeViewWithGapsOnIntersections = class PolylineEdgeViewWithGapsOnIntersections extends JumpingPolylineEdgeView {
    constructor() {
        super(...arguments);
        this.skipOffsetBefore = 3;
        this.skipOffsetAfter = 3;
    }
    shouldDrawLineJumpOnIntersection(currentLineSegment, otherLineSegment) {
        return false;
    }
    shouldDrawLineGapOnIntersection(currentLineSegment, otherLineSegment) {
        return Math.abs(currentLineSegment.slopeOrMax) >= Math.abs(otherLineSegment.slopeOrMax);
    }
    createGapPath(intersectionPoint, lineSegment) {
        const anchorBefore = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p1, this.skipOffsetBefore);
        const anchorAfter = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p2, this.skipOffsetAfter);
        return ` L ${anchorBefore.x},${anchorBefore.y} M ${anchorAfter.x},${anchorAfter.y}`;
    }
};
exports.PolylineEdgeViewWithGapsOnIntersections = PolylineEdgeViewWithGapsOnIntersections;
exports.PolylineEdgeViewWithGapsOnIntersections = PolylineEdgeViewWithGapsOnIntersections = __decorate([
    (0, inversify_1.injectable)()
], PolylineEdgeViewWithGapsOnIntersections);
let BezierCurveEdgeView = class BezierCurveEdgeView extends views_2.RoutableView {
    render(edge, context, args) {
        const route = this.edgeRouterRegistry.route(edge, args);
        if (route.length === 0) {
            return this.renderDanglingEdge("Cannot compute route", edge, context);
        }
        if (!this.isVisible(edge, route, context)) {
            if (edge.children.length === 0) {
                return undefined;
            }
            // The children of an edge are not necessarily inside the bounding box of the route,
            // so we need to render a group to ensure the children have a chance to be rendered.
            return (0, jsx_1.svg)("g", null, context.renderChildren(edge, { route }));
        }
        return (0, jsx_1.svg)("g", { "class-sprotty-edge": true, "class-mouseover": edge.hoverFeedback },
            this.renderLine(edge, route, context, args),
            this.renderAdditionals(edge, route, context),
            context.renderChildren(edge, { route }));
    }
    renderLine(edge, segments, context, args) {
        /**
         * Example for two splines:
         * SVG:
         * <path d="M0,300 C0,150 300,150 300,300 S600,450 600,300" />
         *
         * Segments input layout:
         * routingPoints[0] = source;
         * routingPoints[1] = controlForSource;
         * routingPoints[2] = controlForSegment1;
         * routingPoints[3] = segment;
         * routingPoints[4] = controlForSegment2;
         * routingPoints[5] = controlForTarget;
         * routingPoints[6] = target;
         */
        let path = '';
        if (segments.length >= 4) {
            path += this.buildMainSegment(segments);
            const pointsLeft = segments.length - 4;
            if (pointsLeft > 0 && pointsLeft % 3 === 0) {
                for (let i = 4; i < segments.length; i += 3) {
                    path += this.addSpline(segments, i);
                }
            }
        }
        return (0, jsx_1.svg)("path", { d: path });
    }
    buildMainSegment(segments) {
        const s = segments[0];
        const h1 = segments[1];
        const h2 = segments[2];
        const t = segments[3];
        return `M${s.x},${s.y} C${h1.x},${h1.y} ${h2.x},${h2.y} ${t.x},${t.y}`;
    }
    addSpline(segments, index) {
        // We have two controls for each junction, but SVG does not therefore index is jumped over
        const c = segments[index + 1];
        const p = segments[index + 2];
        return ` S${c.x},${c.y} ${p.x},${p.y}`;
    }
    renderAdditionals(edge, segments, context) {
        return [];
    }
    renderDanglingEdge(message, edge, context) {
        return (0, jsx_1.svg)("text", { "class-sprotty-edge-dangling": true, title: message }, "?");
    }
};
exports.BezierCurveEdgeView = BezierCurveEdgeView;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], BezierCurveEdgeView.prototype, "edgeRouterRegistry", void 0);
exports.BezierCurveEdgeView = BezierCurveEdgeView = __decorate([
    (0, inversify_1.injectable)()
], BezierCurveEdgeView);
let SRoutingHandleView = class SRoutingHandleView {
    constructor() {
        this.minimalPointDistance = 10;
    }
    render(handle, context, args) {
        if (args && args.route) {
            if (handle.parent instanceof model_2.SRoutableElementImpl) {
                const router = this.edgeRouterRegistry.get(handle.parent.routerKind);
                const theRoute = args.route === undefined ? this.edgeRouterRegistry.route(handle.parent, args) : args.route;
                const position = router.getHandlePosition(handle.parent, theRoute, handle);
                if (position !== undefined) {
                    const node = (0, jsx_1.svg)("circle", { "class-sprotty-routing-handle": true, "class-selected": handle.selected, "class-mouseover": handle.hoverFeedback, cx: position.x, cy: position.y, r: this.getRadius() });
                    (0, vnode_utils_1.setAttr)(node, 'data-kind', handle.kind);
                    return node;
                }
            }
        }
        // Fallback: Create an empty group
        return (0, jsx_1.svg)("g", null);
    }
    getRadius() {
        return 7;
    }
};
exports.SRoutingHandleView = SRoutingHandleView;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], SRoutingHandleView.prototype, "edgeRouterRegistry", void 0);
exports.SRoutingHandleView = SRoutingHandleView = __decorate([
    (0, inversify_1.injectable)()
], SRoutingHandleView);
let SLabelView = class SLabelView extends views_1.ShapeView {
    render(label, context) {
        if (!(0, model_1.isEdgeLayoutable)(label) && !this.isVisible(label, context)) {
            return undefined;
        }
        const vnode = (0, jsx_1.svg)("text", { "class-sprotty-label": true }, label.text);
        const subType = (0, model_utils_1.getSubType)(label);
        if (subType) {
            (0, vnode_utils_1.setAttr)(vnode, 'class', subType);
        }
        return vnode;
    }
};
exports.SLabelView = SLabelView;
exports.SLabelView = SLabelView = __decorate([
    (0, inversify_1.injectable)()
], SLabelView);
let SCompartmentView = class SCompartmentView {
    render(compartment, context, args) {
        const translate = `translate(${compartment.bounds.x}, ${compartment.bounds.y})`;
        const vnode = (0, jsx_1.svg)("g", { transform: translate, "class-sprotty-comp": "{true}" }, context.renderChildren(compartment));
        const subType = (0, model_utils_1.getSubType)(compartment);
        if (subType)
            (0, vnode_utils_1.setAttr)(vnode, 'class', subType);
        return vnode;
    }
};
exports.SCompartmentView = SCompartmentView;
exports.SCompartmentView = SCompartmentView = __decorate([
    (0, inversify_1.injectable)()
], SCompartmentView);
let SBezierCreateHandleView = class SBezierCreateHandleView extends SRoutingHandleView {
    render(handle, context, args) {
        if (args) {
            const theRoute = args.route;
            if (theRoute && handle.parent instanceof model_2.SRoutableElementImpl) {
                const router = this.edgeRouterRegistry.get(handle.parent.routerKind);
                const position = router.getHandlePosition(handle.parent, theRoute, handle);
                if (position !== undefined) {
                    const translation = "translate(" + position.x + ", " + position.y + ")";
                    const textOffsetX = -5.5;
                    const textOffsetY = 5.5;
                    const text = (handle.kind === "bezier-add") ? "+" : "-";
                    const node = (0, jsx_1.svg)("g", { transform: translation, "class-sprotty-routing-handle": true, "class-selected": handle.selected, "class-mouseover": handle.hoverFeedback },
                        (0, jsx_1.svg)("circle", { r: this.getRadius() }),
                        (0, jsx_1.svg)("text", { x: textOffsetX, y: textOffsetY, "attrs-text-align": "middle", "style-font-family": "monospace", "style-pointer-events": "none", "style-fill": "white" }, text));
                    (0, vnode_utils_1.setAttr)(node, 'data-kind', handle.kind);
                    return node;
                }
            }
        }
        // Fallback: Create an empty group
        return (0, jsx_1.svg)("g", null);
    }
};
exports.SBezierCreateHandleView = SBezierCreateHandleView;
exports.SBezierCreateHandleView = SBezierCreateHandleView = __decorate([
    (0, inversify_1.injectable)()
], SBezierCreateHandleView);
let SBezierControlHandleView = class SBezierControlHandleView extends SRoutingHandleView {
    render(handle, context, args) {
        if (args) {
            const theRoute = args.route;
            if (theRoute && handle.parent instanceof model_2.SRoutableElementImpl) {
                const router = this.edgeRouterRegistry.get(handle.parent.routerKind);
                const position = router.getHandlePosition(handle.parent, theRoute, handle);
                if (position !== undefined) {
                    let pathEndPos;
                    for (let i = 0; i < theRoute.length; i++) {
                        const elem = theRoute[i];
                        if (elem.kind === position.kind && elem.pointIndex === position.pointIndex) {
                            if (handle.kind === 'bezier-control-before') {
                                pathEndPos = theRoute[i + 1];
                            }
                            else {
                                pathEndPos = theRoute[i - 1];
                            }
                            break;
                        }
                    }
                    let node;
                    if (pathEndPos) {
                        const coords = `M ${position.x}, ${position.y} L ${pathEndPos.x}, ${pathEndPos.y}`;
                        node =
                            (0, jsx_1.svg)("g", { "class-sprotty-routing-handle": true, "class-selected": handle.selected, "class-mouseover": handle.hoverFeedback },
                                (0, jsx_1.svg)("path", { d: coords, stroke: "grey", "style-stroke-width": "2px" }),
                                (0, jsx_1.svg)("circle", { cx: position.x, cy: position.y, r: this.getRadius() }));
                    }
                    else {
                        node = (0, jsx_1.svg)("circle", { "class-sprotty-routing-handle": true, "class-selected": handle.selected, "class-mouseover": handle.hoverFeedback, cx: position.x, cy: position.y, r: this.getRadius() });
                    }
                    (0, vnode_utils_1.setAttr)(node, 'data-kind', handle.kind);
                    return node;
                }
            }
        }
        // Fallback: Create an empty group
        return (0, jsx_1.svg)("g", null);
    }
};
exports.SBezierControlHandleView = SBezierControlHandleView;
exports.SBezierControlHandleView = SBezierControlHandleView = __decorate([
    (0, inversify_1.injectable)()
], SBezierControlHandleView);


/***/ }),

/***/ "../node_modules/sprotty/lib/index.js":
/*!********************************************!*\
  !*** ../node_modules/sprotty/lib/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.modelSourceModule = exports.zorderModule = exports.viewportModule = exports.updateModule = exports.undoRedoModule = exports.selectModule = exports.routingModule = exports.openModule = exports.moveModule = exports.hoverModule = exports.fadeModule = exports.exportModule = exports.expandModule = exports.edgeLayoutModule = exports.edgeJunctionModule = exports.edgeIntersectionModule = exports.decorationModule = exports.contextMenuModule = exports.commandPaletteModule = exports.buttonModule = exports.boundsModule = exports.defaultModule = void 0;
// ------------------ Base ------------------
__exportStar(__webpack_require__(/*! ./base/actions/action */ "../node_modules/sprotty/lib/base/actions/action.js"), exports);
__exportStar(__webpack_require__(/*! ./base/actions/action-dispatcher */ "../node_modules/sprotty/lib/base/actions/action-dispatcher.js"), exports);
__exportStar(__webpack_require__(/*! ./base/actions/action-handler */ "../node_modules/sprotty/lib/base/actions/action-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./base/actions/diagram-locker */ "../node_modules/sprotty/lib/base/actions/diagram-locker.js"), exports);
__exportStar(__webpack_require__(/*! ./base/animations/animation-frame-syncer */ "../node_modules/sprotty/lib/base/animations/animation-frame-syncer.js"), exports);
__exportStar(__webpack_require__(/*! ./base/animations/animation */ "../node_modules/sprotty/lib/base/animations/animation.js"), exports);
__exportStar(__webpack_require__(/*! ./base/animations/easing */ "../node_modules/sprotty/lib/base/animations/easing.js"), exports);
__exportStar(__webpack_require__(/*! ./base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js"), exports);
__exportStar(__webpack_require__(/*! ./base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js"), exports);
__exportStar(__webpack_require__(/*! ./base/commands/command-stack-options */ "../node_modules/sprotty/lib/base/commands/command-stack-options.js"), exports);
__exportStar(__webpack_require__(/*! ./base/commands/command-stack */ "../node_modules/sprotty/lib/base/commands/command-stack.js"), exports);
__exportStar(__webpack_require__(/*! ./base/features/initialize-canvas */ "../node_modules/sprotty/lib/base/features/initialize-canvas.js"), exports);
__exportStar(__webpack_require__(/*! ./base/features/set-model */ "../node_modules/sprotty/lib/base/features/set-model.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/smodel-utils */ "../node_modules/sprotty/lib/base/model/smodel-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js"), exports);
__exportStar(__webpack_require__(/*! ./base/ui-extensions/ui-extension-registry */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js"), exports);
__exportStar(__webpack_require__(/*! ./base/ui-extensions/ui-extension */ "../node_modules/sprotty/lib/base/ui-extensions/ui-extension.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/key-tool */ "../node_modules/sprotty/lib/base/views/key-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/mouse-tool */ "../node_modules/sprotty/lib/base/views/mouse-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/thunk-view */ "../node_modules/sprotty/lib/base/views/thunk-view.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/view */ "../node_modules/sprotty/lib/base/views/view.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/viewer-cache */ "../node_modules/sprotty/lib/base/views/viewer-cache.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/viewer-options */ "../node_modules/sprotty/lib/base/views/viewer-options.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/viewer */ "../node_modules/sprotty/lib/base/views/viewer.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/vnode-postprocessor */ "../node_modules/sprotty/lib/base/views/vnode-postprocessor.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./base/types */ "../node_modules/sprotty/lib/base/types.js"), exports);
const di_config_1 = __importDefault(__webpack_require__(/*! ./base/di.config */ "../node_modules/sprotty/lib/base/di.config.js"));
exports.defaultModule = di_config_1.default;
// ------------------ Features ------------------
__exportStar(__webpack_require__(/*! ./features/bounds/bounds-manipulation */ "../node_modules/sprotty/lib/features/bounds/bounds-manipulation.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/hidden-bounds-updater */ "../node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/layout */ "../node_modules/sprotty/lib/features/bounds/layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/vbox-layout */ "../node_modules/sprotty/lib/features/bounds/vbox-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/hbox-layout */ "../node_modules/sprotty/lib/features/bounds/hbox-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/stack-layout */ "../node_modules/sprotty/lib/features/bounds/stack-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/views */ "../node_modules/sprotty/lib/features/bounds/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/button/button-handler */ "../node_modules/sprotty/lib/features/button/button-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/button/model */ "../node_modules/sprotty/lib/features/button/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/command-palette/action-providers */ "../node_modules/sprotty/lib/features/command-palette/action-providers.js"), exports);
__exportStar(__webpack_require__(/*! ./features/command-palette/command-palette */ "../node_modules/sprotty/lib/features/command-palette/command-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/context-menu-service */ "../node_modules/sprotty/lib/features/context-menu/context-menu-service.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/menu-providers */ "../node_modules/sprotty/lib/features/context-menu/menu-providers.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/mouse-listener */ "../node_modules/sprotty/lib/features/context-menu/mouse-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-layout/di.config */ "../node_modules/sprotty/lib/features/edge-layout/di.config.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-layout/edge-layout */ "../node_modules/sprotty/lib/features/edge-layout/edge-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-layout/model */ "../node_modules/sprotty/lib/features/edge-layout/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/create */ "../node_modules/sprotty/lib/features/edit/create.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/create-on-drag */ "../node_modules/sprotty/lib/features/edit/create-on-drag.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/di.config */ "../node_modules/sprotty/lib/features/edit/di.config.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/delete */ "../node_modules/sprotty/lib/features/edit/delete.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/edit-label */ "../node_modules/sprotty/lib/features/edit/edit-label.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/edit-label-ui */ "../node_modules/sprotty/lib/features/edit/edit-label-ui.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/edit-routing */ "../node_modules/sprotty/lib/features/edit/edit-routing.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/model */ "../node_modules/sprotty/lib/features/edit/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/reconnect */ "../node_modules/sprotty/lib/features/edit/reconnect.js"), exports);
__exportStar(__webpack_require__(/*! ./features/expand/expand */ "../node_modules/sprotty/lib/features/expand/expand.js"), exports);
__exportStar(__webpack_require__(/*! ./features/expand/model */ "../node_modules/sprotty/lib/features/expand/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/expand/views */ "../node_modules/sprotty/lib/features/expand/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/export */ "../node_modules/sprotty/lib/features/export/export.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/model */ "../node_modules/sprotty/lib/features/export/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/svg-exporter */ "../node_modules/sprotty/lib/features/export/svg-exporter.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/svg-export-postprocessor */ "../node_modules/sprotty/lib/features/export/svg-export-postprocessor.js"), exports);
__exportStar(__webpack_require__(/*! ./features/fade/fade */ "../node_modules/sprotty/lib/features/fade/fade.js"), exports);
__exportStar(__webpack_require__(/*! ./features/fade/model */ "../node_modules/sprotty/lib/features/fade/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hover/hover */ "../node_modules/sprotty/lib/features/hover/hover.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hover/model */ "../node_modules/sprotty/lib/features/hover/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/decoration/model */ "../node_modules/sprotty/lib/features/decoration/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/decoration/views */ "../node_modules/sprotty/lib/features/decoration/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/decoration/decoration-placer */ "../node_modules/sprotty/lib/features/decoration/decoration-placer.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-intersection/intersection-finder */ "../node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-intersection/sweepline */ "../node_modules/sprotty/lib/features/edge-intersection/sweepline.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-junction/junction-finder */ "../node_modules/sprotty/lib/features/edge-junction/junction-finder.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-junction/junction-postprocessor */ "../node_modules/sprotty/lib/features/edge-junction/junction-postprocessor.js"), exports);
__exportStar(__webpack_require__(/*! ./features/move/model */ "../node_modules/sprotty/lib/features/move/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/move/move */ "../node_modules/sprotty/lib/features/move/move.js"), exports);
__exportStar(__webpack_require__(/*! ./features/move/snap */ "../node_modules/sprotty/lib/features/move/snap.js"), exports);
__exportStar(__webpack_require__(/*! ./features/nameable/model */ "../node_modules/sprotty/lib/features/nameable/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/open/open */ "../node_modules/sprotty/lib/features/open/open.js"), exports);
__exportStar(__webpack_require__(/*! ./features/open/model */ "../node_modules/sprotty/lib/features/open/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/projection/model */ "../node_modules/sprotty/lib/features/projection/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/projection/views */ "../node_modules/sprotty/lib/features/projection/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/abstract-edge-router */ "../node_modules/sprotty/lib/features/routing/abstract-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/bezier-anchors */ "../node_modules/sprotty/lib/features/routing/bezier-anchors.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/bezier-edge-router */ "../node_modules/sprotty/lib/features/routing/bezier-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/manhattan-anchors */ "../node_modules/sprotty/lib/features/routing/manhattan-anchors.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/manhattan-edge-router */ "../node_modules/sprotty/lib/features/routing/manhattan-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/model */ "../node_modules/sprotty/lib/features/routing/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/polyline-anchors */ "../node_modules/sprotty/lib/features/routing/polyline-anchors.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/polyline-edge-router */ "../node_modules/sprotty/lib/features/routing/polyline-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/routing */ "../node_modules/sprotty/lib/features/routing/routing.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/views */ "../node_modules/sprotty/lib/features/routing/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/select/model */ "../node_modules/sprotty/lib/features/select/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/select/select */ "../node_modules/sprotty/lib/features/select/select.js"), exports);
__exportStar(__webpack_require__(/*! ./features/undo-redo/undo-redo */ "../node_modules/sprotty/lib/features/undo-redo/undo-redo.js"), exports);
__exportStar(__webpack_require__(/*! ./features/update/model-matching */ "../node_modules/sprotty/lib/features/update/model-matching.js"), exports);
__exportStar(__webpack_require__(/*! ./features/update/update-model */ "../node_modules/sprotty/lib/features/update/update-model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/center-fit */ "../node_modules/sprotty/lib/features/viewport/center-fit.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/model */ "../node_modules/sprotty/lib/features/viewport/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/scroll */ "../node_modules/sprotty/lib/features/viewport/scroll.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/viewport-root */ "../node_modules/sprotty/lib/features/viewport/viewport-root.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/viewport */ "../node_modules/sprotty/lib/features/viewport/viewport.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/zoom */ "../node_modules/sprotty/lib/features/viewport/zoom.js"), exports);
__exportStar(__webpack_require__(/*! ./features/zorder/zorder */ "../node_modules/sprotty/lib/features/zorder/zorder.js"), exports);
const di_config_2 = __importDefault(__webpack_require__(/*! ./features/bounds/di.config */ "../node_modules/sprotty/lib/features/bounds/di.config.js"));
exports.boundsModule = di_config_2.default;
const di_config_3 = __importDefault(__webpack_require__(/*! ./features/button/di.config */ "../node_modules/sprotty/lib/features/button/di.config.js"));
exports.buttonModule = di_config_3.default;
const di_config_4 = __importDefault(__webpack_require__(/*! ./features/command-palette/di.config */ "../node_modules/sprotty/lib/features/command-palette/di.config.js"));
exports.commandPaletteModule = di_config_4.default;
const di_config_5 = __importDefault(__webpack_require__(/*! ./features/context-menu/di.config */ "../node_modules/sprotty/lib/features/context-menu/di.config.js"));
exports.contextMenuModule = di_config_5.default;
const di_config_6 = __importDefault(__webpack_require__(/*! ./features/decoration/di.config */ "../node_modules/sprotty/lib/features/decoration/di.config.js"));
exports.decorationModule = di_config_6.default;
const di_config_7 = __importDefault(__webpack_require__(/*! ./features/edge-intersection/di.config */ "../node_modules/sprotty/lib/features/edge-intersection/di.config.js"));
exports.edgeIntersectionModule = di_config_7.default;
const di_config_8 = __importDefault(__webpack_require__(/*! ./features/edge-junction/di.config */ "../node_modules/sprotty/lib/features/edge-junction/di.config.js"));
exports.edgeJunctionModule = di_config_8.default;
const di_config_9 = __importDefault(__webpack_require__(/*! ./features/edge-layout/di.config */ "../node_modules/sprotty/lib/features/edge-layout/di.config.js"));
exports.edgeLayoutModule = di_config_9.default;
const di_config_10 = __importDefault(__webpack_require__(/*! ./features/expand/di.config */ "../node_modules/sprotty/lib/features/expand/di.config.js"));
exports.expandModule = di_config_10.default;
const di_config_11 = __importDefault(__webpack_require__(/*! ./features/export/di.config */ "../node_modules/sprotty/lib/features/export/di.config.js"));
exports.exportModule = di_config_11.default;
const di_config_12 = __importDefault(__webpack_require__(/*! ./features/fade/di.config */ "../node_modules/sprotty/lib/features/fade/di.config.js"));
exports.fadeModule = di_config_12.default;
const di_config_13 = __importDefault(__webpack_require__(/*! ./features/hover/di.config */ "../node_modules/sprotty/lib/features/hover/di.config.js"));
exports.hoverModule = di_config_13.default;
const di_config_14 = __importDefault(__webpack_require__(/*! ./features/move/di.config */ "../node_modules/sprotty/lib/features/move/di.config.js"));
exports.moveModule = di_config_14.default;
const di_config_15 = __importDefault(__webpack_require__(/*! ./features/open/di.config */ "../node_modules/sprotty/lib/features/open/di.config.js"));
exports.openModule = di_config_15.default;
const di_config_16 = __importDefault(__webpack_require__(/*! ./features/routing/di.config */ "../node_modules/sprotty/lib/features/routing/di.config.js"));
exports.routingModule = di_config_16.default;
const di_config_17 = __importDefault(__webpack_require__(/*! ./features/select/di.config */ "../node_modules/sprotty/lib/features/select/di.config.js"));
exports.selectModule = di_config_17.default;
const di_config_18 = __importDefault(__webpack_require__(/*! ./features/undo-redo/di.config */ "../node_modules/sprotty/lib/features/undo-redo/di.config.js"));
exports.undoRedoModule = di_config_18.default;
const di_config_19 = __importDefault(__webpack_require__(/*! ./features/update/di.config */ "../node_modules/sprotty/lib/features/update/di.config.js"));
exports.updateModule = di_config_19.default;
const di_config_20 = __importDefault(__webpack_require__(/*! ./features/viewport/di.config */ "../node_modules/sprotty/lib/features/viewport/di.config.js"));
exports.viewportModule = di_config_20.default;
const di_config_21 = __importDefault(__webpack_require__(/*! ./features/zorder/di.config */ "../node_modules/sprotty/lib/features/zorder/di.config.js"));
exports.zorderModule = di_config_21.default;
// ------------------ Graph ------------------
__exportStar(__webpack_require__(/*! ./graph/sgraph */ "../node_modules/sprotty/lib/graph/sgraph.js"), exports);
__exportStar(__webpack_require__(/*! ./graph/views */ "../node_modules/sprotty/lib/graph/views.js"), exports);
// ------------------ Library ------------------
__exportStar(__webpack_require__(/*! ./lib/modules */ "../node_modules/sprotty/lib/lib/modules.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/generic-views */ "../node_modules/sprotty/lib/lib/generic-views.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/html-views */ "../node_modules/sprotty/lib/lib/html-views.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/jsx */ "../node_modules/sprotty/lib/lib/jsx.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/model */ "../node_modules/sprotty/lib/lib/model.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/svg-views */ "../node_modules/sprotty/lib/lib/svg-views.js"), exports);
// ------------------ Model Source ------------------
__exportStar(__webpack_require__(/*! ./model-source/commit-model */ "../node_modules/sprotty/lib/model-source/commit-model.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/diagram-server */ "../node_modules/sprotty/lib/model-source/diagram-server.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/local-model-source */ "../node_modules/sprotty/lib/model-source/local-model-source.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/logging */ "../node_modules/sprotty/lib/model-source/logging.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/model-source */ "../node_modules/sprotty/lib/model-source/model-source.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/websocket */ "../node_modules/sprotty/lib/model-source/websocket.js"), exports);
const di_config_22 = __importDefault(__webpack_require__(/*! ./model-source/di.config */ "../node_modules/sprotty/lib/model-source/di.config.js"));
exports.modelSourceModule = di_config_22.default;
// ------------------ Utilities ------------------
__exportStar(__webpack_require__(/*! ./utils/browser */ "../node_modules/sprotty/lib/utils/browser.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/codicon */ "../node_modules/sprotty/lib/utils/codicon.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/color */ "../node_modules/sprotty/lib/utils/color.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/inversify */ "../node_modules/sprotty/lib/utils/inversify.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/logging */ "../node_modules/sprotty/lib/utils/logging.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/registry */ "../node_modules/sprotty/lib/utils/registry.js"), exports);


/***/ }),

/***/ "../node_modules/sprotty/lib/lib/generic-views.js":
/*!********************************************************!*\
  !*** ../node_modules/sprotty/lib/lib/generic-views.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForeignObjectView = exports.PreRenderedView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ./jsx */ "../node_modules/sprotty/lib/lib/jsx.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const virtualize_1 = __importDefault(__webpack_require__(/*! ./virtualize */ "../node_modules/sprotty/lib/lib/virtualize.js"));
const vnode_utils_1 = __webpack_require__(/*! ../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
const views_1 = __webpack_require__(/*! ../features/bounds/views */ "../node_modules/sprotty/lib/features/bounds/views.js");
const model_1 = __webpack_require__(/*! ./model */ "../node_modules/sprotty/lib/lib/model.js");
let PreRenderedView = class PreRenderedView extends views_1.ShapeView {
    render(model, context) {
        if (model instanceof model_1.ShapedPreRenderedElementImpl && !this.isVisible(model, context)) {
            return undefined;
        }
        const node = (0, virtualize_1.default)(model.code);
        if (node === null)
            return undefined;
        this.correctNamespace(node);
        return node;
    }
    correctNamespace(node) {
        if (node.sel === 'svg' || node.sel === 'g')
            (0, vnode_utils_1.setNamespace)(node, 'http://www.w3.org/2000/svg');
    }
};
exports.PreRenderedView = PreRenderedView;
exports.PreRenderedView = PreRenderedView = __decorate([
    (0, inversify_1.injectable)()
], PreRenderedView);
/**
 * An SVG `foreignObject` view with a namespace specified by the provided `ForeignObjectElement`.
 * Note that `foreignObject` may not be supported by all browsers or SVG viewers.
 */
let ForeignObjectView = class ForeignObjectView {
    render(model, context) {
        const foreignObjectContents = (0, virtualize_1.default)(model.code);
        if (foreignObjectContents === null)
            return undefined;
        const node = (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("foreignObject", { requiredFeatures: 'http://www.w3.org/TR/SVG11/feature#Extensibility', height: model.bounds.height, width: model.bounds.width, x: 0, y: 0 }, foreignObjectContents),
            context.renderChildren(model));
        (0, vnode_utils_1.setAttr)(node, 'class', model.type);
        (0, vnode_utils_1.setNamespace)(foreignObjectContents, model.namespace);
        return node;
    }
};
exports.ForeignObjectView = ForeignObjectView;
exports.ForeignObjectView = ForeignObjectView = __decorate([
    (0, inversify_1.injectable)()
], ForeignObjectView);


/***/ }),

/***/ "../node_modules/sprotty/lib/lib/html-views.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty/lib/lib/html-views.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlRootView = void 0;
/** @jsx html */
const jsx_1 = __webpack_require__(/*! ./jsx */ "../node_modules/sprotty/lib/lib/jsx.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const vnode_utils_1 = __webpack_require__(/*! ../base/views/vnode-utils */ "../node_modules/sprotty/lib/base/views/vnode-utils.js");
/**
 * View for `HtmlRoot` elements. Typically this is used in hover popup boxes.
 */
let HtmlRootView = class HtmlRootView {
    render(model, context) {
        const root = (0, jsx_1.html)("div", null, context.renderChildren(model));
        for (const c of model.classes) {
            (0, vnode_utils_1.setClass)(root, c, true);
        }
        return root;
    }
};
exports.HtmlRootView = HtmlRootView;
exports.HtmlRootView = HtmlRootView = __decorate([
    (0, inversify_1.injectable)()
], HtmlRootView);


/***/ }),

/***/ "../node_modules/sprotty/lib/lib/jsx.js":
/*!**********************************************!*\
  !*** ../node_modules/sprotty/lib/lib/jsx.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSX = exports.svg = exports.html = void 0;
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "../node_modules/snabbdom/build/index.js");
const modulesNS = ['hook', 'on', 'style', 'class', 'props', 'attrs', 'dataset'];
const SVGNS = 'http://www.w3.org/2000/svg';
function normalizeAttrs(source, defNS, namespace) {
    const data = {};
    if (namespace) {
        data.ns = namespace;
    }
    if (source === null) {
        return data;
    }
    modulesNS.forEach(mod => {
        if (source[mod]) {
            data[mod] = source[mod];
        }
    });
    Object.keys(source).forEach(key => {
        if (key === 'key' || key === 'classNames' || key === 'selector')
            return;
        const idx = key.indexOf('-');
        if (idx > 0) {
            const modname = key.slice(0, idx);
            if (modulesNS.includes(modname)) {
                addAttr(modname, key.slice(idx + 1), source[key]);
            }
            else {
                addAttr(defNS, key, source[key]);
            }
        }
        else if (!data[key])
            addAttr(defNS, key, source[key]);
    });
    return data;
    function addAttr(modname, key, val) {
        const mod = data[modname] || (data[modname] = {});
        mod[key] = val;
    }
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function JSX(namespace, defNS = 'props') {
    return (tag, attrs, ...children) => {
        const isComponent = typeof tag === 'function';
        return (0, snabbdom_1.jsx)(tag, (isComponent ? attrs : normalizeAttrs(attrs, defNS, namespace)), children);
    };
}
exports.JSX = JSX;
const html = JSX();
exports.html = html;
const svg = JSX(SVGNS, 'attrs');
exports.svg = svg;


/***/ }),

/***/ "../node_modules/sprotty/lib/lib/model.js":
/*!************************************************!*\
  !*** ../node_modules/sprotty/lib/lib/model.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForeignObjectElement = exports.ForeignObjectElementImpl = exports.ShapedPreRenderedElement = exports.ShapedPreRenderedElementImpl = exports.PreRenderedElement = exports.PreRenderedElementImpl = exports.HtmlRoot = exports.HtmlRootImpl = exports.RectangularPort = exports.CircularPort = exports.DiamondNode = exports.RectangularNode = exports.CircularNode = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "../node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../base/model/smodel */ "../node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ../features/bounds/model */ "../node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../features/move/model */ "../node_modules/sprotty/lib/features/move/model.js");
const model_3 = __webpack_require__(/*! ../features/select/model */ "../node_modules/sprotty/lib/features/select/model.js");
const sgraph_1 = __webpack_require__(/*! ../graph/sgraph */ "../node_modules/sprotty/lib/graph/sgraph.js");
const anchor_1 = __webpack_require__(/*! ../features/routing/anchor */ "../node_modules/sprotty/lib/features/routing/anchor.js");
/**
 * A node that is represented by a circle.
 */
class CircularNode extends sgraph_1.SNodeImpl {
    get anchorKind() {
        return anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
}
exports.CircularNode = CircularNode;
/**
 * A node that is represented by a rectangle.
 */
class RectangularNode extends sgraph_1.SNodeImpl {
    get anchorKind() {
        return anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
}
exports.RectangularNode = RectangularNode;
/**
 * A node that is represented by a diamond.
 */
class DiamondNode extends sgraph_1.SNodeImpl {
    get anchorKind() {
        return anchor_1.DIAMOND_ANCHOR_KIND;
    }
}
exports.DiamondNode = DiamondNode;
/**
 * A port that is represented by a circle.
 */
class CircularPort extends sgraph_1.SPortImpl {
    get anchorKind() {
        return anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
}
exports.CircularPort = CircularPort;
/**
 * A port that is represented by a rectangle.
 */
class RectangularPort extends sgraph_1.SPortImpl {
    get anchorKind() {
        return anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
}
exports.RectangularPort = RectangularPort;
/**
 * Root model element class for HTML content. Usually this is rendered with a `div` DOM element.
 */
class HtmlRootImpl extends smodel_1.SModelRootImpl {
    constructor() {
        super(...arguments);
        this.classes = [];
    }
}
exports.HtmlRootImpl = HtmlRootImpl;
/** @deprecated Use `HtmlRootImpl` instead. */
exports.HtmlRoot = HtmlRootImpl;
/**
 * Pre-rendered elements contain HTML or SVG code to be transferred to the DOM. This can be useful to
 * render complex figures or to compute the view on the server instead of the client code.
 */
class PreRenderedElementImpl extends smodel_1.SChildElementImpl {
}
exports.PreRenderedElementImpl = PreRenderedElementImpl;
/** @deprecated Use `PreRenderedElementImpl` instead. */
exports.PreRenderedElement = PreRenderedElementImpl;
/**
 * Same as PreRenderedElement, but with a position and a size.
 */
class ShapedPreRenderedElementImpl extends PreRenderedElementImpl {
    constructor() {
        super(...arguments);
        this.position = geometry_1.Point.ORIGIN;
        this.size = geometry_1.Dimension.EMPTY;
        this.selected = false;
        this.alignment = geometry_1.Point.ORIGIN;
    }
    get bounds() {
        return {
            x: this.position.x,
            y: this.position.y,
            width: this.size.width,
            height: this.size.height
        };
    }
    set bounds(newBounds) {
        this.position = {
            x: newBounds.x,
            y: newBounds.y
        };
        this.size = {
            width: newBounds.width,
            height: newBounds.height
        };
    }
}
exports.ShapedPreRenderedElementImpl = ShapedPreRenderedElementImpl;
ShapedPreRenderedElementImpl.DEFAULT_FEATURES = [model_2.moveFeature, model_1.boundsFeature, model_3.selectFeature, model_1.alignFeature];
/** @deprecated Use `ShapedPreRenderedElementImpl` instead. */
exports.ShapedPreRenderedElement = ShapedPreRenderedElementImpl;
/**
 * A `foreignObject` element to be transferred to the DOM within the SVG.
 *
 * This can be useful to to benefit from e.g. HTML rendering features, such as line wrapping, inside of
 * the SVG diagram.  Note that `foreignObject` is not supported by all browsers and SVG viewers may not
 * support rendering the `foreignObject` content.
 *
 * If no dimensions are specified in the schema element, this element will obtain the dimension of
 * its parent to fill the entire available room. Thus, this element requires specified bounds itself
 * or bounds to be available for its parent.
 */
class ForeignObjectElementImpl extends ShapedPreRenderedElementImpl {
    get bounds() {
        if (geometry_1.Dimension.isValid(this.size)) {
            return {
                x: this.position.x,
                y: this.position.y,
                width: this.size.width,
                height: this.size.height
            };
        }
        else if ((0, model_1.isBoundsAware)(this.parent)) {
            return {
                x: this.position.x,
                y: this.position.y,
                width: this.parent.bounds.width,
                height: this.parent.bounds.height
            };
        }
        return geometry_1.Bounds.EMPTY;
    }
}
exports.ForeignObjectElementImpl = ForeignObjectElementImpl;
/** @deprecated Use `ForeignObjectElementImpl` instead. */
exports.ForeignObjectElement = ForeignObjectElementImpl;


/***/ }),

/***/ "../node_modules/sprotty/lib/lib/modules.js":
/*!**************************************************!*\
  !*** ../node_modules/sprotty/lib/lib/modules.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadDefaultModules = void 0;
const di_config_1 = __importDefault(__webpack_require__(/*! ../base/di.config */ "../node_modules/sprotty/lib/base/di.config.js"));
const di_config_2 = __importDefault(__webpack_require__(/*! ../model-source/di.config */ "../node_modules/sprotty/lib/model-source/di.config.js"));
const di_config_3 = __importDefault(__webpack_require__(/*! ../features/bounds/di.config */ "../node_modules/sprotty/lib/features/bounds/di.config.js"));
const di_config_4 = __importDefault(__webpack_require__(/*! ../features/button/di.config */ "../node_modules/sprotty/lib/features/button/di.config.js"));
const di_config_5 = __importDefault(__webpack_require__(/*! ../features/command-palette/di.config */ "../node_modules/sprotty/lib/features/command-palette/di.config.js"));
const di_config_6 = __importDefault(__webpack_require__(/*! ../features/context-menu/di.config */ "../node_modules/sprotty/lib/features/context-menu/di.config.js"));
const di_config_7 = __importDefault(__webpack_require__(/*! ../features/decoration/di.config */ "../node_modules/sprotty/lib/features/decoration/di.config.js"));
const di_config_8 = __importDefault(__webpack_require__(/*! ../features/edge-layout/di.config */ "../node_modules/sprotty/lib/features/edge-layout/di.config.js"));
const di_config_9 = __webpack_require__(/*! ../features/edit/di.config */ "../node_modules/sprotty/lib/features/edit/di.config.js");
const di_config_10 = __importDefault(__webpack_require__(/*! ../features/expand/di.config */ "../node_modules/sprotty/lib/features/expand/di.config.js"));
const di_config_11 = __importDefault(__webpack_require__(/*! ../features/export/di.config */ "../node_modules/sprotty/lib/features/export/di.config.js"));
const di_config_12 = __importDefault(__webpack_require__(/*! ../features/fade/di.config */ "../node_modules/sprotty/lib/features/fade/di.config.js"));
const di_config_13 = __importDefault(__webpack_require__(/*! ../features/hover/di.config */ "../node_modules/sprotty/lib/features/hover/di.config.js"));
const di_config_14 = __importDefault(__webpack_require__(/*! ../features/move/di.config */ "../node_modules/sprotty/lib/features/move/di.config.js"));
const di_config_15 = __importDefault(__webpack_require__(/*! ../features/open/di.config */ "../node_modules/sprotty/lib/features/open/di.config.js"));
const di_config_16 = __importDefault(__webpack_require__(/*! ../features/routing/di.config */ "../node_modules/sprotty/lib/features/routing/di.config.js"));
const di_config_17 = __importDefault(__webpack_require__(/*! ../features/select/di.config */ "../node_modules/sprotty/lib/features/select/di.config.js"));
const di_config_18 = __importDefault(__webpack_require__(/*! ../features/undo-redo/di.config */ "../node_modules/sprotty/lib/features/undo-redo/di.config.js"));
const di_config_19 = __importDefault(__webpack_require__(/*! ../features/update/di.config */ "../node_modules/sprotty/lib/features/update/di.config.js"));
const di_config_20 = __importDefault(__webpack_require__(/*! ../features/viewport/di.config */ "../node_modules/sprotty/lib/features/viewport/di.config.js"));
const di_config_21 = __importDefault(__webpack_require__(/*! ../features/zorder/di.config */ "../node_modules/sprotty/lib/features/zorder/di.config.js"));
/**
 * Load the default set of container modules provided by Sprotty.
 */
function loadDefaultModules(container, options) {
    const modules = [
        di_config_1.default, di_config_2.default, di_config_3.default, di_config_4.default,
        di_config_5.default, di_config_6.default, di_config_7.default, di_config_9.edgeEditModule,
        di_config_8.default, di_config_10.default, di_config_11.default, di_config_12.default,
        di_config_13.default, di_config_9.labelEditModule, di_config_9.labelEditUiModule, di_config_14.default,
        di_config_15.default, di_config_16.default, di_config_17.default, di_config_18.default,
        di_config_19.default, di_config_20.default, di_config_21.default
    ];
    if (options && options.exclude) {
        for (const mod of options.exclude) {
            const index = modules.indexOf(mod);
            if (index >= 0)
                modules.splice(index, 1);
        }
    }
    container.load(...modules);
}
exports.loadDefaultModules = loadDefaultModules;


/***/ }),

/***/ "../node_modules/sprotty/lib/lib/svg-views.js":
/*!****************************************************!*\
  !*** ../node_modules/sprotty/lib/lib/svg-views.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EmptyGroupView = exports.DiamondNodeView = exports.RectangularNodeView = exports.CircularNodeView = exports.SvgViewportView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ./jsx */ "../node_modules/sprotty/lib/lib/jsx.js");
const sgraph_1 = __webpack_require__(/*! ../graph/sgraph */ "../node_modules/sprotty/lib/graph/sgraph.js");
const views_1 = __webpack_require__(/*! ../features/bounds/views */ "../node_modules/sprotty/lib/features/bounds/views.js");
const geometry_1 = __webpack_require__(/*! ../utils/geometry */ "../node_modules/sprotty/lib/utils/geometry.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let SvgViewportView = class SvgViewportView {
    render(model, context, args) {
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        return (0, jsx_1.svg)("svg", null,
            (0, jsx_1.svg)("g", { transform: transform }, context.renderChildren(model)));
    }
};
exports.SvgViewportView = SvgViewportView;
exports.SvgViewportView = SvgViewportView = __decorate([
    (0, inversify_1.injectable)()
], SvgViewportView);
let CircularNodeView = class CircularNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        const radius = this.getRadius(node);
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("circle", { "class-sprotty-node": node instanceof sgraph_1.SNodeImpl, "class-sprotty-port": node instanceof sgraph_1.SPortImpl, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, r: radius, cx: radius, cy: radius }),
            context.renderChildren(node));
    }
    getRadius(node) {
        const d = Math.min(node.size.width, node.size.height);
        return d > 0 ? d / 2 : 0;
    }
};
exports.CircularNodeView = CircularNodeView;
exports.CircularNodeView = CircularNodeView = __decorate([
    (0, inversify_1.injectable)()
], CircularNodeView);
let RectangularNodeView = class RectangularNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("rect", { "class-sprotty-node": node instanceof sgraph_1.SNodeImpl, "class-sprotty-port": node instanceof sgraph_1.SPortImpl, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, x: "0", y: "0", width: Math.max(node.size.width, 0), height: Math.max(node.size.height, 0) }),
            context.renderChildren(node));
    }
};
exports.RectangularNodeView = RectangularNodeView;
exports.RectangularNodeView = RectangularNodeView = __decorate([
    (0, inversify_1.injectable)()
], RectangularNodeView);
let DiamondNodeView = class DiamondNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        const diamond = new geometry_1.Diamond({ height: Math.max(node.size.height, 0), width: Math.max(node.size.width, 0), x: 0, y: 0 });
        const points = `${svgStr(diamond.topPoint)} ${svgStr(diamond.rightPoint)} ${svgStr(diamond.bottomPoint)} ${svgStr(diamond.leftPoint)}`;
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("polygon", { "class-sprotty-node": node instanceof sgraph_1.SNodeImpl, "class-sprotty-port": node instanceof sgraph_1.SPortImpl, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, points: points }),
            context.renderChildren(node));
    }
};
exports.DiamondNodeView = DiamondNodeView;
exports.DiamondNodeView = DiamondNodeView = __decorate([
    (0, inversify_1.injectable)()
], DiamondNodeView);
function svgStr(point) {
    return `${point.x},${point.y}`;
}
let EmptyGroupView = class EmptyGroupView {
    render(model, context) {
        return (0, jsx_1.svg)("g", null);
    }
};
exports.EmptyGroupView = EmptyGroupView;
exports.EmptyGroupView = EmptyGroupView = __decorate([
    (0, inversify_1.injectable)()
], EmptyGroupView);


/***/ }),

/***/ "../node_modules/sprotty/lib/lib/virtualize.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty/lib/lib/virtualize.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "../node_modules/snabbdom/build/index.js");
function buildVNodeData(attrs) {
    const data = {};
    const addData = (memo, name) => {
        if (name !== 'style' && name !== 'class') {
            const val = unescapeEntities(attrs[name]);
            memo ? memo[name] = val : memo = { [name]: val };
        }
        return memo;
    };
    const _attrs = Object.keys(attrs).reduce(addData, null);
    if (_attrs) {
        data.attrs = _attrs;
    }
    const style = parseStyle(attrs);
    if (style) {
        data.style = style;
    }
    const classes = parseClass(attrs);
    if (classes) {
        data.class = classes;
    }
    return data;
}
function parseStyle(attrs) {
    const addStyle = (memo, styleProp) => {
        const res = styleProp.split(':');
        const name = transformName(res[0].trim());
        if (name) {
            const val = res[1].replace('!important', '').trim();
            memo ? memo[name] = val : memo = { [name]: val };
        }
        return memo;
    };
    try {
        return attrs.style.split(';').reduce(addStyle, null);
    }
    catch (e) {
        return null;
    }
}
function parseClass(attrs) {
    const addClass = (memo, className) => {
        className = className.trim();
        if (className) {
            memo ? memo[className] = true : memo = { [className]: true };
        }
        return memo;
    };
    try {
        return attrs.class.split(' ').reduce(addClass, null);
    }
    catch (e) {
        return null;
    }
}
function transformName(name) {
    // Replace -a with A to help camel case style property names.
    name = name.replace(/-(\w)/g, function _replace($1, $2) {
        return $2.toUpperCase();
    });
    // Handle properties that start with a -.
    const firstChar = name.charAt(0).toLowerCase();
    return `${firstChar}${name.substring(1)}`;
}
// Regex for matching HTML entities.
const entityRegex = new RegExp('&[a-z0-9#]+;', 'gi');
// Element for setting innerHTML for transforming entities.
let el = null;
function unescapeEntities(text) {
    // Create the element using the context if it doesn't exist.
    if (!el) {
        el = document.createElement('div');
    }
    return text.replace(entityRegex, (entity) => {
        if (el === null)
            return '';
        el.innerHTML = entity;
        return el.textContent === null ? '' : el.textContent;
    });
}
function recurse(doc, func) {
    let node = doc;
    let parent = null;
    const stack = [];
    const setChild = (n) => {
        const child = n.firstChild;
        if (child !== null) {
            parent = n;
        }
        node = child;
    };
    func(node, parent);
    setChild(node);
    while (true) {
        while (node) {
            stack.push(node);
            func(node, parent);
            setChild(node);
        }
        const _node = stack.pop();
        node = _node ? _node : null;
        if (!stack.length)
            break;
        parent = stack[stack.length - 1];
        if (node) {
            const sibling = node.nextSibling;
            if (sibling == null) {
                parent = stack[stack.length - 1];
            }
            node = sibling;
        }
    }
}
let vdom = null;
const vnodeMap = new Map();
let delimited = false;
function toVNode(node, parent) {
    let current;
    if (parent !== null) {
        current = vnodeMap.get(parent);
    }
    switch (node === null || node === void 0 ? void 0 : node.nodeType) {
        // element
        case 1: {
            if (current === undefined)
                return;
            current.children = current.children ? current.children : [];
            const children = current.children;
            const attributes = node.attributes;
            const attrs = {};
            for (let i = 0; i < attributes.length; i++) {
                const attr = attributes.item(i);
                if (attr) {
                    attrs[attr.name] = attr.value;
                }
            }
            const vn = (0, snabbdom_1.h)(node.nodeName, buildVNodeData(attrs));
            children.push(vn);
            vnodeMap.set(node, vn);
            break;
        }
        // text
        case 3: {
            const text = node.textContent;
            if (text !== null && current !== undefined) {
                current.children = current.children ? current.children : [];
                const children = current.children;
                const lastData = children.length > 0 ? children[children.length - 1] : null;
                if (!delimited && typeof lastData !== 'string' && lastData !== null && lastData.sel === undefined) {
                    lastData.text = lastData.text + text;
                }
                else {
                    children.push((0, snabbdom_1.vnode)(undefined, undefined, undefined, text, undefined));
                }
                delimited = false;
            }
            break;
        }
        case 8: {
            delimited = true;
            break;
        }
        // document
        case 9: {
            vdom = (0, snabbdom_1.vnode)(undefined, undefined, [], undefined, undefined);
            vnodeMap.set(node, vdom);
            break;
        }
        default:
            break;
    }
}
function stripVNode(vnodes) {
    const children = vnodes === null || vnodes === void 0 ? void 0 : vnodes.children;
    if (typeof children === 'undefined')
        return null;
    if (children.length === 1 && typeof children[0] !== 'string')
        return children[0];
    return null;
}
function virtualizeString(html) {
    var _a, _b;
    const parser = new window.DOMParser();
    if (parser === undefined || html === undefined || html === '')
        return null;
    const doc = parser.parseFromString(html, "application/xml");
    if (((_a = doc === null || doc === void 0 ? void 0 : doc.firstChild) === null || _a === void 0 ? void 0 : _a.nodeName) === 'parsererror') {
        const error = `${(_b = doc === null || doc === void 0 ? void 0 : doc.firstChild) === null || _b === void 0 ? void 0 : _b.textContent}`;
        return (0, snabbdom_1.h)('parsererror', [error]);
    }
    delimited = false;
    vdom = null;
    recurse(doc, toVNode);
    if (vdom === null)
        return null;
    return stripVNode(vdom);
}
exports["default"] = virtualizeString;


/***/ }),

/***/ "../node_modules/sprotty/lib/model-source/commit-model.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/model-source/commit-model.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommitModelCommand = exports.CommitModelAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const command_1 = __webpack_require__(/*! ../base/commands/command */ "../node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../base/types */ "../node_modules/sprotty/lib/base/types.js");
const model_source_1 = __webpack_require__(/*! ./model-source */ "../node_modules/sprotty/lib/model-source/model-source.js");
var CommitModelAction;
(function (CommitModelAction) {
    CommitModelAction.KIND = 'commitModel';
    function create() {
        return {
            kind: CommitModelAction.KIND
        };
    }
    CommitModelAction.create = create;
})(CommitModelAction || (exports.CommitModelAction = CommitModelAction = {}));
let CommitModelCommand = class CommitModelCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.newModel = context.modelFactory.createSchema(context.root);
        return this.doCommit(this.newModel, context.root, true);
    }
    doCommit(model, result, doSetOriginal) {
        const commitResult = this.modelSource.commitModel(model);
        if (commitResult instanceof Promise) {
            return commitResult.then(originalModel => {
                if (doSetOriginal)
                    this.originalModel = originalModel;
                return result;
            });
        }
        else {
            if (doSetOriginal)
                this.originalModel = commitResult;
            return result;
        }
    }
    undo(context) {
        return this.doCommit(this.originalModel, context.root, false);
    }
    redo(context) {
        return this.doCommit(this.newModel, context.root, false);
    }
};
exports.CommitModelCommand = CommitModelCommand;
CommitModelCommand.KIND = CommitModelAction.KIND;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ModelSource),
    __metadata("design:type", model_source_1.ModelSource)
], CommitModelCommand.prototype, "modelSource", void 0);
exports.CommitModelCommand = CommitModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], CommitModelCommand);


/***/ }),

/***/ "../node_modules/sprotty/lib/model-source/di.config.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/model-source/di.config.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const command_registration_1 = __webpack_require__(/*! ../base/commands/command-registration */ "../node_modules/sprotty/lib/base/commands/command-registration.js");
const types_1 = __webpack_require__(/*! ../base/types */ "../node_modules/sprotty/lib/base/types.js");
const commit_model_1 = __webpack_require__(/*! ./commit-model */ "../node_modules/sprotty/lib/model-source/commit-model.js");
const model_source_1 = __webpack_require__(/*! ./model-source */ "../node_modules/sprotty/lib/model-source/model-source.js");
/**
 * This container module does NOT provide any binding for TYPES.ModelSource because that needs to be
 * done according to the needs of the application. You can choose between a local (LocalModelSource)
 * and a remote (e.g. WebSocketDiagramServer) implementation.
 */
const modelSourceModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(types_1.TYPES.ModelSourceProvider).toProvider((context) => {
        return () => {
            return new Promise((resolve) => {
                resolve(context.container.get(types_1.TYPES.ModelSource));
            });
        };
    });
    (0, command_registration_1.configureCommand)({ bind, isBound }, commit_model_1.CommitModelCommand);
    bind(types_1.TYPES.IActionHandlerInitializer).toService(types_1.TYPES.ModelSource);
    bind(model_source_1.ComputedBoundsApplicator).toSelf().inSingletonScope();
});
exports["default"] = modelSourceModule;


/***/ }),

/***/ "../node_modules/sprotty/lib/model-source/diagram-server.js":
/*!******************************************************************!*\
  !*** ../node_modules/sprotty/lib/model-source/diagram-server.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagramServerProxy = exports.ServerStatusAction = void 0;
const file_saver_1 = __webpack_require__(/*! file-saver */ "../node_modules/file-saver/dist/FileSaver.min.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const set_model_1 = __webpack_require__(/*! ../base/features/set-model */ "../node_modules/sprotty/lib/base/features/set-model.js");
const types_1 = __webpack_require__(/*! ../base/types */ "../node_modules/sprotty/lib/base/types.js");
const bounds_manipulation_1 = __webpack_require__(/*! ../features/bounds/bounds-manipulation */ "../node_modules/sprotty/lib/features/bounds/bounds-manipulation.js");
const update_model_1 = __webpack_require__(/*! ../features/update/update-model */ "../node_modules/sprotty/lib/features/update/update-model.js");
const model_source_1 = __webpack_require__(/*! ./model-source */ "../node_modules/sprotty/lib/model-source/model-source.js");
/**
 * Sent by the external server when to signal a state change.
 */
class ServerStatusAction {
    constructor() {
        this.kind = ServerStatusAction.KIND;
    }
}
exports.ServerStatusAction = ServerStatusAction;
ServerStatusAction.KIND = 'serverStatus';
const receivedFromServerProperty = '__receivedFromServer';
/**
 * A ModelSource that communicates with an external model provider, e.g.
 * a model editor.
 *
 * This class defines which actions are sent to and received from the
 * external model source.
 */
let DiagramServerProxy = class DiagramServerProxy extends model_source_1.ModelSource {
    constructor() {
        super(...arguments);
        this.currentRoot = {
            type: 'NONE',
            id: 'ROOT'
        };
    }
    get model() {
        return this.currentRoot;
    }
    initialize(registry) {
        super.initialize(registry);
        // Register actions to be sent to the remote server
        registry.register(actions_1.ComputedBoundsAction.KIND, this);
        registry.register(bounds_manipulation_1.RequestBoundsCommand.KIND, this);
        registry.register(actions_1.RequestPopupModelAction.KIND, this);
        registry.register(actions_1.CollapseExpandAction.KIND, this);
        registry.register(actions_1.CollapseExpandAllAction.KIND, this);
        registry.register(actions_1.OpenAction.KIND, this);
        registry.register(ServerStatusAction.KIND, this);
        if (!this.clientId) {
            this.clientId = this.viewerOptions.baseDiv;
        }
    }
    handle(action) {
        const forwardToServer = this.handleLocally(action);
        if (forwardToServer) {
            this.forwardToServer(action);
        }
    }
    forwardToServer(action) {
        const message = {
            clientId: this.clientId,
            action: action
        };
        this.logger.log(this, 'sending', message);
        this.sendMessage(message);
    }
    /**
     * Called when a message is received from the remote diagram server.
     */
    messageReceived(data) {
        const object = typeof (data) === 'string' ? JSON.parse(data) : data;
        if ((0, actions_1.isActionMessage)(object) && object.action) {
            if (!object.clientId || object.clientId === this.clientId) {
                object.action[receivedFromServerProperty] = true;
                this.logger.log(this, 'receiving', object);
                this.actionDispatcher.dispatch(object.action).then(() => {
                    this.storeNewModel(object.action);
                });
            }
        }
        else {
            this.logger.error(this, 'received data is not an action message', object);
        }
    }
    /**
     * Check whether the given action should be handled locally. Returns true if the action should
     * still be sent to the server, and false if it's only handled locally.
     */
    handleLocally(action) {
        this.storeNewModel(action);
        switch (action.kind) {
            case actions_1.ComputedBoundsAction.KIND:
                return this.handleComputedBounds(action);
            case actions_1.RequestModelAction.KIND:
                return this.handleRequestModel(action);
            case bounds_manipulation_1.RequestBoundsCommand.KIND:
                return false;
            case actions_1.ExportSvgAction.KIND:
                return this.handleExportSvgAction(action);
            case ServerStatusAction.KIND:
                return this.handleServerStateAction(action);
        }
        return !action[receivedFromServerProperty];
    }
    /**
     * Put the new model contained in the given action into the model storage, if there is any.
     */
    storeNewModel(action) {
        if (action.kind === set_model_1.SetModelCommand.KIND
            || action.kind === update_model_1.UpdateModelCommand.KIND
            || action.kind === bounds_manipulation_1.RequestBoundsCommand.KIND) {
            const newRoot = action.newRoot;
            if (newRoot) {
                this.currentRoot = newRoot;
                if (action.kind === set_model_1.SetModelCommand.KIND || action.kind === update_model_1.UpdateModelCommand.KIND) {
                    this.lastSubmittedModelType = newRoot.type;
                }
            }
        }
    }
    handleRequestModel(action) {
        const newOptions = Object.assign({ needsClientLayout: this.viewerOptions.needsClientLayout, needsServerLayout: this.viewerOptions.needsServerLayout }, action.options);
        const newAction = Object.assign(Object.assign({}, action), { options: newOptions });
        this.forwardToServer(newAction);
        return false;
    }
    /**
     * If the server requires to compute a layout, the computed bounds are forwarded. Otherwise they
     * are applied to the current model locally and a model update is triggered.
     */
    handleComputedBounds(action) {
        if (this.viewerOptions.needsServerLayout) {
            return true;
        }
        else {
            const root = this.currentRoot;
            this.computedBoundsApplicator.apply(root, action);
            if (root.type === this.lastSubmittedModelType) {
                this.actionDispatcher.dispatch(actions_1.UpdateModelAction.create(root));
            }
            else {
                this.actionDispatcher.dispatch(actions_1.SetModelAction.create(root));
            }
            this.lastSubmittedModelType = root.type;
            return false;
        }
    }
    handleExportSvgAction(action) {
        const blob = new Blob([action.svg], { type: 'text/plain;charset=utf-8' });
        (0, file_saver_1.saveAs)(blob, 'diagram.svg');
        return false;
    }
    handleServerStateAction(action) {
        return false;
    }
    commitModel(newRoot) {
        const previousRoot = this.currentRoot;
        this.currentRoot = newRoot;
        return previousRoot;
    }
};
exports.DiagramServerProxy = DiagramServerProxy;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], DiagramServerProxy.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(model_source_1.ComputedBoundsApplicator),
    __metadata("design:type", model_source_1.ComputedBoundsApplicator)
], DiagramServerProxy.prototype, "computedBoundsApplicator", void 0);
exports.DiagramServerProxy = DiagramServerProxy = __decorate([
    (0, inversify_1.injectable)()
], DiagramServerProxy);


/***/ }),

/***/ "../node_modules/sprotty/lib/model-source/local-model-source.js":
/*!**********************************************************************!*\
  !*** ../node_modules/sprotty/lib/model-source/local-model-source.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalModelSource = void 0;
const file_saver_1 = __webpack_require__(/*! file-saver */ "../node_modules/file-saver/dist/FileSaver.min.js");
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "../node_modules/sprotty-protocol/lib/utils/model-utils.js");
const types_1 = __webpack_require__(/*! ../base/types */ "../node_modules/sprotty/lib/base/types.js");
const smodel_factory_1 = __webpack_require__(/*! ../base/model/smodel-factory */ "../node_modules/sprotty/lib/base/model/smodel-factory.js");
const model_matching_1 = __webpack_require__(/*! ../features/update/model-matching */ "../node_modules/sprotty/lib/features/update/model-matching.js");
const model_source_1 = __webpack_require__(/*! ./model-source */ "../node_modules/sprotty/lib/model-source/model-source.js");
/**
 * A model source that allows to set and modify the model through function calls.
 * This class can be used as a facade over the action-based API of sprotty. It handles
 * actions for bounds calculation and model updates.
 */
let LocalModelSource = class LocalModelSource extends model_source_1.ModelSource {
    constructor() {
        super(...arguments);
        this.currentRoot = smodel_factory_1.EMPTY_ROOT;
    }
    get model() {
        return this.currentRoot;
    }
    set model(root) {
        this.setModel(root);
    }
    initialize(registry) {
        super.initialize(registry);
        // Register actions to be handled by the `handle` method
        registry.register(actions_1.ComputedBoundsAction.KIND, this);
        registry.register(actions_1.RequestPopupModelAction.KIND, this);
    }
    /**
     * Set the model without incremental update.
     */
    setModel(newRoot) {
        this.currentRoot = newRoot;
        return this.submitModel(newRoot, false);
    }
    commitModel(newRoot) {
        const previousRoot = this.currentRoot;
        this.currentRoot = newRoot;
        return previousRoot;
    }
    /**
     * Apply an incremental update to the model with an animation showing the transition to
     * the new state. If `newRoot` is undefined, the current root is submitted; in that case
     * it is assumed that it has been modified before.
     */
    updateModel(newRoot) {
        if (newRoot === undefined) {
            return this.submitModel(this.currentRoot, true);
        }
        else {
            this.currentRoot = newRoot;
            return this.submitModel(newRoot, true);
        }
    }
    /**
     * Get the current selection from the model.
     */
    async getSelection() {
        const res = await this.actionDispatcher.request(sprotty_protocol_1.GetSelectionAction.create());
        const result = [];
        this.gatherSelectedElements(this.currentRoot, new Set(res.selectedElementsIDs), result);
        return result;
    }
    gatherSelectedElements(element, selected, result) {
        if (selected.has(element.id)) {
            result.push(element);
        }
        if (element.children) {
            for (const child of element.children) {
                this.gatherSelectedElements(child, selected, result);
            }
        }
    }
    /**
     * Get the current viewport from the model.
     */
    async getViewport() {
        const res = await this.actionDispatcher.request(sprotty_protocol_1.GetViewportAction.create());
        return {
            scroll: res.viewport.scroll,
            zoom: res.viewport.zoom,
            canvasBounds: res.canvasBounds
        };
    }
    /**
     * If client layout is active, run a `RequestBoundsAction` and wait for the resulting
     * `ComputedBoundsAction`, otherwise call `doSubmitModel(…)` directly.
     */
    async submitModel(newRoot, update, cause) {
        if (this.viewerOptions.needsClientLayout) {
            const computedBounds = await this.actionDispatcher.request(actions_1.RequestBoundsAction.create(newRoot));
            const index = this.computedBoundsApplicator.apply(this.currentRoot, computedBounds);
            await this.doSubmitModel(newRoot, update, cause, index);
        }
        else {
            await this.doSubmitModel(newRoot, update, cause);
        }
    }
    /**
     * Submit the given model with an `UpdateModelAction` or a `SetModelAction` depending on the
     * `update` argument. If available, the model layout engine is invoked first.
     */
    async doSubmitModel(newRoot, update, cause, index) {
        if (this.layoutEngine !== undefined) {
            try {
                const layoutResult = this.layoutEngine.layout(newRoot, index);
                if (layoutResult instanceof Promise)
                    newRoot = await layoutResult;
                else if (layoutResult !== undefined)
                    newRoot = layoutResult;
            }
            catch (error) {
                this.logger.error(this, error.toString(), error.stack);
            }
        }
        const lastSubmittedModelType = this.lastSubmittedModelType;
        this.lastSubmittedModelType = newRoot.type;
        if (cause && cause.kind === actions_1.RequestModelAction.KIND && cause.requestId) {
            const request = cause;
            await this.actionDispatcher.dispatch(actions_1.SetModelAction.create(newRoot, request.requestId));
        }
        else if (update && newRoot.type === lastSubmittedModelType) {
            const input = Array.isArray(update) ? update : newRoot;
            await this.actionDispatcher.dispatch(actions_1.UpdateModelAction.create(input, { animate: true, cause }));
        }
        else {
            await this.actionDispatcher.dispatch(actions_1.SetModelAction.create(newRoot));
        }
    }
    /**
     * Modify the current model with an array of matches.
     */
    applyMatches(matches) {
        const root = this.currentRoot;
        (0, model_matching_1.applyMatches)(root, matches);
        return this.submitModel(root, matches);
    }
    /**
     * Modify the current model by adding new elements.
     */
    addElements(elements) {
        const matches = [];
        for (const e of elements) {
            const anye = e;
            if (typeof anye.element === 'object' && typeof anye.parentId === 'string') {
                matches.push({
                    right: anye.element,
                    rightParentId: anye.parentId
                });
            }
            else if (typeof anye.id === 'string') {
                matches.push({
                    right: anye,
                    rightParentId: this.currentRoot.id
                });
            }
        }
        return this.applyMatches(matches);
    }
    /**
     * Modify the current model by removing elements.
     */
    removeElements(elements) {
        const matches = [];
        const index = new model_utils_1.SModelIndex();
        index.add(this.currentRoot);
        for (const e of elements) {
            const anye = e;
            if (anye.elementId !== undefined && anye.parentId !== undefined) {
                const element = index.getById(anye.elementId);
                if (element !== undefined) {
                    matches.push({
                        left: element,
                        leftParentId: anye.parentId
                    });
                }
            }
            else {
                const element = index.getById(anye);
                if (element !== undefined) {
                    matches.push({
                        left: element,
                        leftParentId: this.currentRoot.id
                    });
                }
            }
        }
        return this.applyMatches(matches);
    }
    // ----- Methods for handling incoming actions ----------------------------
    handle(action) {
        switch (action.kind) {
            case actions_1.RequestModelAction.KIND:
                this.handleRequestModel(action);
                break;
            case actions_1.ComputedBoundsAction.KIND:
                this.computedBoundsApplicator.apply(this.currentRoot, action);
                break;
            case actions_1.RequestPopupModelAction.KIND:
                this.handleRequestPopupModel(action);
                break;
            case actions_1.ExportSvgAction.KIND:
                this.handleExportSvgAction(action);
                break;
        }
    }
    handleRequestModel(action) {
        this.submitModel(this.currentRoot, false, action);
    }
    handleRequestPopupModel(action) {
        if (this.popupModelProvider !== undefined) {
            const element = (0, model_utils_1.findElement)(this.currentRoot, action.elementId);
            const popupRoot = this.popupModelProvider.getPopupModel(action, element);
            if (popupRoot !== undefined) {
                popupRoot.canvasBounds = action.bounds;
                this.actionDispatcher.dispatch(actions_1.SetPopupModelAction.create(popupRoot, action.requestId));
            }
        }
    }
    handleExportSvgAction(action) {
        const blob = new Blob([action.svg], { type: 'text/plain;charset=utf-8' });
        (0, file_saver_1.saveAs)(blob, 'diagram.svg');
    }
};
exports.LocalModelSource = LocalModelSource;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], LocalModelSource.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(model_source_1.ComputedBoundsApplicator),
    __metadata("design:type", model_source_1.ComputedBoundsApplicator)
], LocalModelSource.prototype, "computedBoundsApplicator", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IPopupModelProvider),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], LocalModelSource.prototype, "popupModelProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IModelLayoutEngine),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], LocalModelSource.prototype, "layoutEngine", void 0);
exports.LocalModelSource = LocalModelSource = __decorate([
    (0, inversify_1.injectable)()
], LocalModelSource);


/***/ }),

/***/ "../node_modules/sprotty/lib/model-source/logging.js":
/*!***********************************************************!*\
  !*** ../node_modules/sprotty/lib/model-source/logging.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForwardingLogger = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const logging_1 = __webpack_require__(/*! ../utils/logging */ "../node_modules/sprotty/lib/utils/logging.js");
const types_1 = __webpack_require__(/*! ../base/types */ "../node_modules/sprotty/lib/base/types.js");
/**
 * A logger that forwards messages of type 'error', 'warn', and 'info' to the model source.
 */
let ForwardingLogger = class ForwardingLogger {
    error(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.error)
            this.forward(thisArg, message, logging_1.LogLevel.error, params);
    }
    warn(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.warn)
            this.forward(thisArg, message, logging_1.LogLevel.warn, params);
    }
    info(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.info)
            this.forward(thisArg, message, logging_1.LogLevel.info, params);
    }
    log(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.log) {
            // We cannot forward 'log' level messages since that would lead to endless loops
            try {
                const caller = typeof thisArg === 'object' ? thisArg.constructor.name : String(thisArg);
                console.log.apply(thisArg, [caller + ': ' + message, ...params]);
            }
            catch (error) { }
        }
    }
    forward(thisArg, message, logLevel, params) {
        const date = new Date();
        const action = actions_1.LoggingAction.create({
            message,
            severity: logging_1.LogLevel[logLevel],
            time: date.toLocaleTimeString(),
            caller: typeof thisArg === 'object' ? thisArg.constructor.name : String(thisArg),
            params: params.map(p => JSON.stringify(p))
        });
        this.modelSourceProvider().then(modelSource => {
            try {
                modelSource.handle(action);
            }
            catch (error) {
                try {
                    console.log.apply(thisArg, [message, action, error]);
                }
                catch (e) { }
            }
        });
    }
};
exports.ForwardingLogger = ForwardingLogger;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ModelSourceProvider),
    __metadata("design:type", Function)
], ForwardingLogger.prototype, "modelSourceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.LogLevel),
    __metadata("design:type", Number)
], ForwardingLogger.prototype, "logLevel", void 0);
exports.ForwardingLogger = ForwardingLogger = __decorate([
    (0, inversify_1.injectable)()
], ForwardingLogger);


/***/ }),

/***/ "../node_modules/sprotty/lib/model-source/model-source.js":
/*!****************************************************************!*\
  !*** ../node_modules/sprotty/lib/model-source/model-source.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComputedBoundsApplicator = exports.ModelSource = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "../node_modules/sprotty-protocol/lib/actions.js");
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "../node_modules/sprotty-protocol/lib/utils/model-utils.js");
const types_1 = __webpack_require__(/*! ../base/types */ "../node_modules/sprotty/lib/base/types.js");
/**
 * A model source is serving the model to the event cycle. It represents
 * the entry point to the client for external sources, such as model
 * editors.
 *
 * As an `IActionHandler` it listens to actions in and reacts to them with
 * commands or actions if necessary. This way, you can implement action
 * protocols between the client and the outside world.
 *
 * There are two default implementations for a ModelSource:
 *
 *  - The `LocalModelSource` handles the actions to calculate bounds and
 *    set/update the model
 *  - the `DiagramServerProxy` connects via websocket to a remote source.
 *    It can be used to connect to a model editor that provides the model,
 *    layouts diagrams, transfers selection and answers model queries from
 *    the client.
 */
let ModelSource = class ModelSource {
    initialize(registry) {
        // Register this model source
        registry.register(actions_1.RequestModelAction.KIND, this);
        registry.register(actions_1.ExportSvgAction.KIND, this);
    }
};
exports.ModelSource = ModelSource;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ModelSource.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ModelSource.prototype, "viewerOptions", void 0);
exports.ModelSource = ModelSource = __decorate([
    (0, inversify_1.injectable)()
], ModelSource);
let ComputedBoundsApplicator = class ComputedBoundsApplicator {
    apply(root, action) {
        const index = new model_utils_1.SModelIndex();
        index.add(root);
        for (const b of action.bounds) {
            const element = index.getById(b.elementId);
            if (element !== undefined)
                this.applyBounds(element, b.newPosition, b.newSize);
        }
        if (action.alignments !== undefined) {
            for (const a of action.alignments) {
                const element = index.getById(a.elementId);
                if (element !== undefined)
                    this.applyAlignment(element, a.newAlignment);
            }
        }
        return index;
    }
    applyAlignment(element, newAlignment) {
        const e = element;
        e.alignment = { x: newAlignment.x, y: newAlignment.y };
    }
    applyBounds(element, newPosition, newSize) {
        const e = element;
        if (newPosition)
            e.position = Object.assign({}, newPosition);
        e.size = Object.assign({}, newSize);
    }
};
exports.ComputedBoundsApplicator = ComputedBoundsApplicator;
exports.ComputedBoundsApplicator = ComputedBoundsApplicator = __decorate([
    (0, inversify_1.injectable)()
], ComputedBoundsApplicator);


/***/ }),

/***/ "../node_modules/sprotty/lib/model-source/websocket.js":
/*!*************************************************************!*\
  !*** ../node_modules/sprotty/lib/model-source/websocket.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebSocketDiagramServerProxy = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const diagram_server_1 = __webpack_require__(/*! ./diagram-server */ "../node_modules/sprotty/lib/model-source/diagram-server.js");
/**
 * An external ModelSource that connects to the model provider using a websocket.
 */
let WebSocketDiagramServerProxy = class WebSocketDiagramServerProxy extends diagram_server_1.DiagramServerProxy {
    listen(webSocket) {
        webSocket.addEventListener('message', event => {
            this.messageReceived(event.data);
        });
        webSocket.addEventListener('error', event => {
            this.logger.error(this, 'error event received', event);
        });
        this.webSocket = webSocket;
    }
    disconnect() {
        if (this.webSocket) {
            this.webSocket.close();
            this.webSocket = undefined;
        }
    }
    sendMessage(message) {
        if (this.webSocket) {
            this.webSocket.send(JSON.stringify(message));
        }
        else {
            throw new Error('WebSocket is not connected');
        }
    }
};
exports.WebSocketDiagramServerProxy = WebSocketDiagramServerProxy;
exports.WebSocketDiagramServerProxy = WebSocketDiagramServerProxy = __decorate([
    (0, inversify_1.injectable)()
], WebSocketDiagramServerProxy);


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/browser.js":
/*!****************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/browser.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isSVGGraphicsElement = exports.hitsMouseEvent = exports.getWindowScroll = exports.isCrossSite = exports.isMac = exports.isCtrlOrCmd = void 0;
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
/**
 * Returns whether the mouse or keyboard event includes the CMD key
 * on Mac or CTRL key on Linux / others.
 */
function isCtrlOrCmd(event) {
    if (isMac())
        return event.metaKey;
    else
        return event.ctrlKey;
}
exports.isCtrlOrCmd = isCtrlOrCmd;
function isMac() {
    return window.navigator.userAgent.indexOf("Mac") !== -1;
}
exports.isMac = isMac;
function isCrossSite(url) {
    if (url && typeof window !== 'undefined' && window.location) {
        let baseURL = '';
        if (window.location.protocol)
            baseURL += window.location.protocol + '//';
        if (window.location.host)
            baseURL += window.location.host;
        return baseURL.length > 0 && !url.startsWith(baseURL);
    }
    return false;
}
exports.isCrossSite = isCrossSite;
/**
 * Returns the amount of scroll of the browser window as a point.
 */
function getWindowScroll() {
    if (typeof window === 'undefined') {
        return sprotty_protocol_1.Point.ORIGIN;
    }
    return {
        x: window.pageXOffset,
        y: window.pageYOffset
    };
}
exports.getWindowScroll = getWindowScroll;
/**
 * Checks whether the given mouse event hits the given DOM element.
 */
function hitsMouseEvent(child, event) {
    const clientRect = child.getBoundingClientRect();
    return event.clientX >= clientRect.left && event.clientX <= clientRect.right
        && event.clientY >= clientRect.top && event.clientY <= clientRect.bottom;
}
exports.hitsMouseEvent = hitsMouseEvent;
/**
 * Checks whether the given DOM node is an SVG element.
 */
function isSVGGraphicsElement(node) {
    return typeof node.getBBox === 'function';
}
exports.isSVGGraphicsElement = isSVGGraphicsElement;


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/codicon.js":
/*!****************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/codicon.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codiconCSSClasses = exports.codiconCSSString = exports.ANIMATION_SPIN = exports.ACTION_ITEM = void 0;
exports.ACTION_ITEM = 'action-item';
exports.ANIMATION_SPIN = 'animation-spin';
function codiconCSSString(codiconId, actionItem = false, animationSpin = false, additionalCSS = []) {
    return codiconCSSClasses(codiconId, actionItem, animationSpin, additionalCSS).join(' ');
}
exports.codiconCSSString = codiconCSSString;
function codiconCSSClasses(codiconId, actionItem = false, animationSpin = false, additionalCSS = []) {
    const cssClassArray = ['codicon', `codicon-${codiconId}`];
    if (actionItem) {
        cssClassArray.push(exports.ACTION_ITEM);
    }
    if (animationSpin) {
        cssClassArray.push(exports.ANIMATION_SPIN);
    }
    if (additionalCSS.length > 0) {
        cssClassArray.push(...additionalCSS);
    }
    return cssClassArray;
}
exports.codiconCSSClasses = codiconCSSClasses;


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/color.js":
/*!**************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/color.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorMap = exports.toSVG = exports.rgb = void 0;
function rgb(red, green, blue) {
    return {
        red: red,
        green: green,
        blue: blue
    };
}
exports.rgb = rgb;
function toSVG(c) {
    return 'rgb(' + c.red + ',' + c.green + ',' + c.blue + ')';
}
exports.toSVG = toSVG;
class ColorMap {
    constructor(stops) {
        this.stops = stops;
    }
    getColor(t) {
        t = Math.max(0, Math.min(0.99999999, t));
        const i = Math.floor(t * this.stops.length);
        return this.stops[i];
    }
}
exports.ColorMap = ColorMap;


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/geometry.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/geometry.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.limit = exports.intersection = exports.PointToPointLine = exports.Diamond = void 0;
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "../node_modules/sprotty-protocol/lib/index.js");
/**
 * A diamond or rhombus is a quadrilateral whose four sides all have the same length.
 * It consists of four points, a `topPoint`, `rightPoint`, `bottomPoint`, and a `leftPoint`,
 * which are connected by four lines -- the `topRightSideLight`, `topLeftSideLine`, `bottomRightSideLine`,
 * and the `bottomLeftSideLine`.
 */
class Diamond {
    constructor(bounds) {
        this.bounds = bounds;
    }
    get topPoint() {
        return {
            x: this.bounds.x + this.bounds.width / 2,
            y: this.bounds.y
        };
    }
    get rightPoint() {
        return {
            x: this.bounds.x + this.bounds.width,
            y: this.bounds.y + this.bounds.height / 2
        };
    }
    get bottomPoint() {
        return {
            x: this.bounds.x + this.bounds.width / 2,
            y: this.bounds.y + this.bounds.height
        };
    }
    get leftPoint() {
        return {
            x: this.bounds.x,
            y: this.bounds.y + this.bounds.height / 2
        };
    }
    get topRightSideLine() {
        return new PointToPointLine(this.topPoint, this.rightPoint);
    }
    get topLeftSideLine() {
        return new PointToPointLine(this.topPoint, this.leftPoint);
    }
    get bottomRightSideLine() {
        return new PointToPointLine(this.bottomPoint, this.rightPoint);
    }
    get bottomLeftSideLine() {
        return new PointToPointLine(this.bottomPoint, this.leftPoint);
    }
    /**
     * Return the closest side of this diamond to the specified `refPoint`.
     * @param {Point} refPoint a reference point
     * @returns {Line} a line representing the closest side
     */
    closestSideLine(refPoint) {
        const c = sprotty_protocol_1.Bounds.center(this.bounds);
        if (refPoint.x > c.x) {
            if (refPoint.y > c.y) {
                return this.bottomRightSideLine;
            }
            else {
                return this.topRightSideLine;
            }
        }
        else {
            if (refPoint.y > c.y) {
                return this.bottomLeftSideLine;
            }
            else {
                return this.topLeftSideLine;
            }
        }
    }
}
exports.Diamond = Diamond;
/**
 * A line made up from two points.
 */
class PointToPointLine {
    constructor(p1, p2) {
        this.p1 = p1;
        this.p2 = p2;
    }
    get a() {
        return this.p1.y - this.p2.y;
    }
    get b() {
        return this.p2.x - this.p1.x;
    }
    get c() {
        return this.p2.x * this.p1.y - this.p1.x * this.p2.y;
    }
    /**
     * The counter-clockwise angle of this line relative to the x-axis.
     */
    get angle() {
        return Math.atan2(-this.a, this.b);
    }
    /**
     * The slope of the line.
     * A vertical line returns `undefined`.
     */
    get slope() {
        if (this.b === 0)
            return undefined;
        return this.a / this.b;
    }
    /**
     * The slope of the line or `Number.MAX_SAFE_INTEGER` if vertical.
     */
    get slopeOrMax() {
        if (this.slope === undefined) {
            return Number.MAX_SAFE_INTEGER;
        }
        return this.slope;
    }
    /**
     * The direction of this line, such as 'north', 'south', or 'south-west'.
     */
    get direction() {
        const hDegrees = (0, sprotty_protocol_1.toDegrees)(this.angle);
        const degrees = hDegrees < 0 ? 360 + hDegrees : hDegrees;
        // degrees are relative to the x-axis
        if (degrees === 90) {
            return 'south';
        }
        else if (degrees === 0 || degrees === 360) {
            return 'east';
        }
        else if (degrees === 270) {
            return 'north';
        }
        else if (degrees === 180) {
            return 'west';
        }
        else if (degrees > 0 && degrees < 90) {
            return 'south-east';
        }
        else if (degrees > 90 && degrees < 180) {
            return 'south-west';
        }
        else if (degrees > 180 && degrees < 270) {
            return 'north-west';
        }
        else if (degrees > 270 && degrees < 360) {
            return 'north-east';
        }
        throw new Error(`Cannot determine direction of line (${this.p1.x},${this.p1.y}) to (${this.p2.x},${this.p2.y})`);
    }
    /**
     * @param otherLine the other line
     * @returns the intersection point between `this` line and the `otherLine` if exists, or `undefined`.
     */
    intersection(otherLine) {
        if (this.hasIndistinctPoints(otherLine)) {
            return undefined;
        }
        const x1 = this.p1.x;
        const y1 = this.p1.y;
        const x2 = this.p2.x;
        const y2 = this.p2.y;
        const x3 = otherLine.p1.x;
        const y3 = otherLine.p1.y;
        const x4 = otherLine.p2.x;
        const y4 = otherLine.p2.y;
        const denominator = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));
        if (denominator === 0) {
            return undefined;
        }
        const numeratorA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));
        const numeratorB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));
        if (numeratorA === 0 && numeratorB === 0) {
            return undefined;
        }
        const determinantA = numeratorA / denominator;
        const determinantB = numeratorB / denominator;
        if (determinantA < 0 || determinantA > 1 || determinantB < 0 || determinantB > 1) {
            return undefined;
        }
        const x = x1 + (determinantA * (x2 - x1));
        const y = y1 + (determinantA * (y2 - y1));
        return { x, y };
    }
    /**
     * @param otherLine the other line
     * @returns whether the start and end point of this line is does not have distinct start
     * or end points with the `otherLine`
     */
    hasIndistinctPoints(otherLine) {
        return sprotty_protocol_1.Point.equals(this.p1, otherLine.p1) ||
            sprotty_protocol_1.Point.equals(this.p1, otherLine.p2) ||
            sprotty_protocol_1.Point.equals(this.p2, otherLine.p1) ||
            sprotty_protocol_1.Point.equals(this.p2, otherLine.p2);
    }
}
exports.PointToPointLine = PointToPointLine;
/**
 * Returns the intersection of two lines `l1` and `l2`
 * @param {Line} l1 - A line
 * @param {Line} l2 - Another line
 * @returns {Point} The intersection point of `l1` and `l2`
 */
function intersection(l1, l2) {
    return {
        x: (l1.c * l2.b - l2.c * l1.b) / (l1.a * l2.b - l2.a * l1.b),
        y: (l1.a * l2.c - l2.a * l1.c) / (l1.a * l2.b - l2.a * l1.b)
    };
}
exports.intersection = intersection;
/**
 * Limits a value to the specified `limits`.
 * @param {number} value - The value to limit
 * @param {Limits} limits - The minimum and maximum limits
 */
function limit(value, limits) {
    if (value < limits.min) {
        return limits.min;
    }
    if (value > limits.max) {
        return limits.max;
    }
    return value;
}
exports.limit = limit;


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/inversify.js":
/*!******************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/inversify.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isInjectable = void 0;
function isInjectable(constr) {
    return Reflect.getMetadata('inversify:paramtypes', constr) !== undefined;
}
exports.isInjectable = isInjectable;


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/iterable.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/iterable.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapIterable = exports.filterIterable = exports.DONE_RESULT = exports.toArray = exports.FluentIterableImpl = void 0;
/**
 * A helper class that allows to easily create fluent iterables.
 */
class FluentIterableImpl {
    constructor(startFn, nextFn) {
        this.startFn = startFn;
        this.nextFn = nextFn;
    }
    [Symbol.iterator]() {
        const iterator = {
            state: this.startFn(),
            next: () => this.nextFn(iterator.state),
            [Symbol.iterator]: () => iterator
        };
        return iterator;
    }
    filter(callback) {
        return filterIterable(this, callback);
    }
    map(callback) {
        return mapIterable(this, callback);
    }
    forEach(callback) {
        const iterator = this[Symbol.iterator]();
        let index = 0;
        let result;
        do {
            result = iterator.next();
            if (result.value !== undefined)
                callback(result.value, index);
            index++;
        } while (!result.done);
    }
    indexOf(element) {
        const iterator = this[Symbol.iterator]();
        let index = 0;
        let result;
        do {
            result = iterator.next();
            if (result.value === element)
                return index;
            index++;
        } while (!result.done);
        return -1;
    }
}
exports.FluentIterableImpl = FluentIterableImpl;
/**
 * Converts a FluentIterable into an array. If the input is an array, it is returned unchanged.
 */
function toArray(input) {
    if (input.constructor === Array) {
        return input;
    }
    const result = [];
    input.forEach(element => result.push(element));
    return result;
}
exports.toArray = toArray;
exports.DONE_RESULT = Object.freeze({ done: true, value: undefined });
/**
 * Create a fluent iterable that filters the content of the given iterable or array.
 */
function filterIterable(input, callback) {
    return new FluentIterableImpl(() => createIterator(input), (iterator) => {
        let result;
        do {
            result = iterator.next();
        } while (!result.done && !callback(result.value));
        return result;
    });
}
exports.filterIterable = filterIterable;
/**
 * Create a fluent iterable that maps the content of the given iterable or array.
 */
function mapIterable(input, callback) {
    return new FluentIterableImpl(() => createIterator(input), (iterator) => {
        const { done, value } = iterator.next();
        if (done)
            return exports.DONE_RESULT;
        else
            return { done: false, value: callback(value) };
    });
}
exports.mapIterable = mapIterable;
/**
 * Create an iterator for the given iterable or array.
 */
function createIterator(collection) {
    const method = collection[Symbol.iterator];
    if (typeof method === 'function') {
        return method.call(collection);
    }
    const length = collection.length;
    if (typeof length === 'number' && length >= 0) {
        return new ArrayIterator(collection);
    }
    return { next: () => exports.DONE_RESULT };
}
/**
 * Iterator implementation for arrays.
 */
class ArrayIterator {
    constructor(array) {
        this.array = array;
        this.index = 0;
    }
    next() {
        if (this.index < this.array.length)
            return { done: false, value: this.array[this.index++] };
        else
            return exports.DONE_RESULT;
    }
    [Symbol.iterator]() {
        return this;
    }
}


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/keyboard.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/keyboard.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getActualCode = exports.matchesKeystroke = void 0;
const browser_1 = __webpack_require__(/*! ./browser */ "../node_modules/sprotty/lib/utils/browser.js");
/**
 * Returns whether the keyboard event matches the keystroke described by the given
 * code and modifiers. The code must comply to the format of the `code` property
 * of KeyboardEvent, but in contrast to that property, the actual keyboard layout is
 * considered by this function if possible.
 */
function matchesKeystroke(event, code, ...modifiers) {
    if (getActualCode(event) !== code)
        return false;
    if ((0, browser_1.isMac)()) {
        if (event.ctrlKey !== (modifiers.findIndex(m => m === 'ctrl') >= 0))
            return false;
        if (event.metaKey !== (modifiers.findIndex(m => m === 'meta' || m === 'ctrlCmd') >= 0))
            return false;
    }
    else {
        if (event.ctrlKey !== (modifiers.findIndex(m => m === 'ctrl' || m === 'ctrlCmd') >= 0))
            return false;
        if (event.metaKey !== (modifiers.findIndex(m => m === 'meta') >= 0))
            return false;
    }
    if (event.altKey !== (modifiers.findIndex(m => m === 'alt') >= 0))
        return false;
    if (event.shiftKey !== (modifiers.findIndex(m => m === 'shift') >= 0))
        return false;
    return true;
}
exports.matchesKeystroke = matchesKeystroke;
/**
 * Determines a key code from the given event. This is necessary because the `code` property of
 * a KeyboardEvent does not consider keyboard layouts.
 */
function getActualCode(event) {
    if (event.keyCode) {
        const result = STRING_CODE[event.keyCode];
        if (result !== undefined)
            return result;
    }
    return event.code;
}
exports.getActualCode = getActualCode;
const STRING_CODE = new Array(256);
(() => {
    function addKeyCode(stringCode, numericCode) {
        if (STRING_CODE[numericCode] === undefined)
            STRING_CODE[numericCode] = stringCode;
    }
    addKeyCode('Pause', 3);
    addKeyCode('Backspace', 8);
    addKeyCode('Tab', 9);
    addKeyCode('Enter', 13);
    addKeyCode('ShiftLeft', 16);
    addKeyCode('ShiftRight', 16);
    addKeyCode('ControlLeft', 17);
    addKeyCode('ControlRight', 17);
    addKeyCode('AltLeft', 18);
    addKeyCode('AltRight', 18);
    addKeyCode('CapsLock', 20);
    addKeyCode('Escape', 27);
    addKeyCode('Space', 32);
    addKeyCode('PageUp', 33);
    addKeyCode('PageDown', 34);
    addKeyCode('End', 35);
    addKeyCode('Home', 36);
    addKeyCode('ArrowLeft', 37);
    addKeyCode('ArrowUp', 38);
    addKeyCode('ArrowRight', 39);
    addKeyCode('ArrowDown', 40);
    addKeyCode('Insert', 45);
    addKeyCode('Delete', 46);
    addKeyCode('Digit1', 49);
    addKeyCode('Digit2', 50);
    addKeyCode('Digit3', 51);
    addKeyCode('Digit4', 52);
    addKeyCode('Digit5', 53);
    addKeyCode('Digit6', 54);
    addKeyCode('Digit7', 55);
    addKeyCode('Digit8', 56);
    addKeyCode('Digit9', 57);
    addKeyCode('Digit0', 48);
    addKeyCode('KeyA', 65);
    addKeyCode('KeyB', 66);
    addKeyCode('KeyC', 67);
    addKeyCode('KeyD', 68);
    addKeyCode('KeyE', 69);
    addKeyCode('KeyF', 70);
    addKeyCode('KeyG', 71);
    addKeyCode('KeyH', 72);
    addKeyCode('KeyI', 73);
    addKeyCode('KeyJ', 74);
    addKeyCode('KeyK', 75);
    addKeyCode('KeyL', 76);
    addKeyCode('KeyM', 77);
    addKeyCode('KeyN', 78);
    addKeyCode('KeyO', 79);
    addKeyCode('KeyP', 80);
    addKeyCode('KeyQ', 81);
    addKeyCode('KeyR', 82);
    addKeyCode('KeyS', 83);
    addKeyCode('KeyT', 84);
    addKeyCode('KeyU', 85);
    addKeyCode('KeyV', 86);
    addKeyCode('KeyW', 87);
    addKeyCode('KeyX', 88);
    addKeyCode('KeyY', 89);
    addKeyCode('KeyZ', 90);
    addKeyCode('OSLeft', 91);
    addKeyCode('MetaLeft', 91);
    addKeyCode('OSRight', 92);
    addKeyCode('MetaRight', 92);
    addKeyCode('ContextMenu', 93);
    addKeyCode('Numpad0', 96);
    addKeyCode('Numpad1', 97);
    addKeyCode('Numpad2', 98);
    addKeyCode('Numpad3', 99);
    addKeyCode('Numpad4', 100);
    addKeyCode('Numpad5', 101);
    addKeyCode('Numpad6', 102);
    addKeyCode('Numpad7', 103);
    addKeyCode('Numpad8', 104);
    addKeyCode('Numpad9', 105);
    addKeyCode('NumpadMultiply', 106);
    addKeyCode('NumpadAdd', 107);
    addKeyCode('NumpadSeparator', 108);
    addKeyCode('NumpadSubtract', 109);
    addKeyCode('NumpadDecimal', 110);
    addKeyCode('NumpadDivide', 111);
    addKeyCode('F1', 112);
    addKeyCode('F2', 113);
    addKeyCode('F3', 114);
    addKeyCode('F4', 115);
    addKeyCode('F5', 116);
    addKeyCode('F6', 117);
    addKeyCode('F7', 118);
    addKeyCode('F8', 119);
    addKeyCode('F9', 120);
    addKeyCode('F10', 121);
    addKeyCode('F11', 122);
    addKeyCode('F12', 123);
    addKeyCode('F13', 124);
    addKeyCode('F14', 125);
    addKeyCode('F15', 126);
    addKeyCode('F16', 127);
    addKeyCode('F17', 128);
    addKeyCode('F18', 129);
    addKeyCode('F19', 130);
    addKeyCode('F20', 131);
    addKeyCode('F21', 132);
    addKeyCode('F22', 133);
    addKeyCode('F23', 134);
    addKeyCode('F24', 135);
    addKeyCode('NumLock', 144);
    addKeyCode('ScrollLock', 145);
    addKeyCode('Semicolon', 186);
    addKeyCode('Equal', 187);
    addKeyCode('Comma', 188);
    addKeyCode('Minus', 189);
    addKeyCode('Period', 190);
    addKeyCode('Slash', 191);
    addKeyCode('Backquote', 192);
    addKeyCode('IntlRo', 193);
    addKeyCode('BracketLeft', 219);
    addKeyCode('Backslash', 220);
    addKeyCode('BracketRight', 221);
    addKeyCode('Quote', 222);
    addKeyCode('IntlYen', 255);
})();


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/logging.js":
/*!****************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/logging.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleLogger = exports.NullLogger = exports.LogLevel = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
const types_1 = __webpack_require__(/*! ../base/types */ "../node_modules/sprotty/lib/base/types.js");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["none"] = 0] = "none";
    LogLevel[LogLevel["error"] = 1] = "error";
    LogLevel[LogLevel["warn"] = 2] = "warn";
    LogLevel[LogLevel["info"] = 3] = "info";
    LogLevel[LogLevel["log"] = 4] = "log";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
let NullLogger = class NullLogger {
    constructor() {
        this.logLevel = LogLevel.none;
    }
    error(thisArg, message, ...params) { }
    warn(thisArg, message, ...params) { }
    info(thisArg, message, ...params) { }
    log(thisArg, message, ...params) { }
};
exports.NullLogger = NullLogger;
exports.NullLogger = NullLogger = __decorate([
    (0, inversify_1.injectable)()
], NullLogger);
let ConsoleLogger = class ConsoleLogger {
    constructor() {
        this.logLevel = LogLevel.log;
        this.viewOptions = { baseDiv: '' };
    }
    error(thisArg, message, ...params) {
        if (this.logLevel >= LogLevel.error)
            try {
                console.error.apply(thisArg, this.consoleArguments(thisArg, message, params));
            }
            catch (error) { }
    }
    warn(thisArg, message, ...params) {
        if (this.logLevel >= LogLevel.warn)
            try {
                console.warn.apply(thisArg, this.consoleArguments(thisArg, message, params));
            }
            catch (error) { }
    }
    info(thisArg, message, ...params) {
        if (this.logLevel >= LogLevel.info)
            try {
                console.info.apply(thisArg, this.consoleArguments(thisArg, message, params));
            }
            catch (error) { }
    }
    log(thisArg, message, ...params) {
        if (this.logLevel >= LogLevel.log)
            try {
                console.log.apply(thisArg, this.consoleArguments(thisArg, message, params));
            }
            catch (error) { }
    }
    consoleArguments(thisArg, message, params) {
        let caller;
        if (typeof thisArg === 'object')
            caller = thisArg.constructor.name;
        else
            caller = thisArg;
        const date = new Date();
        return [date.toLocaleTimeString() + ' ' + this.viewOptions.baseDiv + ' ' + caller + ': ' + message, ...params];
    }
};
exports.ConsoleLogger = ConsoleLogger;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.LogLevel),
    __metadata("design:type", Number)
], ConsoleLogger.prototype, "logLevel", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ConsoleLogger.prototype, "viewOptions", void 0);
exports.ConsoleLogger = ConsoleLogger = __decorate([
    (0, inversify_1.injectable)()
], ConsoleLogger);


/***/ }),

/***/ "../node_modules/sprotty/lib/utils/registry.js":
/*!*****************************************************!*\
  !*** ../node_modules/sprotty/lib/utils/registry.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2024 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiInstanceRegistry = exports.InstanceRegistry = exports.FactoryRegistry = exports.ProviderRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/lib/cjs/index.js");
let ProviderRegistry = class ProviderRegistry {
    constructor() {
        this.elements = new Map;
    }
    register(key, cstr) {
        if (key === undefined)
            throw new Error('Key is undefined');
        if (this.hasKey(key))
            throw new Error('Key is already registered: ' + key);
        this.elements.set(key, cstr);
    }
    deregister(key) {
        if (key === undefined)
            throw new Error('Key is undefined');
        this.elements.delete(key);
    }
    hasKey(key) {
        return this.elements.has(key);
    }
    get(key, arg) {
        const existingCstr = this.elements.get(key);
        if (existingCstr)
            return new existingCstr(arg);
        else
            return this.missing(key, arg);
    }
    missing(key, arg) {
        throw new Error('Unknown registry key: ' + key);
    }
};
exports.ProviderRegistry = ProviderRegistry;
exports.ProviderRegistry = ProviderRegistry = __decorate([
    (0, inversify_1.injectable)()
], ProviderRegistry);
let FactoryRegistry = class FactoryRegistry {
    constructor() {
        this.elements = new Map;
    }
    register(key, factory) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        if (this.hasKey(key)) {
            throw new Error(`Key is already registered: ${key}. Use \`overrideModelElement\` instead.`);
        }
        this.elements.set(key, factory);
    }
    override(key, factory) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        else if (!this.hasKey(key)) {
            throw new Error(`Key is not registered: ${key}. Use \`configureModelElement\` instead.`);
        }
        this.elements.set(key, factory);
    }
    deregister(key) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        this.elements.delete(key);
    }
    hasKey(key) {
        return this.elements.has(key);
    }
    get(key, arg) {
        const existingFactory = this.elements.get(key);
        if (existingFactory) {
            return existingFactory(arg);
        }
        else {
            return this.missing(key, arg);
        }
    }
    missing(key, arg) {
        throw new Error('Unknown registry key: ' + key);
    }
};
exports.FactoryRegistry = FactoryRegistry;
exports.FactoryRegistry = FactoryRegistry = __decorate([
    (0, inversify_1.injectable)()
], FactoryRegistry);
let InstanceRegistry = class InstanceRegistry {
    constructor() {
        this.elements = new Map;
    }
    register(key, instance) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        if (this.hasKey(key)) {
            throw new Error(`Key is already registered: ${key}. Use \`overrideModelElement\` instead.`);
        }
        this.elements.set(key, instance);
    }
    override(key, instance) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        else if (!this.hasKey(key)) {
            throw new Error(`Key is not registered: ${key}. Use \`configureModelElement\` instead.`);
        }
        this.elements.set(key, instance);
    }
    deregister(key) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        this.elements.delete(key);
    }
    hasKey(key) {
        return this.elements.has(key);
    }
    get(key) {
        const existingInstance = this.elements.get(key);
        if (existingInstance) {
            return existingInstance;
        }
        else {
            return this.missing(key);
        }
    }
    missing(key) {
        throw new Error('Unknown registry key: ' + key);
    }
};
exports.InstanceRegistry = InstanceRegistry;
exports.InstanceRegistry = InstanceRegistry = __decorate([
    (0, inversify_1.injectable)()
], InstanceRegistry);
let MultiInstanceRegistry = class MultiInstanceRegistry {
    constructor() {
        this.elements = new Map;
    }
    register(key, instance) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        const instances = this.elements.get(key);
        if (instances !== undefined) {
            instances.push(instance);
        }
        else {
            this.elements.set(key, [instance]);
        }
    }
    deregisterAll(key) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        this.elements.delete(key);
    }
    get(key) {
        const existingInstances = this.elements.get(key);
        if (existingInstances !== undefined) {
            return existingInstances;
        }
        else {
            return [];
        }
    }
};
exports.MultiInstanceRegistry = MultiInstanceRegistry;
exports.MultiInstanceRegistry = MultiInstanceRegistry = __decorate([
    (0, inversify_1.injectable)()
], MultiInstanceRegistry);


/***/ }),

/***/ "../node_modules/tinyqueue/index.js":
/*!******************************************!*\
  !*** ../node_modules/tinyqueue/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TinyQueue)
/* harmony export */ });

class TinyQueue {
    constructor(data = [], compare = defaultCompare) {
        this.data = data;
        this.length = this.data.length;
        this.compare = compare;

        if (this.length > 0) {
            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);
        }
    }

    push(item) {
        this.data.push(item);
        this.length++;
        this._up(this.length - 1);
    }

    pop() {
        if (this.length === 0) return undefined;

        const top = this.data[0];
        const bottom = this.data.pop();
        this.length--;

        if (this.length > 0) {
            this.data[0] = bottom;
            this._down(0);
        }

        return top;
    }

    peek() {
        return this.data[0];
    }

    _up(pos) {
        const {data, compare} = this;
        const item = data[pos];

        while (pos > 0) {
            const parent = (pos - 1) >> 1;
            const current = data[parent];
            if (compare(item, current) >= 0) break;
            data[pos] = current;
            pos = parent;
        }

        data[pos] = item;
    }

    _down(pos) {
        const {data, compare} = this;
        const halfLength = this.length >> 1;
        const item = data[pos];

        while (pos < halfLength) {
            let left = (pos << 1) + 1;
            let best = data[left];
            const right = left + 1;

            if (right < this.length && compare(data[right], best) < 0) {
                left = right;
                best = data[right];
            }
            if (compare(best, item) >= 0) break;

            data[pos] = best;
            pos = left;
        }

        data[pos] = item;
    }
}

function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}


/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/index.js":
/*!***********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "MAX", ({
  enumerable: true,
  get: function get() {
    return _max.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function get() {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function get() {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function get() {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v1ToV6", ({
  enumerable: true,
  get: function get() {
    return _v1ToV.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function get() {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function get() {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function get() {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "v6", ({
  enumerable: true,
  get: function get() {
    return _v5.default;
  }
}));
Object.defineProperty(exports, "v6ToV1", ({
  enumerable: true,
  get: function get() {
    return _v6ToV.default;
  }
}));
Object.defineProperty(exports, "v7", ({
  enumerable: true,
  get: function get() {
    return _v6.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function get() {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function get() {
    return _version.default;
  }
}));
var _max = _interopRequireDefault(__webpack_require__(/*! ./max.js */ "../node_modules/uuid/dist/commonjs-browser/max.js"));
var _nil = _interopRequireDefault(__webpack_require__(/*! ./nil.js */ "../node_modules/uuid/dist/commonjs-browser/nil.js"));
var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "../node_modules/uuid/dist/commonjs-browser/parse.js"));
var _stringify = _interopRequireDefault(__webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/commonjs-browser/stringify.js"));
var _v = _interopRequireDefault(__webpack_require__(/*! ./v1.js */ "../node_modules/uuid/dist/commonjs-browser/v1.js"));
var _v1ToV = _interopRequireDefault(__webpack_require__(/*! ./v1ToV6.js */ "../node_modules/uuid/dist/commonjs-browser/v1ToV6.js"));
var _v2 = _interopRequireDefault(__webpack_require__(/*! ./v3.js */ "../node_modules/uuid/dist/commonjs-browser/v3.js"));
var _v3 = _interopRequireDefault(__webpack_require__(/*! ./v4.js */ "../node_modules/uuid/dist/commonjs-browser/v4.js"));
var _v4 = _interopRequireDefault(__webpack_require__(/*! ./v5.js */ "../node_modules/uuid/dist/commonjs-browser/v5.js"));
var _v5 = _interopRequireDefault(__webpack_require__(/*! ./v6.js */ "../node_modules/uuid/dist/commonjs-browser/v6.js"));
var _v6ToV = _interopRequireDefault(__webpack_require__(/*! ./v6ToV1.js */ "../node_modules/uuid/dist/commonjs-browser/v6ToV1.js"));
var _v6 = _interopRequireDefault(__webpack_require__(/*! ./v7.js */ "../node_modules/uuid/dist/commonjs-browser/v7.js"));
var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/commonjs-browser/validate.js"));
var _version = _interopRequireDefault(__webpack_require__(/*! ./version.js */ "../node_modules/uuid/dist/commonjs-browser/version.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/max.js":
/*!*********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/max.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = exports["default"] = 'ffffffff-ffff-ffff-ffff-ffffffffffff';

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/md5.js":
/*!*********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/md5.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}

/*
 * Convert an array of little-endian words to an array of bytes
 */
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }
  return output;
}

/**
 * Calculate output length with padding and bit length
 */
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */
function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}

/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }
  return output;
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var _default = exports["default"] = md5;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/native.js":
/*!************************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/native.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var _default = exports["default"] = {
  randomUUID
};

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/nil.js":
/*!*********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/nil.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = exports["default"] = '00000000-0000-0000-0000-000000000000';

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/parse.js":
/*!***********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/parse.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/commonjs-browser/validate.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }
  var v;
  var arr = new Uint8Array(16);

  // Parse ########-....-....-....-............
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff;

  // Parse ........-####-....-....-............
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff;

  // Parse ........-....-####-....-............
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff;

  // Parse ........-....-....-####-............
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff;

  // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}
var _default = exports["default"] = parse;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/regex.js":
/*!***********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/regex.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = exports["default"] = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/rng.js":
/*!*********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/rng.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).

var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }
  return getRandomValues(rnds8);
}

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/sha1.js":
/*!**********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/sha1.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}
var _default = exports["default"] = sha1;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/stringify.js":
/*!***************************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/stringify.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
exports.unsafeStringify = unsafeStringify;
var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/commonjs-browser/validate.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  //
  // Note to future-self: No, you can't remove the `toLowerCase()` call.
  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
function stringify(arr, offset = 0) {
  var uuid = unsafeStringify(arr, offset);
  // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }
  return uuid;
}
var _default = exports["default"] = stringify;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v1.js":
/*!********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v1.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "../node_modules/uuid/dist/commonjs-browser/rng.js"));
var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/commonjs-browser/stringify.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node;
  var clockseq = options.clockseq;

  // v1 only: Use cached `node` and `clockseq` values
  if (!options._v6) {
    if (!node) {
      node = _nodeId;
    }
    if (clockseq == null) {
      clockseq = _clockseq;
    }
  }

  // Handle cases where we need entropy.  We do this lazily to minimize issues
  // related to insufficient system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng.default)();

    // Randomize node
    if (node == null) {
      node = [seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];

      // v1 only: cache node value for reuse
      if (!_nodeId && !options._v6) {
        // per RFC4122 4.5: Set MAC multicast bit (v1 only)
        node[0] |= 0x01; // Set multicast bit

        _nodeId = node;
      }
    }

    // Randomize clockseq
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      if (_clockseq === undefined && !options._v6) {
        _clockseq = clockseq;
      }
    }
  }

  // v1 & v6 timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so time is
  // handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : Date.now();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || (0, _stringify.unsafeStringify)(b);
}
var _default = exports["default"] = v1;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v1ToV6.js":
/*!************************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v1ToV6.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = v1ToV6;
var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "../node_modules/uuid/dist/commonjs-browser/parse.js"));
var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/commonjs-browser/stringify.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Convert a v1 UUID to a v6 UUID
 *
 * @param {string|Uint8Array} uuid - The v1 UUID to convert to v6
 * @returns {string|Uint8Array} The v6 UUID as the same type as the `uuid` arg
 * (string or Uint8Array)
 */
function v1ToV6(uuid) {
  var v1Bytes = typeof uuid === 'string' ? (0, _parse.default)(uuid) : uuid;
  var v6Bytes = _v1ToV6(v1Bytes);
  return typeof uuid === 'string' ? (0, _stringify.unsafeStringify)(v6Bytes) : v6Bytes;
}

// Do the field transformation needed for v1 -> v6
function _v1ToV6(v1Bytes, randomize = false) {
  return Uint8Array.of((v1Bytes[6] & 0x0f) << 4 | v1Bytes[7] >> 4 & 0x0f, (v1Bytes[7] & 0x0f) << 4 | (v1Bytes[4] & 0xf0) >> 4, (v1Bytes[4] & 0x0f) << 4 | (v1Bytes[5] & 0xf0) >> 4, (v1Bytes[5] & 0x0f) << 4 | (v1Bytes[0] & 0xf0) >> 4, (v1Bytes[0] & 0x0f) << 4 | (v1Bytes[1] & 0xf0) >> 4, (v1Bytes[1] & 0x0f) << 4 | (v1Bytes[2] & 0xf0) >> 4, 0x60 | v1Bytes[2] & 0x0f, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);
}

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v3.js":
/*!********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v3.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "../node_modules/uuid/dist/commonjs-browser/v35.js"));
var _md = _interopRequireDefault(__webpack_require__(/*! ./md5.js */ "../node_modules/uuid/dist/commonjs-browser/md5.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = exports["default"] = v3;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v35.js":
/*!*********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v35.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.URL = exports.DNS = void 0;
exports["default"] = v35;
var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/commonjs-browser/stringify.js");
var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "../node_modules/uuid/dist/commonjs-browser/parse.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = exports.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = exports.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    }

    // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(bytes);
  }

  // Function#name is not settable on some platforms (#270)
  try {
    generateUUID.name = name;
  } catch (err) {}

  // For CommonJS default export support
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v4.js":
/*!********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v4.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _native = _interopRequireDefault(__webpack_require__(/*! ./native.js */ "../node_modules/uuid/dist/commonjs-browser/native.js"));
var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "../node_modules/uuid/dist/commonjs-browser/rng.js"));
var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/commonjs-browser/stringify.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function v4(options, buf, offset) {
  if (_native.default.randomUUID && !buf && !options) {
    return _native.default.randomUUID();
  }
  options = options || {};
  var rnds = options.random || (options.rng || _rng.default)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return (0, _stringify.unsafeStringify)(rnds);
}
var _default = exports["default"] = v4;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v5.js":
/*!********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v5.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _v = _interopRequireDefault(__webpack_require__(/*! ./v35.js */ "../node_modules/uuid/dist/commonjs-browser/v35.js"));
var _sha = _interopRequireDefault(__webpack_require__(/*! ./sha1.js */ "../node_modules/uuid/dist/commonjs-browser/sha1.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = exports["default"] = v5;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v6.js":
/*!********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v6.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = v6;
var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/commonjs-browser/stringify.js");
var _v = _interopRequireDefault(__webpack_require__(/*! ./v1.js */ "../node_modules/uuid/dist/commonjs-browser/v1.js"));
var _v1ToV = _interopRequireDefault(__webpack_require__(/*! ./v1ToV6.js */ "../node_modules/uuid/dist/commonjs-browser/v1ToV6.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 *
 * @param {object} options
 * @param {Uint8Array=} buf
 * @param {number=} offset
 * @returns
 */
function v6(options = {}, buf, offset = 0) {
  // v6 is v1 with different field layout, so we start with a v1 UUID, albeit
  // with slightly different behavior around how the clock_seq and node fields
  // are randomized, which is why we call v1 with _v6: true.
  var bytes = (0, _v.default)(_objectSpread(_objectSpread({}, options), {}, {
    _v6: true
  }), new Uint8Array(16));

  // Reorder the fields to v6 layout.
  bytes = (0, _v1ToV.default)(bytes);

  // Return as a byte array if requested
  if (buf) {
    for (var i = 0; i < 16; i++) {
      buf[offset + i] = bytes[i];
    }
    return buf;
  }
  return (0, _stringify.unsafeStringify)(bytes);
}

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v6ToV1.js":
/*!************************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v6ToV1.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = v6ToV1;
var _parse = _interopRequireDefault(__webpack_require__(/*! ./parse.js */ "../node_modules/uuid/dist/commonjs-browser/parse.js"));
var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/commonjs-browser/stringify.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Convert a v6 UUID to a v1 UUID
 *
 * @param {string|Uint8Array} uuid - The v6 UUID to convert to v6
 * @returns {string|Uint8Array} The v1 UUID as the same type as the `uuid` arg
 * (string or Uint8Array)
 */
function v6ToV1(uuid) {
  var v6Bytes = typeof uuid === 'string' ? (0, _parse.default)(uuid) : uuid;
  var v1Bytes = _v6ToV1(v6Bytes);
  return typeof uuid === 'string' ? (0, _stringify.unsafeStringify)(v1Bytes) : v1Bytes;
}

// Do the field transformation needed for v6 -> v1
function _v6ToV1(v6Bytes) {
  return Uint8Array.of((v6Bytes[3] & 0x0f) << 4 | v6Bytes[4] >> 4 & 0x0f, (v6Bytes[4] & 0x0f) << 4 | (v6Bytes[5] & 0xf0) >> 4, (v6Bytes[5] & 0x0f) << 4 | v6Bytes[6] & 0x0f, v6Bytes[7], (v6Bytes[1] & 0x0f) << 4 | (v6Bytes[2] & 0xf0) >> 4, (v6Bytes[2] & 0x0f) << 4 | (v6Bytes[3] & 0xf0) >> 4, 0x10 | (v6Bytes[0] & 0xf0) >> 4, (v6Bytes[0] & 0x0f) << 4 | (v6Bytes[1] & 0xf0) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);
}

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/v7.js":
/*!********************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/v7.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _rng = _interopRequireDefault(__webpack_require__(/*! ./rng.js */ "../node_modules/uuid/dist/commonjs-browser/rng.js"));
var _stringify = __webpack_require__(/*! ./stringify.js */ "../node_modules/uuid/dist/commonjs-browser/stringify.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * UUID V7 - Unix Epoch time-based UUID
 *
 * The IETF has published RFC9562, introducing 3 new UUID versions (6,7,8). This
 * implementation of V7 is based on the accepted, though not yet approved,
 * revisions.
 *
 * RFC 9562:https://www.rfc-editor.org/rfc/rfc9562.html Universally Unique
 * IDentifiers (UUIDs)

 *
 * Sample V7 value:
 * https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv7-value
 *
 * Monotonic Bit Layout: RFC rfc9562.6.2 Method 1, Dedicated Counter Bits ref:
 *     https://www.rfc-editor.org/rfc/rfc9562.html#section-6.2-5.1
 *
 *   0                   1                   2                   3 0 1 2 3 4 5 6
 *   7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |                          unix_ts_ms                           |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |          unix_ts_ms           |  ver  |        seq_hi         |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |var|               seq_low               |        rand         |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |                             rand                              |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *
 * seq is a 31 bit serialized counter; comprised of 12 bit seq_hi and 19 bit
 * seq_low, and randomly initialized upon timestamp change. 31 bit counter size
 * was selected as any bitwise operations in node are done as _signed_ 32 bit
 * ints. we exclude the sign bit.
 */

var _seqLow = null;
var _seqHigh = null;
var _msecs = 0;
function v7(options, buf, offset) {
  options = options || {};

  // initialize buffer and pointer
  var i = buf && offset || 0;
  var b = buf || new Uint8Array(16);

  // rnds is Uint8Array(16) filled with random bytes
  var rnds = options.random || (options.rng || _rng.default)();

  // milliseconds since unix epoch, 1970-01-01 00:00
  var msecs = options.msecs !== undefined ? options.msecs : Date.now();

  // seq is user provided 31 bit counter
  var seq = options.seq !== undefined ? options.seq : null;

  // initialize local seq high/low parts
  var seqHigh = _seqHigh;
  var seqLow = _seqLow;

  // check if clock has advanced and user has not provided msecs
  if (msecs > _msecs && options.msecs === undefined) {
    _msecs = msecs;

    // unless user provided seq, reset seq parts
    if (seq !== null) {
      seqHigh = null;
      seqLow = null;
    }
  }

  // if we have a user provided seq
  if (seq !== null) {
    // trim provided seq to 31 bits of value, avoiding overflow
    if (seq > 0x7fffffff) {
      seq = 0x7fffffff;
    }

    // split provided seq into high/low parts
    seqHigh = seq >>> 19 & 0xfff;
    seqLow = seq & 0x7ffff;
  }

  // randomly initialize seq
  if (seqHigh === null || seqLow === null) {
    seqHigh = rnds[6] & 0x7f;
    seqHigh = seqHigh << 8 | rnds[7];
    seqLow = rnds[8] & 0x3f; // pad for var
    seqLow = seqLow << 8 | rnds[9];
    seqLow = seqLow << 5 | rnds[10] >>> 3;
  }

  // increment seq if within msecs window
  if (msecs + 10000 > _msecs && seq === null) {
    if (++seqLow > 0x7ffff) {
      seqLow = 0;
      if (++seqHigh > 0xfff) {
        seqHigh = 0;

        // increment internal _msecs. this allows us to continue incrementing
        // while staying monotonic. Note, once we hit 10k milliseconds beyond system
        // clock, we will reset breaking monotonicity (after (2^31)*10000 generations)
        _msecs++;
      }
    }
  } else {
    // resetting; we have advanced more than
    // 10k milliseconds beyond system clock
    _msecs = msecs;
  }
  _seqHigh = seqHigh;
  _seqLow = seqLow;

  // [bytes 0-5] 48 bits of local timestamp
  b[i++] = _msecs / 0x10000000000 & 0xff;
  b[i++] = _msecs / 0x100000000 & 0xff;
  b[i++] = _msecs / 0x1000000 & 0xff;
  b[i++] = _msecs / 0x10000 & 0xff;
  b[i++] = _msecs / 0x100 & 0xff;
  b[i++] = _msecs & 0xff;

  // [byte 6] - set 4 bits of version (7) with first 4 bits seq_hi
  b[i++] = seqHigh >>> 4 & 0x0f | 0x70;

  // [byte 7] remaining 8 bits of seq_hi
  b[i++] = seqHigh & 0xff;

  // [byte 8] - variant (2 bits), first 6 bits seq_low
  b[i++] = seqLow >>> 13 & 0x3f | 0x80;

  // [byte 9] 8 bits seq_low
  b[i++] = seqLow >>> 5 & 0xff;

  // [byte 10] remaining 5 bits seq_low, 3 bits random
  b[i++] = seqLow << 3 & 0xff | rnds[10] & 0x07;

  // [bytes 11-15] always random
  b[i++] = rnds[11];
  b[i++] = rnds[12];
  b[i++] = rnds[13];
  b[i++] = rnds[14];
  b[i++] = rnds[15];
  return buf || (0, _stringify.unsafeStringify)(b);
}
var _default = exports["default"] = v7;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/validate.js":
/*!**************************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/validate.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _regex = _interopRequireDefault(__webpack_require__(/*! ./regex.js */ "../node_modules/uuid/dist/commonjs-browser/regex.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}
var _default = exports["default"] = validate;

/***/ }),

/***/ "../node_modules/uuid/dist/commonjs-browser/version.js":
/*!*************************************************************!*\
  !*** ../node_modules/uuid/dist/commonjs-browser/version.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _validate = _interopRequireDefault(__webpack_require__(/*! ./validate.js */ "../node_modules/uuid/dist/commonjs-browser/validate.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }
  return parseInt(uuid.slice(14, 15), 16);
}
var _default = exports["default"] = version;

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/autocomplete-palette.css":
/*!*************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/autocomplete-palette.css ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_autocomplete_palette_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./autocomplete-palette.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/autocomplete-palette.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_autocomplete_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_autocomplete_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/change-bounds.css":
/*!******************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/change-bounds.css ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_change_bounds_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./change-bounds.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/change-bounds.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_change_bounds_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_change_bounds_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/command-palette.css":
/*!********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/command-palette.css ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_command_palette_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./command-palette.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/command-palette.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_command_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_command_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/debug.css":
/*!**********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/debug.css ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_debug_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./debug.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/debug.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_debug_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_debug_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/decoration.css":
/*!***************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/decoration.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_decoration_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./decoration.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/decoration.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_decoration_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_decoration_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/ghost-element.css":
/*!******************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/ghost-element.css ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_ghost_element_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./ghost-element.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/ghost-element.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_ghost_element_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_ghost_element_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/glsp-sprotty.css":
/*!*****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/glsp-sprotty.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_glsp_sprotty_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./glsp-sprotty.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/glsp-sprotty.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_glsp_sprotty_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_glsp_sprotty_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/grid.css":
/*!*********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/grid.css ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_grid_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./grid.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/grid.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_grid_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_grid_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/helper-lines.css":
/*!*****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/helper-lines.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_helper_lines_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./helper-lines.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/helper-lines.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_helper_lines_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_helper_lines_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/key-shortcut.css":
/*!*****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/key-shortcut.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_key_shortcut_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./key-shortcut.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/key-shortcut.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_key_shortcut_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_key_shortcut_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/keyboard-tool-palette.css":
/*!**************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/keyboard-tool-palette.css ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_keyboard_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./keyboard-tool-palette.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/keyboard-tool-palette.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_keyboard_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_keyboard_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/keyboard.css":
/*!*************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/keyboard.css ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_keyboard_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./keyboard.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/keyboard.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_keyboard_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_keyboard_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/navigation.css":
/*!***************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/navigation.css ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_navigation_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./navigation.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/navigation.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_navigation_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_navigation_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/search.css":
/*!***********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/search.css ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_search_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./search.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/search.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_search_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_search_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/status-overlay.css":
/*!*******************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/status-overlay.css ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_status_overlay_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./status-overlay.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/status-overlay.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_status_overlay_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_status_overlay_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/toast.css":
/*!**********************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/toast.css ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_toast_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./toast.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/toast.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_toast_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_toast_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/css/tool-palette.css":
/*!*****************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/css/tool-palette.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tool-palette.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/client/css/tool-palette.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/css/command-palette.css":
/*!*******************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/css/command-palette.css ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_command_palette_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./command-palette.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/command-palette.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_command_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_command_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/css/decoration.css":
/*!**************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/css/decoration.css ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_decoration_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./decoration.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/decoration.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_decoration_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_decoration_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/css/diagram.css":
/*!***********************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/css/diagram.css ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_diagram_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./diagram.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/diagram.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_diagram_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_diagram_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/css/features.css":
/*!************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/css/features.css ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_features_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./features.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/features.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_features_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_features_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/css/theia-dialogs.css":
/*!*****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/css/theia-dialogs.css ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_theia_dialogs_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./theia-dialogs.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/theia-dialogs.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_theia_dialogs_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_theia_dialogs_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/theia-integration/css/tool-palette.css":
/*!****************************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/theia-integration/css/tool-palette.css ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_cjs_js_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js!./tool-palette.css */ "../node_modules/css-loader/dist/cjs.js!../node_modules/@eclipse-glsp/theia-integration/css/tool-palette.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_tool_palette_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});

/***/ }),

/***/ "../node_modules/@eclipse-glsp/client/lib/base/messages.json":
/*!*******************************************************************!*\
  !*** ../node_modules/@eclipse-glsp/client/lib/base/messages.json ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"navigation":{"default_navigation_mode_activated":"Navigation On: Use arrow keys to select preceding (←) or succeding (→) elements. Use the up (↑) and down (↓) arrows to navigate paths. Press \'N\' to exit.","default_navigation_mode_deactivated":"Navigation Off: Press \'N\' for default navigation, \'ALT+N\' for position based navigation.","local_navigation_mode_activated":"Position based Nav On: Navigate nearest elements using arrow keys: (↑) for above, (↓) for below, (←) for previous, (→) for next element. Press \'ALT+N\' to exit.","local_navigation_mode_deactivated":"Position based Nav Off: Press \'N\' for default navigation, \'ALT+N\' for position based navigation.","shortcut_local_mode":"Activate local navigation mode","shortcut_global_mode":"Activate global navigation mode"},"focus":{"focus_not_set":"Focus not set","focus_on":"Currently focused: ","focus_off":"Currently no element is focused.","focus_within":"Within","shortcut_focus_palette":"Focus on tool palette","shortcut_focus_graph":"Focus on graph"},"resize":{"resize_mode_activated":"Resize On: Use plus(+) and minus(-) to resize, \'CTRL\'+\'0\' for default size. Press \'ESC\' to exit.","resize_mode_deactivated":"Resize Off: Press \'ALT\'+\'A\' for resize mode.","shortcut_activate":"Activate resize mode for selected element","shortcut_deactivate":"Deactivate resize handler","shortcut_increase":"Increase size of element","shortcut_decrease":"Decrease size of element","shortcut_reset":"Set element size to default"},"move":{"shortcut_move":"Move element"},"grid":{"zoom_in_grid":"Select a digit from 1-9 to zoom in on the respective box.","shortcut_zoom_in":"Zoom in via grid"},"search":{"shortcut_activate":"Activate search for elements","placeholder":"Search for elements...","label":"Search Field"},"tool_palette":{"label":"Tool Palette","delete_button":"Enable deletion tool","marquee_button":"Enable marquee tool","marquee_message":"Currently marquee tool is only usable with mouse.","search_placeholder":"Search...","search_button":"Filter palette entries","selection_button":"Enable selection tool","validate_button":"Validate model","reset_viewport_button":"Reset Viewport","toggle_grid_button":"Toggle Grid","debug_mode_button":"Debug Mode","minimize":"Minimize palette","maximize":"Maximize palette","no_items":"No results found."},"viewport":{"shortcut_move_viewport":"Move viewport","shortcut_zoom_viewport":"Zoom viewport","shortcut_zoom_element":"Zoom element"},"shortcut":{"title":"Keyboard Shortcuts","header_command":"Command","header_shortcut":"Keybinding","menu_title":"Shortcut Menu","group_move":"Move","group_graph":"Graph","group_resize":"Resize","group_focus":"Focus","group_zoom":"Zoom","group_navigation":"Navigation","group_grid":"Grid","group_search":"Search","group_tool_palette":"Tool Palette","group_viewport":"Viewport"},"diagram":{"label":"Diagram"},"autocomplete":{"no_suggestions":"No suggestions available"},"issue_marker":{"severity_error":"ERROR","severity_warning":"WARNING","severity_info":"INFO"}}');

/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_eclipse-glsp_theia-integration_lib_browser_theia-integration-frontend-mo-4c1c6b.js.map