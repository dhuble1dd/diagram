"use strict";
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAutocompletePalette = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
require("../../../css/autocomplete-palette.css");
const ui_extension_1 = require("../ui-extension/ui-extension");
const auto_complete_widget_1 = require("./auto-complete-widget");
const messages_1 = require("../messages");
/**
 * A reusable base implementation for `UIExtensions` that want to provide autocomplete functionality
 * using the {@link AutoCompleteWidget}.
 *
 */
class BaseAutocompletePalette extends ui_extension_1.GLSPAbstractUIExtension {
    constructor() {
        super(...arguments);
        this.autoSuggestionSettings = {
            noSuggestionsMessage: messages_1.messages.autocomplete.no_suggestions,
            suggestionsClass: 'command-palette-suggestions',
            debounceWaitMs: 50,
            showOnFocus: true
        };
    }
    containerClass() {
        return 'autocomplete-palette';
    }
    show(root, ...contextElementIds) {
        super.show(root, ...contextElementIds);
        this.root = root;
        this.autocompleteWidget.open(root);
    }
    hide() {
        var _a;
        (_a = this.autocompleteWidget) === null || _a === void 0 ? void 0 : _a.dispose();
        this.root = undefined;
        super.hide();
    }
    initializeContents(containerElement) {
        containerElement.classList.add('command-palette');
        this.autocompleteWidget = new auto_complete_widget_1.AutoCompleteWidget(this.autoSuggestionSettings, { provideSuggestions: input => this.retrieveSuggestions(this.root, input) }, { executeFromSuggestion: input => this.executeSuggestion(input) }, reason => this.autocompleteHide(reason), this.logger, {
            visibleSuggestionsChanged: suggestions => this.visibleSuggestionsChanged(this.root, suggestions),
            selectedSuggestionChanged: suggestion => this.selectedSuggestionChanged(this.root, suggestion)
        });
        this.autocompleteWidget.initialize(containerElement);
    }
    async visibleSuggestionsChanged(root, labeledActions) {
        return;
    }
    async selectedSuggestionChanged(root, labeledAction) {
        return;
    }
    autocompleteHide(reason) {
        this.hide();
    }
    executeSuggestion(input) {
        this.actionDispatcher.dispatchAll((0, auto_complete_widget_1.toActionArray)(input));
    }
}
exports.BaseAutocompletePalette = BaseAutocompletePalette;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], BaseAutocompletePalette.prototype, "actionDispatcher", void 0);
//# sourceMappingURL=base-autocomplete-palette.js.map