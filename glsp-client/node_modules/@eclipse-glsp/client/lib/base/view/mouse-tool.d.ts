/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Disposable, GModelElement, GModelRoot, LazyInjector, MaybePromise, MouseListener, MouseTool } from '@eclipse-glsp/sprotty';
import { IDiagramStartup } from '../model/diagram-loader';
/**
 * Custom helper type to declare the explicit mouse listener methods
 * of {@link MouseListener} i.e. omitting the `decorate` method.
 */
type MouseListenerMethods = keyof Omit<MouseListener, 'decorate'>;
export declare class GLSPMouseTool extends MouseTool implements IDiagramStartup {
    protected lazyInjector: LazyInjector;
    protected rankedMouseListeners: Map<number, MouseListener[]>;
    constructor(mouseListeners: MouseListener[]);
    preLoadDiagram(): MaybePromise<void>;
    register(mouseListener: MouseListener): void;
    registerListener(mouseListener: MouseListener): Disposable;
    deregister(mouseListener: MouseListener): void;
    protected handleEvent<K extends MouseListenerMethods>(methodName: K, model: GModelRoot, event: MouseEvent): void;
    protected notifyListenersByRank<K extends MouseListenerMethods>(element: GModelElement, methodName: K, event: MouseEvent): Promise<void>;
    protected dispatchActions<K extends MouseListenerMethods>(mouseListeners: MouseListener[], methodName: K, element: GModelElement, event: MouseEvent): Promise<void>;
}
export {};
//# sourceMappingURL=mouse-tool.d.ts.map