"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPMouseTool = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const ranked_1 = require("../ranked");
let GLSPMouseTool = class GLSPMouseTool extends sprotty_1.MouseTool {
    constructor(mouseListeners) {
        super(mouseListeners);
    }
    preLoadDiagram() {
        this.lazyInjector.getAll(sprotty_1.TYPES.MouseListener).forEach(listener => this.register(listener));
    }
    register(mouseListener) {
        super.register(mouseListener);
        this.rankedMouseListeners = groupBy(this.mouseListeners, listener => ranked_1.Ranked.getRank(listener));
    }
    registerListener(mouseListener) {
        this.register(mouseListener);
        return sprotty_1.Disposable.create(() => this.deregister(mouseListener));
    }
    deregister(mouseListener) {
        super.deregister(mouseListener);
        this.rankedMouseListeners = groupBy(this.mouseListeners, listener => ranked_1.Ranked.getRank(listener));
    }
    handleEvent(methodName, model, event) {
        this.focusOnMouseEvent(methodName, model);
        const element = this.getTargetElement(model, event);
        if (!element) {
            return;
        }
        this.notifyListenersByRank(element, methodName, event);
    }
    async notifyListenersByRank(element, methodName, event) {
        for (const rank of this.rankedMouseListeners) {
            await this.dispatchActions(rank[1], methodName, element, event);
        }
    }
    async dispatchActions(mouseListeners, methodName, element, event) {
        const actions = mouseListeners.map(listener => listener[methodName](element, event)).reduce((a, b) => a.concat(b));
        if (actions.length > 0) {
            event.preventDefault();
            for (const actionOrPromise of actions) {
                if (sprotty_1.Action.is(actionOrPromise)) {
                    await this.actionDispatcher.dispatch(actionOrPromise);
                }
                else {
                    actionOrPromise.then((action) => {
                        this.actionDispatcher.dispatch(action);
                    });
                }
            }
        }
    }
};
exports.GLSPMouseTool = GLSPMouseTool;
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], GLSPMouseTool.prototype, "lazyInjector", void 0);
exports.GLSPMouseTool = GLSPMouseTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.EmptyArray)),
    __metadata("design:paramtypes", [Array])
], GLSPMouseTool);
function groupBy(array, keyFunction) {
    const unsortedMap = array.reduce((result, item) => {
        const key = keyFunction(item);
        if (!result.has(key)) {
            result.set(key, [item]);
        }
        else {
            const entries = result.get(key);
            if (entries) {
                entries.push(item);
            }
        }
        return result;
    }, new Map());
    return new Map([...unsortedMap.entries()].sort());
}
//# sourceMappingURL=mouse-tool.js.map