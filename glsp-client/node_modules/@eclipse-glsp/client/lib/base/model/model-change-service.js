"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelChangeService = void 0;
/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
class ModelChangeService {
    constructor() {
        this.toDispose = new sprotty_1.DisposableCollection();
        this.onModelRootChangedEmitter = new sprotty_1.Emitter();
        this.onViewportChangedEmitter = new sprotty_1.Emitter();
    }
    get currentRoot() {
        return this._currentRoot;
    }
    get commandStack() {
        return this.lazyInjector.get(sprotty_1.TYPES.ICommandStack);
    }
    get onModelRootChanged() {
        return this.onModelRootChangedEmitter.event;
    }
    get onViewportChanged() {
        return this.onViewportChangedEmitter.event;
    }
    initialize() {
        this.toDispose.push(this.onModelRootChangedEmitter, this.onViewportChangedEmitter);
        this.commandStack.onCommandExecuted(data => this.handleCommandExecution(data.command, data.newRoot));
    }
    dispose() {
        this.toDispose.dispose();
    }
    handleCommandExecution(command, newRoot) {
        if (this.isModelRootChangeCommand(command)) {
            this.handleModelRootChangeCommand(command, newRoot);
        }
        if (this.isViewportChangeCommand(command)) {
            this.handleViewportChangeCommand(command, newRoot);
        }
    }
    isModelRootChangeCommand(command) {
        return command instanceof sprotty_1.SetModelCommand || command instanceof sprotty_1.UpdateModelCommand;
    }
    isViewportChangeCommand(command) {
        return command instanceof sprotty_1.SetViewportCommand || command instanceof sprotty_1.BoundsAwareViewportCommand;
    }
    handleModelRootChangeCommand(command, newRoot) {
        this._currentRoot = newRoot;
        this.lastViewport = this.toViewport(newRoot);
        this.onModelRootChangedEmitter.fire(newRoot);
    }
    handleViewportChangeCommand(command, newRoot) {
        const viewport = this.toViewport(newRoot);
        if (!viewport) {
            return;
        }
        if (this.hasViewportChanged(viewport)) {
            this.onViewportChangedEmitter.fire({ newViewport: viewport, oldViewport: this.lastViewport });
            this.lastViewport = viewport;
        }
    }
    hasViewportChanged(newViewport) {
        if (!this.lastViewport) {
            return true;
        }
        return !((0, sprotty_1.almostEquals)(newViewport.zoom, this.lastViewport.zoom) &&
            (0, sprotty_1.almostEquals)(newViewport.scroll.x, this.lastViewport.scroll.x) &&
            (0, sprotty_1.almostEquals)(newViewport.scroll.y, this.lastViewport.scroll.y));
    }
    toViewport(root) {
        return (0, sprotty_1.isViewport)(root) ? { scroll: root.scroll, zoom: root.zoom } : undefined;
    }
}
exports.ModelChangeService = ModelChangeService;
__decorate([
    (0, inversify_1.inject)(sprotty_1.LazyInjector),
    __metadata("design:type", Object)
], ModelChangeService.prototype, "lazyInjector", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ModelChangeService.prototype, "initialize", null);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ModelChangeService.prototype, "dispose", null);
//# sourceMappingURL=model-change-service.js.map