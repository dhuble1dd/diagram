"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GModelRegistry = void 0;
/********************************************************************************
 * Copyright (c) 2021-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const args_feature_1 = require("../args-feature");
/**
 *  Model element classes registered here are considered automatically when constructing a model from its schema.
 *  Use the `configureModelElement` utility function to register a model element and its target render view in the
 *  corresponding factories.
 */
let GModelRegistry = class GModelRegistry extends sprotty_1.SModelRegistry {
    /* Overwrite the `register` method to only log an info message (instead of thrown an error) if
       an existing registration is overwritten */
    register(key, factory) {
        if (key === undefined) {
            throw new Error('Key is undefined');
        }
        if (this.hasKey(key)) {
            // do not throw error but log overwriting
            console.log(`Key is already registered: ${key}.Factory for model element '${key}' will be overwritten.`);
            console.warn('Implicit overwriting by registering the same key twice is deprecated' +
                "\n Use 'overrideModelElement()' instead of 'configureModelElement()' for explicit overwriting.");
        }
        this.elements.set(key, factory);
    }
    getDefaultFeatures(constr) {
        var _a;
        // Add the argsFeature per default to all model elements
        const features = [...((_a = super.getDefaultFeatures(constr)) !== null && _a !== void 0 ? _a : [])];
        if (!features.includes(args_feature_1.argsFeature)) {
            features.push(args_feature_1.argsFeature);
        }
        return features;
    }
};
exports.GModelRegistry = GModelRegistry;
exports.GModelRegistry = GModelRegistry = __decorate([
    (0, inversify_1.injectable)()
], GModelRegistry);
//# sourceMappingURL=model-registry.js.map