"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceModelChangedActionHandler = exports.ExternalSourceModelChangedHandler = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = require("inversify");
const sprotty_1 = require("@eclipse-glsp/sprotty");
/**
 * An external handler of the source model change event.
 *
 * This allows external applications to react specifically to this event, e.g. by bringing up the diagram,
 * check their dirty state, show a dialog, etc.
 */
let ExternalSourceModelChangedHandler = class ExternalSourceModelChangedHandler {
};
exports.ExternalSourceModelChangedHandler = ExternalSourceModelChangedHandler;
exports.ExternalSourceModelChangedHandler = ExternalSourceModelChangedHandler = __decorate([
    (0, inversify_1.injectable)()
], ExternalSourceModelChangedHandler);
let SourceModelChangedActionHandler = class SourceModelChangedActionHandler {
    handle(action) {
        if (sprotty_1.SourceModelChangedAction.is(action)) {
            if (this.externalModelSourceChangedHandler) {
                this.externalModelSourceChangedHandler
                    .notifySourceModelChange(action.sourceModelName, this.options)
                    .then(actions => this.dispatcher.dispatchAll(actions));
                return;
            }
            this.showSimpleNotification(action);
        }
    }
    showSimpleNotification(action) {
        const message = `The source model ${action.sourceModelName} has changed. You might want to consider reloading.`;
        const timeout = 0;
        const severity = 'WARNING';
        this.dispatcher.dispatchAll([sprotty_1.StatusAction.create(message, { severity, timeout }), sprotty_1.MessageAction.create(message, { severity })]);
    }
};
exports.SourceModelChangedActionHandler = SourceModelChangedActionHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], SourceModelChangedActionHandler.prototype, "dispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], SourceModelChangedActionHandler.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(ExternalSourceModelChangedHandler),
    (0, inversify_1.optional)(),
    __metadata("design:type", ExternalSourceModelChangedHandler)
], SourceModelChangedActionHandler.prototype, "externalModelSourceChangedHandler", void 0);
exports.SourceModelChangedActionHandler = SourceModelChangedActionHandler = __decorate([
    (0, inversify_1.injectable)()
], SourceModelChangedActionHandler);
//# sourceMappingURL=source-model-changed-action-handler.js.map