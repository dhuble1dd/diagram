"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RankedSelectMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const ranked_1 = require("../../base/ranked");
const model_1 = require("../change-bounds/model");
/**
 * Ranked select mouse listener that is executed before default mouse listeners when using the RankedMouseTool.
 * This ensures that default mouse listeners are working on a model that has selection changes already applied.
 */
let RankedSelectMouseListener = class RankedSelectMouseListener extends sprotty_1.SelectMouseListener {
    constructor() {
        super(...arguments);
        this.rank = ranked_1.Ranked.DEFAULT_RANK - 100; /* we want to be executed before all default mouse listeners */
    }
    handleSelectTarget(selectableTarget, deselectedElements, event) {
        const result = [];
        result.push(sprotty_1.SelectAction.create({
            selectedElementsIDs: [selectableTarget.id],
            deselectedElementsIDs: deselectedElements.map(e => e.id)
        }));
        result.push(sprotty_1.BringToFrontAction.create([selectableTarget.id]));
        return result;
    }
    handleDeselectTarget(selectableTarget, event) {
        const result = [];
        result.push(sprotty_1.SelectAction.create({ selectedElementsIDs: [], deselectedElementsIDs: [selectableTarget.id] }));
        return result;
    }
    handleDeselectAll(deselectedElements, event) {
        const result = [];
        result.push(sprotty_1.SelectAction.create({ selectedElementsIDs: [], deselectedElementsIDs: deselectedElements.map(e => e.id) }));
        return result;
    }
    handleButton(target, event) {
        var _a;
        if (target instanceof model_1.GResizeHandle && ((_a = this.changeBoundsManager) === null || _a === void 0 ? void 0 : _a.useSymmetricResize(event))) {
            // avoid de-selecting elements when resizing with a modifier key
            return [];
        }
        return super.handleButton(target, event);
    }
};
exports.RankedSelectMouseListener = RankedSelectMouseListener;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], RankedSelectMouseListener.prototype, "changeBoundsManager", void 0);
exports.RankedSelectMouseListener = RankedSelectMouseListener = __decorate([
    (0, inversify_1.injectable)()
], RankedSelectMouseListener);
//# sourceMappingURL=select-mouse-listener.js.map