"use strict";
/********************************************************************************
 * Copyright (c) 2024-2025 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OriginViewportCommand = exports.OriginViewportAction = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const editor_context_service_1 = require("../../base/editor-context-service");
var OriginViewportAction;
(function (OriginViewportAction) {
    OriginViewportAction.KIND = 'originViewport';
    function is(object) {
        return sprotty_1.Action.hasKind(object, OriginViewportAction.KIND);
    }
    OriginViewportAction.is = is;
    function create(options = {}) {
        return {
            kind: OriginViewportAction.KIND,
            animate: true,
            ...options
        };
    }
    OriginViewportAction.create = create;
})(OriginViewportAction || (exports.OriginViewportAction = OriginViewportAction = {}));
let OriginViewportCommand = class OriginViewportCommand extends sprotty_1.BoundsAwareViewportCommand {
    constructor(action) {
        super(action.animate);
        this.action = action;
    }
    getElementIds() {
        return [];
    }
    initialize(model) {
        const viewport = this.editorContext.viewport;
        if (!viewport) {
            return;
        }
        this.oldViewport = { scroll: viewport.scroll, zoom: viewport.zoom };
        const newViewport = this.getNewViewport(sprotty_1.Bounds.EMPTY, viewport);
        if (newViewport) {
            const { zoomLimits, horizontalScrollLimits, verticalScrollLimits } = this.viewerOptions;
            this.newViewport = (0, sprotty_1.limitViewport)(newViewport, viewport.canvasBounds, horizontalScrollLimits, verticalScrollLimits, zoomLimits);
        }
    }
    getNewViewport(_bounds, _model) {
        return { zoom: 1, scroll: { x: 0, y: 0 } };
    }
};
exports.OriginViewportCommand = OriginViewportCommand;
OriginViewportCommand.KIND = OriginViewportAction.KIND;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], OriginViewportCommand.prototype, "editorContext", void 0);
exports.OriginViewportCommand = OriginViewportCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], OriginViewportCommand);
//# sourceMappingURL=origin-viewport.js.map