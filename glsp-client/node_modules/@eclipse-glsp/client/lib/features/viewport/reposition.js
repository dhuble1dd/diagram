"use strict";
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepositionCommand = exports.RepositionAction = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const editor_context_service_1 = require("../../base/editor-context-service");
const model_1 = require("../../model");
const gmodel_util_1 = require("../../utils/gmodel-util");
var RepositionAction;
(function (RepositionAction) {
    RepositionAction.KIND = 'repositionAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, RepositionAction.KIND) && (0, sprotty_1.hasArrayProp)(object, 'elementIDs');
    }
    RepositionAction.is = is;
    function create(elementIDs) {
        return {
            kind: RepositionAction.KIND,
            elementIDs
        };
    }
    RepositionAction.create = create;
})(RepositionAction || (exports.RepositionAction = RepositionAction = {}));
/**
 * Moves the viewport to an unvisible element, while maintaining the current zoom level.
 */
let RepositionCommand = class RepositionCommand extends sprotty_1.BoundsAwareViewportCommand {
    constructor(action) {
        super(true);
        this.action = action;
    }
    boundsInViewport(element, bounds, viewport) {
        var _a;
        if (element instanceof sprotty_1.GChildElement && element.parent !== viewport) {
            return this.boundsInViewport(element.parent, element.parent.localToParent(bounds), viewport);
        }
        else if (element instanceof model_1.GEdge) {
            const edgeBounds = (0, sprotty_1.getRouteBounds)((_a = (0, gmodel_util_1.calcElementAndRoute)(element).newRoutingPoints) !== null && _a !== void 0 ? _a : []);
            if (element instanceof sprotty_1.GChildElement && element.parent !== viewport) {
                return this.boundsInViewport(element.parent, element.parent.localToParent(edgeBounds), viewport);
            }
            return edgeBounds;
        }
        return bounds;
    }
    getElementIds() {
        return this.action.elementIDs;
    }
    getNewViewport(combinedElementBounds, model) {
        if (!sprotty_1.Dimension.isValid(model.canvasBounds)) {
            return undefined;
        }
        const viewport = this.editorContext.viewport;
        if (viewport) {
            if (this.isFullyVisible(combinedElementBounds, viewport)) {
                return undefined;
            }
            else {
                const zoom = viewport.zoom;
                const centerOfElements = sprotty_1.Bounds.center(combinedElementBounds);
                const canvasCenter = sprotty_1.Dimension.center(model.canvasBounds);
                const scrollCenter = sprotty_1.Point.subtract(centerOfElements, canvasCenter);
                const scroll = sprotty_1.Point.map(scrollCenter, coordinate => coordinate / zoom);
                return { scroll, zoom };
            }
        }
        return undefined;
    }
    isFullyVisible(bounds, viewport) {
        return (bounds.x >= viewport.scroll.x &&
            bounds.x + bounds.width <= viewport.scroll.x + viewport.canvasBounds.width / viewport.zoom &&
            bounds.y >= viewport.scroll.y &&
            bounds.y + bounds.height <= viewport.scroll.y + viewport.canvasBounds.height / viewport.zoom);
    }
};
exports.RepositionCommand = RepositionCommand;
RepositionCommand.KIND = RepositionAction.KIND;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], RepositionCommand.prototype, "editorContext", void 0);
exports.RepositionCommand = RepositionCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], RepositionCommand);
//# sourceMappingURL=reposition.js.map