"use strict";
/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoomKeyListener = exports.MoveViewportKeyListener = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const selection_service_1 = require("../../base/selection-service");
const grid_1 = require("../grid/grid");
const zoom_viewport_action_1 = require("./zoom-viewport-action");
let MoveViewportKeyListener = class MoveViewportKeyListener extends sprotty_1.KeyListener {
    constructor() {
        super(...arguments);
        this.grid = grid_1.Grid.DEFAULT;
    }
    keyDown(_element, event) {
        const selectedElementIds = this.selectionService.getSelectedElementIDs();
        const snap = this.changeBoundsManager.usePositionSnap(event);
        const offsetX = snap ? this.grid.x : 1;
        const offsetY = snap ? this.grid.y : 1;
        if (selectedElementIds.length === 0) {
            if (this.matchesMoveUpKeystroke(event)) {
                return [sprotty_1.MoveViewportAction.create({ moveX: 0, moveY: -offsetY })];
            }
            else if (this.matchesMoveDownKeystroke(event)) {
                return [sprotty_1.MoveViewportAction.create({ moveX: 0, moveY: offsetY })];
            }
            else if (this.matchesMoveRightKeystroke(event)) {
                return [sprotty_1.MoveViewportAction.create({ moveX: offsetX, moveY: 0 })];
            }
            else if (this.matchesMoveLeftKeystroke(event)) {
                return [sprotty_1.MoveViewportAction.create({ moveX: -offsetX, moveY: 0 })];
            }
        }
        return [];
    }
    matchesMoveUpKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp');
    }
    matchesMoveDownKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown');
    }
    matchesMoveRightKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight');
    }
    matchesMoveLeftKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft');
    }
};
exports.MoveViewportKeyListener = MoveViewportKeyListener;
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], MoveViewportKeyListener.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IChangeBoundsManager),
    __metadata("design:type", Object)
], MoveViewportKeyListener.prototype, "changeBoundsManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], MoveViewportKeyListener.prototype, "grid", void 0);
exports.MoveViewportKeyListener = MoveViewportKeyListener = __decorate([
    (0, inversify_1.injectable)()
], MoveViewportKeyListener);
let ZoomKeyListener = class ZoomKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        const selectedElementIds = this.selectionService.getSelectedElementIDs();
        if (selectedElementIds.length === 0) {
            if (this.matchesZoomOutKeystroke(event)) {
                return [zoom_viewport_action_1.ZoomAction.create({ zoomFactor: zoom_viewport_action_1.ZoomFactors.DEFAULT.out })];
            }
            else if (this.matchesZoomInKeystroke(event)) {
                return [zoom_viewport_action_1.ZoomAction.create({ zoomFactor: zoom_viewport_action_1.ZoomFactors.DEFAULT.in })];
            }
            else if (this.matchesMinZoomLevelKeystroke(event)) {
                return [sprotty_1.CenterAction.create(selectedElementIds)];
            }
        }
        else {
            if (this.matchesZoomOutKeystroke(event)) {
                if (selectedElementIds.length > 0) {
                    return [
                        zoom_viewport_action_1.ZoomAction.create({
                            elementIds: selectedElementIds,
                            zoomFactor: zoom_viewport_action_1.ZoomFactors.DEFAULT.out
                        })
                    ];
                }
            }
            else if (this.matchesZoomInKeystroke(event)) {
                if (selectedElementIds.length > 0) {
                    return [zoom_viewport_action_1.ZoomAction.create({ elementIds: selectedElementIds, zoomFactor: zoom_viewport_action_1.ZoomFactors.DEFAULT.in })];
                }
            }
            else if (this.matchesMinZoomLevelKeystroke(event)) {
                return [sprotty_1.CenterAction.create(selectedElementIds)];
            }
        }
        return [];
    }
    matchesZoomInKeystroke(event) {
        /** here event.key is used for '+', as keycode 187 is already declared for 'Equals' in {@link matchesKeystroke}.*/
        return !event.ctrlKey && (event.key === '+' || (0, sprotty_1.matchesKeystroke)(event, 'NumpadAdd'));
    }
    matchesMinZoomLevelKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Digit0', 'ctrl') || (0, sprotty_1.matchesKeystroke)(event, 'Numpad0', 'ctrl');
    }
    matchesZoomOutKeystroke(event) {
        return !event.ctrlKey && ((0, sprotty_1.matchesKeystroke)(event, 'Minus') || (0, sprotty_1.matchesKeystroke)(event, 'NumpadSubtract'));
    }
};
exports.ZoomKeyListener = ZoomKeyListener;
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], ZoomKeyListener.prototype, "selectionService", void 0);
exports.ZoomKeyListener = ZoomKeyListener = __decorate([
    (0, inversify_1.injectable)()
], ZoomKeyListener);
//# sourceMappingURL=viewport-key-listener.js.map