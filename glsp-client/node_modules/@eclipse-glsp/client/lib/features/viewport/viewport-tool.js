"use strict";
/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ViewportKeyTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewportKeyTool = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const messages_1 = require("../../base/messages");
const base_tools_1 = require("../tools/base-tools");
const viewport_key_listener_1 = require("./viewport-key-listener");
/**
 * This only handles keyboard events for the viewport.
 * Mouse specific events are handled directly by MouseListeners without any tool.
 */
let ViewportKeyTool = ViewportKeyTool_1 = class ViewportKeyTool extends base_tools_1.BaseTool {
    get id() {
        return ViewportKeyTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.moveKeyListener), this.keyTool.registerListener(this.zoomKeyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(ViewportKeyTool_1.TOKEN, [
            {
                shortcuts: ['⬅ ⬆ ➡ ⬇'],
                description: messages_1.messages.viewport.shortcut_move_viewport,
                group: messages_1.messages.shortcut.group_move,
                position: 0
            },
            {
                shortcuts: ['+ -'],
                description: messages_1.messages.viewport.shortcut_zoom_viewport,
                group: messages_1.messages.shortcut.group_zoom,
                position: 0
            },
            {
                shortcuts: ['+ -'],
                description: messages_1.messages.viewport.shortcut_zoom_element,
                group: messages_1.messages.shortcut.group_zoom,
                position: 0
            }
        ])));
    }
};
exports.ViewportKeyTool = ViewportKeyTool;
ViewportKeyTool.ID = 'glsp.viewport-key-tool';
ViewportKeyTool.TOKEN = Symbol.for(ViewportKeyTool_1.ID);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], ViewportKeyTool.prototype, "shortcutManager", void 0);
__decorate([
    (0, inversify_1.inject)(viewport_key_listener_1.ZoomKeyListener),
    __metadata("design:type", viewport_key_listener_1.ZoomKeyListener)
], ViewportKeyTool.prototype, "zoomKeyListener", void 0);
__decorate([
    (0, inversify_1.inject)(viewport_key_listener_1.MoveViewportKeyListener),
    __metadata("design:type", viewport_key_listener_1.MoveViewportKeyListener)
], ViewportKeyTool.prototype, "moveKeyListener", void 0);
exports.ViewportKeyTool = ViewportKeyTool = ViewportKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], ViewportKeyTool);
//# sourceMappingURL=viewport-tool.js.map