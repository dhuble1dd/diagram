"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var GlobalKeyListenerTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalKeyListenerTool = void 0;
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const messages_1 = require("../../base/messages");
const constants_1 = require("../accessibility/keyboard-grid/constants");
const tool_palette_1 = require("../tool-palette/tool-palette");
const base_tools_1 = require("../tools/base-tools");
const actions_1 = require("./actions");
const constants_2 = require("./keyboard-pointer/constants");
let GlobalKeyListenerTool = GlobalKeyListenerTool_1 = class GlobalKeyListenerTool extends base_tools_1.BaseEditTool {
    constructor() {
        super(...arguments);
        this.alreadyRegistered = false;
    }
    get id() {
        return GlobalKeyListenerTool_1.ID;
    }
    enable() {
        if (!this.alreadyRegistered) {
            this.alreadyRegistered = true;
            document.addEventListener('keyup', this.trigger.bind(this));
            (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(GlobalKeyListenerTool_1.TOKEN, [
                {
                    shortcuts: ['ALT', 'P'],
                    description: messages_1.messages.focus.shortcut_focus_palette,
                    group: messages_1.messages.shortcut.group_tool_palette,
                    position: 0
                },
                {
                    shortcuts: ['ALT', 'G'],
                    description: messages_1.messages.focus.shortcut_focus_graph,
                    group: messages_1.messages.shortcut.group_graph,
                    position: 0
                }
            ]));
        }
    }
    trigger(event) {
        this.actionDispatcher.dispatchAll(this.handleKeyEvent(event));
    }
    handleKeyEvent(event) {
        if (this.matchesSetFocusOnToolPalette(event)) {
            return [actions_1.FocusDomAction.create(tool_palette_1.ToolPalette.ID)];
        }
        else if (this.matchesSetFocusOnDiagram(event)) {
            return [actions_1.FocusDomAction.create('graph')];
        }
        else if (this.matchesReleaseFocusFromToolPalette(event)) {
            return [
                sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: constants_2.KeyboardPointerMetadata.ID, visible: false, contextElementsId: [] }),
                sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: constants_1.KeyboardGridMetadata.ID, visible: false, contextElementsId: [] }),
                sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: constants_1.KeyboardNodeGridMetadata.ID, visible: false, contextElementsId: [] })
            ];
        }
        return [];
    }
    matchesSetFocusOnToolPalette(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyP', 'alt');
    }
    matchesSetFocusOnDiagram(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyG', 'alt');
    }
    matchesReleaseFocusFromToolPalette(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Escape');
    }
};
exports.GlobalKeyListenerTool = GlobalKeyListenerTool;
GlobalKeyListenerTool.ID = 'glsp.global-key-listener';
GlobalKeyListenerTool.TOKEN = Symbol.for(GlobalKeyListenerTool_1.name);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], GlobalKeyListenerTool.prototype, "shortcutManager", void 0);
exports.GlobalKeyListenerTool = GlobalKeyListenerTool = GlobalKeyListenerTool_1 = __decorate([
    (0, inversify_1.injectable)()
], GlobalKeyListenerTool);
//# sourceMappingURL=global-keylistener-tool.js.map