"use strict";
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyboardPointerKeyboardListener = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const css_feedback_1 = require("../../../base/feedback/css-feedback");
const tool_1 = require("../../../base/tool-manager/tool");
const constants_1 = require("../keyboard-grid/constants");
const constants_2 = require("./constants");
/**
 * Keyboard listener for the pointer with the necessary logic to handle keyboard events
 */
class KeyboardPointerKeyboardListener {
    get position() {
        return this.keyboardPointer.getPosition;
    }
    constructor(keyboardPointer, actionDispatcher) {
        this.keyboardPointer = keyboardPointer;
        this.actionDispatcher = actionDispatcher;
    }
    keyDown(event) {
        this.moveIfArrows(event);
        this.createIfEnterEvent(event);
        this.hideIfEscapeEvent(event);
    }
    moveIfArrows(event) {
        if (this.matchesMovePointerDown(event)) {
            this.position.renderPosition = this.position.calcRelativeRenderPosition(0, 10);
            this.keyboardPointer.render();
        }
        else if (this.matchesMovePointerUp(event)) {
            this.position.renderPosition = this.position.calcRelativeRenderPosition(0, -10);
            this.keyboardPointer.render();
        }
        else if (this.matchesMovePointerRight(event)) {
            this.position.renderPosition = this.position.calcRelativeRenderPosition(10, 0);
            this.keyboardPointer.render();
        }
        else if (this.matchesMovePointerLeft(event)) {
            this.position.renderPosition = this.position.calcRelativeRenderPosition(-10, 0);
            this.keyboardPointer.render();
        }
    }
    createIfEnterEvent(event) {
        const elementTypeId = this.keyboardPointer.triggerAction.elementTypeId;
        const { container, status } = this.position.containableParentAtDiagramPosition(elementTypeId);
        if (container !== undefined && status === css_feedback_1.CursorCSS.NODE_CREATION) {
            if (this.matchesConfirmPointerPosition(event)) {
                // close everything and return to default
                const containerId = container.id;
                const location = this.position.diagramPosition;
                this.actionDispatcher.dispatchAll([
                    sprotty_1.SetUIExtensionVisibilityAction.create({
                        extensionId: constants_2.KeyboardPointerMetadata.ID,
                        visible: false,
                        contextElementsId: []
                    }),
                    sprotty_1.SetUIExtensionVisibilityAction.create({
                        extensionId: constants_1.KeyboardNodeGridMetadata.ID,
                        visible: false,
                        contextElementsId: []
                    }),
                    sprotty_1.CreateNodeOperation.create(elementTypeId, { location, containerId, args: this.keyboardPointer.triggerAction.args }),
                    tool_1.EnableDefaultToolsAction.create()
                ]);
            }
            else if (this.matchesConfirmPointerPositionAndStayInMode(event)) {
                // stay in this mode, selected palette option stays, grid and keyboard mouse are displayed
                const containerId = container.id;
                const location = this.position.diagramPosition;
                this.actionDispatcher.dispatch(sprotty_1.CreateNodeOperation.create(elementTypeId, { location, containerId, args: this.keyboardPointer.triggerAction.args }));
            }
        }
    }
    hideIfEscapeEvent(event) {
        if (this.matchesDeactivatePointer(event)) {
            this.keyboardPointer.hide();
        }
    }
    matchesDeactivatePointer(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Escape');
    }
    matchesConfirmPointerPosition(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Enter');
    }
    matchesConfirmPointerPositionAndStayInMode(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Enter', 'ctrl');
    }
    matchesMovePointerLeft(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft');
    }
    matchesMovePointerRight(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight');
    }
    matchesMovePointerUp(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp');
    }
    matchesMovePointerDown(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown');
    }
}
exports.KeyboardPointerKeyboardListener = KeyboardPointerKeyboardListener;
//# sourceMappingURL=keyboard-pointer-listener.js.map