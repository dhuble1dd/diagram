/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, GModelRoot, IActionDispatcher, IActionHandler, TriggerNodeCreationAction } from '@eclipse-glsp/sprotty';
import { EditorContextService } from '../../../base/editor-context-service';
import { GLSPAbstractUIExtension } from '../../../base/ui-extension/ui-extension';
import { ContainerManager } from '../../tools/node-creation/container-manager';
import { KeyboardPointerKeyboardListener } from './keyboard-pointer-listener';
import { KeyboardPointerPosition } from './keyboard-pointer-position';
export declare class KeyboardPointer extends GLSPAbstractUIExtension implements IActionHandler {
    protected readonly actionDispatcher: IActionDispatcher;
    protected _triggerAction: TriggerNodeCreationAction;
    editorContextService: EditorContextService;
    containerManager: ContainerManager;
    protected position: KeyboardPointerPosition;
    protected keyListener: KeyboardPointerKeyboardListener;
    constructor(actionDispatcher: IActionDispatcher);
    get triggerAction(): TriggerNodeCreationAction;
    get isVisible(): boolean;
    get getPosition(): KeyboardPointerPosition;
    get getKeyListener(): KeyboardPointerKeyboardListener;
    id(): string;
    containerClass(): string;
    protected initializeContents(containerElement: HTMLElement): void;
    protected onBeforeShow(containerElement: HTMLElement, root: Readonly<GModelRoot>, ...selectedElementIds: string[]): void;
    handle(action: Action): Action | void;
    render(): void;
}
//# sourceMappingURL=keyboard-pointer.d.ts.map