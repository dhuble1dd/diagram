"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyboardControlModule = void 0;
exports.configureKeyboardControlTools = configureKeyboardControlTools;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const action_1 = require("../edge-autocomplete/action");
const edge_autocomplete_palette_1 = require("../edge-autocomplete/edge-autocomplete-palette");
const edge_autocomplete_tool_1 = require("../edge-autocomplete/edge-autocomplete-tool");
const global_keylistener_tool_1 = require("../global-keylistener-tool");
const action_2 = require("../keyboard-grid/action");
const keyboard_grid_1 = require("../keyboard-grid/keyboard-grid");
const keyboard_grid_search_palette_1 = require("../keyboard-grid/keyboard-grid-search-palette");
const keyboard_node_grid_1 = require("../keyboard-grid/keyboard-node-grid");
const actions_1 = require("./actions");
const keyboard_pointer_1 = require("./keyboard-pointer");
/**
 * Handles the pointer used via grid to position new elements.
 */
exports.keyboardControlModule = new sprotty_1.FeatureModule((bind, unbind, isBound, rebind) => {
    const context = { bind, unbind, isBound, rebind };
    configureKeyboardControlTools(context);
}, { featureId: Symbol('keyboardControl') });
function configureKeyboardControlTools(context) {
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, global_keylistener_tool_1.GlobalKeyListenerTool);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_pointer_1.KeyboardPointer);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_grid_1.KeyboardGrid);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_node_grid_1.KeyboardNodeGrid);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.TriggerNodeCreationAction.KIND, keyboard_pointer_1.KeyboardPointer);
    (0, sprotty_1.configureActionHandler)(context, actions_1.SetKeyboardPointerRenderPositionAction.KIND, keyboard_pointer_1.KeyboardPointer);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, edge_autocomplete_palette_1.EdgeAutocompletePalette);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IDefaultTool, edge_autocomplete_tool_1.EdgeAutocompletePaletteTool);
    (0, sprotty_1.configureActionHandler)(context, action_2.EnableKeyboardGridAction.KIND, keyboard_grid_1.KeyboardGrid);
    (0, sprotty_1.configureActionHandler)(context, action_2.KeyboardGridCellSelectedAction.KIND, keyboard_pointer_1.KeyboardPointer);
    (0, sprotty_1.configureActionHandler)(context, sprotty_1.TriggerEdgeCreationAction.KIND, edge_autocomplete_palette_1.EdgeAutocompletePalette);
    (0, sprotty_1.configureActionHandler)(context, action_1.SetEdgeTargetSelectionAction.KIND, edge_autocomplete_palette_1.EdgeAutocompletePalette);
    (0, sprotty_1.bindAsService)(context, sprotty_1.TYPES.IUIExtension, keyboard_grid_search_palette_1.GridSearchPalette);
}
//# sourceMappingURL=keyboard-pointer-module.js.map