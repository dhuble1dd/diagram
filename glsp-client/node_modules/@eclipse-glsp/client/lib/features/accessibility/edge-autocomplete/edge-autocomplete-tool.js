"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EdgeAutocompletePaletteTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeAutocompletePaletteKeyListener = exports.EdgeAutocompletePaletteTool = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const edge_autocomplete_palette_1 = require("./edge-autocomplete-palette");
let EdgeAutocompletePaletteTool = EdgeAutocompletePaletteTool_1 = class EdgeAutocompletePaletteTool {
    constructor() {
        this.keyListener = new EdgeAutocompletePaletteKeyListener();
    }
    get id() {
        return EdgeAutocompletePaletteTool_1.ID;
    }
    enable() {
        this.keyTool.register(this.keyListener);
    }
    disable() {
        this.keyTool.deregister(this.keyListener);
    }
};
exports.EdgeAutocompletePaletteTool = EdgeAutocompletePaletteTool;
EdgeAutocompletePaletteTool.ID = 'glsp.edge-autocomplete-palette-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], EdgeAutocompletePaletteTool.prototype, "keyTool", void 0);
exports.EdgeAutocompletePaletteTool = EdgeAutocompletePaletteTool = EdgeAutocompletePaletteTool_1 = __decorate([
    (0, inversify_1.injectable)()
], EdgeAutocompletePaletteTool);
class EdgeAutocompletePaletteKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        if ((0, sprotty_1.matchesKeystroke)(event, 'Escape')) {
            return [
                sprotty_1.SetUIExtensionVisibilityAction.create({
                    extensionId: edge_autocomplete_palette_1.EdgeAutocompletePaletteMetadata.ID,
                    visible: false,
                    contextElementsId: []
                })
            ];
        }
        return [];
    }
}
exports.EdgeAutocompletePaletteKeyListener = EdgeAutocompletePaletteKeyListener;
//# sourceMappingURL=edge-autocomplete-tool.js.map