"use strict";
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var SearchAutocompletePaletteTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchAutocompletePaletteKeyListener = exports.SearchAutocompletePaletteTool = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const messages_1 = require("../../../base/messages");
const base_tools_1 = require("../../tools/base-tools");
const search_palette_1 = require("./search-palette");
let SearchAutocompletePaletteTool = SearchAutocompletePaletteTool_1 = class SearchAutocompletePaletteTool extends base_tools_1.BaseTool {
    constructor() {
        super(...arguments);
        this.keyListener = new SearchAutocompletePaletteKeyListener(this);
    }
    get id() {
        return SearchAutocompletePaletteTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.keyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(SearchAutocompletePaletteTool_1.TOKEN, [
            {
                shortcuts: ['CTRL', 'F'],
                description: messages_1.messages.search.shortcut_activate,
                group: messages_1.messages.shortcut.group_search,
                position: 0
            }
        ])));
    }
};
exports.SearchAutocompletePaletteTool = SearchAutocompletePaletteTool;
SearchAutocompletePaletteTool.ID = 'glsp.search-autocomplete-palette-tool';
SearchAutocompletePaletteTool.TOKEN = Symbol.for(SearchAutocompletePaletteTool_1.ID);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], SearchAutocompletePaletteTool.prototype, "shortcutManager", void 0);
exports.SearchAutocompletePaletteTool = SearchAutocompletePaletteTool = SearchAutocompletePaletteTool_1 = __decorate([
    (0, inversify_1.injectable)()
], SearchAutocompletePaletteTool);
class SearchAutocompletePaletteKeyListener extends sprotty_1.KeyListener {
    constructor(tool) {
        super();
        this.tool = tool;
    }
    keyDown(element, event) {
        if (this.matchesSearchActivateKeystroke(event)) {
            return [
                sprotty_1.SetUIExtensionVisibilityAction.create({
                    extensionId: search_palette_1.SearchAutocompletePalette.ID,
                    visible: true
                })
            ];
        }
        return [];
    }
    matchesSearchActivateKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyF', 'ctrl');
    }
}
exports.SearchAutocompletePaletteKeyListener = SearchAutocompletePaletteKeyListener;
//# sourceMappingURL=search-tool.js.map