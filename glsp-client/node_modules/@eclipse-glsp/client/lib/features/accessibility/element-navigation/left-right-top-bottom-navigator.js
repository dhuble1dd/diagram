"use strict";
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeftToRightTopToBottomElementNavigator = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const model_1 = require("../../../model");
const gmodel_util_1 = require("../../../utils/gmodel-util");
let LeftToRightTopToBottomElementNavigator = class LeftToRightTopToBottomElementNavigator {
    previous(root, current, previousCurrent, predicate = () => true) {
        const elements = this.getElements(root, predicate);
        if (current === undefined) {
            return elements.length > 0 ? elements[0] : undefined;
        }
        return elements[this.getPreviousIndex(current, elements) % elements.length];
    }
    next(root, current, previousCurrent, predicate = () => true) {
        const elements = this.getElements(root, predicate);
        if (current === undefined) {
            return elements.length > 0 ? elements[0] : undefined;
        }
        return elements[this.getNextIndex(current, elements) % elements.length];
    }
    getElements(root, predicate) {
        const elements = (0, sprotty_1.toArray)(root.index.all().filter(e => (0, gmodel_util_1.isSelectableAndBoundsAware)(e)));
        return elements.sort((a, b) => this.compare(a, b)).filter(predicate);
    }
    getNextIndex(current, elements) {
        for (let index = 0; index < elements.length; index++) {
            if (this.compare(elements[index], current) > 0) {
                return index;
            }
        }
        return 0;
    }
    getPreviousIndex(current, elements) {
        for (let index = elements.length - 1; index >= 0; index--) {
            if (this.compare(elements[index], current) < 0) {
                return index;
            }
        }
        return elements.length - 1;
    }
    compare(one, other) {
        var _a, _b;
        let positionOne = undefined;
        let positionOther = undefined;
        if (one instanceof model_1.GEdge && (0, gmodel_util_1.isRoutable)(one)) {
            positionOne = (_a = (0, gmodel_util_1.calcElementAndRoute)(one, this.edgeRouterRegistry).newRoutingPoints) === null || _a === void 0 ? void 0 : _a[0];
        }
        if (other instanceof model_1.GEdge && (0, gmodel_util_1.isRoutable)(other)) {
            positionOther = (_b = (0, gmodel_util_1.calcElementAndRoute)(other, this.edgeRouterRegistry).newRoutingPoints) === null || _b === void 0 ? void 0 : _b[0];
        }
        const boundsOne = (0, sprotty_1.findParentByFeature)(one, gmodel_util_1.isSelectableAndBoundsAware);
        const boundsOther = (0, sprotty_1.findParentByFeature)(other, gmodel_util_1.isSelectableAndBoundsAware);
        if (positionOne === undefined && boundsOne) {
            positionOne = boundsOne.bounds;
        }
        if (positionOther === undefined && boundsOther) {
            positionOther = boundsOther.bounds;
        }
        if (positionOne && positionOther) {
            if (positionOne.y !== positionOther.y) {
                return positionOne.y - positionOther.y;
            }
            if (positionOne.x !== positionOther.x) {
                return positionOne.x - positionOther.x;
            }
        }
        return 0;
    }
};
exports.LeftToRightTopToBottomElementNavigator = LeftToRightTopToBottomElementNavigator;
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], LeftToRightTopToBottomElementNavigator.prototype, "edgeRouterRegistry", void 0);
exports.LeftToRightTopToBottomElementNavigator = LeftToRightTopToBottomElementNavigator = __decorate([
    (0, inversify_1.injectable)()
], LeftToRightTopToBottomElementNavigator);
//# sourceMappingURL=left-right-top-bottom-navigator.js.map