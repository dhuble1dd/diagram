"use strict";
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ElementNavigatorTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementNavigatorKeyListener = exports.ElementNavigatorTool = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const messages_1 = require("../../../base/messages");
const available_shortcuts_tool_1 = require("../../../base/shortcuts/available-shortcuts-tool");
const tool_1 = require("../../../base/tool-manager/tool");
const model_1 = require("../../../model");
const base_tools_1 = require("../../tools/base-tools");
const reposition_1 = require("../../viewport/reposition");
const search_tool_1 = require("../search/search-tool");
const toast_handler_1 = require("../toast/toast-handler");
let ElementNavigatorTool = ElementNavigatorTool_1 = class ElementNavigatorTool extends base_tools_1.BaseTool {
    constructor() {
        super(...arguments);
        this.elementNavigatorKeyListener = new ElementNavigatorKeyListener(this);
    }
    get id() {
        return ElementNavigatorTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.elementNavigatorKeyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(ElementNavigatorTool_1.TOKEN, [
            {
                shortcuts: ['ALT', 'N'],
                description: messages_1.messages.navigation.shortcut_local_mode,
                group: messages_1.messages.shortcut.group_navigation,
                position: 0
            },
            {
                shortcuts: ['N'],
                description: messages_1.messages.navigation.shortcut_global_mode,
                group: messages_1.messages.shortcut.group_navigation,
                position: 1
            }
        ])));
    }
};
exports.ElementNavigatorTool = ElementNavigatorTool;
ElementNavigatorTool.ID = 'glsp.diagram-navigation';
ElementNavigatorTool.TOKEN = Symbol.for(ElementNavigatorTool_1.ID);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Object)
], ElementNavigatorTool.prototype, "shortcutManager", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IElementNavigator),
    __metadata("design:type", Object)
], ElementNavigatorTool.prototype, "elementNavigator", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILocalElementNavigator),
    __metadata("design:type", Object)
], ElementNavigatorTool.prototype, "localElementNavigator", void 0);
exports.ElementNavigatorTool = ElementNavigatorTool = ElementNavigatorTool_1 = __decorate([
    (0, inversify_1.injectable)()
], ElementNavigatorTool);
var NavigationMode;
(function (NavigationMode) {
    NavigationMode["POSITION"] = "position";
    NavigationMode["DEFAULT"] = "default";
    NavigationMode["NONE"] = "none";
})(NavigationMode || (NavigationMode = {}));
class ElementNavigatorKeyListener extends sprotty_1.KeyListener {
    constructor(tool) {
        super();
        this.tool = tool;
        this.mode = NavigationMode.NONE;
        this.token = ElementNavigatorKeyListener.name;
    }
    keyDown(element, event) {
        this.resetOnEscape(event, element);
        if (this.getSelectedElements(element.root).length > 0) {
            if (!this.triggerPositionNavigationOnEvent(event, element)) {
                this.triggerDefaultNavigationOnEvent(event, element);
            }
            return this.navigate(element, event);
        }
        this.resetPositionNavigationOnEvent(event, element);
        this.resetDefaultNavigationOnEvent(event, element);
        return [];
    }
    resetOnEscape(event, element) {
        var _a, _b;
        if (this.mode !== NavigationMode.NONE && this.matchesDeactivateNavigationMode(event)) {
            (_b = (_a = this.navigator) === null || _a === void 0 ? void 0 : _a.clean) === null || _b === void 0 ? void 0 : _b.call(_a, element.root);
            this.clean();
            if (this.mode === NavigationMode.POSITION) {
                this.tool.dispatchActions([
                    tool_1.EnableDefaultToolsAction.create(),
                    toast_handler_1.ShowToastMessageAction.createWithTimeout({
                        id: Symbol.for(ElementNavigatorKeyListener.name),
                        message: messages_1.messages.navigation.local_navigation_mode_deactivated
                    })
                ]);
            }
            else if (this.mode === NavigationMode.DEFAULT) {
                this.tool.dispatchActions([
                    tool_1.EnableDefaultToolsAction.create(),
                    toast_handler_1.ShowToastMessageAction.createWithTimeout({
                        id: Symbol.for(ElementNavigatorKeyListener.name),
                        message: messages_1.messages.navigation.default_navigation_mode_deactivated
                    })
                ]);
            }
            this.mode = NavigationMode.NONE;
        }
    }
    triggerPositionNavigationOnEvent(event, element) {
        if (this.matchesActivatePositionNavigation(event)) {
            if (this.mode !== NavigationMode.POSITION) {
                this.clean();
                this.tool.dispatchActions([
                    tool_1.EnableToolsAction.create([ElementNavigatorTool.ID, search_tool_1.SearchAutocompletePaletteTool.ID, available_shortcuts_tool_1.AvailableShortcutsTool.ID]),
                    toast_handler_1.ShowToastMessageAction.create({
                        id: Symbol.for(ElementNavigatorKeyListener.name),
                        message: messages_1.messages.navigation.local_navigation_mode_activated
                    })
                ]);
                this.navigator = this.tool.elementNavigator;
                this.mode = NavigationMode.POSITION;
            }
            else {
                this.resetPositionNavigationOnEvent(event, element);
            }
            return true;
        }
        return false;
    }
    resetPositionNavigationOnEvent(event, element) {
        var _a, _b;
        if (this.mode === NavigationMode.POSITION && this.matchesActivatePositionNavigation(event)) {
            (_b = (_a = this.navigator) === null || _a === void 0 ? void 0 : _a.clean) === null || _b === void 0 ? void 0 : _b.call(_a, element.root);
            this.clean();
            this.mode = NavigationMode.NONE;
            this.tool.dispatchActions([
                tool_1.EnableDefaultToolsAction.create(),
                toast_handler_1.ShowToastMessageAction.createWithTimeout({
                    id: Symbol.for(ElementNavigatorKeyListener.name),
                    message: messages_1.messages.navigation.local_navigation_mode_deactivated
                })
            ]);
        }
    }
    triggerDefaultNavigationOnEvent(event, element) {
        if (this.matchesActivateDefaultNavigation(event)) {
            if (this.mode !== NavigationMode.DEFAULT) {
                this.clean();
                this.tool.dispatchActions([
                    tool_1.EnableToolsAction.create([ElementNavigatorTool.ID, search_tool_1.SearchAutocompletePaletteTool.ID, available_shortcuts_tool_1.AvailableShortcutsTool.ID]),
                    toast_handler_1.ShowToastMessageAction.create({
                        id: Symbol.for(ElementNavigatorKeyListener.name),
                        message: messages_1.messages.navigation.default_navigation_mode_activated
                    })
                ]);
                this.navigator = this.tool.localElementNavigator;
                this.mode = NavigationMode.DEFAULT;
            }
            else {
                this.resetDefaultNavigationOnEvent(event, element);
            }
            return true;
        }
        return false;
    }
    resetDefaultNavigationOnEvent(event, element) {
        var _a, _b;
        if (this.mode === NavigationMode.DEFAULT && this.matchesActivateDefaultNavigation(event)) {
            (_b = (_a = this.navigator) === null || _a === void 0 ? void 0 : _a.clean) === null || _b === void 0 ? void 0 : _b.call(_a, element.root);
            this.clean();
            this.mode = NavigationMode.NONE;
            this.tool.dispatchActions([
                tool_1.EnableDefaultToolsAction.create(),
                toast_handler_1.ShowToastMessageAction.createWithTimeout({
                    id: Symbol.for(ElementNavigatorKeyListener.name),
                    message: messages_1.messages.navigation.default_navigation_mode_deactivated
                })
            ]);
        }
    }
    navigate(element, event) {
        var _a, _b, _c, _d;
        const selected = this.getSelectedElements(element.root);
        const current = selected.length > 0 ? selected[0] : undefined;
        if (this.mode !== NavigationMode.NONE && this.navigator !== undefined && current !== undefined && (0, sprotty_1.isBoundsAware)(current)) {
            (_b = (_a = this.navigator).clean) === null || _b === void 0 ? void 0 : _b.call(_a, current.root, current, this.previousNode);
            const target = this.navigateOnEvent(event, this.navigator, current);
            if (target !== undefined) {
                (_d = (_c = this.navigator).process) === null || _d === void 0 ? void 0 : _d.call(_c, current.root, current, target, this.previousNode);
            }
            const selectableTarget = target ? (0, sprotty_1.findParentByFeature)(target, sprotty_1.isSelectable) : undefined;
            if (selectableTarget) {
                if (!(current instanceof model_1.GEdge)) {
                    this.previousNode = current;
                }
                const deselectedElementsIDs = selected.map(e => e.id).filter(id => id !== selectableTarget.id);
                return [
                    sprotty_1.SelectAction.create({ selectedElementsIDs: [selectableTarget.id], deselectedElementsIDs }),
                    reposition_1.RepositionAction.create([selectableTarget.id])
                ];
            }
        }
        return [];
    }
    navigateOnEvent(event, navigator, current) {
        var _a, _b;
        if (this.matchesNavigatePrevious(event)) {
            return navigator.previous(current.root, current);
        }
        else if (this.matchesNavigateNext(event)) {
            return navigator.next(current.root, current);
        }
        else if (this.matchesNavigateUp(event)) {
            return (_a = navigator.up) === null || _a === void 0 ? void 0 : _a.call(navigator, current.root, current, this.previousNode);
        }
        else if (this.matchesNavigateDown(event)) {
            return (_b = navigator.down) === null || _b === void 0 ? void 0 : _b.call(navigator, current.root, current, this.previousNode);
        }
        return undefined;
    }
    clean() {
        this.previousNode = undefined;
        this.navigator = undefined;
    }
    getSelectedElements(root) {
        return (0, sprotty_1.toArray)(root.index.all().filter(e => (0, sprotty_1.isSelected)(e)));
    }
    matchesDeactivateNavigationMode(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'Escape');
    }
    matchesActivateDefaultNavigation(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyN');
    }
    matchesActivatePositionNavigation(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyN', 'alt');
    }
    matchesNavigatePrevious(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft');
    }
    matchesNavigateNext(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight');
    }
    matchesNavigateUp(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp');
    }
    matchesNavigateDown(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown');
    }
}
exports.ElementNavigatorKeyListener = ElementNavigatorKeyListener;
//# sourceMappingURL=diagram-navigation-tool.js.map