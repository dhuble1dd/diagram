"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridRevealNamedElementSuggestionProvider = exports.GridRevealEdgeSuggestionProvider = exports.GridSearchPalette = exports.GridSearchPaletteMetadata = void 0;
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
require("../../../../css/keyboard.css");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const search_palette_1 = require("../search/search-palette");
const constants_1 = require("./constants");
var GridSearchPaletteMetadata;
(function (GridSearchPaletteMetadata) {
    GridSearchPaletteMetadata.ID = 'grid-search-palette';
})(GridSearchPaletteMetadata || (exports.GridSearchPaletteMetadata = GridSearchPaletteMetadata = {}));
let GridSearchPalette = class GridSearchPalette extends search_palette_1.SearchAutocompletePalette {
    id() {
        return GridSearchPaletteMetadata.ID;
    }
    getSuggestionProviders(root, input) {
        return [new GridRevealNamedElementSuggestionProvider(), new GridRevealEdgeSuggestionProvider()];
    }
};
exports.GridSearchPalette = GridSearchPalette;
exports.GridSearchPalette = GridSearchPalette = __decorate([
    (0, inversify_1.injectable)()
], GridSearchPalette);
class GridRevealEdgeSuggestionProvider extends search_palette_1.RevealEdgeElementAutocompleteSuggestionProvider {
    getActions(edge) {
        return [
            ...super.getActions(edge),
            sprotty_1.SetUIExtensionVisibilityAction.create({
                extensionId: constants_1.KeyboardGridMetadata.ID,
                visible: true
            })
        ];
    }
}
exports.GridRevealEdgeSuggestionProvider = GridRevealEdgeSuggestionProvider;
class GridRevealNamedElementSuggestionProvider extends search_palette_1.RevealNamedElementAutocompleteSuggestionProvider {
    getActions(nameable) {
        return [
            ...super.getActions(nameable),
            sprotty_1.SetUIExtensionVisibilityAction.create({
                extensionId: constants_1.KeyboardGridMetadata.ID,
                visible: true
            })
        ];
    }
}
exports.GridRevealNamedElementSuggestionProvider = GridRevealNamedElementSuggestionProvider;
//# sourceMappingURL=keyboard-grid-search-palette.js.map