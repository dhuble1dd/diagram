"use strict";
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Toast_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toast = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const editor_context_service_1 = require("../../../base/editor-context-service");
const ui_extension_1 = require("../../../base/ui-extension/ui-extension");
const toast_handler_1 = require("./toast-handler");
/**
 * This extension is used to create customized user notifications as toast messages.
 */
let Toast = Toast_1 = class Toast extends ui_extension_1.GLSPAbstractUIExtension {
    constructor() {
        super(...arguments);
        this.messages = {};
    }
    id() {
        return Toast_1.ID;
    }
    containerClass() {
        return Toast_1.ID;
    }
    initializeContents(_containerElement) {
        this.render();
    }
    handle(action) {
        if (toast_handler_1.ShowToastMessageAction.is(action)) {
            this.messages[action.options.id] = action.options;
            this.render();
            if (action.options.timeout) {
                setTimeout(() => {
                    this.delete(action.options.id);
                }, action.options.timeout);
            }
        }
        else if (toast_handler_1.HideToastAction.is(action)) {
            if (action.options.timeout) {
                setTimeout(() => {
                    this.delete(action.options.id);
                }, action.options.timeout);
            }
            else {
                this.delete(action.options.id);
            }
        }
    }
    render() {
        if (this.containerElement === undefined) {
            return;
        }
        this.containerElement.innerHTML = '';
        this.values(this.messages).forEach(message => {
            this.containerElement.appendChild(this.createToastMessage(message));
        });
    }
    delete(id) {
        delete this.messages[id];
        this.render();
    }
    createToastMessage(option) {
        const cell = document.createElement('div');
        cell.classList.add('toast-cell', `toast-column-${option.position}`);
        const container = document.createElement('div');
        container.classList.add('toast-container');
        const text = document.createElement('span');
        text.textContent = option.message;
        container.appendChild(text);
        cell.appendChild(container);
        return cell;
    }
    preInitialize() {
        this.actionDispatcher.dispatch(sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: Toast_1.ID, visible: true }));
    }
    values(obj) {
        return Object.getOwnPropertySymbols(obj).map(s => obj[s]);
    }
};
exports.Toast = Toast;
Toast.ID = 'toast';
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], Toast.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], Toast.prototype, "editorContext", void 0);
exports.Toast = Toast = Toast_1 = __decorate([
    (0, inversify_1.injectable)()
], Toast);
//# sourceMappingURL=toast-tool.js.map