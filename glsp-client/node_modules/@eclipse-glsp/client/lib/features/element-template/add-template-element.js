"use strict";
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddTemplateElementsFeedbackCommand = exports.AddTemplateElementsAction = void 0;
exports.getTemplateElementId = getTemplateElementId;
exports.templateToSchema = templateToSchema;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const feedback_command_1 = require("../../base/feedback/feedback-command");
const gmodel_util_1 = require("../../utils/gmodel-util");
const local_bounds_1 = require("../bounds/local-bounds");
var AddTemplateElementsAction;
(function (AddTemplateElementsAction) {
    AddTemplateElementsAction.KIND = 'addTemplateElements';
    function create(options) {
        return {
            kind: AddTemplateElementsAction.KIND,
            ...options
        };
    }
    AddTemplateElementsAction.create = create;
})(AddTemplateElementsAction || (exports.AddTemplateElementsAction = AddTemplateElementsAction = {}));
function getTemplateElementId(template) {
    return typeof template === 'string' ? `${template}_feedback` : template.id;
}
let AddTemplateElementsFeedbackCommand = class AddTemplateElementsFeedbackCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const templateElements = this.action.templates
            .map(template => templateToSchema(template, context))
            .filter(gmodel_util_1.isNotUndefined)
            .map(schema => context.modelFactory.createElement(schema))
            .map(element => this.applyRootCssClasses(element, this.action.addClasses, this.action.removeClasses));
        templateElements.forEach(templateElement => context.root.add(templateElement));
        const templateElementIDs = templateElements.map(element => element.id);
        return local_bounds_1.LocalRequestBoundsAction.fromCommand(context, this.actionDispatcher, this.action, templateElementIDs);
    }
    applyRootCssClasses(element, addClasses, removeClasses) {
        element.cssClasses = modifyCssClasses(element.cssClasses, addClasses, removeClasses);
        return element;
    }
};
exports.AddTemplateElementsFeedbackCommand = AddTemplateElementsFeedbackCommand;
AddTemplateElementsFeedbackCommand.KIND = AddTemplateElementsAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], AddTemplateElementsFeedbackCommand.prototype, "actionDispatcher", void 0);
exports.AddTemplateElementsFeedbackCommand = AddTemplateElementsFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], AddTemplateElementsFeedbackCommand);
function templateToSchema(template, context) {
    if (typeof template === 'string') {
        const element = context.root.index.getById(template);
        const schema = element ? context.modelFactory.createSchema(element) : undefined;
        if (schema) {
            adaptSchemaIds(schema);
        }
        return schema;
    }
    return template;
}
function adaptSchemaIds(schema) {
    var _a;
    schema.id = getTemplateElementId(schema.id);
    (_a = schema.children) === null || _a === void 0 ? void 0 : _a.forEach(child => adaptSchemaIds(child));
    return schema;
}
function modifyCssClasses(source, toAdd, toRemove) {
    const classes = source !== null && source !== void 0 ? source : [];
    if (toAdd) {
        (0, sprotty_1.distinctAdd)(classes, ...toAdd);
    }
    if (toRemove) {
        (0, sprotty_1.remove)(classes, ...toRemove);
    }
    return classes;
}
//# sourceMappingURL=add-template-element.js.map