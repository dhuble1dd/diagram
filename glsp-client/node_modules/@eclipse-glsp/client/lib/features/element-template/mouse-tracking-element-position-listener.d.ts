/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, DisposableCollection, GModelElement, GModelRoot, Point } from '@eclipse-glsp/sprotty';
import { DragAwareMouseListener } from '../../base/drag-aware-mouse-listener';
import { EditorContextService } from '../../base/editor-context-service';
import { FeedbackEmitter } from '../../base/feedback/feedback-emitter';
import { MoveableElement } from '../../utils/gmodel-util';
import { FeedbackAwareTool } from '../tools/base-tools';
import { IChangeBoundsManager } from '../tools/change-bounds/change-bounds-manager';
import { ChangeBoundsTracker, TrackedMove } from '../tools/change-bounds/change-bounds-tracker';
export interface PositioningTool extends FeedbackAwareTool {
    readonly changeBoundsManager: IChangeBoundsManager;
}
export declare class MouseTrackingElementPositionListener extends DragAwareMouseListener {
    protected elementId: string;
    protected tool: PositioningTool;
    protected cursorPosition: 'top-left' | 'middle';
    protected editorContext?: EditorContextService | undefined;
    protected moveGhostFeedback: FeedbackEmitter;
    protected tracker: ChangeBoundsTracker;
    protected toDispose: DisposableCollection;
    constructor(elementId: string, tool: PositioningTool, cursorPosition?: 'top-left' | 'middle', editorContext?: EditorContextService | undefined);
    protected getTrackedElement(target: GModelElement, event: MouseEvent): MoveableElement | undefined;
    mouseMove(ctx: GModelElement, event: MouseEvent): Action[];
    protected initialize(element: MoveableElement, target: GModelElement, event: MouseEvent): void;
    protected initializeElementPosition(element: MoveableElement, target: GModelElement, event: MouseEvent): Point;
    protected addMoveFeedback(move: TrackedMove, ctx: GModelElement, event: MouseEvent): void;
    protected modelRootChanged(root: Readonly<GModelRoot>): void;
    dispose(): void;
}
//# sourceMappingURL=mouse-tracking-element-position-listener.d.ts.map