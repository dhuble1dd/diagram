"use strict";
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataPlacer = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const model_1 = require("../../model");
let MetadataPlacer = class MetadataPlacer {
    decorate(vnode, element) {
        if (element instanceof sprotty_1.GModelRoot) {
            (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-api', true);
        }
        (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-type', element.type);
        if (element instanceof sprotty_1.GChildElement) {
            (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-parent-id', this.domHelper.createUniqueDOMElementId(element.parent));
        }
        if (element instanceof model_1.GEdge) {
            if (element.source !== undefined) {
                (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-edge-source-id', this.domHelper.createUniqueDOMElementId(element.source));
            }
            if (element.target !== undefined) {
                (0, sprotty_1.setAttr)(vnode, 'data-svg-metadata-edge-target-id', this.domHelper.createUniqueDOMElementId(element.target));
            }
        }
        return vnode;
    }
    postUpdate() {
        // empty
    }
};
exports.MetadataPlacer = MetadataPlacer;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.DOMHelper),
    __metadata("design:type", sprotty_1.DOMHelper)
], MetadataPlacer.prototype, "domHelper", void 0);
exports.MetadataPlacer = MetadataPlacer = __decorate([
    (0, inversify_1.injectable)()
], MetadataPlacer);
//# sourceMappingURL=metadata-placer.js.map