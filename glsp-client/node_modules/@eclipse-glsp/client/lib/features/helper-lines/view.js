"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectionBoundsView = exports.HelperLineView = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
let HelperLineView = class HelperLineView extends sprotty_1.ShapeView {
    render(model, _context) {
        return ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("line", { "data-alignment": model.lineType, x1: model.startPoint.x, y1: model.startPoint.y, x2: model.endPoint.x, y2: model.endPoint.y, "class-helper-line": true })));
    }
};
exports.HelperLineView = HelperLineView;
exports.HelperLineView = HelperLineView = __decorate([
    (0, inversify_1.injectable)()
], HelperLineView);
let SelectionBoundsView = class SelectionBoundsView extends sprotty_1.ShapeView {
    render(model, context, args) {
        if (!this.isVisible(model, context)) {
            return undefined;
        }
        return ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("rect", { "class-selection-bounds": true, x: 0, y: 0, width: Math.max(model.size.width, 0), height: Math.max(model.size.height, 0) })));
    }
};
exports.SelectionBoundsView = SelectionBoundsView;
exports.SelectionBoundsView = SelectionBoundsView = __decorate([
    (0, inversify_1.injectable)()
], SelectionBoundsView);
//# sourceMappingURL=view.js.map