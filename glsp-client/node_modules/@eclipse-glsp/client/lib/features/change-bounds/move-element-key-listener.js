"use strict";
/********************************************************************************
 * Copyright (c) 2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveElementKeyListener = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const grid_1 = require("../grid/grid");
const move_element_action_1 = require("./move-element-action");
class MoveElementKeyListener extends sprotty_1.KeyListener {
    constructor(selectionService, changeBoundsManager, grid = grid_1.Grid.DEFAULT) {
        super();
        this.selectionService = selectionService;
        this.changeBoundsManager = changeBoundsManager;
        this.grid = grid;
    }
    keyDown(_element, event) {
        const selectedElementIds = this.selectionService
            .getSelectedElements()
            .filter(element => (0, sprotty_1.isMoveable)(element))
            .map(element => element.id);
        const snap = this.changeBoundsManager.usePositionSnap(event);
        const offsetX = snap ? this.grid.x : 1;
        const offsetY = snap ? this.grid.y : 1;
        if (selectedElementIds.length > 0) {
            if (this.matchesMoveUpKeystroke(event)) {
                return [move_element_action_1.MoveElementRelativeAction.create({ elementIds: selectedElementIds, moveX: 0, moveY: -offsetY, snap })];
            }
            else if (this.matchesMoveDownKeystroke(event)) {
                return [move_element_action_1.MoveElementRelativeAction.create({ elementIds: selectedElementIds, moveX: 0, moveY: offsetY, snap })];
            }
            else if (this.matchesMoveRightKeystroke(event)) {
                return [move_element_action_1.MoveElementRelativeAction.create({ elementIds: selectedElementIds, moveX: offsetX, moveY: 0, snap })];
            }
            else if (this.matchesMoveLeftKeystroke(event)) {
                return [move_element_action_1.MoveElementRelativeAction.create({ elementIds: selectedElementIds, moveX: -offsetX, moveY: 0, snap })];
            }
        }
        return [];
    }
    matchesMoveUpKeystroke(event) {
        const unsnap = this.changeBoundsManager.unsnapModifier();
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp') || (!!unsnap && (0, sprotty_1.matchesKeystroke)(event, 'ArrowUp', unsnap));
    }
    matchesMoveDownKeystroke(event) {
        const unsnap = this.changeBoundsManager.unsnapModifier();
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown') || (!!unsnap && (0, sprotty_1.matchesKeystroke)(event, 'ArrowDown', unsnap));
    }
    matchesMoveRightKeystroke(event) {
        const unsnap = this.changeBoundsManager.unsnapModifier();
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight') || (!!unsnap && (0, sprotty_1.matchesKeystroke)(event, 'ArrowRight', unsnap));
    }
    matchesMoveLeftKeystroke(event) {
        const unsnap = this.changeBoundsManager.unsnapModifier();
        return (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft') || (!!unsnap && (0, sprotty_1.matchesKeystroke)(event, 'ArrowLeft', unsnap));
    }
}
exports.MoveElementKeyListener = MoveElementKeyListener;
//# sourceMappingURL=move-element-key-listener.js.map