"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PositionSnapper = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const model_1 = require("../helper-lines/model");
/**
 * @deprecated The use of this class is discouraged. Use the {@link ChangeBoundsManager.createTracker}
 * instead which centralized a few aspects of the tracking.
 */
let PositionSnapper = class PositionSnapper {
    constructor(snapper, helperLineManager) {
        this.snapper = snapper;
        this.helperLineManager = helperLineManager;
    }
    snapPosition(position, element, isSnap = true) {
        return isSnap && this.snapper ? this.snapper.snap(position, element) : { x: position.x, y: position.y };
    }
    snapDelta(positionDelta, element, isSnap, directions) {
        const delta = this.snapPosition(positionDelta, element, isSnap);
        const minimumDelta = this.getMinimumDelta(element, isSnap, directions);
        if (!minimumDelta) {
            return delta;
        }
        delta.x = Math.abs(delta.x) >= minimumDelta.x ? delta.x : 0;
        delta.y = Math.abs(delta.y) >= minimumDelta.y ? delta.y : 0;
        return delta;
    }
    getMinimumDelta(target, isSnap, directions) {
        return this.getHelperLineMinimum(target, isSnap, directions);
    }
    getHelperLineMinimum(target, isSnap, directions) {
        if (!this.helperLineManager) {
            return undefined;
        }
        const helperLines = target.root.children.filter(child => (0, model_1.isHelperLine)(child));
        if (helperLines.length === 0) {
            return undefined;
        }
        const minimum = { x: 0, y: 0 };
        if (directions.includes(model_1.Direction.Left) && helperLines.some(line => line.isLeft || line.isCenter)) {
            minimum.x = this.helperLineManager.getMinimumMoveDelta(target, isSnap, model_1.Direction.Left);
        }
        else if (directions.includes(model_1.Direction.Right) && helperLines.some(line => line.isRight || line.isCenter)) {
            minimum.x = this.helperLineManager.getMinimumMoveDelta(target, isSnap, model_1.Direction.Right);
        }
        if (directions.includes(model_1.Direction.Up) && helperLines.some(line => line.isTop || line.isMiddle)) {
            minimum.y = this.helperLineManager.getMinimumMoveDelta(target, isSnap, model_1.Direction.Up);
        }
        else if (directions.includes(model_1.Direction.Down) && helperLines.some(line => line.isBottom || line.isMiddle)) {
            minimum.y = this.helperLineManager.getMinimumMoveDelta(target, isSnap, model_1.Direction.Down);
        }
        return minimum;
    }
};
exports.PositionSnapper = PositionSnapper;
exports.PositionSnapper = PositionSnapper = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.optional)()),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.ISnapper)),
    __param(1, (0, inversify_1.optional)()),
    __param(1, (0, inversify_1.inject)(sprotty_1.TYPES.IHelperLineManager)),
    __metadata("design:paramtypes", [Object, Object])
], PositionSnapper);
//# sourceMappingURL=position-snapper.js.map