"use strict";
/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DefaultResizeKeyTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultResizeKeyTool = exports.DefaultResizeKeyListener = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const messages_1 = require("../../../base/messages");
const selection_service_1 = require("../../../base/selection-service");
const tool_1 = require("../../../base/tool-manager/tool");
const base_tools_1 = require("../../tools/base-tools");
const model_1 = require("../model");
const resize_tool_1 = require("./resize-tool");
let DefaultResizeKeyListener = class DefaultResizeKeyListener extends sprotty_1.KeyListener {
    keyDown(element, event) {
        const selectedElementsIds = this.selectionService
            .getSelectedElements()
            .filter(model_1.isResizable)
            .map(e => e.id);
        if (selectedElementsIds.length > 0) {
            if (this.matchesActivateResizeModeKeystroke(event)) {
                return [tool_1.EnableToolsAction.create([resize_tool_1.ResizeKeyTool.ID])];
            }
        }
        return [];
    }
    matchesActivateResizeModeKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyA', 'alt');
    }
};
exports.DefaultResizeKeyListener = DefaultResizeKeyListener;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], DefaultResizeKeyListener.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], DefaultResizeKeyListener.prototype, "selectionService", void 0);
exports.DefaultResizeKeyListener = DefaultResizeKeyListener = __decorate([
    (0, inversify_1.injectable)()
], DefaultResizeKeyListener);
let DefaultResizeKeyTool = DefaultResizeKeyTool_1 = class DefaultResizeKeyTool extends base_tools_1.BaseEditTool {
    get id() {
        return DefaultResizeKeyTool_1.ID;
    }
    enable() {
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.keyListener), (0, messages_1.repeatOnMessagesUpdated)(() => this.shortcutManager.register(DefaultResizeKeyTool_1.TOKEN, [
            {
                shortcuts: ['ALT', 'A'],
                description: messages_1.messages.resize.shortcut_activate,
                group: messages_1.messages.shortcut.group_resize,
                position: 0
            }
        ])));
    }
};
exports.DefaultResizeKeyTool = DefaultResizeKeyTool;
DefaultResizeKeyTool.ID = 'glsp.default-resize-key-tool';
DefaultResizeKeyTool.TOKEN = Symbol.for(DefaultResizeKeyTool_1.name);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IShortcutManager),
    __metadata("design:type", Function)
], DefaultResizeKeyTool.prototype, "shortcutManager", void 0);
__decorate([
    (0, inversify_1.inject)(DefaultResizeKeyListener),
    __metadata("design:type", DefaultResizeKeyListener)
], DefaultResizeKeyTool.prototype, "keyListener", void 0);
exports.DefaultResizeKeyTool = DefaultResizeKeyTool = DefaultResizeKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], DefaultResizeKeyTool);
//# sourceMappingURL=resize-default-tool.js.map