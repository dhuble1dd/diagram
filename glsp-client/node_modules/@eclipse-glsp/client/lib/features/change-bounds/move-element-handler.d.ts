/********************************************************************************
 * Copyright (c) 2023-2025 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, ElementAndBounds, ElementMove, IActionDispatcher, IActionHandler, ICommand, ISnapper, Point } from '@eclipse-glsp/sprotty';
import { DebouncedFunc } from 'lodash';
import { EditorContextService } from '../../base/editor-context-service';
import { IFeedbackActionDispatcher } from '../../base/feedback/feedback-action-dispatcher';
import { FeedbackEmitter } from '../../base/feedback/feedback-emitter';
import { SelectableBoundsAware } from '../../utils/gmodel-util';
import { IMovementRestrictor } from '../change-bounds/movement-restrictor';
import { MoveElementRelativeAction } from './move-element-action';
/**
 * Action handler for moving elements.
 */
export declare class MoveElementHandler implements IActionHandler {
    protected editorContextService: EditorContextService;
    protected dispatcher: IActionDispatcher;
    protected feedbackDispatcher: IFeedbackActionDispatcher;
    readonly snapper?: ISnapper;
    readonly movementRestrictor?: IMovementRestrictor;
    protected debouncedChangeBounds?: DebouncedFunc<() => void>;
    protected moveFeedback: FeedbackEmitter;
    protected init(): void;
    handle(action: Action): void | Action | ICommand;
    protected handleMoveElement(action: MoveElementRelativeAction): void;
    protected getTargetBounds(element: SelectableBoundsAware, action: MoveElementRelativeAction): Point;
    protected scheduleChangeBounds(elementAndBounds: ElementAndBounds[]): void;
    protected toElementAndBounds(elementMoves: ElementMove[]): ElementAndBounds[];
}
//# sourceMappingURL=move-element-handler.d.ts.map