"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalComputedBoundsCommand = exports.LocalComputedBoundsAction = exports.LocalRequestBoundsAction = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const glsp_model_source_1 = require("../../base/model/glsp-model-source");
const layout_data_1 = require("./layout-data");
var LocalRequestBoundsAction;
(function (LocalRequestBoundsAction) {
    function is(object) {
        return sprotty_1.RequestBoundsAction.is(object) && !glsp_model_source_1.ServerAction.is(object) && (0, sprotty_1.hasArrayProp)(object, 'elementIDs', true);
    }
    LocalRequestBoundsAction.is = is;
    function create(newRoot, elementIDs) {
        return {
            ...sprotty_1.RequestBoundsAction.create(newRoot),
            elementIDs
        };
    }
    LocalRequestBoundsAction.create = create;
    function fromCommand({ root }, actionDispatcher, cause, elementIDs) {
        // do not modify the main model (modelChanged = false) but request local bounds calculation on hidden model
        actionDispatcher.dispatch(LocalRequestBoundsAction.create(root, elementIDs));
        return {
            model: root,
            modelChanged: false,
            cause
        };
    }
    LocalRequestBoundsAction.fromCommand = fromCommand;
})(LocalRequestBoundsAction || (exports.LocalRequestBoundsAction = LocalRequestBoundsAction = {}));
var LocalComputedBoundsAction;
(function (LocalComputedBoundsAction) {
    function is(object) {
        return sprotty_1.ComputedBoundsAction.is(object) && glsp_model_source_1.ServerAction.is(object);
    }
    LocalComputedBoundsAction.is = is;
    function mark(action) {
        // mimic: we mark the computed bounds action as coming from the server so it is not sent to the server and handled locally
        glsp_model_source_1.ServerAction.mark(action);
        return action;
    }
    LocalComputedBoundsAction.mark = mark;
})(LocalComputedBoundsAction || (exports.LocalComputedBoundsAction = LocalComputedBoundsAction = {}));
let LocalComputedBoundsCommand = class LocalComputedBoundsCommand extends sprotty_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        var _a, _b;
        if (LocalComputedBoundsAction.is(this.action)) {
            if (!this.viewerOptions.needsClientLayout) {
                return context.root;
            }
            // apply computed bounds from the hidden model and return updated model to render new main model
            this.computedBoundsApplicator.apply(context.root, this.action);
            (_a = this.action.layoutData) === null || _a === void 0 ? void 0 : _a.forEach(({ elementId, layoutData }) => {
                const element = context.root.index.getById(elementId);
                if (element !== undefined) {
                    layout_data_1.LayoutAware.setLayoutData(element, layoutData);
                }
            });
            return context.root;
        }
        (_b = this.action.layoutData) === null || _b === void 0 ? void 0 : _b.forEach(({ elementId, layoutData }) => {
            const element = context.root.index.getById(elementId);
            if (element !== undefined) {
                layout_data_1.LayoutAware.setLayoutData(element, layoutData);
            }
        });
        // computed bounds action from server -> we do not care and do not trigger any update of the main model
        return {
            model: context.root,
            modelChanged: false
        };
    }
    undo(context) {
        return context.root;
    }
    redo(context) {
        return context.root;
    }
};
exports.LocalComputedBoundsCommand = LocalComputedBoundsCommand;
LocalComputedBoundsCommand.KIND = sprotty_1.ComputedBoundsAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.ComputedBoundsApplicator),
    __metadata("design:type", sprotty_1.ComputedBoundsApplicator)
], LocalComputedBoundsCommand.prototype, "computedBoundsApplicator", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], LocalComputedBoundsCommand.prototype, "viewerOptions", void 0);
exports.LocalComputedBoundsCommand = LocalComputedBoundsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], LocalComputedBoundsCommand);
//# sourceMappingURL=local-bounds.js.map