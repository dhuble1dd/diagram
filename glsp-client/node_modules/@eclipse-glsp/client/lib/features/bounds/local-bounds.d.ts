/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, Command, CommandExecutionContext, CommandResult, CommandReturn, ComputedBoundsAction, ComputedBoundsApplicator, GModelRoot, GModelRootSchema, IActionDispatcher, RequestBoundsAction, ViewerOptions } from '@eclipse-glsp/sprotty';
import { ServerAction } from '../../base/model/glsp-model-source';
export interface LocalRequestBoundsAction extends RequestBoundsAction {
    elementIDs?: string[];
}
export declare namespace LocalRequestBoundsAction {
    function is(object: unknown): object is LocalRequestBoundsAction;
    function create(newRoot: GModelRoot, elementIDs?: string[]): LocalRequestBoundsAction;
    function create(newRoot: GModelRootSchema, elementIDs?: string[]): LocalRequestBoundsAction;
    function fromCommand({ root }: CommandExecutionContext, actionDispatcher: IActionDispatcher, cause?: Action, elementIDs?: string[]): CommandResult;
}
export declare namespace LocalComputedBoundsAction {
    function is(object: unknown): object is ComputedBoundsAction & ServerAction;
    function mark(action: ComputedBoundsAction): ComputedBoundsAction;
}
export declare class LocalComputedBoundsCommand extends Command {
    readonly action: ComputedBoundsAction;
    static readonly KIND: string;
    protected readonly computedBoundsApplicator: ComputedBoundsApplicator;
    protected readonly viewerOptions: ViewerOptions;
    constructor(action: ComputedBoundsAction);
    execute(context: CommandExecutionContext): GModelRoot | CommandResult;
    undo(context: CommandExecutionContext): CommandReturn;
    redo(context: CommandExecutionContext): CommandReturn;
}
//# sourceMappingURL=local-bounds.d.ts.map