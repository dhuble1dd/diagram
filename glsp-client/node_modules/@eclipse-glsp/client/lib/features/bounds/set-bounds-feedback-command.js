"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetBoundsFeedbackCommand = exports.SetBoundsFeedbackAction = void 0;
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const ranked_1 = require("../../base/ranked");
const local_bounds_1 = require("./local-bounds");
var SetBoundsFeedbackAction;
(function (SetBoundsFeedbackAction) {
    SetBoundsFeedbackAction.KIND = 'setBoundsFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, SetBoundsFeedbackAction.KIND);
    }
    SetBoundsFeedbackAction.is = is;
    function create(bounds) {
        return { kind: SetBoundsFeedbackAction.KIND, bounds };
    }
    SetBoundsFeedbackAction.create = create;
})(SetBoundsFeedbackAction || (exports.SetBoundsFeedbackAction = SetBoundsFeedbackAction = {}));
let SetBoundsFeedbackCommand = class SetBoundsFeedbackCommand extends sprotty_1.SetBoundsCommand {
    constructor() {
        super(...arguments);
        this.rank = ranked_1.Ranked.DEFAULT_RANK;
    }
    execute(context) {
        super.execute(context);
        // apply set bounds as layout options so that when we calculate the bounds they are considered by the layouter
        this.action.bounds.forEach(bounds => {
            var _a;
            const element = context.root.index.getById(bounds.elementId);
            if (element && (0, sprotty_1.isLayoutContainer)(element)) {
                const options = (_a = element.layoutOptions) !== null && _a !== void 0 ? _a : {};
                options.prefHeight = bounds.newSize.height;
                options.prefWidth = bounds.newSize.width;
                element.layoutOptions = options;
            }
        });
        const elementIDs = this.action.bounds.map(bounds => bounds.elementId);
        return local_bounds_1.LocalRequestBoundsAction.fromCommand(context, this.actionDispatcher, this.action, elementIDs);
    }
};
exports.SetBoundsFeedbackCommand = SetBoundsFeedbackCommand;
SetBoundsFeedbackCommand.KIND = SetBoundsFeedbackAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], SetBoundsFeedbackCommand.prototype, "actionDispatcher", void 0);
exports.SetBoundsFeedbackCommand = SetBoundsFeedbackCommand = __decorate([
    (0, inversify_1.injectable)()
], SetBoundsFeedbackCommand);
//# sourceMappingURL=set-bounds-feedback-command.js.map