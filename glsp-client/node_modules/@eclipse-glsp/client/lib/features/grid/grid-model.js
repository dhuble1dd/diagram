"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShowGridCommand = exports.ShowGridAction = void 0;
/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const feedback_command_1 = require("../../base/feedback/feedback-command");
const gmodel_util_1 = require("../../utils/gmodel-util");
var ShowGridAction;
(function (ShowGridAction) {
    ShowGridAction.KIND = 'showGrid';
    ShowGridAction.CSS_ROOT_CLASS = 'grid-background';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ShowGridAction.KIND) && (0, sprotty_1.hasBooleanProp)(object, 'show');
    }
    ShowGridAction.is = is;
    function create(options) {
        return {
            kind: ShowGridCommand.KIND,
            ...options
        };
    }
    ShowGridAction.create = create;
})(ShowGridAction || (exports.ShowGridAction = ShowGridAction = {}));
let ShowGridCommand = class ShowGridCommand extends feedback_command_1.FeedbackCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        return this.setGrid(context.root, this.action.show);
    }
    setGrid(root, show) {
        if (show) {
            (0, gmodel_util_1.addCssClasses)(root, [ShowGridAction.CSS_ROOT_CLASS]);
        }
        else {
            (0, gmodel_util_1.removeCssClasses)(root, [ShowGridAction.CSS_ROOT_CLASS]);
        }
        return root;
    }
};
exports.ShowGridCommand = ShowGridCommand;
ShowGridCommand.KIND = ShowGridAction.KIND;
exports.ShowGridCommand = ShowGridCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ShowGridCommand);
//# sourceMappingURL=grid-model.js.map