"use strict";
/********************************************************************************
 * Copyright (c) 2024-2025 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPCenterGridSnapper = exports.GridSnapper = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const grid_1 = require("./grid");
/**
 * A {@link ISnapper} implementation that snaps all elements onto a fixed gride size.
 * The default grid size is 10x10 pixel.
 * To configure a custom grid size  bind the `TYPES.ISnapper` service identifier
 * to constant value, e.g:
 *
 * ```ts
 * bind(TYPES.ISnapper).toConstantValue(new GridSnapper({ x: 25, y: 25 }));
 * ```
 *
 * or use the `Grid` to define the grid size more generically:
 * ```ts
 * bind(TYPES.Grid).toConstantValue({ x: 25, y: 25 });
 * bind(TYPES.ISnapper).to(GridSnapper);
 * ```
 */
let GridSnapper = class GridSnapper {
    constructor(grid = grid_1.Grid.DEFAULT) {
        this.grid = grid;
    }
    snap(position, element) {
        return sprotty_1.Point.snapToGrid(position, this.grid);
    }
};
exports.GridSnapper = GridSnapper;
exports.GridSnapper = GridSnapper = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.optional)()),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Grid)),
    __metadata("design:paramtypes", [Object])
], GridSnapper);
let GLSPCenterGridSnapper = class GLSPCenterGridSnapper extends sprotty_1.CenterGridSnapper {
    constructor(grid = grid_1.Grid.DEFAULT) {
        super();
        this.grid = grid;
    }
    get gridX() {
        return this.grid.x;
    }
    get gridY() {
        return this.grid.y;
    }
};
exports.GLSPCenterGridSnapper = GLSPCenterGridSnapper;
exports.GLSPCenterGridSnapper = GLSPCenterGridSnapper = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.optional)()),
    __param(0, (0, inversify_1.inject)(sprotty_1.TYPES.Grid)),
    __metadata("design:paramtypes", [Object])
], GLSPCenterGridSnapper);
//# sourceMappingURL=grid-snapper.js.map