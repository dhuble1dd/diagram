"use strict";
/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridManager = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const grid_1 = require("./grid");
const grid_model_1 = require("./grid-model");
/**
 * The default {@link IGridManager} implementation.
 * This class manages the visibility and behavior of a grid in the application.
 */
let GridManager = class GridManager {
    constructor() {
        this._gridVisible = false;
    }
    get isGridVisible() {
        return this._gridVisible;
    }
    init() {
        this.gridFeedback = this.feedbackDispatcher.createEmitter();
    }
    handle(action) {
        this.setGridVisible(action.show);
    }
    setGridVisible(visible) {
        if (this._gridVisible && !visible) {
            this._gridVisible = false;
            this.gridFeedback.dispose();
        }
        else if (!this._gridVisible && visible) {
            this._gridVisible = true;
            this.gridFeedback.add(grid_model_1.ShowGridAction.create({ show: true }), grid_model_1.ShowGridAction.create({ show: false })).submit();
        }
    }
    toggleGridVisible() {
        this.setGridVisible(!this._gridVisible);
    }
};
exports.GridManager = GridManager;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], GridManager.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    __metadata("design:type", Object)
], GridManager.prototype, "grid", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GridManager.prototype, "init", null);
exports.GridManager = GridManager = __decorate([
    (0, inversify_1.injectable)()
], GridManager);
//# sourceMappingURL=grid-manager.js.map