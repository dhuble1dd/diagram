"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsertIndicatorView = void 0;
/********************************************************************************
 * Copyright (c) 2024 Axon Ivy AG and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const argument_utils_1 = require("../../../utils/argument-utils");
const grid_1 = require("../../grid/grid");
const insert_indicator_1 = require("./insert-indicator");
let InsertIndicatorView = class InsertIndicatorView {
    render(model, context) {
        if (context.targetKind === 'hidden') {
            return undefined;
        }
        const size = this.getSize(model);
        const node = ((0, sprotty_1.svg)("g", null,
            (0, sprotty_1.svg)("polyline", { "class-sprotty-node": true, "class-insert-indicator": true, points: `0,${-size / 2} 0,${size / 2}` }),
            (0, sprotty_1.svg)("polyline", { "class-sprotty-node": true, "class-insert-indicator": true, points: `${-size / 2},0 ${size / 2},0` })));
        model.cssClasses.forEach(cl => (0, sprotty_1.setClass)(node, cl, true));
        return node;
    }
    getSize(model) {
        var _a, _b, _c;
        return (_c = (_a = argument_utils_1.GArgument.getNumber(model, insert_indicator_1.ARG_LENGTH)) !== null && _a !== void 0 ? _a : (_b = this.grid) === null || _b === void 0 ? void 0 : _b.x) !== null && _c !== void 0 ? _c : 10;
    }
};
exports.InsertIndicatorView = InsertIndicatorView;
__decorate([
    (0, inversify_1.optional)(),
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    __metadata("design:type", Object)
], InsertIndicatorView.prototype, "grid", void 0);
exports.InsertIndicatorView = InsertIndicatorView = __decorate([
    (0, inversify_1.injectable)()
], InsertIndicatorView);
//# sourceMappingURL=node-creation-views.js.map