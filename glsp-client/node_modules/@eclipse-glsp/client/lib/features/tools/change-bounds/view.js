"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SResizeHandleView = exports.GResizeHandleView = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const model_1 = require("../../change-bounds/model");
let GResizeHandleView = class GResizeHandleView {
    render(handle, context) {
        if (context.targetKind === 'hidden') {
            return undefined;
        }
        const position = this.getPosition(handle);
        if (position !== undefined) {
            const node = ((0, sprotty_1.svg)("circle", { "class-sprotty-resize-handle": true, "class-mouseover": handle.hoverFeedback, cx: position.x, cy: position.y, r: this.getRadius() }));
            (0, sprotty_1.setAttr)(node, 'data-kind', handle.location);
            return node;
        }
        // Fallback: Create an empty group
        return (0, sprotty_1.svg)("g", null);
    }
    getPosition(handle) {
        return sprotty_1.Point.subtract(model_1.GResizeHandle.getHandlePosition(handle), handle.parent.bounds);
    }
    getRadius() {
        return 7;
    }
};
exports.GResizeHandleView = GResizeHandleView;
exports.SResizeHandleView = GResizeHandleView;
exports.SResizeHandleView = exports.GResizeHandleView = GResizeHandleView = __decorate([
    (0, inversify_1.injectable)()
], GResizeHandleView);
//# sourceMappingURL=view.js.map