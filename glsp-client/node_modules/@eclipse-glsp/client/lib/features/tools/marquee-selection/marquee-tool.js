"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MarqueeTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarqueeKeyListener = exports.MarqueeTool = void 0;
/********************************************************************************
 * Copyright (c) 2021-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const selection_service_1 = require("../../../base/selection-service");
const tool_1 = require("../../../base/tool-manager/tool");
const base_tools_1 = require("../base-tools");
const marquee_mouse_tool_1 = require("./marquee-mouse-tool");
let MarqueeTool = MarqueeTool_1 = class MarqueeTool extends base_tools_1.BaseEditTool {
    get id() {
        return MarqueeTool_1.ID;
    }
    enable() {
        if (!this.marqueeKeyListener) {
            this.marqueeKeyListener = new MarqueeKeyListener(this.selectionService);
        }
        this.toDisposeOnDisable.push(this.keyTool.registerListener(this.marqueeKeyListener));
    }
};
exports.MarqueeTool = MarqueeTool;
MarqueeTool.ID = 'glsp.marquee-tool';
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], MarqueeTool.prototype, "selectionService", void 0);
exports.MarqueeTool = MarqueeTool = MarqueeTool_1 = __decorate([
    (0, inversify_1.injectable)()
], MarqueeTool);
let MarqueeKeyListener = class MarqueeKeyListener extends sprotty_1.KeyListener {
    constructor(selectionService) {
        super();
        this.selectionService = selectionService;
    }
    keyDown(_element, event) {
        if (event.shiftKey && !this.selectionService.hasSelectedElements()) {
            return [tool_1.EnableToolsAction.create([marquee_mouse_tool_1.MarqueeMouseTool.ID])];
        }
        return [];
    }
};
exports.MarqueeKeyListener = MarqueeKeyListener;
exports.MarqueeKeyListener = MarqueeKeyListener = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [selection_service_1.SelectionService])
], MarqueeKeyListener);
//# sourceMappingURL=marquee-tool.js.map