"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPContextMenuMouseListener = void 0;
/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const focus_state_change_action_1 = require("../../base/focus/focus-state-change-action");
let GLSPContextMenuMouseListener = class GLSPContextMenuMouseListener extends sprotty_1.MouseListener {
    initialize() {
        var _a;
        (_a = this.contextMenuServiceProvider) === null || _a === void 0 ? void 0 : _a.call(this).then(menuService => (this.menuService = menuService));
    }
    /**
     * Opens the context menu.
     */
    contextMenu(target, event) {
        return this.openContextMenu(target, event);
    }
    /**
     * Opens the context menu.
     *
     *   - update selection state (if context menu target is selectable)
     *   - query the context menu service and the context menu elements
     *   - show the context menu
     *   - send a focus state change to indicate that the diagram becomes inactive, once the context menu is shown
     *
     * When the context menu is closed, we focus the diagram element again.
     */
    openContextMenu(target, event) {
        if (!this.menuService || !this.menuProvider) {
            return [];
        }
        return [this.showContextMenuItems(target, event)];
    }
    async showContextMenuItems(target, event) {
        await this.handleContextElementSelection(target, event);
        const mousePosition = { x: event.x, y: event.y };
        const menuItems = await this.menuProvider.getItems(target.root, mousePosition);
        this.menuService.show(menuItems, mousePosition, () => this.focusEventTarget(event));
        return focus_state_change_action_1.FocusStateChangedAction.create(false);
    }
    // Clear selection if the context menu target is not selectable
    // Otherwise either maintain current selection if target is already selected or single select the current target.
    async handleContextElementSelection(target, event) {
        const selectableTarget = (0, sprotty_1.findParentByFeature)(target, sprotty_1.isSelectable);
        if (!selectableTarget) {
            return this.actionDispatcher.dispatch(sprotty_1.SelectAction.setSelection([]));
        }
        if (!selectableTarget.selected) {
            return this.actionDispatcher.dispatch(sprotty_1.SelectAction.setSelection([selectableTarget.id]));
        }
        return;
    }
    focusEventTarget(event) {
        const targetElement = event.target instanceof SVGElement ? event.target : undefined;
        const svgParentElement = targetElement === null || targetElement === void 0 ? void 0 : targetElement.closest('svg');
        if (svgParentElement) {
            svgParentElement.focus();
        }
    }
};
exports.GLSPContextMenuMouseListener = GLSPContextMenuMouseListener;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IContextMenuServiceProvider),
    (0, inversify_1.optional)(),
    __metadata("design:type", Function)
], GLSPContextMenuMouseListener.prototype, "contextMenuServiceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IContextMenuProviderRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.ContextMenuProviderRegistry)
], GLSPContextMenuMouseListener.prototype, "menuProvider", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], GLSPContextMenuMouseListener.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GLSPContextMenuMouseListener.prototype, "initialize", null);
exports.GLSPContextMenuMouseListener = GLSPContextMenuMouseListener = __decorate([
    (0, inversify_1.injectable)()
], GLSPContextMenuMouseListener);
//# sourceMappingURL=glsp-context-menu-mouse-listener.js.map