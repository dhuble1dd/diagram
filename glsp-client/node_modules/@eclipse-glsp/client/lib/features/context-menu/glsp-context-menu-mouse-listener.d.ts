/********************************************************************************
 * Copyright (c) 2019-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, ContextMenuProviderRegistry, GModelElement, IActionDispatcher, IContextMenuService, IContextMenuServiceProvider, MouseListener } from '@eclipse-glsp/sprotty';
export declare class GLSPContextMenuMouseListener extends MouseListener {
    protected contextMenuServiceProvider?: IContextMenuServiceProvider;
    protected menuProvider?: ContextMenuProviderRegistry;
    protected actionDispatcher: IActionDispatcher;
    protected menuService?: IContextMenuService;
    protected initialize(): void;
    /**
     * Opens the context menu.
     */
    contextMenu(target: GModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    /**
     * Opens the context menu.
     *
     *   - update selection state (if context menu target is selectable)
     *   - query the context menu service and the context menu elements
     *   - show the context menu
     *   - send a focus state change to indicate that the diagram becomes inactive, once the context menu is shown
     *
     * When the context menu is closed, we focus the diagram element again.
     */
    protected openContextMenu(target: GModelElement, event: MouseEvent): Promise<Action>[];
    protected showContextMenuItems(target: GModelElement, event: MouseEvent): Promise<Action>;
    protected handleContextElementSelection(target: GModelElement, event: MouseEvent): Promise<void>;
    protected focusEventTarget(event: MouseEvent): void;
}
//# sourceMappingURL=glsp-context-menu-mouse-listener.d.ts.map