"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyPasteContextMenuItemProvider = exports.InvokeCopyPasteActionHandler = exports.InvokeCopyPasteAction = void 0;
exports.supportsCopy = supportsCopy;
exports.supportsCut = supportsCut;
exports.supportsPaste = supportsPaste;
exports.isNative = isNative;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable deprecation/deprecation */
const inversify_1 = require("inversify");
const sprotty_1 = require("@eclipse-glsp/sprotty");
var InvokeCopyPasteAction;
(function (InvokeCopyPasteAction) {
    InvokeCopyPasteAction.KIND = 'invokeCopyPaste';
    function is(object) {
        return sprotty_1.Action.hasKind(object, InvokeCopyPasteAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'command');
    }
    InvokeCopyPasteAction.is = is;
    function create(command) {
        return { kind: InvokeCopyPasteAction.KIND, command };
    }
    InvokeCopyPasteAction.create = create;
})(InvokeCopyPasteAction || (exports.InvokeCopyPasteAction = InvokeCopyPasteAction = {}));
let InvokeCopyPasteActionHandler = class InvokeCopyPasteActionHandler {
    handle(action) {
        switch (action.command) {
            case 'copy':
                if (supportsCopy()) {
                    document.execCommand('copy');
                }
                else {
                    this.notifyUserToUseShortcut('copy');
                }
                break;
            case 'paste':
                if (supportsPaste()) {
                    document.execCommand('paste');
                }
                else {
                    this.notifyUserToUseShortcut('paste');
                }
                break;
            case 'cut':
                if (supportsCut()) {
                    document.execCommand('cut');
                }
                else {
                    this.notifyUserToUseShortcut('cut');
                }
                break;
        }
    }
    notifyUserToUseShortcut(operation) {
        const message = `Please use the browser's ${operation} command or shortcut.`;
        const timeout = 10000;
        const severity = 'WARNING';
        this.dispatcher.dispatchAll([sprotty_1.StatusAction.create(message, { severity, timeout }), sprotty_1.MessageAction.create(message, { severity })]);
    }
};
exports.InvokeCopyPasteActionHandler = InvokeCopyPasteActionHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], InvokeCopyPasteActionHandler.prototype, "dispatcher", void 0);
exports.InvokeCopyPasteActionHandler = InvokeCopyPasteActionHandler = __decorate([
    (0, inversify_1.injectable)()
], InvokeCopyPasteActionHandler);
let CopyPasteContextMenuItemProvider = class CopyPasteContextMenuItemProvider {
    getItems(root, _lastMousePosition) {
        const hasSelectedElements = Array.from(root.index.all().filter(sprotty_1.isSelected)).length > 0;
        return Promise.resolve([
            this.createCopyMenuItem(hasSelectedElements),
            this.createCutMenuItem(hasSelectedElements),
            this.createPasteMenuItem()
        ]);
    }
    createPasteMenuItem() {
        return {
            id: 'paste',
            label: 'Paste',
            group: 'copy-paste',
            actions: [InvokeCopyPasteAction.create('paste')],
            isEnabled: () => true
        };
    }
    createCutMenuItem(hasSelectedElements) {
        return {
            id: 'cut',
            label: 'Cut',
            group: 'copy-paste',
            actions: [InvokeCopyPasteAction.create('cut')],
            isEnabled: () => hasSelectedElements
        };
    }
    createCopyMenuItem(hasSelectedElements) {
        return {
            id: 'copy',
            label: 'Copy',
            group: 'copy-paste',
            actions: [InvokeCopyPasteAction.create('copy')],
            isEnabled: () => hasSelectedElements
        };
    }
};
exports.CopyPasteContextMenuItemProvider = CopyPasteContextMenuItemProvider;
exports.CopyPasteContextMenuItemProvider = CopyPasteContextMenuItemProvider = __decorate([
    (0, inversify_1.injectable)()
], CopyPasteContextMenuItemProvider);
function supportsCopy() {
    return isNative() || document.queryCommandSupported('copy');
}
function supportsCut() {
    return isNative() || document.queryCommandSupported('cut');
}
function supportsPaste() {
    const isChrome = userAgent().indexOf('Chrome') >= 0;
    return isNative() || (!isChrome && document.queryCommandSupported('paste'));
}
function isNative() {
    return typeof window.process !== 'undefined';
}
function userAgent() {
    return typeof navigator !== 'undefined' ? navigator.userAgent : '';
}
//# sourceMappingURL=copy-paste-context-menu.js.map