"use strict";
/********************************************************************************
 * Copyright (c) 2023-2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyPasteStartup = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
/**
 * Startup service to hook up the copy&paste event handler
 */
let CopyPasteStartup = class CopyPasteStartup {
    constructor() {
        this.toDispose = new sprotty_1.DisposableCollection();
    }
    modelRootChanged(root) {
        if (root.id !== sprotty_1.EMPTY_ROOT.id) {
            this.graphElementId = this.domHelper.createUniqueDOMElementId(root);
        }
    }
    postModelInitialization() {
        if (!this.copyPasteHandler) {
            return;
        }
        const copyListener = (e) => {
            var _a, _b;
            if (this.graphElementId && ((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.id) === this.graphElementId) {
                (_b = this.copyPasteHandler) === null || _b === void 0 ? void 0 : _b.handleCopy(e);
            }
        };
        const cutListener = (e) => {
            var _a, _b;
            if (this.graphElementId && ((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.id) === this.graphElementId) {
                (_b = this.copyPasteHandler) === null || _b === void 0 ? void 0 : _b.handleCut(e);
            }
        };
        const pasteListener = (e) => {
            var _a, _b;
            if (this.graphElementId && ((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.id) === this.graphElementId) {
                (_b = this.copyPasteHandler) === null || _b === void 0 ? void 0 : _b.handlePaste(e);
            }
        };
        window.addEventListener('copy', copyListener);
        window.addEventListener('cut', cutListener);
        window.addEventListener('paste', pasteListener);
        this.toDispose.push(sprotty_1.Disposable.create(() => {
            window.removeEventListener('copy', copyListener);
            window.removeEventListener('cut', cutListener);
            window.removeEventListener('paste', pasteListener);
        }));
    }
    dispose() {
        this.toDispose.dispose();
    }
};
exports.CopyPasteStartup = CopyPasteStartup;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ICopyPasteHandler),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], CopyPasteStartup.prototype, "copyPasteHandler", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.DOMHelper),
    __metadata("design:type", sprotty_1.DOMHelper)
], CopyPasteStartup.prototype, "domHelper", void 0);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CopyPasteStartup.prototype, "dispose", null);
exports.CopyPasteStartup = CopyPasteStartup = __decorate([
    (0, inversify_1.injectable)()
], CopyPasteStartup);
//# sourceMappingURL=copy-paste-standalone.js.map