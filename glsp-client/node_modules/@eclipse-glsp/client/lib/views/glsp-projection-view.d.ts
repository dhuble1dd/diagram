/********************************************************************************
 * Copyright (c) 2017-2025 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx html */
import { Bounds, EdgeRouterRegistry, GViewportRootElement, IViewArgs, ProjectedViewportView, ProjectionParams, RenderingContext, SGraphImpl, ViewProjection, Writable } from '@eclipse-glsp/sprotty';
import { VNode } from 'snabbdom';
import { GridStyle, IGridManager } from '../features/grid/grid-manager';
/**
 * Special viewport root view that renders horizontal and vertical projection bars for quick navigation.
 */
export declare class GLSPProjectionView extends ProjectedViewportView {
    edgeRouterRegistry: EdgeRouterRegistry;
    protected gridManager?: IGridManager;
    render(model: Readonly<GViewportRootElement>, context: RenderingContext, args?: IViewArgs): VNode;
    protected renderSvg(model: Readonly<GViewportRootElement>, context: RenderingContext, args?: IViewArgs): VNode;
    protected getGridStyle(viewport: Readonly<SGraphImpl>, context: RenderingContext): GridStyle;
    protected getBackgroundBounds(viewport: Readonly<SGraphImpl>, context: RenderingContext, gridManager: IGridManager): Writable<Bounds>;
    protected renderProjectionBar(projections: ViewProjection[], model: Readonly<GViewportRootElement>, modelBounds: Bounds, orientation: 'horizontal' | 'vertical'): VNode;
    protected renderViewport(model: Readonly<GViewportRootElement>, params: ProjectionParams): VNode;
    protected renderProjection(projection: ViewProjection, model: Readonly<GViewportRootElement>, params: ProjectionParams): VNode;
}
//# sourceMappingURL=glsp-projection-view.d.ts.map