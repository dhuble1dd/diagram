"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GGraphView = void 0;
/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const grid_style_1 = require("../features/grid/grid-style");
let GGraphView = class GGraphView extends sprotty_1.SGraphView {
    render(model, context) {
        const graph = super.render(model, context);
        if (graph.data) {
            graph.data.style = { ...graph.data.style, ...this.getGridStyle(model, context) };
        }
        return graph;
    }
    getGridStyle(viewport, context) {
        if (context.targetKind === 'hidden' || !this.gridManager) {
            return {};
        }
        const bounds = this.getBackgroundBounds(viewport, context, this.gridManager);
        return {
            [grid_style_1.GridProperty.GRID_BACKGROUND_X]: bounds.x + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_Y]: bounds.y + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_WIDTH]: bounds.width + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_HEIGHT]: bounds.height + 'px',
            [grid_style_1.GridProperty.GRID_BACKGROUND_ZOOM]: viewport.zoom + ''
        };
    }
    getBackgroundBounds(viewport, context, gridManager) {
        const position = sprotty_1.Point.multiplyScalar(sprotty_1.Point.subtract(gridManager.grid, viewport.scroll), viewport.zoom);
        const size = sprotty_1.Dimension.fromPoint(sprotty_1.Point.multiplyScalar(gridManager.grid, viewport.zoom));
        return { ...position, ...size };
    }
};
exports.GGraphView = GGraphView;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IGridManager),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], GGraphView.prototype, "gridManager", void 0);
exports.GGraphView = GGraphView = __decorate([
    (0, inversify_1.injectable)()
], GGraphView);
//# sourceMappingURL=ggraph-view.js.map