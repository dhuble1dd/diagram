/********************************************************************************
 * Copyright (c) 2024 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/** @jsx svg */
import { Hoverable, Selectable } from '@eclipse-glsp/protocol';
import { VNode } from 'snabbdom';
import { InternalBoundsAware as BoundsAware, IViewArgs, RenderingContext, SShapeElementImpl, CircularNodeView as SprottyCircularNodeView, DiamondNodeView as SprottyDiamondNodeView } from 'sprotty';
export declare class DiamondNodeView extends SprottyDiamondNodeView {
    render(node: Readonly<SShapeElementImpl & Hoverable & Selectable>, context: RenderingContext, args?: IViewArgs): VNode | undefined;
}
export declare class CircularNodeView extends SprottyCircularNodeView {
    render(node: Readonly<SShapeElementImpl & Hoverable & Selectable>, context: RenderingContext, args?: IViewArgs): VNode | undefined;
}
/**
 * Creates a hidden rectangle with the bounds of the given element.
 * This is typically used to fixate the size of an element and avoid size changes that may happen during rendering.
 * Changes can happen if the resulting bounding box (BBox) of the rendered element is different form the given bounds.
 * The created bounding rect needs to be placed within a root SVG group (g) element to take effect.
 *
 * @param withBounds The element to create the hidden rectangle for.
 * @param context The rendering context. If provided, a rect is only created if the context is 'hidden'.
 * @returns The hidden rectangle.
 */
export declare function hiddenBoundingRect(withBounds: BoundsAware): VNode;
export declare function hiddenBoundingRect(withBounds: BoundsAware, context: RenderingContext): VNode | undefined;
/**
 * Applies a hidden bounding rectangle to the given view if we are in the hidden rendering context where sizes are being determined.
 *
 * @param withBounds The element to apply the hidden bounding rectangle to.
 * @param context The rendering context.
 * @param view The view to apply the hidden bounding rectangle to.
 * @returns The view with the hidden bounding rectangle applied, wrapped in a group element if necessary.
 */
export declare function applyHiddenBoundingRect<V extends VNode | undefined>(withBounds: BoundsAware, context: RenderingContext, view: V): V;
//# sourceMappingURL=svg-views-override.d.ts.map