"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var TheiaNavigateToExternalTargetHandler_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TheiaNavigateToExternalTargetHandler = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const lib_1 = require("@eclipse-glsp/client/lib");
const opener_service_1 = require("@theia/core/lib/browser/opener-service");
const uri_1 = require("@theia/core/lib/common/uri");
const inversify_1 = require("@theia/core/shared/inversify");
/**
 * Default {@link IActionHandler} for {@link NavigateToExternalTargetAction}s in Theia
 *
 * (bound in Diagram child DI container)
 */
let TheiaNavigateToExternalTargetHandler = TheiaNavigateToExternalTargetHandler_1 = class TheiaNavigateToExternalTargetHandler {
    constructor(openerService) {
        this.openerService = openerService;
    }
    handle(action) {
        if (lib_1.NavigateToExternalTargetAction.is(action)) {
            this.navigateTo(action.target.uri, action.target.args);
        }
    }
    /**
     * Opens the specified URI in Theia using Theia's opener service.
     *
     * If `args` contain a property `jsonOpenerOptions`, the string of this property will be parsed as JSON
     * and merged into the opener options. This allows GLSP servers to pass additional opener options, such
     * as a selection, etc.
     */
    async navigateTo(uri, args) {
        if (args && args[TheiaNavigateToExternalTargetHandler_1.JSON_OPENER_OPTIONS]) {
            args = { args, ...JSON.parse(args[TheiaNavigateToExternalTargetHandler_1.JSON_OPENER_OPTIONS].toString()) };
        }
        await (0, opener_service_1.open)(this.openerService, new uri_1.default(uri), { ...args });
    }
};
exports.TheiaNavigateToExternalTargetHandler = TheiaNavigateToExternalTargetHandler;
TheiaNavigateToExternalTargetHandler.JSON_OPENER_OPTIONS = 'jsonOpenerOptions';
exports.TheiaNavigateToExternalTargetHandler = TheiaNavigateToExternalTargetHandler = TheiaNavigateToExternalTargetHandler_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(opener_service_1.OpenerService)),
    __metadata("design:paramtypes", [Object])
], TheiaNavigateToExternalTargetHandler);
//# sourceMappingURL=theia-navigate-to-external-target-handler.js.map